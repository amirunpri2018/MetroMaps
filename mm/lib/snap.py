# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _snap.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_snap', [dirname(__file__)])
        except ImportError:
            import _snap
            return _snap
        if fp is not None:
            try:
                _mod = imp.load_module('_snap', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _snap = swig_import_helper()
    del swig_import_helper
else:
    import _snap
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


SNAP_ALL = _snap.SNAP_ALL
Version = "1.0"


def print_array(*args):
  """
    print_array(int * x, int length)

    Parameters:
        x: int *
        length: int

    """
  return _snap.print_array(*args)

def PyTFltV(*args):
  """
    PyTFltV(double [10] x) -> TFltV

    Parameters:
        x: double [10]

    """
  return _snap.PyTFltV(*args)

def PyToTIntV(*args):
  """
    PyToTIntV(int * array) -> TIntV

    Parameters:
        array: int *

    """
  return _snap.PyToTIntV(*args)

def count(*args):
  """
    count(char * str, char c) -> int

    Parameters:
        str: char *
        c: char

    """
  return _snap.count(*args)

def TIntVToPy(*args):
  """
    TIntVToPy(TIntV originalList)

    Parameters:
        originalList: TIntV

    """
  return _snap.TIntVToPy(*args)
lUndef = _snap.lUndef
lUs = _snap.lUs
lSi = _snap.lSi

def WrNotify(*args):
  """
    WrNotify(char const * CaptionCStr, char const * NotifyCStr)

    Parameters:
        CaptionCStr: char const *
        NotifyCStr: char const *

    """
  return _snap.WrNotify(*args)

def SaveToErrLog(*args):
  """
    SaveToErrLog(char const * MsgCStr)

    Parameters:
        MsgCStr: char const *

    """
  return _snap.SaveToErrLog(*args)

def ExeStop(*args):
  """
    ExeStop(char const * MsgStr, char const * ReasonStr, char const * CondStr, char const * FNm, 
        int const & LnN)

    Parameters:
        MsgStr: char const *
        ReasonStr: char const *
        CondStr: char const *
        FNm: char const *
        LnN: int const &

    """
  return _snap.ExeStop(*args)
loUndef = _snap.loUndef
loNot = _snap.loNot
loAnd = _snap.loAnd
loOr = _snap.loOr
roUndef = _snap.roUndef
roLs = _snap.roLs
roLEq = _snap.roLEq
roEq = _snap.roEq
roNEq = _snap.roNEq
roGEq = _snap.roGEq
roGt = _snap.roGt
class TCRef(object):
    """Proxy of C++ TCRef class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(TCRef self) -> TCRef"""
        _snap.TCRef_swiginit(self,_snap.new_TCRef())
    __swig_destroy__ = _snap.delete_TCRef
    def MkRef(self):
        """
        MkRef(TCRef self)

        Parameters:
            self: TCRef *

        """
        return _snap.TCRef_MkRef(self)

    def UnRef(self):
        """
        UnRef(TCRef self)

        Parameters:
            self: TCRef *

        """
        return _snap.TCRef_UnRef(self)

    def NoRef(self):
        """
        NoRef(TCRef self) -> bool

        Parameters:
            self: TCRef const *

        """
        return _snap.TCRef_NoRef(self)

    def GetRefs(self):
        """
        GetRefs(TCRef self) -> int

        Parameters:
            self: TCRef const *

        """
        return _snap.TCRef_GetRefs(self)

TCRef.MkRef = new_instancemethod(_snap.TCRef_MkRef,None,TCRef)
TCRef.UnRef = new_instancemethod(_snap.TCRef_UnRef,None,TCRef)
TCRef.NoRef = new_instancemethod(_snap.TCRef_NoRef,None,TCRef)
TCRef.GetRefs = new_instancemethod(_snap.TCRef_GetRefs,None,TCRef)
TCRef_swigregister = _snap.TCRef_swigregister
TCRef_swigregister(TCRef)

class TSStr(object):
    """Proxy of C++ TSStr class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TSStr self) -> TSStr
        __init__(TSStr self, TSStr SStr) -> TSStr

        Parameters:
            SStr: TSStr const &

        __init__(TSStr self, char const * _Bf) -> TSStr

        Parameters:
            _Bf: char const *

        """
        _snap.TSStr_swiginit(self,_snap.new_TSStr(*args))
    __swig_destroy__ = _snap.delete_TSStr
    def CStr(self, *args):
        """
        CStr(TSStr self) -> char
        CStr(TSStr self) -> char const *

        Parameters:
            self: TSStr const *

        """
        return _snap.TSStr_CStr(self, *args)

    def Empty(self):
        """
        Empty(TSStr self) -> bool

        Parameters:
            self: TSStr const *

        """
        return _snap.TSStr_Empty(self)

    def Len(self):
        """
        Len(TSStr self) -> int

        Parameters:
            self: TSStr const *

        """
        return _snap.TSStr_Len(self)

TSStr.CStr = new_instancemethod(_snap.TSStr_CStr,None,TSStr)
TSStr.Empty = new_instancemethod(_snap.TSStr_Empty,None,TSStr)
TSStr.Len = new_instancemethod(_snap.TSStr_Len,None,TSStr)
TSStr_swigregister = _snap.TSStr_swigregister
TSStr_swigregister(TSStr)

class TConv_Pt64Ints32(object):
    """Proxy of C++ TConv_Pt64Ints32 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TConv_Pt64Ints32 self) -> TConv_Pt64Ints32
        __init__(TConv_Pt64Ints32 self, void * Pt) -> TConv_Pt64Ints32

        Parameters:
            Pt: void *

        __init__(TConv_Pt64Ints32 self, uint const & Ms, uint const & Ls) -> TConv_Pt64Ints32

        Parameters:
            Ms: uint const &
            Ls: uint const &

        """
        _snap.TConv_Pt64Ints32_swiginit(self,_snap.new_TConv_Pt64Ints32(*args))
    def PutPt(self, *args):
        """
        PutPt(TConv_Pt64Ints32 self, void * Pt)

        Parameters:
            Pt: void *

        """
        return _snap.TConv_Pt64Ints32_PutPt(self, *args)

    def GetPt(self):
        """
        GetPt(TConv_Pt64Ints32 self) -> void *

        Parameters:
            self: TConv_Pt64Ints32 const *

        """
        return _snap.TConv_Pt64Ints32_GetPt(self)

    def PutUInt64(self, *args):
        """
        PutUInt64(TConv_Pt64Ints32 self, uint64 const & _UInt64)

        Parameters:
            _UInt64: uint64 const &

        """
        return _snap.TConv_Pt64Ints32_PutUInt64(self, *args)

    def GetUInt64(self):
        """
        GetUInt64(TConv_Pt64Ints32 self) -> uint64

        Parameters:
            self: TConv_Pt64Ints32 const *

        """
        return _snap.TConv_Pt64Ints32_GetUInt64(self)

    def PutMsUInt32(self, *args):
        """
        PutMsUInt32(TConv_Pt64Ints32 self, uint const & Ms)

        Parameters:
            Ms: uint const &

        """
        return _snap.TConv_Pt64Ints32_PutMsUInt32(self, *args)

    def GetMsUInt32(self):
        """
        GetMsUInt32(TConv_Pt64Ints32 self) -> uint

        Parameters:
            self: TConv_Pt64Ints32 const *

        """
        return _snap.TConv_Pt64Ints32_GetMsUInt32(self)

    def PutLsUInt32(self, *args):
        """
        PutLsUInt32(TConv_Pt64Ints32 self, uint const & Ls)

        Parameters:
            Ls: uint const &

        """
        return _snap.TConv_Pt64Ints32_PutLsUInt32(self, *args)

    def GetLsUInt32(self):
        """
        GetLsUInt32(TConv_Pt64Ints32 self) -> uint

        Parameters:
            self: TConv_Pt64Ints32 const *

        """
        return _snap.TConv_Pt64Ints32_GetLsUInt32(self)

    __swig_destroy__ = _snap.delete_TConv_Pt64Ints32
TConv_Pt64Ints32.PutPt = new_instancemethod(_snap.TConv_Pt64Ints32_PutPt,None,TConv_Pt64Ints32)
TConv_Pt64Ints32.GetPt = new_instancemethod(_snap.TConv_Pt64Ints32_GetPt,None,TConv_Pt64Ints32)
TConv_Pt64Ints32.PutUInt64 = new_instancemethod(_snap.TConv_Pt64Ints32_PutUInt64,None,TConv_Pt64Ints32)
TConv_Pt64Ints32.GetUInt64 = new_instancemethod(_snap.TConv_Pt64Ints32_GetUInt64,None,TConv_Pt64Ints32)
TConv_Pt64Ints32.PutMsUInt32 = new_instancemethod(_snap.TConv_Pt64Ints32_PutMsUInt32,None,TConv_Pt64Ints32)
TConv_Pt64Ints32.GetMsUInt32 = new_instancemethod(_snap.TConv_Pt64Ints32_GetMsUInt32,None,TConv_Pt64Ints32)
TConv_Pt64Ints32.PutLsUInt32 = new_instancemethod(_snap.TConv_Pt64Ints32_PutLsUInt32,None,TConv_Pt64Ints32)
TConv_Pt64Ints32.GetLsUInt32 = new_instancemethod(_snap.TConv_Pt64Ints32_GetLsUInt32,None,TConv_Pt64Ints32)
TConv_Pt64Ints32_swigregister = _snap.TConv_Pt64Ints32_swigregister
TConv_Pt64Ints32_swigregister(TConv_Pt64Ints32)

class TPairHashImpl1(object):
    """Proxy of C++ TPairHashImpl1 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def GetHashCd(*args):
        """
        GetHashCd(int const hc1, int const hc2) -> int

        Parameters:
            hc1: int const
            hc2: int const

        """
        return _snap.TPairHashImpl1_GetHashCd(*args)

    GetHashCd = staticmethod(GetHashCd)
    def __init__(self): 
        """__init__(TPairHashImpl1 self) -> TPairHashImpl1"""
        _snap.TPairHashImpl1_swiginit(self,_snap.new_TPairHashImpl1())
    __swig_destroy__ = _snap.delete_TPairHashImpl1
TPairHashImpl1_swigregister = _snap.TPairHashImpl1_swigregister
TPairHashImpl1_swigregister(TPairHashImpl1)

def TPairHashImpl1_GetHashCd(*args):
  """
    TPairHashImpl1_GetHashCd(int const hc1, int const hc2) -> int

    Parameters:
        hc1: int const
        hc2: int const

    """
  return _snap.TPairHashImpl1_GetHashCd(*args)

class TPairHashImpl2(object):
    """Proxy of C++ TPairHashImpl2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def GetHashCd(*args):
        """
        GetHashCd(int const hc1, int const hc2) -> int

        Parameters:
            hc1: int const
            hc2: int const

        """
        return _snap.TPairHashImpl2_GetHashCd(*args)

    GetHashCd = staticmethod(GetHashCd)
    def __init__(self): 
        """__init__(TPairHashImpl2 self) -> TPairHashImpl2"""
        _snap.TPairHashImpl2_swiginit(self,_snap.new_TPairHashImpl2())
    __swig_destroy__ = _snap.delete_TPairHashImpl2
TPairHashImpl2_swigregister = _snap.TPairHashImpl2_swigregister
TPairHashImpl2_swigregister(TPairHashImpl2)

def TPairHashImpl2_GetHashCd(*args):
  """
    TPairHashImpl2_GetHashCd(int const hc1, int const hc2) -> int

    Parameters:
        hc1: int const
        hc2: int const

    """
  return _snap.TPairHashImpl2_GetHashCd(*args)

class TRnd(object):
    """Proxy of C++ TRnd class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TRnd self, int const & _Seed=1, int const & Steps=0) -> TRnd

        Parameters:
            _Seed: int const &
            Steps: int const &

        __init__(TRnd self, int const & _Seed=1) -> TRnd

        Parameters:
            _Seed: int const &

        __init__(TRnd self) -> TRnd
        __init__(TRnd self, TSIn SIn) -> TRnd

        Parameters:
            SIn: TSIn &

        """
        _snap.TRnd_swiginit(self,_snap.new_TRnd(*args))
    def Save(self, *args):
        """
        Save(TRnd self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.TRnd_Save(self, *args)

    def __eq__(self, *args):
        """
        __eq__(TRnd self, TRnd arg2) -> bool

        Parameters:
            arg2: TRnd const &

        """
        return _snap.TRnd___eq__(self, *args)

    def GetUniDev(self):
        """
        GetUniDev(TRnd self) -> double

        Parameters:
            self: TRnd *

        """
        return _snap.TRnd_GetUniDev(self)

    def GetUniDevInt(self, *args):
        """
        GetUniDevInt(TRnd self, int const & Range=0) -> int

        Parameters:
            Range: int const &

        GetUniDevInt(TRnd self) -> int
        GetUniDevInt(TRnd self, int const & MnVal, int const & MxVal) -> int

        Parameters:
            MnVal: int const &
            MxVal: int const &

        """
        return _snap.TRnd_GetUniDevInt(self, *args)

    def GetUniDevUInt(self, Range=0):
        """
        GetUniDevUInt(TRnd self, uint const & Range=0) -> uint

        Parameters:
            Range: uint const &

        GetUniDevUInt(TRnd self) -> uint

        Parameters:
            self: TRnd *

        """
        return _snap.TRnd_GetUniDevUInt(self, Range)

    def GetUniDevInt64(self, Range=0):
        """
        GetUniDevInt64(TRnd self, int64 const & Range=0) -> int64

        Parameters:
            Range: int64 const &

        GetUniDevInt64(TRnd self) -> int64

        Parameters:
            self: TRnd *

        """
        return _snap.TRnd_GetUniDevInt64(self, Range)

    def GetUniDevUInt64(self, Range=0):
        """
        GetUniDevUInt64(TRnd self, uint64 const & Range=0) -> uint64

        Parameters:
            Range: uint64 const &

        GetUniDevUInt64(TRnd self) -> uint64

        Parameters:
            self: TRnd *

        """
        return _snap.TRnd_GetUniDevUInt64(self, Range)

    def GetNrmDev(self, *args):
        """
        GetNrmDev(TRnd self) -> double
        GetNrmDev(TRnd self, double const & Mean, double const & SDev, double const & Mn, double const & Mx) -> double

        Parameters:
            Mean: double const &
            SDev: double const &
            Mn: double const &
            Mx: double const &

        """
        return _snap.TRnd_GetNrmDev(self, *args)

    def GetExpDev(self, *args):
        """
        GetExpDev(TRnd self) -> double
        GetExpDev(TRnd self, double const & Lambda) -> double

        Parameters:
            Lambda: double const &

        """
        return _snap.TRnd_GetExpDev(self, *args)

    def GetGammaDev(self, *args):
        """
        GetGammaDev(TRnd self, int const & Order) -> double

        Parameters:
            Order: int const &

        """
        return _snap.TRnd_GetGammaDev(self, *args)

    def GetPoissonDev(self, *args):
        """
        GetPoissonDev(TRnd self, double const & Mean) -> double

        Parameters:
            Mean: double const &

        """
        return _snap.TRnd_GetPoissonDev(self, *args)

    def GetBinomialDev(self, *args):
        """
        GetBinomialDev(TRnd self, double const & Prb, int const & Trials) -> double

        Parameters:
            Prb: double const &
            Trials: int const &

        """
        return _snap.TRnd_GetBinomialDev(self, *args)

    def GetGeoDev(self, *args):
        """
        GetGeoDev(TRnd self, double const & Prb) -> int

        Parameters:
            Prb: double const &

        """
        return _snap.TRnd_GetGeoDev(self, *args)

    def GetPowerDev(self, *args):
        """
        GetPowerDev(TRnd self, double const & AlphaSlope) -> double

        Parameters:
            AlphaSlope: double const &

        """
        return _snap.TRnd_GetPowerDev(self, *args)

    def GetRayleigh(self, *args):
        """
        GetRayleigh(TRnd self, double const & Sigma) -> double

        Parameters:
            Sigma: double const &

        """
        return _snap.TRnd_GetRayleigh(self, *args)

    def GetWeibull(self, *args):
        """
        GetWeibull(TRnd self, double const & K, double const & Lambda) -> double

        Parameters:
            K: double const &
            Lambda: double const &

        """
        return _snap.TRnd_GetWeibull(self, *args)

    def PutSeed(self, *args):
        """
        PutSeed(TRnd self, int const & _Seed)

        Parameters:
            _Seed: int const &

        """
        return _snap.TRnd_PutSeed(self, *args)

    def GetSeed(self):
        """
        GetSeed(TRnd self) -> int

        Parameters:
            self: TRnd const *

        """
        return _snap.TRnd_GetSeed(self)

    def Randomize(self):
        """
        Randomize(TRnd self)

        Parameters:
            self: TRnd *

        """
        return _snap.TRnd_Randomize(self)

    def Move(self, *args):
        """
        Move(TRnd self, int const & Steps)

        Parameters:
            Steps: int const &

        """
        return _snap.TRnd_Move(self, *args)

    def Check(self):
        """
        Check(TRnd self) -> bool

        Parameters:
            self: TRnd *

        """
        return _snap.TRnd_Check(self)

    def GetUniDevStep(*args):
        """
        GetUniDevStep(int const & Seed, int const & Steps) -> double

        Parameters:
            Seed: int const &
            Steps: int const &

        """
        return _snap.TRnd_GetUniDevStep(*args)

    GetUniDevStep = staticmethod(GetUniDevStep)
    def GetNrmDevStep(*args):
        """
        GetNrmDevStep(int const & Seed, int const & Steps) -> double

        Parameters:
            Seed: int const &
            Steps: int const &

        """
        return _snap.TRnd_GetNrmDevStep(*args)

    GetNrmDevStep = staticmethod(GetNrmDevStep)
    def GetExpDevStep(*args):
        """
        GetExpDevStep(int const & Seed, int const & Steps) -> double

        Parameters:
            Seed: int const &
            Steps: int const &

        """
        return _snap.TRnd_GetExpDevStep(*args)

    GetExpDevStep = staticmethod(GetExpDevStep)
    def LoadTxt(*args):
        """
        LoadTxt(TILx & Lx) -> TRnd

        Parameters:
            Lx: TILx &

        """
        return _snap.TRnd_LoadTxt(*args)

    LoadTxt = staticmethod(LoadTxt)
    def SaveTxt(self, *args):
        """
        SaveTxt(TRnd self, TOLx & Lx)

        Parameters:
            Lx: TOLx &

        """
        return _snap.TRnd_SaveTxt(self, *args)

    __swig_destroy__ = _snap.delete_TRnd
TRnd.Save = new_instancemethod(_snap.TRnd_Save,None,TRnd)
TRnd.__eq__ = new_instancemethod(_snap.TRnd___eq__,None,TRnd)
TRnd.GetUniDev = new_instancemethod(_snap.TRnd_GetUniDev,None,TRnd)
TRnd.GetUniDevInt = new_instancemethod(_snap.TRnd_GetUniDevInt,None,TRnd)
TRnd.GetUniDevUInt = new_instancemethod(_snap.TRnd_GetUniDevUInt,None,TRnd)
TRnd.GetUniDevInt64 = new_instancemethod(_snap.TRnd_GetUniDevInt64,None,TRnd)
TRnd.GetUniDevUInt64 = new_instancemethod(_snap.TRnd_GetUniDevUInt64,None,TRnd)
TRnd.GetNrmDev = new_instancemethod(_snap.TRnd_GetNrmDev,None,TRnd)
TRnd.GetExpDev = new_instancemethod(_snap.TRnd_GetExpDev,None,TRnd)
TRnd.GetGammaDev = new_instancemethod(_snap.TRnd_GetGammaDev,None,TRnd)
TRnd.GetPoissonDev = new_instancemethod(_snap.TRnd_GetPoissonDev,None,TRnd)
TRnd.GetBinomialDev = new_instancemethod(_snap.TRnd_GetBinomialDev,None,TRnd)
TRnd.GetGeoDev = new_instancemethod(_snap.TRnd_GetGeoDev,None,TRnd)
TRnd.GetPowerDev = new_instancemethod(_snap.TRnd_GetPowerDev,None,TRnd)
TRnd.GetRayleigh = new_instancemethod(_snap.TRnd_GetRayleigh,None,TRnd)
TRnd.GetWeibull = new_instancemethod(_snap.TRnd_GetWeibull,None,TRnd)
TRnd.PutSeed = new_instancemethod(_snap.TRnd_PutSeed,None,TRnd)
TRnd.GetSeed = new_instancemethod(_snap.TRnd_GetSeed,None,TRnd)
TRnd.Randomize = new_instancemethod(_snap.TRnd_Randomize,None,TRnd)
TRnd.Move = new_instancemethod(_snap.TRnd_Move,None,TRnd)
TRnd.Check = new_instancemethod(_snap.TRnd_Check,None,TRnd)
TRnd.SaveTxt = new_instancemethod(_snap.TRnd_SaveTxt,None,TRnd)
TRnd_swigregister = _snap.TRnd_swigregister
TRnd_swigregister(TRnd)
cvar = _snap.cvar
TRnd.RndSeed = _snap.cvar.TRnd_RndSeed

def TRnd_GetUniDevStep(*args):
  """
    TRnd_GetUniDevStep(int const & Seed, int const & Steps) -> double

    Parameters:
        Seed: int const &
        Steps: int const &

    """
  return _snap.TRnd_GetUniDevStep(*args)

def TRnd_GetNrmDevStep(*args):
  """
    TRnd_GetNrmDevStep(int const & Seed, int const & Steps) -> double

    Parameters:
        Seed: int const &
        Steps: int const &

    """
  return _snap.TRnd_GetNrmDevStep(*args)

def TRnd_GetExpDevStep(*args):
  """
    TRnd_GetExpDevStep(int const & Seed, int const & Steps) -> double

    Parameters:
        Seed: int const &
        Steps: int const &

    """
  return _snap.TRnd_GetExpDevStep(*args)

def TRnd_LoadTxt(*args):
  """
    TRnd_LoadTxt(TILx & Lx) -> TRnd

    Parameters:
        Lx: TILx &

    """
  return _snap.TRnd_LoadTxt(*args)

class TMem(object):
    """Proxy of C++ TMem class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def New(*args):
        """
        New(int const & MxBfL=0) -> PMem

        Parameters:
            MxBfL: int const &

        New() -> PMem
        New(void const * Bf, int const & BfL) -> PMem

        Parameters:
            Bf: void const *
            BfL: int const &

        New(TMem Mem) -> PMem

        Parameters:
            Mem: TMem const &

        New(PMem const & Mem) -> PMem

        Parameters:
            Mem: PMem const &

        New(TStr Str) -> PMem

        Parameters:
            Str: TStr const &

        """
        return _snap.TMem_New(*args)

    New = staticmethod(New)
    __swig_destroy__ = _snap.delete_TMem
    def __init__(self, *args): 
        """
        __init__(TMem self, int const & _MxBfL=0) -> TMem

        Parameters:
            _MxBfL: int const &

        __init__(TMem self) -> TMem
        __init__(TMem self, void const * _Bf, int const & _BfL) -> TMem

        Parameters:
            _Bf: void const *
            _BfL: int const &

        __init__(TMem self, TMem Mem) -> TMem

        Parameters:
            Mem: TMem const &

        __init__(TMem self, TStr Str) -> TMem

        Parameters:
            Str: TStr const &

        __init__(TMem self, TSIn SIn) -> TMem

        Parameters:
            SIn: TSIn &

        """
        _snap.TMem_swiginit(self,_snap.new_TMem(*args))
    def Save(self, *args):
        """
        Save(TMem self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.TMem_Save(self, *args)

    def __call__(self):
        """
        __call__(TMem self) -> char *

        Parameters:
            self: TMem const *

        """
        return _snap.TMem___call__(self)

    def __iadd__(self, *args):
        """
        __iadd__(TMem self, char const & Ch) -> TMem

        Parameters:
            Ch: char const &

        __iadd__(TMem self, TMem Mem) -> TMem

        Parameters:
            Mem: TMem const &

        __iadd__(TMem self, TStr Str) -> TMem

        Parameters:
            Str: TStr const &

        __iadd__(TMem self, PSIn const & SIn) -> TMem

        Parameters:
            SIn: PSIn const &

        """
        return _snap.TMem___iadd__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(TMem self) -> int

        Parameters:
            self: TMem const *

        """
        return _snap.TMem_GetMemUsed(self)

    def Gen(self, *args):
        """
        Gen(TMem self, int const & _BfL)

        Parameters:
            _BfL: int const &

        """
        return _snap.TMem_Gen(self, *args)

    def GenZeros(self, *args):
        """
        GenZeros(TMem self, int const & _BfL)

        Parameters:
            _BfL: int const &

        """
        return _snap.TMem_GenZeros(self, *args)

    def Reserve(self, *args):
        """
        Reserve(TMem self, int const & _MxBfL, bool const & DoClr=True)

        Parameters:
            _MxBfL: int const &
            DoClr: bool const &

        Reserve(TMem self, int const & _MxBfL)

        Parameters:
            _MxBfL: int const &

        """
        return _snap.TMem_Reserve(self, *args)

    def Del(self, *args):
        """
        Del(TMem self, int const & BChN, int const & EChN)

        Parameters:
            BChN: int const &
            EChN: int const &

        """
        return _snap.TMem_Del(self, *args)

    def Clr(self, DoDel=True):
        """
        Clr(TMem self, bool const & DoDel=True)

        Parameters:
            DoDel: bool const &

        Clr(TMem self)

        Parameters:
            self: TMem *

        """
        return _snap.TMem_Clr(self, DoDel)

    def Len(self):
        """
        Len(TMem self) -> int

        Parameters:
            self: TMem const *

        """
        return _snap.TMem_Len(self)

    def Empty(self):
        """
        Empty(TMem self) -> bool

        Parameters:
            self: TMem const *

        """
        return _snap.TMem_Empty(self)

    def Trunc(self, *args):
        """
        Trunc(TMem self, int const & _BfL)

        Parameters:
            _BfL: int const &

        """
        return _snap.TMem_Trunc(self, *args)

    def Push(self, *args):
        """
        Push(TMem self, char const & Ch)

        Parameters:
            Ch: char const &

        """
        return _snap.TMem_Push(self, *args)

    def Pop(self):
        """
        Pop(TMem self) -> char

        Parameters:
            self: TMem *

        """
        return _snap.TMem_Pop(self)

    def DoFitStr(self, *args):
        """
        DoFitStr(TMem self, TStr Str) -> bool

        Parameters:
            Str: TStr const &

        """
        return _snap.TMem_DoFitStr(self, *args)

    def AddBf(self, *args):
        """
        AddBf(TMem self, void const * Bf, int const & BfL)

        Parameters:
            Bf: void const *
            BfL: int const &

        """
        return _snap.TMem_AddBf(self, *args)

    def GetBf(self):
        """
        GetBf(TMem self) -> char *

        Parameters:
            self: TMem const *

        """
        return _snap.TMem_GetBf(self)

    def GetAsStr(self, NewNullCh='\0'):
        """
        GetAsStr(TMem self, char const & NewNullCh='\0') -> TStr

        Parameters:
            NewNullCh: char const &

        GetAsStr(TMem self) -> TStr

        Parameters:
            self: TMem const *

        """
        return _snap.TMem_GetAsStr(self, NewNullCh)

    def GetSIn(self):
        """
        GetSIn(TMem self) -> PSIn

        Parameters:
            self: TMem const *

        """
        return _snap.TMem_GetSIn(self)

    def LoadMem(*args):
        """
        LoadMem(PSIn const & SIn, TMem Mem)

        Parameters:
            SIn: PSIn const &
            Mem: TMem &

        LoadMem(PSIn const & SIn, PMem const & Mem)

        Parameters:
            SIn: PSIn const &
            Mem: PMem const &

        """
        return _snap.TMem_LoadMem(*args)

    LoadMem = staticmethod(LoadMem)
    def SaveMem(self, *args):
        """
        SaveMem(TMem self, PSOut const & SOut)

        Parameters:
            SOut: PSOut const &

        """
        return _snap.TMem_SaveMem(self, *args)

TMem.Save = new_instancemethod(_snap.TMem_Save,None,TMem)
TMem.__call__ = new_instancemethod(_snap.TMem___call__,None,TMem)
TMem.__iadd__ = new_instancemethod(_snap.TMem___iadd__,None,TMem)
TMem.GetMemUsed = new_instancemethod(_snap.TMem_GetMemUsed,None,TMem)
TMem.Gen = new_instancemethod(_snap.TMem_Gen,None,TMem)
TMem.GenZeros = new_instancemethod(_snap.TMem_GenZeros,None,TMem)
TMem.Reserve = new_instancemethod(_snap.TMem_Reserve,None,TMem)
TMem.Del = new_instancemethod(_snap.TMem_Del,None,TMem)
TMem.Clr = new_instancemethod(_snap.TMem_Clr,None,TMem)
TMem.Len = new_instancemethod(_snap.TMem_Len,None,TMem)
TMem.Empty = new_instancemethod(_snap.TMem_Empty,None,TMem)
TMem.Trunc = new_instancemethod(_snap.TMem_Trunc,None,TMem)
TMem.Push = new_instancemethod(_snap.TMem_Push,None,TMem)
TMem.Pop = new_instancemethod(_snap.TMem_Pop,None,TMem)
TMem.DoFitStr = new_instancemethod(_snap.TMem_DoFitStr,None,TMem)
TMem.AddBf = new_instancemethod(_snap.TMem_AddBf,None,TMem)
TMem.GetBf = new_instancemethod(_snap.TMem_GetBf,None,TMem)
TMem.GetAsStr = new_instancemethod(_snap.TMem_GetAsStr,None,TMem)
TMem.GetSIn = new_instancemethod(_snap.TMem_GetSIn,None,TMem)
TMem.SaveMem = new_instancemethod(_snap.TMem_SaveMem,None,TMem)
TMem_swigregister = _snap.TMem_swigregister
TMem_swigregister(TMem)

def TMem_New(*args):
  """
    New(int const & MxBfL=0) -> PMem

    Parameters:
        MxBfL: int const &

    New() -> PMem
    New(void const * Bf, int const & BfL) -> PMem

    Parameters:
        Bf: void const *
        BfL: int const &

    New(TMem Mem) -> PMem

    Parameters:
        Mem: TMem const &

    New(PMem const & Mem) -> PMem

    Parameters:
        Mem: PMem const &

    TMem_New(TStr Str) -> PMem

    Parameters:
        Str: TStr const &

    """
  return _snap.TMem_New(*args)

def TMem_LoadMem(*args):
  """
    LoadMem(PSIn const & SIn, TMem Mem)

    Parameters:
        SIn: PSIn const &
        Mem: TMem &

    TMem_LoadMem(PSIn const & SIn, PMem const & Mem)

    Parameters:
        SIn: PSIn const &
        Mem: PMem const &

    """
  return _snap.TMem_LoadMem(*args)

class TMemIn(object):
    """Proxy of C++ TMemIn class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TMemIn self, TMem _Mem, int const & _BfC=0) -> TMemIn

        Parameters:
            _Mem: TMem const &
            _BfC: int const &

        __init__(TMemIn self, TMem _Mem) -> TMemIn

        Parameters:
            _Mem: TMem const &

        """
        _snap.TMemIn_swiginit(self,_snap.new_TMemIn(*args))
    def New(*args):
        """
        New(TMem Mem) -> PSIn

        Parameters:
            Mem: TMem const &

        New(PMem const & Mem) -> PSIn

        Parameters:
            Mem: PMem const &

        """
        return _snap.TMemIn_New(*args)

    New = staticmethod(New)
    __swig_destroy__ = _snap.delete_TMemIn
    def Eof(self):
        """
        Eof(TMemIn self) -> bool

        Parameters:
            self: TMemIn *

        """
        return _snap.TMemIn_Eof(self)

    def Len(self):
        """
        Len(TMemIn self) -> int

        Parameters:
            self: TMemIn const *

        """
        return _snap.TMemIn_Len(self)

    def GetCh(self):
        """
        GetCh(TMemIn self) -> char

        Parameters:
            self: TMemIn *

        """
        return _snap.TMemIn_GetCh(self)

    def PeekCh(self):
        """
        PeekCh(TMemIn self) -> char

        Parameters:
            self: TMemIn *

        """
        return _snap.TMemIn_PeekCh(self)

    def GetBf(self, *args):
        """
        GetBf(TMemIn self, void const * LBf, TSize const & LBfL) -> int

        Parameters:
            LBf: void const *
            LBfL: TSize const &

        """
        return _snap.TMemIn_GetBf(self, *args)

    def Reset(self):
        """
        Reset(TMemIn self)

        Parameters:
            self: TMemIn *

        """
        return _snap.TMemIn_Reset(self)

    def GetNextLnBf(self, *args):
        """
        GetNextLnBf(TMemIn self, TChA LnChA) -> bool

        Parameters:
            LnChA: TChA &

        """
        return _snap.TMemIn_GetNextLnBf(self, *args)

TMemIn.Eof = new_instancemethod(_snap.TMemIn_Eof,None,TMemIn)
TMemIn.Len = new_instancemethod(_snap.TMemIn_Len,None,TMemIn)
TMemIn.GetCh = new_instancemethod(_snap.TMemIn_GetCh,None,TMemIn)
TMemIn.PeekCh = new_instancemethod(_snap.TMemIn_PeekCh,None,TMemIn)
TMemIn.GetBf = new_instancemethod(_snap.TMemIn_GetBf,None,TMemIn)
TMemIn.Reset = new_instancemethod(_snap.TMemIn_Reset,None,TMemIn)
TMemIn.GetNextLnBf = new_instancemethod(_snap.TMemIn_GetNextLnBf,None,TMemIn)
TMemIn_swigregister = _snap.TMemIn_swigregister
TMemIn_swigregister(TMemIn)

def TMemIn_New(*args):
  """
    New(TMem Mem) -> PSIn

    Parameters:
        Mem: TMem const &

    TMemIn_New(PMem const & Mem) -> PSIn

    Parameters:
        Mem: PMem const &

    """
  return _snap.TMemIn_New(*args)

class TMemOut(object):
    """Proxy of C++ TMemOut class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TMemOut self, PMem const & _Mem) -> TMemOut

        Parameters:
            _Mem: PMem const &

        """
        _snap.TMemOut_swiginit(self,_snap.new_TMemOut(*args))
    def New(*args):
        """
        New(PMem const & Mem) -> PSOut

        Parameters:
            Mem: PMem const &

        """
        return _snap.TMemOut_New(*args)

    New = staticmethod(New)
    __swig_destroy__ = _snap.delete_TMemOut
    def PutCh(self, *args):
        """
        PutCh(TMemOut self, char const & Ch) -> int

        Parameters:
            Ch: char const &

        """
        return _snap.TMemOut_PutCh(self, *args)

    def PutBf(self, *args):
        """
        PutBf(TMemOut self, void const * LBf, TSize const & LBfL) -> int

        Parameters:
            LBf: void const *
            LBfL: TSize const &

        """
        return _snap.TMemOut_PutBf(self, *args)

    def Flush(self):
        """
        Flush(TMemOut self)

        Parameters:
            self: TMemOut *

        """
        return _snap.TMemOut_Flush(self)

TMemOut.PutCh = new_instancemethod(_snap.TMemOut_PutCh,None,TMemOut)
TMemOut.PutBf = new_instancemethod(_snap.TMemOut_PutBf,None,TMemOut)
TMemOut.Flush = new_instancemethod(_snap.TMemOut_Flush,None,TMemOut)
TMemOut_swigregister = _snap.TMemOut_swigregister
TMemOut_swigregister(TMemOut)

def TMemOut_New(*args):
  """
    TMemOut_New(PMem const & Mem) -> PSOut

    Parameters:
        Mem: PMem const &

    """
  return _snap.TMemOut_New(*args)

class TChA(object):
    """Proxy of C++ TChA class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TChA
    def __init__(self, *args): 
        """
        __init__(TChA self, int const & _MxBfL=256) -> TChA

        Parameters:
            _MxBfL: int const &

        __init__(TChA self) -> TChA
        __init__(TChA self, char const * CStr) -> TChA

        Parameters:
            CStr: char const *

        __init__(TChA self, char const * CStr, int const & StrLen) -> TChA

        Parameters:
            CStr: char const *
            StrLen: int const &

        __init__(TChA self, TChA ChA) -> TChA

        Parameters:
            ChA: TChA const &

        __init__(TChA self, TStr Str) -> TChA

        Parameters:
            Str: TStr const &

        __init__(TChA self, TMem Mem) -> TChA

        Parameters:
            Mem: TMem const &

        __init__(TChA self, TSIn SIn) -> TChA

        Parameters:
            SIn: TSIn &

        """
        _snap.TChA_swiginit(self,_snap.new_TChA(*args))
    def Load(self, *args):
        """
        Load(TChA self, TSIn SIn)

        Parameters:
            SIn: TSIn &

        """
        return _snap.TChA_Load(self, *args)

    def Save(self, *args):
        """
        Save(TChA self, TSOut SOut, bool const & SaveCompact=True)

        Parameters:
            SOut: TSOut &
            SaveCompact: bool const &

        Save(TChA self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.TChA_Save(self, *args)

    def __eq__(self, *args):
        """
        __eq__(TChA self, TChA ChA) -> bool

        Parameters:
            ChA: TChA const &

        __eq__(TChA self, char const * _CStr) -> bool

        Parameters:
            _CStr: char const *

        __eq__(TChA self, char const & Ch) -> bool

        Parameters:
            Ch: char const &

        """
        return _snap.TChA___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(TChA self, TChA ChA) -> bool

        Parameters:
            ChA: TChA const &

        __ne__(TChA self, char const * _CStr) -> bool

        Parameters:
            _CStr: char const *

        __ne__(TChA self, char const & Ch) -> bool

        Parameters:
            Ch: char const &

        """
        return _snap.TChA___ne__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TChA self, TChA ChA) -> bool

        Parameters:
            ChA: TChA const &

        """
        return _snap.TChA___lt__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(TChA self, TMem Mem) -> TChA

        Parameters:
            Mem: TMem const &

        __iadd__(TChA self, TChA ChA) -> TChA

        Parameters:
            ChA: TChA const &

        __iadd__(TChA self, TStr Str) -> TChA

        Parameters:
            Str: TStr const &

        __iadd__(TChA self, char const * CStr) -> TChA

        Parameters:
            CStr: char const *

        __iadd__(TChA self, char const & Ch) -> TChA

        Parameters:
            Ch: char const &

        """
        return _snap.TChA___iadd__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(TChA self) -> int

        Parameters:
            self: TChA const *

        """
        return _snap.TChA_GetMemUsed(self)

    def __call__(self, *args):
        """
        __call__(TChA self) -> char
        __call__(TChA self) -> char const *

        Parameters:
            self: TChA const *

        """
        return _snap.TChA___call__(self, *args)

    def CStr(self, *args):
        """
        CStr(TChA self) -> char
        CStr(TChA self) -> char const *

        Parameters:
            self: TChA const *

        """
        return _snap.TChA_CStr(self, *args)

    def Clr(self):
        """
        Clr(TChA self)

        Parameters:
            self: TChA *

        """
        return _snap.TChA_Clr(self)

    def Len(self):
        """
        Len(TChA self) -> int

        Parameters:
            self: TChA const *

        """
        return _snap.TChA_Len(self)

    def Empty(self):
        """
        Empty(TChA self) -> bool

        Parameters:
            self: TChA const *

        """
        return _snap.TChA_Empty(self)

    def Ins(self, *args):
        """
        Ins(TChA self, int const & BChN, char const * CStr)

        Parameters:
            BChN: int const &
            CStr: char const *

        """
        return _snap.TChA_Ins(self, *args)

    def Del(self, *args):
        """
        Del(TChA self, int const & ChN)

        Parameters:
            ChN: int const &

        """
        return _snap.TChA_Del(self, *args)

    def DelLastCh(self):
        """
        DelLastCh(TChA self)

        Parameters:
            self: TChA *

        """
        return _snap.TChA_DelLastCh(self)

    def Push(self, *args):
        """
        Push(TChA self, char const & Ch)

        Parameters:
            Ch: char const &

        """
        return _snap.TChA_Push(self, *args)

    def Pop(self):
        """
        Pop(TChA self) -> char

        Parameters:
            self: TChA *

        """
        return _snap.TChA_Pop(self)

    def Trunc(self, *args):
        """
        Trunc(TChA self)
        Trunc(TChA self, int const & _BfL)

        Parameters:
            _BfL: int const &

        """
        return _snap.TChA_Trunc(self, *args)

    def Reverse(self):
        """
        Reverse(TChA self)

        Parameters:
            self: TChA *

        """
        return _snap.TChA_Reverse(self)

    def AddCh(self, *args):
        """
        AddCh(TChA self, char const & Ch, int const & MxLen=-1)

        Parameters:
            Ch: char const &
            MxLen: int const &

        AddCh(TChA self, char const & Ch)

        Parameters:
            Ch: char const &

        """
        return _snap.TChA_AddCh(self, *args)

    def AddChTo(self, *args):
        """
        AddChTo(TChA self, char const & Ch, int const & ToChN)

        Parameters:
            Ch: char const &
            ToChN: int const &

        """
        return _snap.TChA_AddChTo(self, *args)

    def AddBf(self, *args):
        """
        AddBf(TChA self, char * NewBf, int const & BfS)

        Parameters:
            NewBf: char *
            BfS: int const &

        """
        return _snap.TChA_AddBf(self, *args)

    def PutCh(self, *args):
        """
        PutCh(TChA self, int const & ChN, char const & Ch)

        Parameters:
            ChN: int const &
            Ch: char const &

        """
        return _snap.TChA_PutCh(self, *args)

    def GetCh(self, *args):
        """
        GetCh(TChA self, int const & ChN) -> char

        Parameters:
            ChN: int const &

        """
        return _snap.TChA_GetCh(self, *args)

    def LastCh(self):
        """
        LastCh(TChA self) -> char

        Parameters:
            self: TChA const *

        """
        return _snap.TChA_LastCh(self)

    def LastLastCh(self):
        """
        LastLastCh(TChA self) -> char

        Parameters:
            self: TChA const *

        """
        return _snap.TChA_LastLastCh(self)

    def GetSubStr(self, *args):
        """
        GetSubStr(TChA self, int const & BChN, int const & EChN) -> TChA

        Parameters:
            BChN: int const &
            EChN: int const &

        """
        return _snap.TChA_GetSubStr(self, *args)

    def CountCh(self, *args):
        """
        CountCh(TChA self, char const & Ch, int const & BChN=0) -> int

        Parameters:
            Ch: char const &
            BChN: int const &

        CountCh(TChA self, char const & Ch) -> int

        Parameters:
            Ch: char const &

        """
        return _snap.TChA_CountCh(self, *args)

    def SearchCh(self, *args):
        """
        SearchCh(TChA self, char const & Ch, int const & BChN=0) -> int

        Parameters:
            Ch: char const &
            BChN: int const &

        SearchCh(TChA self, char const & Ch) -> int

        Parameters:
            Ch: char const &

        """
        return _snap.TChA_SearchCh(self, *args)

    def SearchChBack(self, *args):
        """
        SearchChBack(TChA self, char const & Ch, int BChN=-1) -> int

        Parameters:
            Ch: char const &
            BChN: int

        SearchChBack(TChA self, char const & Ch) -> int

        Parameters:
            Ch: char const &

        """
        return _snap.TChA_SearchChBack(self, *args)

    def SearchStr(self, *args):
        """
        SearchStr(TChA self, TChA Str, int const & BChN=0) -> int

        Parameters:
            Str: TChA const &
            BChN: int const &

        SearchStr(TChA self, TChA Str) -> int

        Parameters:
            Str: TChA const &

        SearchStr(TChA self, TStr Str, int const & BChN=0) -> int

        Parameters:
            Str: TStr const &
            BChN: int const &

        SearchStr(TChA self, TStr Str) -> int

        Parameters:
            Str: TStr const &

        SearchStr(TChA self, char const * CStr, int const & BChN=0) -> int

        Parameters:
            CStr: char const *
            BChN: int const &

        SearchStr(TChA self, char const * CStr) -> int

        Parameters:
            CStr: char const *

        """
        return _snap.TChA_SearchStr(self, *args)

    def IsStrIn(self, *args):
        """
        IsStrIn(TChA self, TStr Str) -> bool

        Parameters:
            Str: TStr const &

        """
        return _snap.TChA_IsStrIn(self, *args)

    def IsPrefix(self, *args):
        """
        IsPrefix(TChA self, char const * CStr, int const & BChN=0) -> bool

        Parameters:
            CStr: char const *
            BChN: int const &

        IsPrefix(TChA self, char const * CStr) -> bool

        Parameters:
            CStr: char const *

        IsPrefix(TChA self, TStr Str) -> bool

        Parameters:
            Str: TStr const &

        IsPrefix(TChA self, TChA Str) -> bool

        Parameters:
            Str: TChA const &

        """
        return _snap.TChA_IsPrefix(self, *args)

    def IsSuffix(self, *args):
        """
        IsSuffix(TChA self, char const * CStr) -> bool

        Parameters:
            CStr: char const *

        IsSuffix(TChA self, TStr Str) -> bool

        Parameters:
            Str: TStr const &

        IsSuffix(TChA self, TChA Str) -> bool

        Parameters:
            Str: TChA const &

        """
        return _snap.TChA_IsSuffix(self, *args)

    def IsChIn(self, *args):
        """
        IsChIn(TChA self, char const & Ch) -> bool

        Parameters:
            Ch: char const &

        """
        return _snap.TChA_IsChIn(self, *args)

    def ChangeCh(self, *args):
        """
        ChangeCh(TChA self, char const & SrcCh, char const & DstCh)

        Parameters:
            SrcCh: char const &
            DstCh: char const &

        """
        return _snap.TChA_ChangeCh(self, *args)

    def ToUc(self):
        """
        ToUc(TChA self) -> TChA

        Parameters:
            self: TChA *

        """
        return _snap.TChA_ToUc(self)

    def ToLc(self):
        """
        ToLc(TChA self) -> TChA

        Parameters:
            self: TChA *

        """
        return _snap.TChA_ToLc(self)

    def ToTrunc(self):
        """
        ToTrunc(TChA self) -> TChA

        Parameters:
            self: TChA *

        """
        return _snap.TChA_ToTrunc(self)

    def CompressWs(self):
        """
        CompressWs(TChA self)

        Parameters:
            self: TChA *

        """
        return _snap.TChA_CompressWs(self)

    def Swap(self, *args):
        """
        Swap(TChA self, int const & ChN1, int const & ChN2)

        Parameters:
            ChN1: int const &
            ChN2: int const &

        Swap(TChA self, TChA ChA)

        Parameters:
            ChA: TChA &

        """
        return _snap.TChA_Swap(self, *args)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TChA self) -> int

        Parameters:
            self: TChA const *

        """
        return _snap.TChA_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(TChA self) -> int

        Parameters:
            self: TChA const *

        """
        return _snap.TChA_GetSecHashCd(self)

    def LoadTxt(*args):
        """
        LoadTxt(PSIn const & SIn, TChA ChA)

        Parameters:
            SIn: PSIn const &
            ChA: TChA &

        """
        return _snap.TChA_LoadTxt(*args)

    LoadTxt = staticmethod(LoadTxt)
    def SaveTxt(self, *args):
        """
        SaveTxt(TChA self, PSOut const & SOut)

        Parameters:
            SOut: PSOut const &

        """
        return _snap.TChA_SaveTxt(self, *args)

TChA.Load = new_instancemethod(_snap.TChA_Load,None,TChA)
TChA.Save = new_instancemethod(_snap.TChA_Save,None,TChA)
TChA.__eq__ = new_instancemethod(_snap.TChA___eq__,None,TChA)
TChA.__ne__ = new_instancemethod(_snap.TChA___ne__,None,TChA)
TChA.__lt__ = new_instancemethod(_snap.TChA___lt__,None,TChA)
TChA.__iadd__ = new_instancemethod(_snap.TChA___iadd__,None,TChA)
TChA.GetMemUsed = new_instancemethod(_snap.TChA_GetMemUsed,None,TChA)
TChA.__call__ = new_instancemethod(_snap.TChA___call__,None,TChA)
TChA.CStr = new_instancemethod(_snap.TChA_CStr,None,TChA)
TChA.Clr = new_instancemethod(_snap.TChA_Clr,None,TChA)
TChA.Len = new_instancemethod(_snap.TChA_Len,None,TChA)
TChA.Empty = new_instancemethod(_snap.TChA_Empty,None,TChA)
TChA.Ins = new_instancemethod(_snap.TChA_Ins,None,TChA)
TChA.Del = new_instancemethod(_snap.TChA_Del,None,TChA)
TChA.DelLastCh = new_instancemethod(_snap.TChA_DelLastCh,None,TChA)
TChA.Push = new_instancemethod(_snap.TChA_Push,None,TChA)
TChA.Pop = new_instancemethod(_snap.TChA_Pop,None,TChA)
TChA.Trunc = new_instancemethod(_snap.TChA_Trunc,None,TChA)
TChA.Reverse = new_instancemethod(_snap.TChA_Reverse,None,TChA)
TChA.AddCh = new_instancemethod(_snap.TChA_AddCh,None,TChA)
TChA.AddChTo = new_instancemethod(_snap.TChA_AddChTo,None,TChA)
TChA.AddBf = new_instancemethod(_snap.TChA_AddBf,None,TChA)
TChA.PutCh = new_instancemethod(_snap.TChA_PutCh,None,TChA)
TChA.GetCh = new_instancemethod(_snap.TChA_GetCh,None,TChA)
TChA.LastCh = new_instancemethod(_snap.TChA_LastCh,None,TChA)
TChA.LastLastCh = new_instancemethod(_snap.TChA_LastLastCh,None,TChA)
TChA.GetSubStr = new_instancemethod(_snap.TChA_GetSubStr,None,TChA)
TChA.CountCh = new_instancemethod(_snap.TChA_CountCh,None,TChA)
TChA.SearchCh = new_instancemethod(_snap.TChA_SearchCh,None,TChA)
TChA.SearchChBack = new_instancemethod(_snap.TChA_SearchChBack,None,TChA)
TChA.SearchStr = new_instancemethod(_snap.TChA_SearchStr,None,TChA)
TChA.IsStrIn = new_instancemethod(_snap.TChA_IsStrIn,None,TChA)
TChA.IsPrefix = new_instancemethod(_snap.TChA_IsPrefix,None,TChA)
TChA.IsSuffix = new_instancemethod(_snap.TChA_IsSuffix,None,TChA)
TChA.IsChIn = new_instancemethod(_snap.TChA_IsChIn,None,TChA)
TChA.ChangeCh = new_instancemethod(_snap.TChA_ChangeCh,None,TChA)
TChA.ToUc = new_instancemethod(_snap.TChA_ToUc,None,TChA)
TChA.ToLc = new_instancemethod(_snap.TChA_ToLc,None,TChA)
TChA.ToTrunc = new_instancemethod(_snap.TChA_ToTrunc,None,TChA)
TChA.CompressWs = new_instancemethod(_snap.TChA_CompressWs,None,TChA)
TChA.Swap = new_instancemethod(_snap.TChA_Swap,None,TChA)
TChA.GetPrimHashCd = new_instancemethod(_snap.TChA_GetPrimHashCd,None,TChA)
TChA.GetSecHashCd = new_instancemethod(_snap.TChA_GetSecHashCd,None,TChA)
TChA.SaveTxt = new_instancemethod(_snap.TChA_SaveTxt,None,TChA)
TChA_swigregister = _snap.TChA_swigregister
TChA_swigregister(TChA)

def TChA_LoadTxt(*args):
  """
    TChA_LoadTxt(PSIn const & SIn, TChA ChA)

    Parameters:
        SIn: PSIn const &
        ChA: TChA &

    """
  return _snap.TChA_LoadTxt(*args)

class TChAIn(object):
    """Proxy of C++ TChAIn class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TChAIn self, TChA ChA, int const & _BfC=0) -> TChAIn

        Parameters:
            ChA: TChA const &
            _BfC: int const &

        __init__(TChAIn self, TChA ChA) -> TChAIn

        Parameters:
            ChA: TChA const &

        """
        _snap.TChAIn_swiginit(self,_snap.new_TChAIn(*args))
    def New(*args):
        """
        New(TChA ChA) -> PSIn

        Parameters:
            ChA: TChA const &

        """
        return _snap.TChAIn_New(*args)

    New = staticmethod(New)
    __swig_destroy__ = _snap.delete_TChAIn
    def Eof(self):
        """
        Eof(TChAIn self) -> bool

        Parameters:
            self: TChAIn *

        """
        return _snap.TChAIn_Eof(self)

    def Len(self):
        """
        Len(TChAIn self) -> int

        Parameters:
            self: TChAIn const *

        """
        return _snap.TChAIn_Len(self)

    def GetCh(self):
        """
        GetCh(TChAIn self) -> char

        Parameters:
            self: TChAIn *

        """
        return _snap.TChAIn_GetCh(self)

    def PeekCh(self):
        """
        PeekCh(TChAIn self) -> char

        Parameters:
            self: TChAIn *

        """
        return _snap.TChAIn_PeekCh(self)

    def GetBf(self, *args):
        """
        GetBf(TChAIn self, void const * LBf, TSize const & LBfL) -> int

        Parameters:
            LBf: void const *
            LBfL: TSize const &

        """
        return _snap.TChAIn_GetBf(self, *args)

    def Reset(self):
        """
        Reset(TChAIn self)

        Parameters:
            self: TChAIn *

        """
        return _snap.TChAIn_Reset(self)

    def GetNextLnBf(self, *args):
        """
        GetNextLnBf(TChAIn self, TChA LnChA) -> bool

        Parameters:
            LnChA: TChA &

        """
        return _snap.TChAIn_GetNextLnBf(self, *args)

TChAIn.Eof = new_instancemethod(_snap.TChAIn_Eof,None,TChAIn)
TChAIn.Len = new_instancemethod(_snap.TChAIn_Len,None,TChAIn)
TChAIn.GetCh = new_instancemethod(_snap.TChAIn_GetCh,None,TChAIn)
TChAIn.PeekCh = new_instancemethod(_snap.TChAIn_PeekCh,None,TChAIn)
TChAIn.GetBf = new_instancemethod(_snap.TChAIn_GetBf,None,TChAIn)
TChAIn.Reset = new_instancemethod(_snap.TChAIn_Reset,None,TChAIn)
TChAIn.GetNextLnBf = new_instancemethod(_snap.TChAIn_GetNextLnBf,None,TChAIn)
TChAIn_swigregister = _snap.TChAIn_swigregister
TChAIn_swigregister(TChAIn)

def TChAIn_New(*args):
  """
    TChAIn_New(TChA ChA) -> PSIn

    Parameters:
        ChA: TChA const &

    """
  return _snap.TChAIn_New(*args)

class TRStr(object):
    """Proxy of C++ TRStr class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Bf = _swig_property(_snap.TRStr_Bf_get, _snap.TRStr_Bf_set)
    Refs = _swig_property(_snap.TRStr_Refs_get, _snap.TRStr_Refs_set)
    __swig_destroy__ = _snap.delete_TRStr
    def __init__(self, *args): 
        """
        __init__(TRStr self) -> TRStr
        __init__(TRStr self, int const & Len) -> TRStr

        Parameters:
            Len: int const &

        __init__(TRStr self, char const * CStr) -> TRStr

        Parameters:
            CStr: char const *

        __init__(TRStr self, char const * CStr, int const & MxLen) -> TRStr

        Parameters:
            CStr: char const *
            MxLen: int const &

        __init__(TRStr self, char const * CStr1, char const * CStr2) -> TRStr

        Parameters:
            CStr1: char const *
            CStr2: char const *

        __init__(TRStr self, char const & Ch) -> TRStr

        Parameters:
            Ch: char const &

        __init__(TRStr self, char const & Ch1, char const & Ch2) -> TRStr

        Parameters:
            Ch1: char const &
            Ch2: char const &

        __init__(TRStr self, TSIn SIn, bool const & IsSmall) -> TRStr

        Parameters:
            SIn: TSIn &
            IsSmall: bool const &

        """
        _snap.TRStr_swiginit(self,_snap.new_TRStr(*args))
    def Save(self, *args):
        """
        Save(TRStr self, TSOut SOut, bool const & IsSmall)

        Parameters:
            SOut: TSOut &
            IsSmall: bool const &

        """
        return _snap.TRStr_Save(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(TRStr self) -> int

        Parameters:
            self: TRStr const *

        """
        return _snap.TRStr_GetMemUsed(self)

    def MkRef(self):
        """
        MkRef(TRStr self)

        Parameters:
            self: TRStr *

        """
        return _snap.TRStr_MkRef(self)

    def UnRef(self):
        """
        UnRef(TRStr self)

        Parameters:
            self: TRStr *

        """
        return _snap.TRStr_UnRef(self)

    def CStr(self, *args):
        """
        CStr(TRStr self) -> char const
        CStr(TRStr self) -> char *

        Parameters:
            self: TRStr *

        """
        return _snap.TRStr_CStr(self, *args)

    def Empty(self):
        """
        Empty(TRStr self) -> bool

        Parameters:
            self: TRStr const *

        """
        return _snap.TRStr_Empty(self)

    def Len(self):
        """
        Len(TRStr self) -> int

        Parameters:
            self: TRStr const *

        """
        return _snap.TRStr_Len(self)

    def PutCh(self, *args):
        """
        PutCh(TRStr self, int const & ChN, char const & Ch)

        Parameters:
            ChN: int const &
            Ch: char const &

        """
        return _snap.TRStr_PutCh(self, *args)

    def GetCh(self, *args):
        """
        GetCh(TRStr self, int const & ChN) -> char

        Parameters:
            ChN: int const &

        """
        return _snap.TRStr_GetCh(self, *args)

    def IsUc(self):
        """
        IsUc(TRStr self) -> bool

        Parameters:
            self: TRStr const *

        """
        return _snap.TRStr_IsUc(self)

    def ToUc(self):
        """
        ToUc(TRStr self)

        Parameters:
            self: TRStr *

        """
        return _snap.TRStr_ToUc(self)

    def IsLc(self):
        """
        IsLc(TRStr self) -> bool

        Parameters:
            self: TRStr const *

        """
        return _snap.TRStr_IsLc(self)

    def ToLc(self):
        """
        ToLc(TRStr self)

        Parameters:
            self: TRStr *

        """
        return _snap.TRStr_ToLc(self)

    def ToCap(self):
        """
        ToCap(TRStr self)

        Parameters:
            self: TRStr *

        """
        return _snap.TRStr_ToCap(self)

    def ConvUsFromYuAscii(self):
        """
        ConvUsFromYuAscii(TRStr self)

        Parameters:
            self: TRStr *

        """
        return _snap.TRStr_ConvUsFromYuAscii(self)

    def CmpI(*args):
        """
        CmpI(char const * CStr1, char const * CStr2) -> int

        Parameters:
            CStr1: char const *
            CStr2: char const *

        """
        return _snap.TRStr_CmpI(*args)

    CmpI = staticmethod(CmpI)
    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TRStr self) -> int

        Parameters:
            self: TRStr const *

        """
        return _snap.TRStr_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(TRStr self) -> int

        Parameters:
            self: TRStr const *

        """
        return _snap.TRStr_GetSecHashCd(self)

    def GetNullRStr():
        """GetNullRStr() -> TRStr"""
        return _snap.TRStr_GetNullRStr()

    GetNullRStr = staticmethod(GetNullRStr)
TRStr.Save = new_instancemethod(_snap.TRStr_Save,None,TRStr)
TRStr.GetMemUsed = new_instancemethod(_snap.TRStr_GetMemUsed,None,TRStr)
TRStr.MkRef = new_instancemethod(_snap.TRStr_MkRef,None,TRStr)
TRStr.UnRef = new_instancemethod(_snap.TRStr_UnRef,None,TRStr)
TRStr.CStr = new_instancemethod(_snap.TRStr_CStr,None,TRStr)
TRStr.Empty = new_instancemethod(_snap.TRStr_Empty,None,TRStr)
TRStr.Len = new_instancemethod(_snap.TRStr_Len,None,TRStr)
TRStr.PutCh = new_instancemethod(_snap.TRStr_PutCh,None,TRStr)
TRStr.GetCh = new_instancemethod(_snap.TRStr_GetCh,None,TRStr)
TRStr.IsUc = new_instancemethod(_snap.TRStr_IsUc,None,TRStr)
TRStr.ToUc = new_instancemethod(_snap.TRStr_ToUc,None,TRStr)
TRStr.IsLc = new_instancemethod(_snap.TRStr_IsLc,None,TRStr)
TRStr.ToLc = new_instancemethod(_snap.TRStr_ToLc,None,TRStr)
TRStr.ToCap = new_instancemethod(_snap.TRStr_ToCap,None,TRStr)
TRStr.ConvUsFromYuAscii = new_instancemethod(_snap.TRStr_ConvUsFromYuAscii,None,TRStr)
TRStr.GetPrimHashCd = new_instancemethod(_snap.TRStr_GetPrimHashCd,None,TRStr)
TRStr.GetSecHashCd = new_instancemethod(_snap.TRStr_GetSecHashCd,None,TRStr)
TRStr_swigregister = _snap.TRStr_swigregister
TRStr_swigregister(TRStr)

def TRStr_CmpI(*args):
  """
    TRStr_CmpI(char const * CStr1, char const * CStr2) -> int

    Parameters:
        CStr1: char const *
        CStr2: char const *

    """
  return _snap.TRStr_CmpI(*args)

def TRStr_GetNullRStr():
  """TRStr_GetNullRStr() -> TRStr"""
  return _snap.TRStr_GetNullRStr()

class TStr(object):
    """Proxy of C++ TStr class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TStr
    def __init__(self, *args): 
        """
        __init__(TStr self) -> TStr
        __init__(TStr self, TStr Str) -> TStr

        Parameters:
            Str: TStr const &

        __init__(TStr self, TChA ChA) -> TStr

        Parameters:
            ChA: TChA const &

        __init__(TStr self, TSStr SStr) -> TStr

        Parameters:
            SStr: TSStr const &

        __init__(TStr self, char const * CStr) -> TStr

        Parameters:
            CStr: char const *

        __init__(TStr self, char const & Ch) -> TStr

        Parameters:
            Ch: char const &

        __init__(TStr self, TMem Mem) -> TStr

        Parameters:
            Mem: TMem const &

        __init__(TStr self, PSIn const & SIn) -> TStr

        Parameters:
            SIn: PSIn const &

        __init__(TStr self, TSIn SIn, bool const & IsSmall=False) -> TStr

        Parameters:
            SIn: TSIn &
            IsSmall: bool const &

        __init__(TStr self, TSIn SIn) -> TStr

        Parameters:
            SIn: TSIn &

        """
        _snap.TStr_swiginit(self,_snap.new_TStr(*args))
    def Load(self, *args):
        """
        Load(TStr self, TSIn SIn, bool const & IsSmall=False)

        Parameters:
            SIn: TSIn &
            IsSmall: bool const &

        Load(TStr self, TSIn SIn)

        Parameters:
            SIn: TSIn &

        """
        return _snap.TStr_Load(self, *args)

    def Save(self, *args):
        """
        Save(TStr self, TSOut SOut, bool const & IsSmall=False)

        Parameters:
            SOut: TSOut &
            IsSmall: bool const &

        Save(TStr self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.TStr_Save(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(TStr self, TStr Str) -> TStr

        Parameters:
            Str: TStr const &

        __iadd__(TStr self, char const * CStr) -> TStr

        Parameters:
            CStr: char const *

        """
        return _snap.TStr___iadd__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(TStr self, TStr Str) -> bool

        Parameters:
            Str: TStr const &

        __eq__(TStr self, char const * CStr) -> bool

        Parameters:
            CStr: char const *

        """
        return _snap.TStr___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(TStr self, char const * CStr) -> bool

        Parameters:
            CStr: char const *

        """
        return _snap.TStr___ne__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TStr self, TStr Str) -> bool

        Parameters:
            Str: TStr const &

        """
        return _snap.TStr___lt__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(TStr self) -> int

        Parameters:
            self: TStr const *

        """
        return _snap.TStr_GetMemUsed(self)

    def CStr(self, *args):
        """
        CStr(TStr self) -> char
        CStr(TStr self) -> char const *

        Parameters:
            self: TStr const *

        """
        return _snap.TStr_CStr(self, *args)

    def PutCh(self, *args):
        """
        PutCh(TStr self, int const & ChN, char const & Ch)

        Parameters:
            ChN: int const &
            Ch: char const &

        """
        return _snap.TStr_PutCh(self, *args)

    def GetCh(self, *args):
        """
        GetCh(TStr self, int const & ChN) -> char

        Parameters:
            ChN: int const &

        """
        return _snap.TStr_GetCh(self, *args)

    def LastCh(self):
        """
        LastCh(TStr self) -> char

        Parameters:
            self: TStr const *

        """
        return _snap.TStr_LastCh(self)

    def Clr(self):
        """
        Clr(TStr self)

        Parameters:
            self: TStr *

        """
        return _snap.TStr_Clr(self)

    def Len(self):
        """
        Len(TStr self) -> int

        Parameters:
            self: TStr const *

        """
        return _snap.TStr_Len(self)

    def Empty(self):
        """
        Empty(TStr self) -> bool

        Parameters:
            self: TStr const *

        """
        return _snap.TStr_Empty(self)

    def IsUc(self):
        """
        IsUc(TStr self) -> bool

        Parameters:
            self: TStr const *

        """
        return _snap.TStr_IsUc(self)

    def ToUc(self):
        """
        ToUc(TStr self) -> TStr

        Parameters:
            self: TStr *

        """
        return _snap.TStr_ToUc(self)

    def GetUc(self):
        """
        GetUc(TStr self) -> TStr

        Parameters:
            self: TStr const *

        """
        return _snap.TStr_GetUc(self)

    def CmpI(self, *args):
        """
        CmpI(TStr self, TStr Str) -> int

        Parameters:
            Str: TStr const &

        """
        return _snap.TStr_CmpI(self, *args)

    def EqI(self, *args):
        """
        EqI(TStr self, TStr Str) -> bool

        Parameters:
            Str: TStr const &

        """
        return _snap.TStr_EqI(self, *args)

    def IsLc(self):
        """
        IsLc(TStr self) -> bool

        Parameters:
            self: TStr const *

        """
        return _snap.TStr_IsLc(self)

    def ToLc(self):
        """
        ToLc(TStr self) -> TStr

        Parameters:
            self: TStr *

        """
        return _snap.TStr_ToLc(self)

    def GetLc(self):
        """
        GetLc(TStr self) -> TStr

        Parameters:
            self: TStr const *

        """
        return _snap.TStr_GetLc(self)

    def ToCap(self):
        """
        ToCap(TStr self) -> TStr

        Parameters:
            self: TStr *

        """
        return _snap.TStr_ToCap(self)

    def GetCap(self):
        """
        GetCap(TStr self) -> TStr

        Parameters:
            self: TStr const *

        """
        return _snap.TStr_GetCap(self)

    def ToTrunc(self):
        """
        ToTrunc(TStr self) -> TStr

        Parameters:
            self: TStr *

        """
        return _snap.TStr_ToTrunc(self)

    def GetTrunc(self):
        """
        GetTrunc(TStr self) -> TStr

        Parameters:
            self: TStr const *

        """
        return _snap.TStr_GetTrunc(self)

    def ConvUsFromYuAscii(self):
        """
        ConvUsFromYuAscii(TStr self) -> TStr

        Parameters:
            self: TStr *

        """
        return _snap.TStr_ConvUsFromYuAscii(self)

    def GetUsFromYuAscii(self):
        """
        GetUsFromYuAscii(TStr self) -> TStr

        Parameters:
            self: TStr const *

        """
        return _snap.TStr_GetUsFromYuAscii(self)

    def ToHex(self):
        """
        ToHex(TStr self) -> TStr

        Parameters:
            self: TStr *

        """
        return _snap.TStr_ToHex(self)

    def GetHex(self):
        """
        GetHex(TStr self) -> TStr

        Parameters:
            self: TStr const *

        """
        return _snap.TStr_GetHex(self)

    def FromHex(self):
        """
        FromHex(TStr self) -> TStr

        Parameters:
            self: TStr *

        """
        return _snap.TStr_FromHex(self)

    def GetFromHex(self):
        """
        GetFromHex(TStr self) -> TStr

        Parameters:
            self: TStr const *

        """
        return _snap.TStr_GetFromHex(self)

    def GetSubStr(self, *args):
        """
        GetSubStr(TStr self, int const & BChN, int const & EChN) -> TStr

        Parameters:
            BChN: int const &
            EChN: int const &

        GetSubStr(TStr self, int const & BChN) -> TStr

        Parameters:
            BChN: int const &

        """
        return _snap.TStr_GetSubStr(self, *args)

    def InsStr(self, *args):
        """
        InsStr(TStr self, int const & BChN, TStr Str)

        Parameters:
            BChN: int const &
            Str: TStr const &

        """
        return _snap.TStr_InsStr(self, *args)

    def DelChAll(self, *args):
        """
        DelChAll(TStr self, char const & Ch)

        Parameters:
            Ch: char const &

        """
        return _snap.TStr_DelChAll(self, *args)

    def DelSubStr(self, *args):
        """
        DelSubStr(TStr self, int const & BChN, int const & EChN)

        Parameters:
            BChN: int const &
            EChN: int const &

        """
        return _snap.TStr_DelSubStr(self, *args)

    def DelStr(self, *args):
        """
        DelStr(TStr self, TStr Str) -> bool

        Parameters:
            Str: TStr const &

        """
        return _snap.TStr_DelStr(self, *args)

    def LeftOf(self, *args):
        """
        LeftOf(TStr self, char const & SplitCh) -> TStr

        Parameters:
            SplitCh: char const &

        """
        return _snap.TStr_LeftOf(self, *args)

    def LeftOfLast(self, *args):
        """
        LeftOfLast(TStr self, char const & SplitCh) -> TStr

        Parameters:
            SplitCh: char const &

        """
        return _snap.TStr_LeftOfLast(self, *args)

    def RightOf(self, *args):
        """
        RightOf(TStr self, char const & SplitCh) -> TStr

        Parameters:
            SplitCh: char const &

        """
        return _snap.TStr_RightOf(self, *args)

    def RightOfLast(self, *args):
        """
        RightOfLast(TStr self, char const & SplitCh) -> TStr

        Parameters:
            SplitCh: char const &

        """
        return _snap.TStr_RightOfLast(self, *args)

    def SplitOnCh(self, *args):
        """
        SplitOnCh(TStr self, TStr LStr, char const & SplitCh, TStr RStr)

        Parameters:
            LStr: TStr &
            SplitCh: char const &
            RStr: TStr &

        """
        return _snap.TStr_SplitOnCh(self, *args)

    def SplitOnLastCh(self, *args):
        """
        SplitOnLastCh(TStr self, TStr LStr, char const & SplitCh, TStr RStr)

        Parameters:
            LStr: TStr &
            SplitCh: char const &
            RStr: TStr &

        """
        return _snap.TStr_SplitOnLastCh(self, *args)

    def SplitOnAllCh(self, *args):
        """
        SplitOnAllCh(TStr self, char const & SplitCh, TStrV StrV, bool const & SkipEmpty=True)

        Parameters:
            SplitCh: char const &
            StrV: TStrV &
            SkipEmpty: bool const &

        SplitOnAllCh(TStr self, char const & SplitCh, TStrV StrV)

        Parameters:
            SplitCh: char const &
            StrV: TStrV &

        """
        return _snap.TStr_SplitOnAllCh(self, *args)

    def SplitOnAllAnyCh(self, *args):
        """
        SplitOnAllAnyCh(TStr self, TStr SplitChStr, TStrV StrV, bool const & SkipEmpty=True)

        Parameters:
            SplitChStr: TStr const &
            StrV: TStrV &
            SkipEmpty: bool const &

        SplitOnAllAnyCh(TStr self, TStr SplitChStr, TStrV StrV)

        Parameters:
            SplitChStr: TStr const &
            StrV: TStrV &

        """
        return _snap.TStr_SplitOnAllAnyCh(self, *args)

    def SplitOnWs(self, *args):
        """
        SplitOnWs(TStr self, TStrV StrV)

        Parameters:
            StrV: TStrV &

        """
        return _snap.TStr_SplitOnWs(self, *args)

    def SplitOnNonAlNum(self, *args):
        """
        SplitOnNonAlNum(TStr self, TStrV StrV)

        Parameters:
            StrV: TStrV &

        """
        return _snap.TStr_SplitOnNonAlNum(self, *args)

    def SplitOnStr(self, *args):
        """
        SplitOnStr(TStr self, TStr SplitStr, TStrV StrV)

        Parameters:
            SplitStr: TStr const &
            StrV: TStrV &

        SplitOnStr(TStr self, TStr LeftStr, TStr MidStr, TStr RightStr)

        Parameters:
            LeftStr: TStr &
            MidStr: TStr const &
            RightStr: TStr &

        """
        return _snap.TStr_SplitOnStr(self, *args)

    def Mid(self, *args):
        """
        Mid(TStr self, int const & BChN, int const & Chs) -> TStr

        Parameters:
            BChN: int const &
            Chs: int const &

        Mid(TStr self, int const & BChN) -> TStr

        Parameters:
            BChN: int const &

        """
        return _snap.TStr_Mid(self, *args)

    def Left(self, *args):
        """
        Left(TStr self, int const & EChN) -> TStr

        Parameters:
            EChN: int const &

        """
        return _snap.TStr_Left(self, *args)

    def Right(self, *args):
        """
        Right(TStr self, int const & BChN) -> TStr

        Parameters:
            BChN: int const &

        """
        return _snap.TStr_Right(self, *args)

    def Slice(self, *args):
        """
        Slice(TStr self, int BChN, int EChNP1) -> TStr

        Parameters:
            BChN: int
            EChNP1: int

        """
        return _snap.TStr_Slice(self, *args)

    def __call__(self, *args):
        """
        __call__(TStr self) -> char
        __call__(TStr self) -> char const
        __call__(TStr self, int const & BChN, int const & EChNP1) -> TStr

        Parameters:
            BChN: int const &
            EChNP1: int const &

        """
        return _snap.TStr___call__(self, *args)

    def CountCh(self, *args):
        """
        CountCh(TStr self, char const & Ch, int const & BChN=0) -> int

        Parameters:
            Ch: char const &
            BChN: int const &

        CountCh(TStr self, char const & Ch) -> int

        Parameters:
            Ch: char const &

        """
        return _snap.TStr_CountCh(self, *args)

    def SearchCh(self, *args):
        """
        SearchCh(TStr self, char const & Ch, int const & BChN=0) -> int

        Parameters:
            Ch: char const &
            BChN: int const &

        SearchCh(TStr self, char const & Ch) -> int

        Parameters:
            Ch: char const &

        """
        return _snap.TStr_SearchCh(self, *args)

    def SearchChBack(self, *args):
        """
        SearchChBack(TStr self, char const & Ch, int BChN=-1) -> int

        Parameters:
            Ch: char const &
            BChN: int

        SearchChBack(TStr self, char const & Ch) -> int

        Parameters:
            Ch: char const &

        """
        return _snap.TStr_SearchChBack(self, *args)

    def SearchStr(self, *args):
        """
        SearchStr(TStr self, TStr Str, int const & BChN=0) -> int

        Parameters:
            Str: TStr const &
            BChN: int const &

        SearchStr(TStr self, TStr Str) -> int

        Parameters:
            Str: TStr const &

        """
        return _snap.TStr_SearchStr(self, *args)

    def IsChIn(self, *args):
        """
        IsChIn(TStr self, char const & Ch) -> bool

        Parameters:
            Ch: char const &

        """
        return _snap.TStr_IsChIn(self, *args)

    def IsStrIn(self, *args):
        """
        IsStrIn(TStr self, TStr Str) -> bool

        Parameters:
            Str: TStr const &

        """
        return _snap.TStr_IsStrIn(self, *args)

    def IsPrefix(self, *args):
        """
        IsPrefix(TStr self, char const * Str) -> bool

        Parameters:
            Str: char const *

        IsPrefix(TStr self, TStr Str) -> bool

        Parameters:
            Str: TStr const &

        """
        return _snap.TStr_IsPrefix(self, *args)

    def IsSuffix(self, *args):
        """
        IsSuffix(TStr self, char const * Str) -> bool

        Parameters:
            Str: char const *

        IsSuffix(TStr self, TStr Str) -> bool

        Parameters:
            Str: TStr const &

        """
        return _snap.TStr_IsSuffix(self, *args)

    def ChangeCh(self, *args):
        """
        ChangeCh(TStr self, char const & SrcCh, char const & DstCh, int const & BChN=0) -> int

        Parameters:
            SrcCh: char const &
            DstCh: char const &
            BChN: int const &

        ChangeCh(TStr self, char const & SrcCh, char const & DstCh) -> int

        Parameters:
            SrcCh: char const &
            DstCh: char const &

        """
        return _snap.TStr_ChangeCh(self, *args)

    def ChangeChAll(self, *args):
        """
        ChangeChAll(TStr self, char const & SrcCh, char const & DstCh) -> int

        Parameters:
            SrcCh: char const &
            DstCh: char const &

        """
        return _snap.TStr_ChangeChAll(self, *args)

    def ChangeStr(self, *args):
        """
        ChangeStr(TStr self, TStr SrcStr, TStr DstStr, int const & BChN=0) -> int

        Parameters:
            SrcStr: TStr const &
            DstStr: TStr const &
            BChN: int const &

        ChangeStr(TStr self, TStr SrcStr, TStr DstStr) -> int

        Parameters:
            SrcStr: TStr const &
            DstStr: TStr const &

        """
        return _snap.TStr_ChangeStr(self, *args)

    def ChangeStrAll(self, *args):
        """
        ChangeStrAll(TStr self, TStr SrcStr, TStr DstStr, bool const & FromStartP=False) -> int

        Parameters:
            SrcStr: TStr const &
            DstStr: TStr const &
            FromStartP: bool const &

        ChangeStrAll(TStr self, TStr SrcStr, TStr DstStr) -> int

        Parameters:
            SrcStr: TStr const &
            DstStr: TStr const &

        """
        return _snap.TStr_ChangeStrAll(self, *args)

    def Reverse(self):
        """
        Reverse(TStr self) -> TStr

        Parameters:
            self: TStr const *

        """
        return _snap.TStr_Reverse(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TStr self) -> int

        Parameters:
            self: TStr const *

        """
        return _snap.TStr_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(TStr self) -> int

        Parameters:
            self: TStr const *

        """
        return _snap.TStr_GetSecHashCd(self)

    def IsBool(self, *args):
        """
        IsBool(TStr self, bool & Val) -> bool

        Parameters:
            Val: bool &

        """
        return _snap.TStr_IsBool(self, *args)

    def IsInt(self, *args):
        """
        IsInt(TStr self, bool const & Check, int const & MnVal, int const & MxVal, int & Val) -> bool

        Parameters:
            Check: bool const &
            MnVal: int const &
            MxVal: int const &
            Val: int &

        IsInt(TStr self, int & Val) -> bool

        Parameters:
            Val: int &

        IsInt(TStr self) -> bool

        Parameters:
            self: TStr const *

        """
        return _snap.TStr_IsInt(self, *args)

    def GetInt(self, *args):
        """
        GetInt(TStr self) -> int
        GetInt(TStr self, int const & DfVal) -> int

        Parameters:
            DfVal: int const &

        """
        return _snap.TStr_GetInt(self, *args)

    def IsUInt(self, *args):
        """
        IsUInt(TStr self, bool const & Check, uint const & MnVal, uint const & MxVal, uint & Val) -> bool

        Parameters:
            Check: bool const &
            MnVal: uint const &
            MxVal: uint const &
            Val: uint &

        IsUInt(TStr self, uint & Val) -> bool

        Parameters:
            Val: uint &

        IsUInt(TStr self) -> bool

        Parameters:
            self: TStr const *

        """
        return _snap.TStr_IsUInt(self, *args)

    def GetUInt(self, *args):
        """
        GetUInt(TStr self) -> uint
        GetUInt(TStr self, uint const & DfVal) -> uint

        Parameters:
            DfVal: uint const &

        """
        return _snap.TStr_GetUInt(self, *args)

    def IsInt64(self, *args):
        """
        IsInt64(TStr self, bool const & Check, int64 const & MnVal, int64 const & MxVal, int64 & Val) -> bool

        Parameters:
            Check: bool const &
            MnVal: int64 const &
            MxVal: int64 const &
            Val: int64 &

        IsInt64(TStr self, int64 & Val) -> bool

        Parameters:
            Val: int64 &

        IsInt64(TStr self) -> bool

        Parameters:
            self: TStr const *

        """
        return _snap.TStr_IsInt64(self, *args)

    def GetInt64(self, *args):
        """
        GetInt64(TStr self) -> int64
        GetInt64(TStr self, int64 const & DfVal) -> int64

        Parameters:
            DfVal: int64 const &

        """
        return _snap.TStr_GetInt64(self, *args)

    def IsUInt64(self, *args):
        """
        IsUInt64(TStr self, bool const & Check, uint64 const & MnVal, uint64 const & MxVal, uint64 & Val) -> bool

        Parameters:
            Check: bool const &
            MnVal: uint64 const &
            MxVal: uint64 const &
            Val: uint64 &

        IsUInt64(TStr self, uint64 & Val) -> bool

        Parameters:
            Val: uint64 &

        IsUInt64(TStr self) -> bool

        Parameters:
            self: TStr const *

        """
        return _snap.TStr_IsUInt64(self, *args)

    def GetUInt64(self, *args):
        """
        GetUInt64(TStr self) -> uint64
        GetUInt64(TStr self, uint64 const & DfVal) -> uint64

        Parameters:
            DfVal: uint64 const &

        """
        return _snap.TStr_GetUInt64(self, *args)

    def IsHexInt(self, *args):
        """
        IsHexInt(TStr self, bool const & Check, int const & MnVal, int const & MxVal, int & Val) -> bool

        Parameters:
            Check: bool const &
            MnVal: int const &
            MxVal: int const &
            Val: int &

        IsHexInt(TStr self, int & Val) -> bool

        Parameters:
            Val: int &

        IsHexInt(TStr self) -> bool

        Parameters:
            self: TStr const *

        """
        return _snap.TStr_IsHexInt(self, *args)

    def GetHexInt(self, *args):
        """
        GetHexInt(TStr self) -> int
        GetHexInt(TStr self, int const & DfVal) -> int

        Parameters:
            DfVal: int const &

        """
        return _snap.TStr_GetHexInt(self, *args)

    def IsHexInt64(self, *args):
        """
        IsHexInt64(TStr self, bool const & Check, int64 const & MnVal, int64 const & MxVal, int64 & Val) -> bool

        Parameters:
            Check: bool const &
            MnVal: int64 const &
            MxVal: int64 const &
            Val: int64 &

        IsHexInt64(TStr self, int64 & Val) -> bool

        Parameters:
            Val: int64 &

        IsHexInt64(TStr self) -> bool

        Parameters:
            self: TStr const *

        """
        return _snap.TStr_IsHexInt64(self, *args)

    def GetHexInt64(self, *args):
        """
        GetHexInt64(TStr self) -> int64
        GetHexInt64(TStr self, int64 const & DfVal) -> int64

        Parameters:
            DfVal: int64 const &

        """
        return _snap.TStr_GetHexInt64(self, *args)

    def IsFlt(self, *args):
        """
        IsFlt(TStr self, bool const & Check, double const & MnVal, double const & MxVal, double & Val, char const & DecDelimCh='.') -> bool

        Parameters:
            Check: bool const &
            MnVal: double const &
            MxVal: double const &
            Val: double &
            DecDelimCh: char const &

        IsFlt(TStr self, bool const & Check, double const & MnVal, double const & MxVal, double & Val) -> bool

        Parameters:
            Check: bool const &
            MnVal: double const &
            MxVal: double const &
            Val: double &

        IsFlt(TStr self, double & Val) -> bool

        Parameters:
            Val: double &

        IsFlt(TStr self) -> bool

        Parameters:
            self: TStr const *

        """
        return _snap.TStr_IsFlt(self, *args)

    def GetFlt(self, *args):
        """
        GetFlt(TStr self) -> double
        GetFlt(TStr self, double const & DfVal) -> double

        Parameters:
            DfVal: double const &

        """
        return _snap.TStr_GetFlt(self, *args)

    def IsWord(self, WsPrefixP=True, FirstUcAllowedP=True):
        """
        IsWord(TStr self, bool const & WsPrefixP=True, bool const & FirstUcAllowedP=True) -> bool

        Parameters:
            WsPrefixP: bool const &
            FirstUcAllowedP: bool const &

        IsWord(TStr self, bool const & WsPrefixP=True) -> bool

        Parameters:
            WsPrefixP: bool const &

        IsWord(TStr self) -> bool

        Parameters:
            self: TStr const *

        """
        return _snap.TStr_IsWord(self, WsPrefixP, FirstUcAllowedP)

    def IsWs(self):
        """
        IsWs(TStr self) -> bool

        Parameters:
            self: TStr const *

        """
        return _snap.TStr_IsWs(self)

    def IsWcMatch(self, *args):
        """
        IsWcMatch(TStr self, int const & StrBChN, TStr WcStr, int const & WcStrBChN, TStrV StarStrV, char const & StarCh='*', 
            char const & QuestCh='?') -> bool

        Parameters:
            StrBChN: int const &
            WcStr: TStr const &
            WcStrBChN: int const &
            StarStrV: TStrV &
            StarCh: char const &
            QuestCh: char const &

        IsWcMatch(TStr self, int const & StrBChN, TStr WcStr, int const & WcStrBChN, TStrV StarStrV, char const & StarCh='*') -> bool

        Parameters:
            StrBChN: int const &
            WcStr: TStr const &
            WcStrBChN: int const &
            StarStrV: TStrV &
            StarCh: char const &

        IsWcMatch(TStr self, int const & StrBChN, TStr WcStr, int const & WcStrBChN, TStrV StarStrV) -> bool

        Parameters:
            StrBChN: int const &
            WcStr: TStr const &
            WcStrBChN: int const &
            StarStrV: TStrV &

        IsWcMatch(TStr self, TStr WcStr, TStrV StarStrV, char const & StarCh='*', char const & QuestCh='?') -> bool

        Parameters:
            WcStr: TStr const &
            StarStrV: TStrV &
            StarCh: char const &
            QuestCh: char const &

        IsWcMatch(TStr self, TStr WcStr, TStrV StarStrV, char const & StarCh='*') -> bool

        Parameters:
            WcStr: TStr const &
            StarStrV: TStrV &
            StarCh: char const &

        IsWcMatch(TStr self, TStr WcStr, TStrV StarStrV) -> bool

        Parameters:
            WcStr: TStr const &
            StarStrV: TStrV &

        IsWcMatch(TStr self, TStr WcStr, char const & StarCh, char const & QuestCh) -> bool

        Parameters:
            WcStr: TStr const &
            StarCh: char const &
            QuestCh: char const &

        IsWcMatch(TStr self, TStr WcStr, int const & StarStrN, TStr StarStr) -> bool

        Parameters:
            WcStr: TStr const &
            StarStrN: int const &
            StarStr: TStr &

        IsWcMatch(TStr self, TStr WcStr) -> bool

        Parameters:
            WcStr: TStr const &

        """
        return _snap.TStr_IsWcMatch(self, *args)

    def GetWcMatch(self, *args):
        """
        GetWcMatch(TStr self, TStr WcStr, int const & StarStrN=0) -> TStr

        Parameters:
            WcStr: TStr const &
            StarStrN: int const &

        GetWcMatch(TStr self, TStr WcStr) -> TStr

        Parameters:
            WcStr: TStr const &

        """
        return _snap.TStr_GetWcMatch(self, *args)

    def GetFPath(self):
        """
        GetFPath(TStr self) -> TStr

        Parameters:
            self: TStr const *

        """
        return _snap.TStr_GetFPath(self)

    def GetFBase(self):
        """
        GetFBase(TStr self) -> TStr

        Parameters:
            self: TStr const *

        """
        return _snap.TStr_GetFBase(self)

    def GetFMid(self):
        """
        GetFMid(TStr self) -> TStr

        Parameters:
            self: TStr const *

        """
        return _snap.TStr_GetFMid(self)

    def GetFExt(self):
        """
        GetFExt(TStr self) -> TStr

        Parameters:
            self: TStr const *

        """
        return _snap.TStr_GetFExt(self)

    def GetNrFPath(*args):
        """
        GetNrFPath(TStr FPath) -> TStr

        Parameters:
            FPath: TStr const &

        """
        return _snap.TStr_GetNrFPath(*args)

    GetNrFPath = staticmethod(GetNrFPath)
    def GetNrFMid(*args):
        """
        GetNrFMid(TStr FMid) -> TStr

        Parameters:
            FMid: TStr const &

        """
        return _snap.TStr_GetNrFMid(*args)

    GetNrFMid = staticmethod(GetNrFMid)
    def GetNrFExt(*args):
        """
        GetNrFExt(TStr FExt) -> TStr

        Parameters:
            FExt: TStr const &

        """
        return _snap.TStr_GetNrFExt(*args)

    GetNrFExt = staticmethod(GetNrFExt)
    def GetNrNumFExt(*args):
        """
        GetNrNumFExt(int const & FExtN) -> TStr

        Parameters:
            FExtN: int const &

        """
        return _snap.TStr_GetNrNumFExt(*args)

    GetNrNumFExt = staticmethod(GetNrNumFExt)
    def GetNrFNm(*args):
        """
        GetNrFNm(TStr FNm) -> TStr

        Parameters:
            FNm: TStr const &

        """
        return _snap.TStr_GetNrFNm(*args)

    GetNrFNm = staticmethod(GetNrFNm)
    def GetNrAbsFPath(*args):
        """
        GetNrAbsFPath(TStr FPath, TStr BaseFPath=TStr()) -> TStr

        Parameters:
            FPath: TStr const &
            BaseFPath: TStr const &

        GetNrAbsFPath(TStr FPath) -> TStr

        Parameters:
            FPath: TStr const &

        """
        return _snap.TStr_GetNrAbsFPath(*args)

    GetNrAbsFPath = staticmethod(GetNrAbsFPath)
    def IsAbsFPath(*args):
        """
        IsAbsFPath(TStr FPath) -> bool

        Parameters:
            FPath: TStr const &

        """
        return _snap.TStr_IsAbsFPath(*args)

    IsAbsFPath = staticmethod(IsAbsFPath)
    def PutFExt(*args):
        """
        PutFExt(TStr FNm, TStr FExt) -> TStr

        Parameters:
            FNm: TStr const &
            FExt: TStr const &

        """
        return _snap.TStr_PutFExt(*args)

    PutFExt = staticmethod(PutFExt)
    def PutFExtIfEmpty(*args):
        """
        PutFExtIfEmpty(TStr FNm, TStr FExt) -> TStr

        Parameters:
            FNm: TStr const &
            FExt: TStr const &

        """
        return _snap.TStr_PutFExtIfEmpty(*args)

    PutFExtIfEmpty = staticmethod(PutFExtIfEmpty)
    def PutFBase(*args):
        """
        PutFBase(TStr FNm, TStr FBase) -> TStr

        Parameters:
            FNm: TStr const &
            FBase: TStr const &

        """
        return _snap.TStr_PutFBase(*args)

    PutFBase = staticmethod(PutFBase)
    def PutFBaseIfEmpty(*args):
        """
        PutFBaseIfEmpty(TStr FNm, TStr FBase) -> TStr

        Parameters:
            FNm: TStr const &
            FBase: TStr const &

        """
        return _snap.TStr_PutFBaseIfEmpty(*args)

    PutFBaseIfEmpty = staticmethod(PutFBaseIfEmpty)
    def AddToFMid(*args):
        """
        AddToFMid(TStr FNm, TStr ExtFMid) -> TStr

        Parameters:
            FNm: TStr const &
            ExtFMid: TStr const &

        """
        return _snap.TStr_AddToFMid(*args)

    AddToFMid = staticmethod(AddToFMid)
    def GetNumFNm(*args):
        """
        GetNumFNm(TStr FNm, int const & Num) -> TStr

        Parameters:
            FNm: TStr const &
            Num: int const &

        """
        return _snap.TStr_GetNumFNm(*args)

    GetNumFNm = staticmethod(GetNumFNm)
    def GetFNmStr(*args):
        """
        GetFNmStr(TStr Str, bool const & AlNumOnlyP=True) -> TStr

        Parameters:
            Str: TStr const &
            AlNumOnlyP: bool const &

        GetFNmStr(TStr Str) -> TStr

        Parameters:
            Str: TStr const &

        """
        return _snap.TStr_GetFNmStr(*args)

    GetFNmStr = staticmethod(GetFNmStr)
    def LoadTxt(*args):
        """
        LoadTxt(PSIn const & SIn) -> TStr

        Parameters:
            SIn: PSIn const &

        LoadTxt(TStr FNm) -> TStr

        Parameters:
            FNm: TStr const &

        """
        return _snap.TStr_LoadTxt(*args)

    LoadTxt = staticmethod(LoadTxt)
    def SaveTxt(self, *args):
        """
        SaveTxt(TStr self, PSOut const & SOut)

        Parameters:
            SOut: PSOut const &

        SaveTxt(TStr self, TStr FNm)

        Parameters:
            FNm: TStr const &

        """
        return _snap.TStr_SaveTxt(self, *args)

    def GetChStr(*args):
        """
        GetChStr(char const & Ch) -> TStr

        Parameters:
            Ch: char const &

        """
        return _snap.TStr_GetChStr(*args)

    GetChStr = staticmethod(GetChStr)
    def GetDChStr(*args):
        """
        GetDChStr(char const & Ch1, char const & Ch2) -> TStr

        Parameters:
            Ch1: char const &
            Ch2: char const &

        """
        return _snap.TStr_GetDChStr(*args)

    GetDChStr = staticmethod(GetDChStr)
    def Fmt(*args):
        """
        Fmt(char const * FmtStr) -> TStr

        Parameters:
            FmtStr: char const *

        """
        return _snap.TStr_Fmt(*args)

    Fmt = staticmethod(Fmt)
    def GetSpaceStr(*args):
        """
        GetSpaceStr(int const & Spaces) -> TStr

        Parameters:
            Spaces: int const &

        """
        return _snap.TStr_GetSpaceStr(*args)

    GetSpaceStr = staticmethod(GetSpaceStr)
    def GetCStr(self):
        """
        GetCStr(TStr self) -> char *

        Parameters:
            self: TStr const *

        """
        return _snap.TStr_GetCStr(self)

    def MkClone(*args):
        """
        MkClone(TStr Str) -> TStr

        Parameters:
            Str: TStr const &

        """
        return _snap.TStr_MkClone(*args)

    MkClone = staticmethod(MkClone)
    def GetNullStr():
        """GetNullStr() -> TStr"""
        return _snap.TStr_GetNullStr()

    GetNullStr = staticmethod(GetNullStr)
TStr.Load = new_instancemethod(_snap.TStr_Load,None,TStr)
TStr.Save = new_instancemethod(_snap.TStr_Save,None,TStr)
TStr.__iadd__ = new_instancemethod(_snap.TStr___iadd__,None,TStr)
TStr.__eq__ = new_instancemethod(_snap.TStr___eq__,None,TStr)
TStr.__ne__ = new_instancemethod(_snap.TStr___ne__,None,TStr)
TStr.__lt__ = new_instancemethod(_snap.TStr___lt__,None,TStr)
TStr.GetMemUsed = new_instancemethod(_snap.TStr_GetMemUsed,None,TStr)
TStr.CStr = new_instancemethod(_snap.TStr_CStr,None,TStr)
TStr.PutCh = new_instancemethod(_snap.TStr_PutCh,None,TStr)
TStr.GetCh = new_instancemethod(_snap.TStr_GetCh,None,TStr)
TStr.LastCh = new_instancemethod(_snap.TStr_LastCh,None,TStr)
TStr.Clr = new_instancemethod(_snap.TStr_Clr,None,TStr)
TStr.Len = new_instancemethod(_snap.TStr_Len,None,TStr)
TStr.Empty = new_instancemethod(_snap.TStr_Empty,None,TStr)
TStr.IsUc = new_instancemethod(_snap.TStr_IsUc,None,TStr)
TStr.ToUc = new_instancemethod(_snap.TStr_ToUc,None,TStr)
TStr.GetUc = new_instancemethod(_snap.TStr_GetUc,None,TStr)
TStr.CmpI = new_instancemethod(_snap.TStr_CmpI,None,TStr)
TStr.EqI = new_instancemethod(_snap.TStr_EqI,None,TStr)
TStr.IsLc = new_instancemethod(_snap.TStr_IsLc,None,TStr)
TStr.ToLc = new_instancemethod(_snap.TStr_ToLc,None,TStr)
TStr.GetLc = new_instancemethod(_snap.TStr_GetLc,None,TStr)
TStr.ToCap = new_instancemethod(_snap.TStr_ToCap,None,TStr)
TStr.GetCap = new_instancemethod(_snap.TStr_GetCap,None,TStr)
TStr.ToTrunc = new_instancemethod(_snap.TStr_ToTrunc,None,TStr)
TStr.GetTrunc = new_instancemethod(_snap.TStr_GetTrunc,None,TStr)
TStr.ConvUsFromYuAscii = new_instancemethod(_snap.TStr_ConvUsFromYuAscii,None,TStr)
TStr.GetUsFromYuAscii = new_instancemethod(_snap.TStr_GetUsFromYuAscii,None,TStr)
TStr.ToHex = new_instancemethod(_snap.TStr_ToHex,None,TStr)
TStr.GetHex = new_instancemethod(_snap.TStr_GetHex,None,TStr)
TStr.FromHex = new_instancemethod(_snap.TStr_FromHex,None,TStr)
TStr.GetFromHex = new_instancemethod(_snap.TStr_GetFromHex,None,TStr)
TStr.GetSubStr = new_instancemethod(_snap.TStr_GetSubStr,None,TStr)
TStr.InsStr = new_instancemethod(_snap.TStr_InsStr,None,TStr)
TStr.DelChAll = new_instancemethod(_snap.TStr_DelChAll,None,TStr)
TStr.DelSubStr = new_instancemethod(_snap.TStr_DelSubStr,None,TStr)
TStr.DelStr = new_instancemethod(_snap.TStr_DelStr,None,TStr)
TStr.LeftOf = new_instancemethod(_snap.TStr_LeftOf,None,TStr)
TStr.LeftOfLast = new_instancemethod(_snap.TStr_LeftOfLast,None,TStr)
TStr.RightOf = new_instancemethod(_snap.TStr_RightOf,None,TStr)
TStr.RightOfLast = new_instancemethod(_snap.TStr_RightOfLast,None,TStr)
TStr.SplitOnCh = new_instancemethod(_snap.TStr_SplitOnCh,None,TStr)
TStr.SplitOnLastCh = new_instancemethod(_snap.TStr_SplitOnLastCh,None,TStr)
TStr.SplitOnAllCh = new_instancemethod(_snap.TStr_SplitOnAllCh,None,TStr)
TStr.SplitOnAllAnyCh = new_instancemethod(_snap.TStr_SplitOnAllAnyCh,None,TStr)
TStr.SplitOnWs = new_instancemethod(_snap.TStr_SplitOnWs,None,TStr)
TStr.SplitOnNonAlNum = new_instancemethod(_snap.TStr_SplitOnNonAlNum,None,TStr)
TStr.SplitOnStr = new_instancemethod(_snap.TStr_SplitOnStr,None,TStr)
TStr.Mid = new_instancemethod(_snap.TStr_Mid,None,TStr)
TStr.Left = new_instancemethod(_snap.TStr_Left,None,TStr)
TStr.Right = new_instancemethod(_snap.TStr_Right,None,TStr)
TStr.Slice = new_instancemethod(_snap.TStr_Slice,None,TStr)
TStr.__call__ = new_instancemethod(_snap.TStr___call__,None,TStr)
TStr.CountCh = new_instancemethod(_snap.TStr_CountCh,None,TStr)
TStr.SearchCh = new_instancemethod(_snap.TStr_SearchCh,None,TStr)
TStr.SearchChBack = new_instancemethod(_snap.TStr_SearchChBack,None,TStr)
TStr.SearchStr = new_instancemethod(_snap.TStr_SearchStr,None,TStr)
TStr.IsChIn = new_instancemethod(_snap.TStr_IsChIn,None,TStr)
TStr.IsStrIn = new_instancemethod(_snap.TStr_IsStrIn,None,TStr)
TStr.IsPrefix = new_instancemethod(_snap.TStr_IsPrefix,None,TStr)
TStr.IsSuffix = new_instancemethod(_snap.TStr_IsSuffix,None,TStr)
TStr.ChangeCh = new_instancemethod(_snap.TStr_ChangeCh,None,TStr)
TStr.ChangeChAll = new_instancemethod(_snap.TStr_ChangeChAll,None,TStr)
TStr.ChangeStr = new_instancemethod(_snap.TStr_ChangeStr,None,TStr)
TStr.ChangeStrAll = new_instancemethod(_snap.TStr_ChangeStrAll,None,TStr)
TStr.Reverse = new_instancemethod(_snap.TStr_Reverse,None,TStr)
TStr.GetPrimHashCd = new_instancemethod(_snap.TStr_GetPrimHashCd,None,TStr)
TStr.GetSecHashCd = new_instancemethod(_snap.TStr_GetSecHashCd,None,TStr)
TStr.IsBool = new_instancemethod(_snap.TStr_IsBool,None,TStr)
TStr.IsInt = new_instancemethod(_snap.TStr_IsInt,None,TStr)
TStr.GetInt = new_instancemethod(_snap.TStr_GetInt,None,TStr)
TStr.IsUInt = new_instancemethod(_snap.TStr_IsUInt,None,TStr)
TStr.GetUInt = new_instancemethod(_snap.TStr_GetUInt,None,TStr)
TStr.IsInt64 = new_instancemethod(_snap.TStr_IsInt64,None,TStr)
TStr.GetInt64 = new_instancemethod(_snap.TStr_GetInt64,None,TStr)
TStr.IsUInt64 = new_instancemethod(_snap.TStr_IsUInt64,None,TStr)
TStr.GetUInt64 = new_instancemethod(_snap.TStr_GetUInt64,None,TStr)
TStr.IsHexInt = new_instancemethod(_snap.TStr_IsHexInt,None,TStr)
TStr.GetHexInt = new_instancemethod(_snap.TStr_GetHexInt,None,TStr)
TStr.IsHexInt64 = new_instancemethod(_snap.TStr_IsHexInt64,None,TStr)
TStr.GetHexInt64 = new_instancemethod(_snap.TStr_GetHexInt64,None,TStr)
TStr.IsFlt = new_instancemethod(_snap.TStr_IsFlt,None,TStr)
TStr.GetFlt = new_instancemethod(_snap.TStr_GetFlt,None,TStr)
TStr.IsWord = new_instancemethod(_snap.TStr_IsWord,None,TStr)
TStr.IsWs = new_instancemethod(_snap.TStr_IsWs,None,TStr)
TStr.IsWcMatch = new_instancemethod(_snap.TStr_IsWcMatch,None,TStr)
TStr.GetWcMatch = new_instancemethod(_snap.TStr_GetWcMatch,None,TStr)
TStr.GetFPath = new_instancemethod(_snap.TStr_GetFPath,None,TStr)
TStr.GetFBase = new_instancemethod(_snap.TStr_GetFBase,None,TStr)
TStr.GetFMid = new_instancemethod(_snap.TStr_GetFMid,None,TStr)
TStr.GetFExt = new_instancemethod(_snap.TStr_GetFExt,None,TStr)
TStr.SaveTxt = new_instancemethod(_snap.TStr_SaveTxt,None,TStr)
TStr.GetCStr = new_instancemethod(_snap.TStr_GetCStr,None,TStr)
TStr_swigregister = _snap.TStr_swigregister
TStr_swigregister(TStr)

def TStr_GetNrFPath(*args):
  """
    TStr_GetNrFPath(TStr FPath) -> TStr

    Parameters:
        FPath: TStr const &

    """
  return _snap.TStr_GetNrFPath(*args)

def TStr_GetNrFMid(*args):
  """
    TStr_GetNrFMid(TStr FMid) -> TStr

    Parameters:
        FMid: TStr const &

    """
  return _snap.TStr_GetNrFMid(*args)

def TStr_GetNrFExt(*args):
  """
    TStr_GetNrFExt(TStr FExt) -> TStr

    Parameters:
        FExt: TStr const &

    """
  return _snap.TStr_GetNrFExt(*args)

def TStr_GetNrNumFExt(*args):
  """
    TStr_GetNrNumFExt(int const & FExtN) -> TStr

    Parameters:
        FExtN: int const &

    """
  return _snap.TStr_GetNrNumFExt(*args)

def TStr_GetNrFNm(*args):
  """
    TStr_GetNrFNm(TStr FNm) -> TStr

    Parameters:
        FNm: TStr const &

    """
  return _snap.TStr_GetNrFNm(*args)

def TStr_GetNrAbsFPath(*args):
  """
    GetNrAbsFPath(TStr FPath, TStr BaseFPath=TStr()) -> TStr

    Parameters:
        FPath: TStr const &
        BaseFPath: TStr const &

    TStr_GetNrAbsFPath(TStr FPath) -> TStr

    Parameters:
        FPath: TStr const &

    """
  return _snap.TStr_GetNrAbsFPath(*args)

def TStr_IsAbsFPath(*args):
  """
    TStr_IsAbsFPath(TStr FPath) -> bool

    Parameters:
        FPath: TStr const &

    """
  return _snap.TStr_IsAbsFPath(*args)

def TStr_PutFExt(*args):
  """
    TStr_PutFExt(TStr FNm, TStr FExt) -> TStr

    Parameters:
        FNm: TStr const &
        FExt: TStr const &

    """
  return _snap.TStr_PutFExt(*args)

def TStr_PutFExtIfEmpty(*args):
  """
    TStr_PutFExtIfEmpty(TStr FNm, TStr FExt) -> TStr

    Parameters:
        FNm: TStr const &
        FExt: TStr const &

    """
  return _snap.TStr_PutFExtIfEmpty(*args)

def TStr_PutFBase(*args):
  """
    TStr_PutFBase(TStr FNm, TStr FBase) -> TStr

    Parameters:
        FNm: TStr const &
        FBase: TStr const &

    """
  return _snap.TStr_PutFBase(*args)

def TStr_PutFBaseIfEmpty(*args):
  """
    TStr_PutFBaseIfEmpty(TStr FNm, TStr FBase) -> TStr

    Parameters:
        FNm: TStr const &
        FBase: TStr const &

    """
  return _snap.TStr_PutFBaseIfEmpty(*args)

def TStr_AddToFMid(*args):
  """
    TStr_AddToFMid(TStr FNm, TStr ExtFMid) -> TStr

    Parameters:
        FNm: TStr const &
        ExtFMid: TStr const &

    """
  return _snap.TStr_AddToFMid(*args)

def TStr_GetNumFNm(*args):
  """
    TStr_GetNumFNm(TStr FNm, int const & Num) -> TStr

    Parameters:
        FNm: TStr const &
        Num: int const &

    """
  return _snap.TStr_GetNumFNm(*args)

def TStr_GetFNmStr(*args):
  """
    GetFNmStr(TStr Str, bool const & AlNumOnlyP=True) -> TStr

    Parameters:
        Str: TStr const &
        AlNumOnlyP: bool const &

    TStr_GetFNmStr(TStr Str) -> TStr

    Parameters:
        Str: TStr const &

    """
  return _snap.TStr_GetFNmStr(*args)

def TStr_LoadTxt(*args):
  """
    LoadTxt(PSIn const & SIn) -> TStr

    Parameters:
        SIn: PSIn const &

    TStr_LoadTxt(TStr FNm) -> TStr

    Parameters:
        FNm: TStr const &

    """
  return _snap.TStr_LoadTxt(*args)

def TStr_GetChStr(*args):
  """
    TStr_GetChStr(char const & Ch) -> TStr

    Parameters:
        Ch: char const &

    """
  return _snap.TStr_GetChStr(*args)

def TStr_GetDChStr(*args):
  """
    TStr_GetDChStr(char const & Ch1, char const & Ch2) -> TStr

    Parameters:
        Ch1: char const &
        Ch2: char const &

    """
  return _snap.TStr_GetDChStr(*args)

def TStr_Fmt(*args):
  """
    TStr_Fmt(char const * FmtStr) -> TStr

    Parameters:
        FmtStr: char const *

    """
  return _snap.TStr_Fmt(*args)

def TStr_GetSpaceStr(*args):
  """
    TStr_GetSpaceStr(int const & Spaces) -> TStr

    Parameters:
        Spaces: int const &

    """
  return _snap.TStr_GetSpaceStr(*args)

def TStr_MkClone(*args):
  """
    TStr_MkClone(TStr Str) -> TStr

    Parameters:
        Str: TStr const &

    """
  return _snap.TStr_MkClone(*args)

def TStr_GetNullStr():
  """TStr_GetNullStr() -> TStr"""
  return _snap.TStr_GetNullStr()

class TStrIn(object):
    """Proxy of C++ TStrIn class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TStrIn self, TStr _Str) -> TStrIn

        Parameters:
            _Str: TStr const &

        """
        _snap.TStrIn_swiginit(self,_snap.new_TStrIn(*args))
    def New(*args):
        """
        New(TStr Str) -> PSIn

        Parameters:
            Str: TStr const &

        """
        return _snap.TStrIn_New(*args)

    New = staticmethod(New)
    __swig_destroy__ = _snap.delete_TStrIn
    def Eof(self):
        """
        Eof(TStrIn self) -> bool

        Parameters:
            self: TStrIn *

        """
        return _snap.TStrIn_Eof(self)

    def Len(self):
        """
        Len(TStrIn self) -> int

        Parameters:
            self: TStrIn const *

        """
        return _snap.TStrIn_Len(self)

    def GetCh(self):
        """
        GetCh(TStrIn self) -> char

        Parameters:
            self: TStrIn *

        """
        return _snap.TStrIn_GetCh(self)

    def PeekCh(self):
        """
        PeekCh(TStrIn self) -> char

        Parameters:
            self: TStrIn *

        """
        return _snap.TStrIn_PeekCh(self)

    def GetBf(self, *args):
        """
        GetBf(TStrIn self, void const * LBf, TSize const & LBfL) -> int

        Parameters:
            LBf: void const *
            LBfL: TSize const &

        """
        return _snap.TStrIn_GetBf(self, *args)

    def Reset(self):
        """
        Reset(TStrIn self)

        Parameters:
            self: TStrIn *

        """
        return _snap.TStrIn_Reset(self)

    def GetNextLnBf(self, *args):
        """
        GetNextLnBf(TStrIn self, TChA LnChA) -> bool

        Parameters:
            LnChA: TChA &

        """
        return _snap.TStrIn_GetNextLnBf(self, *args)

TStrIn.Eof = new_instancemethod(_snap.TStrIn_Eof,None,TStrIn)
TStrIn.Len = new_instancemethod(_snap.TStrIn_Len,None,TStrIn)
TStrIn.GetCh = new_instancemethod(_snap.TStrIn_GetCh,None,TStrIn)
TStrIn.PeekCh = new_instancemethod(_snap.TStrIn_PeekCh,None,TStrIn)
TStrIn.GetBf = new_instancemethod(_snap.TStrIn_GetBf,None,TStrIn)
TStrIn.Reset = new_instancemethod(_snap.TStrIn_Reset,None,TStrIn)
TStrIn.GetNextLnBf = new_instancemethod(_snap.TStrIn_GetNextLnBf,None,TStrIn)
TStrIn_swigregister = _snap.TStrIn_swigregister
TStrIn_swigregister(TStrIn)

def TStrIn_New(*args):
  """
    TStrIn_New(TStr Str) -> PSIn

    Parameters:
        Str: TStr const &

    """
  return _snap.TStrIn_New(*args)

class TDbStr(object):
    """Proxy of C++ TDbStr class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Str1 = _swig_property(_snap.TDbStr_Str1_get, _snap.TDbStr_Str1_set)
    Str2 = _swig_property(_snap.TDbStr_Str2_get, _snap.TDbStr_Str2_set)
    def __init__(self, *args): 
        """
        __init__(TDbStr self) -> TDbStr
        __init__(TDbStr self, TDbStr DbStr) -> TDbStr

        Parameters:
            DbStr: TDbStr const &

        __init__(TDbStr self, TStr _Str1) -> TDbStr

        Parameters:
            _Str1: TStr const &

        __init__(TDbStr self, TStr _Str1, TStr _Str2) -> TDbStr

        Parameters:
            _Str1: TStr const &
            _Str2: TStr const &

        __init__(TDbStr self, TSIn SIn) -> TDbStr

        Parameters:
            SIn: TSIn &

        """
        _snap.TDbStr_swiginit(self,_snap.new_TDbStr(*args))
    def Save(self, *args):
        """
        Save(TDbStr self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.TDbStr_Save(self, *args)

    def __eq__(self, *args):
        """
        __eq__(TDbStr self, TDbStr DbStr) -> bool

        Parameters:
            DbStr: TDbStr const &

        """
        return _snap.TDbStr___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TDbStr self, TDbStr DbStr) -> bool

        Parameters:
            DbStr: TDbStr const &

        """
        return _snap.TDbStr___lt__(self, *args)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TDbStr self) -> int

        Parameters:
            self: TDbStr const *

        """
        return _snap.TDbStr_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(TDbStr self) -> int

        Parameters:
            self: TDbStr const *

        """
        return _snap.TDbStr_GetSecHashCd(self)

    def Empty(self):
        """
        Empty(TDbStr self) -> bool

        Parameters:
            self: TDbStr const *

        """
        return _snap.TDbStr_Empty(self)

    def Filled(self):
        """
        Filled(TDbStr self) -> bool

        Parameters:
            self: TDbStr const *

        """
        return _snap.TDbStr_Filled(self)

    __swig_destroy__ = _snap.delete_TDbStr
TDbStr.Save = new_instancemethod(_snap.TDbStr_Save,None,TDbStr)
TDbStr.__eq__ = new_instancemethod(_snap.TDbStr___eq__,None,TDbStr)
TDbStr.__lt__ = new_instancemethod(_snap.TDbStr___lt__,None,TDbStr)
TDbStr.GetPrimHashCd = new_instancemethod(_snap.TDbStr_GetPrimHashCd,None,TDbStr)
TDbStr.GetSecHashCd = new_instancemethod(_snap.TDbStr_GetSecHashCd,None,TDbStr)
TDbStr.Empty = new_instancemethod(_snap.TDbStr_Empty,None,TDbStr)
TDbStr.Filled = new_instancemethod(_snap.TDbStr_Filled,None,TDbStr)
TDbStr_swigregister = _snap.TDbStr_swigregister
TDbStr_swigregister(TDbStr)

class TStrPool(object):
    """Proxy of C++ TStrPool class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TStrPool self, uint const & MxBfLen=0, uint const & _GrowBy=16*1024*1024) -> TStrPool

        Parameters:
            MxBfLen: uint const &
            _GrowBy: uint const &

        __init__(TStrPool self, uint const & MxBfLen=0) -> TStrPool

        Parameters:
            MxBfLen: uint const &

        __init__(TStrPool self) -> TStrPool
        __init__(TStrPool self, TSIn SIn, bool LoadCompact=True) -> TStrPool

        Parameters:
            SIn: TSIn &
            LoadCompact: bool

        __init__(TStrPool self, TSIn SIn) -> TStrPool

        Parameters:
            SIn: TSIn &

        __init__(TStrPool self, TStrPool Pool) -> TStrPool

        Parameters:
            Pool: TStrPool const &

        """
        _snap.TStrPool_swiginit(self,_snap.new_TStrPool(*args))
    __swig_destroy__ = _snap.delete_TStrPool
    def New(*args):
        """
        New(uint const & _MxBfLen=0, uint const & _GrowBy=16*1024*1024) -> PStrPool

        Parameters:
            _MxBfLen: uint const &
            _GrowBy: uint const &

        New(uint const & _MxBfLen=0) -> PStrPool

        Parameters:
            _MxBfLen: uint const &

        New() -> PStrPool
        New(TSIn SIn) -> PStrPool

        Parameters:
            SIn: TSIn &

        New(TStr fileName) -> PStrPool

        Parameters:
            fileName: TStr const &

        """
        return _snap.TStrPool_New(*args)

    New = staticmethod(New)
    def Load(*args):
        """
        Load(TSIn SIn, bool LoadCompacted=True) -> PStrPool

        Parameters:
            SIn: TSIn &
            LoadCompacted: bool

        Load(TSIn SIn) -> PStrPool

        Parameters:
            SIn: TSIn &

        """
        return _snap.TStrPool_Load(*args)

    Load = staticmethod(Load)
    def Save(self, *args):
        """
        Save(TStrPool self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        Save(TStrPool self, TStr FNm)

        Parameters:
            FNm: TStr const &

        """
        return _snap.TStrPool_Save(self, *args)

    def Len(self):
        """
        Len(TStrPool self) -> uint

        Parameters:
            self: TStrPool const *

        """
        return _snap.TStrPool_Len(self)

    def Size(self):
        """
        Size(TStrPool self) -> uint

        Parameters:
            self: TStrPool const *

        """
        return _snap.TStrPool_Size(self)

    def Empty(self):
        """
        Empty(TStrPool self) -> bool

        Parameters:
            self: TStrPool const *

        """
        return _snap.TStrPool_Empty(self)

    def __call__(self):
        """
        __call__(TStrPool self) -> char *

        Parameters:
            self: TStrPool const *

        """
        return _snap.TStrPool___call__(self)

    def AddStr(self, *args):
        """
        AddStr(TStrPool self, char const * Str, uint const & Len) -> uint

        Parameters:
            Str: char const *
            Len: uint const &

        AddStr(TStrPool self, char const * Str) -> uint

        Parameters:
            Str: char const *

        AddStr(TStrPool self, TStr Str) -> uint

        Parameters:
            Str: TStr const &

        """
        return _snap.TStrPool_AddStr(self, *args)

    def GetCStr(self, *args):
        """
        GetCStr(TStrPool self, uint const & Offset) -> char const *

        Parameters:
            Offset: uint const &

        """
        return _snap.TStrPool_GetCStr(self, *args)

    def Clr(self, DoDel=False):
        """
        Clr(TStrPool self, bool DoDel=False)

        Parameters:
            DoDel: bool

        Clr(TStrPool self)

        Parameters:
            self: TStrPool *

        """
        return _snap.TStrPool_Clr(self, DoDel)

    def Cmp(self, *args):
        """
        Cmp(TStrPool self, uint const & Offset, char const * Str) -> int

        Parameters:
            Offset: uint const &
            Str: char const *

        """
        return _snap.TStrPool_Cmp(self, *args)

    def GetPrimHashCd(self, *args):
        """
        GetPrimHashCd(TStrPool self, char const * CStr) -> int

        Parameters:
            CStr: char const *

        GetPrimHashCd(TStrPool self, uint const & Offset) -> int

        Parameters:
            Offset: uint const &

        """
        return _snap.TStrPool_GetPrimHashCd(self, *args)

    def GetSecHashCd(self, *args):
        """
        GetSecHashCd(TStrPool self, char const * CStr) -> int

        Parameters:
            CStr: char const *

        GetSecHashCd(TStrPool self, uint const & Offset) -> int

        Parameters:
            Offset: uint const &

        """
        return _snap.TStrPool_GetSecHashCd(self, *args)

TStrPool.Save = new_instancemethod(_snap.TStrPool_Save,None,TStrPool)
TStrPool.Len = new_instancemethod(_snap.TStrPool_Len,None,TStrPool)
TStrPool.Size = new_instancemethod(_snap.TStrPool_Size,None,TStrPool)
TStrPool.Empty = new_instancemethod(_snap.TStrPool_Empty,None,TStrPool)
TStrPool.__call__ = new_instancemethod(_snap.TStrPool___call__,None,TStrPool)
TStrPool.AddStr = new_instancemethod(_snap.TStrPool_AddStr,None,TStrPool)
TStrPool.GetCStr = new_instancemethod(_snap.TStrPool_GetCStr,None,TStrPool)
TStrPool.Clr = new_instancemethod(_snap.TStrPool_Clr,None,TStrPool)
TStrPool.Cmp = new_instancemethod(_snap.TStrPool_Cmp,None,TStrPool)
TStrPool.GetPrimHashCd = new_instancemethod(_snap.TStrPool_GetPrimHashCd,None,TStrPool)
TStrPool.GetSecHashCd = new_instancemethod(_snap.TStrPool_GetSecHashCd,None,TStrPool)
TStrPool_swigregister = _snap.TStrPool_swigregister
TStrPool_swigregister(TStrPool)

def TStrPool_New(*args):
  """
    New(uint const & _MxBfLen=0, uint const & _GrowBy=16*1024*1024) -> PStrPool

    Parameters:
        _MxBfLen: uint const &
        _GrowBy: uint const &

    New(uint const & _MxBfLen=0) -> PStrPool

    Parameters:
        _MxBfLen: uint const &

    New() -> PStrPool
    New(TSIn SIn) -> PStrPool

    Parameters:
        SIn: TSIn &

    TStrPool_New(TStr fileName) -> PStrPool

    Parameters:
        fileName: TStr const &

    """
  return _snap.TStrPool_New(*args)

def TStrPool_Load(*args):
  """
    Load(TSIn SIn, bool LoadCompacted=True) -> PStrPool

    Parameters:
        SIn: TSIn &
        LoadCompacted: bool

    TStrPool_Load(TSIn SIn) -> PStrPool

    Parameters:
        SIn: TSIn &

    """
  return _snap.TStrPool_Load(*args)

class TStrPool64(object):
    """Proxy of C++ TStrPool64 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TStrPool64 self, ::TSize _MxBfL=0, ::TSize _GrowBy=16*1024*1024) -> TStrPool64

        Parameters:
            _MxBfL: ::TSize
            _GrowBy: ::TSize

        __init__(TStrPool64 self, ::TSize _MxBfL=0) -> TStrPool64

        Parameters:
            _MxBfL: ::TSize

        __init__(TStrPool64 self) -> TStrPool64
        __init__(TStrPool64 self, TStrPool64 StrPool) -> TStrPool64

        Parameters:
            StrPool: TStrPool64 const &

        __init__(TStrPool64 self, TSIn SIn, bool LoadCompact=True) -> TStrPool64

        Parameters:
            SIn: TSIn &
            LoadCompact: bool

        __init__(TStrPool64 self, TSIn SIn) -> TStrPool64

        Parameters:
            SIn: TSIn &

        """
        _snap.TStrPool64_swiginit(self,_snap.new_TStrPool64(*args))
    __swig_destroy__ = _snap.delete_TStrPool64
    def Save(self, *args):
        """
        Save(TStrPool64 self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.TStrPool64_Save(self, *args)

    def New(MxBfL=0, GrowBy=16*1024*1024):
        """
        New(::TSize MxBfL=0, ::TSize GrowBy=16*1024*1024) -> PStrPool64

        Parameters:
            MxBfL: ::TSize
            GrowBy: ::TSize

        New(::TSize MxBfL=0) -> PStrPool64

        Parameters:
            MxBfL: ::TSize

        New() -> PStrPool64
        """
        return _snap.TStrPool64_New(MxBfL, GrowBy)

    New = staticmethod(New)
    def Load(*args):
        """
        Load(TSIn SIn, bool LoadCompact=True) -> PStrPool64

        Parameters:
            SIn: TSIn &
            LoadCompact: bool

        Load(TSIn SIn) -> PStrPool64

        Parameters:
            SIn: TSIn &

        """
        return _snap.TStrPool64_Load(*args)

    Load = staticmethod(Load)
    def GetMemUsed(self):
        """
        GetMemUsed(TStrPool64 self) -> uint64

        Parameters:
            self: TStrPool64 const *

        """
        return _snap.TStrPool64_GetMemUsed(self)

    def Empty(self):
        """
        Empty(TStrPool64 self) -> bool

        Parameters:
            self: TStrPool64 const *

        """
        return _snap.TStrPool64_Empty(self)

    def Len(self):
        """
        Len(TStrPool64 self) -> uint64

        Parameters:
            self: TStrPool64 const *

        """
        return _snap.TStrPool64_Len(self)

    def Reserved(self):
        """
        Reserved(TStrPool64 self) -> uint64

        Parameters:
            self: TStrPool64 const *

        """
        return _snap.TStrPool64_Reserved(self)

    def Clr(self, DoDel=False):
        """
        Clr(TStrPool64 self, bool DoDel=False)

        Parameters:
            DoDel: bool

        Clr(TStrPool64 self)

        Parameters:
            self: TStrPool64 *

        """
        return _snap.TStrPool64_Clr(self, DoDel)

    def Cmp(self, *args):
        """
        Cmp(TStrPool64 self, uint64 Offset, char const * Str) -> int

        Parameters:
            Offset: uint64
            Str: char const *

        """
        return _snap.TStrPool64_Cmp(self, *args)

    def AddStr(self, *args):
        """
        AddStr(TStrPool64 self, TStr Str) -> uint64

        Parameters:
            Str: TStr const &

        """
        return _snap.TStrPool64_AddStr(self, *args)

TStrPool64.Save = new_instancemethod(_snap.TStrPool64_Save,None,TStrPool64)
TStrPool64.GetMemUsed = new_instancemethod(_snap.TStrPool64_GetMemUsed,None,TStrPool64)
TStrPool64.Empty = new_instancemethod(_snap.TStrPool64_Empty,None,TStrPool64)
TStrPool64.Len = new_instancemethod(_snap.TStrPool64_Len,None,TStrPool64)
TStrPool64.Reserved = new_instancemethod(_snap.TStrPool64_Reserved,None,TStrPool64)
TStrPool64.Clr = new_instancemethod(_snap.TStrPool64_Clr,None,TStrPool64)
TStrPool64.Cmp = new_instancemethod(_snap.TStrPool64_Cmp,None,TStrPool64)
TStrPool64.AddStr = new_instancemethod(_snap.TStrPool64_AddStr,None,TStrPool64)
TStrPool64_swigregister = _snap.TStrPool64_swigregister
TStrPool64_swigregister(TStrPool64)

def TStrPool64_New(MxBfL=0, GrowBy=16*1024*1024):
  """
    New(::TSize MxBfL=0, ::TSize GrowBy=16*1024*1024) -> PStrPool64

    Parameters:
        MxBfL: ::TSize
        GrowBy: ::TSize

    New(::TSize MxBfL=0) -> PStrPool64

    Parameters:
        MxBfL: ::TSize

    TStrPool64_New() -> PStrPool64
    """
  return _snap.TStrPool64_New(MxBfL, GrowBy)

def TStrPool64_Load(*args):
  """
    Load(TSIn SIn, bool LoadCompact=True) -> PStrPool64

    Parameters:
        SIn: TSIn &
        LoadCompact: bool

    TStrPool64_Load(TSIn SIn) -> PStrPool64

    Parameters:
        SIn: TSIn &

    """
  return _snap.TStrPool64_Load(*args)

class TVoid(object):
    """Proxy of C++ TVoid class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TVoid self) -> TVoid
        __init__(TVoid self, TSIn arg2) -> TVoid

        Parameters:
            arg2: TSIn &

        """
        _snap.TVoid_swiginit(self,_snap.new_TVoid(*args))
    def Save(self, *args):
        """
        Save(TVoid self, TSOut arg2)

        Parameters:
            arg2: TSOut &

        """
        return _snap.TVoid_Save(self, *args)

    def __eq__(self, *args):
        """
        __eq__(TVoid self, TVoid arg2) -> bool

        Parameters:
            arg2: TVoid const &

        """
        return _snap.TVoid___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TVoid self, TVoid arg2) -> bool

        Parameters:
            arg2: TVoid const &

        """
        return _snap.TVoid___lt__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(TVoid self) -> int

        Parameters:
            self: TVoid const *

        """
        return _snap.TVoid_GetMemUsed(self)

    __swig_destroy__ = _snap.delete_TVoid
TVoid.Save = new_instancemethod(_snap.TVoid_Save,None,TVoid)
TVoid.__eq__ = new_instancemethod(_snap.TVoid___eq__,None,TVoid)
TVoid.__lt__ = new_instancemethod(_snap.TVoid___lt__,None,TVoid)
TVoid.GetMemUsed = new_instancemethod(_snap.TVoid_GetMemUsed,None,TVoid)
TVoid_swigregister = _snap.TVoid_swigregister
TVoid_swigregister(TVoid)

class TBool(object):
    """Proxy of C++ TBool class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = _swig_property(_snap.TBool_Val_get, _snap.TBool_Val_set)
    Rnd = _swig_property(_snap.TBool_Rnd_get, _snap.TBool_Rnd_set)
    def __nonzero__(self):
        return _snap.TBool___nonzero__(self)
    __bool__ = __nonzero__


    def __init__(self, *args): 
        """
        __init__(TBool self) -> TBool
        __init__(TBool self, bool const & _Val) -> TBool

        Parameters:
            _Val: bool const &

        __init__(TBool self, TSIn SIn) -> TBool

        Parameters:
            SIn: TSIn &

        """
        _snap.TBool_swiginit(self,_snap.new_TBool(*args))
    def Load(self, *args):
        """
        Load(TBool self, TSIn SIn)

        Parameters:
            SIn: TSIn &

        """
        return _snap.TBool_Load(self, *args)

    def Save(self, *args):
        """
        Save(TBool self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.TBool_Save(self, *args)

    def __eq__(self, *args):
        """
        __eq__(TBool self, TBool Bool) -> bool

        Parameters:
            Bool: TBool const &

        """
        return _snap.TBool___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TBool self, TBool Bool) -> bool

        Parameters:
            Bool: TBool const &

        """
        return _snap.TBool___lt__(self, *args)

    def __call__(self):
        """
        __call__(TBool self) -> bool

        Parameters:
            self: TBool const *

        """
        return _snap.TBool___call__(self)

    def GetMemUsed(self):
        """
        GetMemUsed(TBool self) -> int

        Parameters:
            self: TBool const *

        """
        return _snap.TBool_GetMemUsed(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TBool self) -> int

        Parameters:
            self: TBool const *

        """
        return _snap.TBool_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(TBool self) -> int

        Parameters:
            self: TBool const *

        """
        return _snap.TBool_GetSecHashCd(self)

    def GetRnd():
        """GetRnd() -> bool"""
        return _snap.TBool_GetRnd()

    GetRnd = staticmethod(GetRnd)
    def GetYNStr(*args):
        """
        GetYNStr(bool const & Val) -> TStr

        Parameters:
            Val: bool const &

        """
        return _snap.TBool_GetYNStr(*args)

    GetYNStr = staticmethod(GetYNStr)
    def GetYesNoStr(*args):
        """
        GetYesNoStr(bool const & Val) -> TStr

        Parameters:
            Val: bool const &

        """
        return _snap.TBool_GetYesNoStr(*args)

    GetYesNoStr = staticmethod(GetYesNoStr)
    def Get01Str(*args):
        """
        Get01Str(bool const & Val) -> TStr

        Parameters:
            Val: bool const &

        """
        return _snap.TBool_Get01Str(*args)

    Get01Str = staticmethod(Get01Str)
    def IsValStr(*args):
        """
        IsValStr(TStr Str) -> bool

        Parameters:
            Str: TStr const &

        """
        return _snap.TBool_IsValStr(*args)

    IsValStr = staticmethod(IsValStr)
    def GetValFromStr(*args):
        """
        GetValFromStr(TStr Str) -> bool

        Parameters:
            Str: TStr const &

        GetValFromStr(TStr Str, bool const & DfVal) -> bool

        Parameters:
            Str: TStr const &
            DfVal: bool const &

        """
        return _snap.TBool_GetValFromStr(*args)

    GetValFromStr = staticmethod(GetValFromStr)
    __swig_destroy__ = _snap.delete_TBool
TBool.Load = new_instancemethod(_snap.TBool_Load,None,TBool)
TBool.Save = new_instancemethod(_snap.TBool_Save,None,TBool)
TBool.__eq__ = new_instancemethod(_snap.TBool___eq__,None,TBool)
TBool.__lt__ = new_instancemethod(_snap.TBool___lt__,None,TBool)
TBool.__call__ = new_instancemethod(_snap.TBool___call__,None,TBool)
TBool.GetMemUsed = new_instancemethod(_snap.TBool_GetMemUsed,None,TBool)
TBool.GetPrimHashCd = new_instancemethod(_snap.TBool_GetPrimHashCd,None,TBool)
TBool.GetSecHashCd = new_instancemethod(_snap.TBool_GetSecHashCd,None,TBool)
TBool_swigregister = _snap.TBool_swigregister
TBool_swigregister(TBool)
TBool.Mn = _snap.cvar.TBool_Mn
TBool.Mx = _snap.cvar.TBool_Mx
TBool.Vals = _snap.cvar.TBool_Vals
TBool.FalseStr = _snap.cvar.TBool_FalseStr
TBool.TrueStr = _snap.cvar.TBool_TrueStr
TBool.NStr = _snap.cvar.TBool_NStr
TBool.YStr = _snap.cvar.TBool_YStr
TBool.NoStr = _snap.cvar.TBool_NoStr
TBool.YesStr = _snap.cvar.TBool_YesStr

def TBool_GetRnd():
  """TBool_GetRnd() -> bool"""
  return _snap.TBool_GetRnd()

def TBool_GetYNStr(*args):
  """
    TBool_GetYNStr(bool const & Val) -> TStr

    Parameters:
        Val: bool const &

    """
  return _snap.TBool_GetYNStr(*args)

def TBool_GetYesNoStr(*args):
  """
    TBool_GetYesNoStr(bool const & Val) -> TStr

    Parameters:
        Val: bool const &

    """
  return _snap.TBool_GetYesNoStr(*args)

def TBool_Get01Str(*args):
  """
    TBool_Get01Str(bool const & Val) -> TStr

    Parameters:
        Val: bool const &

    """
  return _snap.TBool_Get01Str(*args)

def TBool_IsValStr(*args):
  """
    TBool_IsValStr(TStr Str) -> bool

    Parameters:
        Str: TStr const &

    """
  return _snap.TBool_IsValStr(*args)

def TBool_GetValFromStr(*args):
  """
    GetValFromStr(TStr Str) -> bool

    Parameters:
        Str: TStr const &

    TBool_GetValFromStr(TStr Str, bool const & DfVal) -> bool

    Parameters:
        Str: TStr const &
        DfVal: bool const &

    """
  return _snap.TBool_GetValFromStr(*args)

class TCh(object):
    """Proxy of C++ TCh class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = _swig_property(_snap.TCh_Val_get, _snap.TCh_Val_set)
    def __init__(self, *args): 
        """
        __init__(TCh self) -> TCh
        __init__(TCh self, char const & _Val) -> TCh

        Parameters:
            _Val: char const &

        __init__(TCh self, TSIn SIn) -> TCh

        Parameters:
            SIn: TSIn &

        """
        _snap.TCh_swiginit(self,_snap.new_TCh(*args))
    def Save(self, *args):
        """
        Save(TCh self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.TCh_Save(self, *args)

    def __eq__(self, *args):
        """
        __eq__(TCh self, TCh Ch) -> bool

        Parameters:
            Ch: TCh const &

        """
        return _snap.TCh___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TCh self, TCh Ch) -> bool

        Parameters:
            Ch: TCh const &

        """
        return _snap.TCh___lt__(self, *args)

    def __call__(self):
        """
        __call__(TCh self) -> char

        Parameters:
            self: TCh const *

        """
        return _snap.TCh___call__(self)

    def GetMemUsed(self):
        """
        GetMemUsed(TCh self) -> int

        Parameters:
            self: TCh const *

        """
        return _snap.TCh_GetMemUsed(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TCh self) -> int

        Parameters:
            self: TCh const *

        """
        return _snap.TCh_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(TCh self) -> int

        Parameters:
            self: TCh const *

        """
        return _snap.TCh_GetSecHashCd(self)

    def IsWs(*args):
        """
        IsWs(char const & Ch) -> bool

        Parameters:
            Ch: char const &

        """
        return _snap.TCh_IsWs(*args)

    IsWs = staticmethod(IsWs)
    def IsAlpha(*args):
        """
        IsAlpha(char const & Ch) -> bool

        Parameters:
            Ch: char const &

        """
        return _snap.TCh_IsAlpha(*args)

    IsAlpha = staticmethod(IsAlpha)
    def IsNum(*args):
        """
        IsNum(char const & Ch) -> bool

        Parameters:
            Ch: char const &

        """
        return _snap.TCh_IsNum(*args)

    IsNum = staticmethod(IsNum)
    def IsAlNum(*args):
        """
        IsAlNum(char const & Ch) -> bool

        Parameters:
            Ch: char const &

        """
        return _snap.TCh_IsAlNum(*args)

    IsAlNum = staticmethod(IsAlNum)
    def GetNum(*args):
        """
        GetNum(char const & Ch) -> int

        Parameters:
            Ch: char const &

        """
        return _snap.TCh_GetNum(*args)

    GetNum = staticmethod(GetNum)
    def IsHex(*args):
        """
        IsHex(char const & Ch) -> bool

        Parameters:
            Ch: char const &

        """
        return _snap.TCh_IsHex(*args)

    IsHex = staticmethod(IsHex)
    def GetHex(*args):
        """
        GetHex(char const & Ch) -> int

        Parameters:
            Ch: char const &

        """
        return _snap.TCh_GetHex(*args)

    GetHex = staticmethod(GetHex)
    def GetHexCh(*args):
        """
        GetHexCh(int const & Val) -> char

        Parameters:
            Val: int const &

        """
        return _snap.TCh_GetHexCh(*args)

    GetHexCh = staticmethod(GetHexCh)
    def IsUc(*args):
        """
        IsUc(char const & Ch) -> char

        Parameters:
            Ch: char const &

        """
        return _snap.TCh_IsUc(*args)

    IsUc = staticmethod(IsUc)
    def GetUc(*args):
        """
        GetUc(char const & Ch) -> char

        Parameters:
            Ch: char const &

        """
        return _snap.TCh_GetUc(*args)

    GetUc = staticmethod(GetUc)
    def GetUsFromYuAscii(*args):
        """
        GetUsFromYuAscii(char const & Ch) -> char

        Parameters:
            Ch: char const &

        """
        return _snap.TCh_GetUsFromYuAscii(*args)

    GetUsFromYuAscii = staticmethod(GetUsFromYuAscii)
    __swig_destroy__ = _snap.delete_TCh
TCh.Save = new_instancemethod(_snap.TCh_Save,None,TCh)
TCh.__eq__ = new_instancemethod(_snap.TCh___eq__,None,TCh)
TCh.__lt__ = new_instancemethod(_snap.TCh___lt__,None,TCh)
TCh.__call__ = new_instancemethod(_snap.TCh___call__,None,TCh)
TCh.GetMemUsed = new_instancemethod(_snap.TCh_GetMemUsed,None,TCh)
TCh.GetPrimHashCd = new_instancemethod(_snap.TCh_GetPrimHashCd,None,TCh)
TCh.GetSecHashCd = new_instancemethod(_snap.TCh_GetSecHashCd,None,TCh)
TCh_swigregister = _snap.TCh_swigregister
TCh_swigregister(TCh)
TCh.Mn = _snap.cvar.TCh_Mn
TCh.Mx = _snap.cvar.TCh_Mx
TCh.Vals = _snap.cvar.TCh_Vals
TCh.NullCh = _snap.cvar.TCh_NullCh
TCh.TabCh = _snap.cvar.TCh_TabCh
TCh.LfCh = _snap.cvar.TCh_LfCh
TCh.CrCh = _snap.cvar.TCh_CrCh
TCh.EofCh = _snap.cvar.TCh_EofCh
TCh.HashCh = _snap.cvar.TCh_HashCh

def TCh_IsWs(*args):
  """
    TCh_IsWs(char const & Ch) -> bool

    Parameters:
        Ch: char const &

    """
  return _snap.TCh_IsWs(*args)

def TCh_IsAlpha(*args):
  """
    TCh_IsAlpha(char const & Ch) -> bool

    Parameters:
        Ch: char const &

    """
  return _snap.TCh_IsAlpha(*args)

def TCh_IsNum(*args):
  """
    TCh_IsNum(char const & Ch) -> bool

    Parameters:
        Ch: char const &

    """
  return _snap.TCh_IsNum(*args)

def TCh_IsAlNum(*args):
  """
    TCh_IsAlNum(char const & Ch) -> bool

    Parameters:
        Ch: char const &

    """
  return _snap.TCh_IsAlNum(*args)

def TCh_GetNum(*args):
  """
    TCh_GetNum(char const & Ch) -> int

    Parameters:
        Ch: char const &

    """
  return _snap.TCh_GetNum(*args)

def TCh_IsHex(*args):
  """
    TCh_IsHex(char const & Ch) -> bool

    Parameters:
        Ch: char const &

    """
  return _snap.TCh_IsHex(*args)

def TCh_GetHex(*args):
  """
    TCh_GetHex(char const & Ch) -> int

    Parameters:
        Ch: char const &

    """
  return _snap.TCh_GetHex(*args)

def TCh_GetHexCh(*args):
  """
    TCh_GetHexCh(int const & Val) -> char

    Parameters:
        Val: int const &

    """
  return _snap.TCh_GetHexCh(*args)

def TCh_IsUc(*args):
  """
    TCh_IsUc(char const & Ch) -> char

    Parameters:
        Ch: char const &

    """
  return _snap.TCh_IsUc(*args)

def TCh_GetUc(*args):
  """
    TCh_GetUc(char const & Ch) -> char

    Parameters:
        Ch: char const &

    """
  return _snap.TCh_GetUc(*args)

def TCh_GetUsFromYuAscii(*args):
  """
    TCh_GetUsFromYuAscii(char const & Ch) -> char

    Parameters:
        Ch: char const &

    """
  return _snap.TCh_GetUsFromYuAscii(*args)

class TUCh(object):
    """Proxy of C++ TUCh class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = _swig_property(_snap.TUCh_Val_get, _snap.TUCh_Val_set)
    def __init__(self, *args): 
        """
        __init__(TUCh self) -> TUCh
        __init__(TUCh self, uchar const & _Val) -> TUCh

        Parameters:
            _Val: uchar const &

        __init__(TUCh self, TSIn SIn) -> TUCh

        Parameters:
            SIn: TSIn &

        """
        _snap.TUCh_swiginit(self,_snap.new_TUCh(*args))
    def Save(self, *args):
        """
        Save(TUCh self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.TUCh_Save(self, *args)

    def __eq__(self, *args):
        """
        __eq__(TUCh self, TUCh UCh) -> bool

        Parameters:
            UCh: TUCh const &

        """
        return _snap.TUCh___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TUCh self, TUCh UCh) -> bool

        Parameters:
            UCh: TUCh const &

        """
        return _snap.TUCh___lt__(self, *args)

    def __call__(self):
        """
        __call__(TUCh self) -> uchar

        Parameters:
            self: TUCh const *

        """
        return _snap.TUCh___call__(self)

    def GetMemUsed(self):
        """
        GetMemUsed(TUCh self) -> int

        Parameters:
            self: TUCh const *

        """
        return _snap.TUCh_GetMemUsed(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TUCh self) -> int

        Parameters:
            self: TUCh const *

        """
        return _snap.TUCh_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(TUCh self) -> int

        Parameters:
            self: TUCh const *

        """
        return _snap.TUCh_GetSecHashCd(self)

    __swig_destroy__ = _snap.delete_TUCh
TUCh.Save = new_instancemethod(_snap.TUCh_Save,None,TUCh)
TUCh.__eq__ = new_instancemethod(_snap.TUCh___eq__,None,TUCh)
TUCh.__lt__ = new_instancemethod(_snap.TUCh___lt__,None,TUCh)
TUCh.__call__ = new_instancemethod(_snap.TUCh___call__,None,TUCh)
TUCh.GetMemUsed = new_instancemethod(_snap.TUCh_GetMemUsed,None,TUCh)
TUCh.GetPrimHashCd = new_instancemethod(_snap.TUCh_GetPrimHashCd,None,TUCh)
TUCh.GetSecHashCd = new_instancemethod(_snap.TUCh_GetSecHashCd,None,TUCh)
TUCh_swigregister = _snap.TUCh_swigregister
TUCh_swigregister(TUCh)
TUCh.Mn = _snap.cvar.TUCh_Mn
TUCh.Mx = _snap.cvar.TUCh_Mx
TUCh.Vals = _snap.cvar.TUCh_Vals

class TSInt(object):
    """Proxy of C++ TSInt class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = _swig_property(_snap.TSInt_Val_get, _snap.TSInt_Val_set)
    def __init__(self, *args): 
        """
        __init__(TSInt self) -> TSInt
        __init__(TSInt self, int16 const & _Val) -> TSInt

        Parameters:
            _Val: int16 const &

        __init__(TSInt self, TSIn SIn) -> TSInt

        Parameters:
            SIn: TSIn &

        """
        _snap.TSInt_swiginit(self,_snap.new_TSInt(*args))
    def Load(self, *args):
        """
        Load(TSInt self, TSIn SIn)

        Parameters:
            SIn: TSIn &

        """
        return _snap.TSInt_Load(self, *args)

    def Save(self, *args):
        """
        Save(TSInt self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.TSInt_Save(self, *args)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TSInt self) -> int

        Parameters:
            self: TSInt const *

        """
        return _snap.TSInt_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(TSInt self) -> int

        Parameters:
            self: TSInt const *

        """
        return _snap.TSInt_GetSecHashCd(self)

    __swig_destroy__ = _snap.delete_TSInt
TSInt.Load = new_instancemethod(_snap.TSInt_Load,None,TSInt)
TSInt.Save = new_instancemethod(_snap.TSInt_Save,None,TSInt)
TSInt.GetPrimHashCd = new_instancemethod(_snap.TSInt_GetPrimHashCd,None,TSInt)
TSInt.GetSecHashCd = new_instancemethod(_snap.TSInt_GetSecHashCd,None,TSInt)
TSInt_swigregister = _snap.TSInt_swigregister
TSInt_swigregister(TSInt)

class TInt(object):
    """Proxy of C++ TInt class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = _swig_property(_snap.TInt_Val_get, _snap.TInt_Val_set)
    Rnd = _swig_property(_snap.TInt_Rnd_get, _snap.TInt_Rnd_set)
    def __init__(self, *args): 
        """
        __init__(TInt self) -> TInt
        __init__(TInt self, int const & _Val) -> TInt

        Parameters:
            _Val: int const &

        __init__(TInt self, TSIn SIn) -> TInt

        Parameters:
            SIn: TSIn &

        """
        _snap.TInt_swiginit(self,_snap.new_TInt(*args))
    def Load(self, *args):
        """
        Load(TInt self, TSIn SIn)

        Parameters:
            SIn: TSIn &

        """
        return _snap.TInt_Load(self, *args)

    def Save(self, *args):
        """
        Save(TInt self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.TInt_Save(self, *args)

    def __eq__(self, *args):
        """
        __eq__(TInt self, TInt Int) -> bool

        Parameters:
            Int: TInt const &

        __eq__(TInt self, int const & Int) -> bool

        Parameters:
            Int: int const &

        """
        return _snap.TInt___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(TInt self, int const & Int) -> bool

        Parameters:
            Int: int const &

        """
        return _snap.TInt___ne__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TInt self, TInt Int) -> bool

        Parameters:
            Int: TInt const &

        __lt__(TInt self, int const & Int) -> bool

        Parameters:
            Int: int const &

        """
        return _snap.TInt___lt__(self, *args)

    def __call__(self):
        """
        __call__(TInt self) -> int

        Parameters:
            self: TInt const *

        """
        return _snap.TInt___call__(self)

    def __iadd__(self, *args):
        """
        __iadd__(TInt self, int const & Int) -> TInt

        Parameters:
            Int: int const &

        """
        return _snap.TInt___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(TInt self, int const & Int) -> TInt

        Parameters:
            Int: int const &

        """
        return _snap.TInt___isub__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(TInt self) -> int

        Parameters:
            self: TInt const *

        """
        return _snap.TInt_GetMemUsed(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TInt self) -> int

        Parameters:
            self: TInt const *

        """
        return _snap.TInt_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(TInt self) -> int

        Parameters:
            self: TInt const *

        """
        return _snap.TInt_GetSecHashCd(self)

    def Abs(*args):
        """
        Abs(int const & Int) -> int

        Parameters:
            Int: int const &

        """
        return _snap.TInt_Abs(*args)

    Abs = staticmethod(Abs)
    def Sign(*args):
        """
        Sign(int const & Int) -> int

        Parameters:
            Int: int const &

        """
        return _snap.TInt_Sign(*args)

    Sign = staticmethod(Sign)
    def Swap(*args):
        """
        Swap(int & Int1, int & Int2)

        Parameters:
            Int1: int &
            Int2: int &

        """
        return _snap.TInt_Swap(*args)

    Swap = staticmethod(Swap)
    def GetRnd(Range=0):
        """
        GetRnd(int const & Range=0) -> int

        Parameters:
            Range: int const &

        GetRnd() -> int
        """
        return _snap.TInt_GetRnd(Range)

    GetRnd = staticmethod(GetRnd)
    def IsOdd(*args):
        """
        IsOdd(int const & Int) -> bool

        Parameters:
            Int: int const &

        """
        return _snap.TInt_IsOdd(*args)

    IsOdd = staticmethod(IsOdd)
    def IsEven(*args):
        """
        IsEven(int const & Int) -> bool

        Parameters:
            Int: int const &

        """
        return _snap.TInt_IsEven(*args)

    IsEven = staticmethod(IsEven)
    def GetMn(*args):
        """
        GetMn(int const & Int1, int const & Int2) -> int

        Parameters:
            Int1: int const &
            Int2: int const &

        GetMn(int const & Int1, int const & Int2, int const & Int3) -> int

        Parameters:
            Int1: int const &
            Int2: int const &
            Int3: int const &

        GetMn(int const & Int1, int const & Int2, int const & Int3, int const & Int4) -> int

        Parameters:
            Int1: int const &
            Int2: int const &
            Int3: int const &
            Int4: int const &

        """
        return _snap.TInt_GetMn(*args)

    GetMn = staticmethod(GetMn)
    def GetMx(*args):
        """
        GetMx(int const & Int1, int const & Int2) -> int

        Parameters:
            Int1: int const &
            Int2: int const &

        GetMx(int const & Int1, int const & Int2, int const & Int3) -> int

        Parameters:
            Int1: int const &
            Int2: int const &
            Int3: int const &

        GetMx(int const & Int1, int const & Int2, int const & Int3, int const & Int4) -> int

        Parameters:
            Int1: int const &
            Int2: int const &
            Int3: int const &
            Int4: int const &

        """
        return _snap.TInt_GetMx(*args)

    GetMx = staticmethod(GetMx)
    def GetInRng(*args):
        """
        GetInRng(int const & Val, int const & Mn, int const & Mx) -> int

        Parameters:
            Val: int const &
            Mn: int const &
            Mx: int const &

        """
        return _snap.TInt_GetInRng(*args)

    GetInRng = staticmethod(GetInRng)
    def GetHexStr(*args):
        """
        GetHexStr(int const & Val) -> TStr

        Parameters:
            Val: int const &

        GetHexStr(TInt Int) -> TStr

        Parameters:
            Int: TInt const &

        """
        return _snap.TInt_GetHexStr(*args)

    GetHexStr = staticmethod(GetHexStr)
    def GetKiloStr(*args):
        """
        GetKiloStr(int const & Val) -> TStr

        Parameters:
            Val: int const &

        """
        return _snap.TInt_GetKiloStr(*args)

    GetKiloStr = staticmethod(GetKiloStr)
    def GetMegaStr(*args):
        """
        GetMegaStr(int const & Val) -> TStr

        Parameters:
            Val: int const &

        """
        return _snap.TInt_GetMegaStr(*args)

    GetMegaStr = staticmethod(GetMegaStr)
    def SaveFrugalInt(*args):
        """
        SaveFrugalInt(char * pDest, int i) -> char *

        Parameters:
            pDest: char *
            i: int

        """
        return _snap.TInt_SaveFrugalInt(*args)

    SaveFrugalInt = staticmethod(SaveFrugalInt)
    def LoadFrugalInt(*args):
        """
        LoadFrugalInt(char * pSrc, int & i) -> char *

        Parameters:
            pSrc: char *
            i: int &

        """
        return _snap.TInt_LoadFrugalInt(*args)

    LoadFrugalInt = staticmethod(LoadFrugalInt)
    def TestFrugalInt():
        """TestFrugalInt()"""
        return _snap.TInt_TestFrugalInt()

    TestFrugalInt = staticmethod(TestFrugalInt)
    def SaveFrugalIntV(*args):
        """
        SaveFrugalIntV(TSOut SOut, TIntV IntV)

        Parameters:
            SOut: TSOut &
            IntV: TVec< TInt,int > const &

        """
        return _snap.TInt_SaveFrugalIntV(*args)

    SaveFrugalIntV = staticmethod(SaveFrugalIntV)
    def LoadFrugalIntV(*args):
        """
        LoadFrugalIntV(TSIn SIn, TIntV IntV, bool ClrP=True)

        Parameters:
            SIn: TSIn &
            IntV: TVec< TInt,int > &
            ClrP: bool

        LoadFrugalIntV(TSIn SIn, TIntV IntV)

        Parameters:
            SIn: TSIn &
            IntV: TVec< TInt,int > &

        """
        return _snap.TInt_LoadFrugalIntV(*args)

    LoadFrugalIntV = staticmethod(LoadFrugalIntV)
    __swig_destroy__ = _snap.delete_TInt
TInt.Load = new_instancemethod(_snap.TInt_Load,None,TInt)
TInt.Save = new_instancemethod(_snap.TInt_Save,None,TInt)
TInt.__eq__ = new_instancemethod(_snap.TInt___eq__,None,TInt)
TInt.__ne__ = new_instancemethod(_snap.TInt___ne__,None,TInt)
TInt.__lt__ = new_instancemethod(_snap.TInt___lt__,None,TInt)
TInt.__call__ = new_instancemethod(_snap.TInt___call__,None,TInt)
TInt.__iadd__ = new_instancemethod(_snap.TInt___iadd__,None,TInt)
TInt.__isub__ = new_instancemethod(_snap.TInt___isub__,None,TInt)
TInt.GetMemUsed = new_instancemethod(_snap.TInt_GetMemUsed,None,TInt)
TInt.GetPrimHashCd = new_instancemethod(_snap.TInt_GetPrimHashCd,None,TInt)
TInt.GetSecHashCd = new_instancemethod(_snap.TInt_GetSecHashCd,None,TInt)
TInt_swigregister = _snap.TInt_swigregister
TInt_swigregister(TInt)
TInt.Mn = _snap.cvar.TInt_Mn
TInt.Mx = _snap.cvar.TInt_Mx
TInt.Kilo = _snap.cvar.TInt_Kilo
TInt.Mega = _snap.cvar.TInt_Mega
TInt.Giga = _snap.cvar.TInt_Giga

def TInt_Abs(*args):
  """
    TInt_Abs(int const & Int) -> int

    Parameters:
        Int: int const &

    """
  return _snap.TInt_Abs(*args)

def TInt_Sign(*args):
  """
    TInt_Sign(int const & Int) -> int

    Parameters:
        Int: int const &

    """
  return _snap.TInt_Sign(*args)

def TInt_Swap(*args):
  """
    TInt_Swap(int & Int1, int & Int2)

    Parameters:
        Int1: int &
        Int2: int &

    """
  return _snap.TInt_Swap(*args)

def TInt_GetRnd(Range=0):
  """
    GetRnd(int const & Range=0) -> int

    Parameters:
        Range: int const &

    TInt_GetRnd() -> int
    """
  return _snap.TInt_GetRnd(Range)

def TInt_IsOdd(*args):
  """
    TInt_IsOdd(int const & Int) -> bool

    Parameters:
        Int: int const &

    """
  return _snap.TInt_IsOdd(*args)

def TInt_IsEven(*args):
  """
    TInt_IsEven(int const & Int) -> bool

    Parameters:
        Int: int const &

    """
  return _snap.TInt_IsEven(*args)

def TInt_GetMn(*args):
  """
    GetMn(int const & Int1, int const & Int2) -> int

    Parameters:
        Int1: int const &
        Int2: int const &

    GetMn(int const & Int1, int const & Int2, int const & Int3) -> int

    Parameters:
        Int1: int const &
        Int2: int const &
        Int3: int const &

    TInt_GetMn(int const & Int1, int const & Int2, int const & Int3, int const & Int4) -> int

    Parameters:
        Int1: int const &
        Int2: int const &
        Int3: int const &
        Int4: int const &

    """
  return _snap.TInt_GetMn(*args)

def TInt_GetMx(*args):
  """
    GetMx(int const & Int1, int const & Int2) -> int

    Parameters:
        Int1: int const &
        Int2: int const &

    GetMx(int const & Int1, int const & Int2, int const & Int3) -> int

    Parameters:
        Int1: int const &
        Int2: int const &
        Int3: int const &

    TInt_GetMx(int const & Int1, int const & Int2, int const & Int3, int const & Int4) -> int

    Parameters:
        Int1: int const &
        Int2: int const &
        Int3: int const &
        Int4: int const &

    """
  return _snap.TInt_GetMx(*args)

def TInt_GetInRng(*args):
  """
    TInt_GetInRng(int const & Val, int const & Mn, int const & Mx) -> int

    Parameters:
        Val: int const &
        Mn: int const &
        Mx: int const &

    """
  return _snap.TInt_GetInRng(*args)

def TInt_GetHexStr(*args):
  """
    GetHexStr(int const & Val) -> TStr

    Parameters:
        Val: int const &

    TInt_GetHexStr(TInt Int) -> TStr

    Parameters:
        Int: TInt const &

    """
  return _snap.TInt_GetHexStr(*args)

def TInt_GetKiloStr(*args):
  """
    TInt_GetKiloStr(int const & Val) -> TStr

    Parameters:
        Val: int const &

    """
  return _snap.TInt_GetKiloStr(*args)

def TInt_GetMegaStr(*args):
  """
    TInt_GetMegaStr(int const & Val) -> TStr

    Parameters:
        Val: int const &

    """
  return _snap.TInt_GetMegaStr(*args)

def TInt_SaveFrugalInt(*args):
  """
    TInt_SaveFrugalInt(char * pDest, int i) -> char *

    Parameters:
        pDest: char *
        i: int

    """
  return _snap.TInt_SaveFrugalInt(*args)

def TInt_LoadFrugalInt(*args):
  """
    TInt_LoadFrugalInt(char * pSrc, int & i) -> char *

    Parameters:
        pSrc: char *
        i: int &

    """
  return _snap.TInt_LoadFrugalInt(*args)

def TInt_TestFrugalInt():
  """TInt_TestFrugalInt()"""
  return _snap.TInt_TestFrugalInt()

def TInt_SaveFrugalIntV(*args):
  """
    TInt_SaveFrugalIntV(TSOut SOut, TIntV IntV)

    Parameters:
        SOut: TSOut &
        IntV: TVec< TInt,int > const &

    """
  return _snap.TInt_SaveFrugalIntV(*args)

def TInt_LoadFrugalIntV(*args):
  """
    LoadFrugalIntV(TSIn SIn, TIntV IntV, bool ClrP=True)

    Parameters:
        SIn: TSIn &
        IntV: TVec< TInt,int > &
        ClrP: bool

    TInt_LoadFrugalIntV(TSIn SIn, TIntV IntV)

    Parameters:
        SIn: TSIn &
        IntV: TVec< TInt,int > &

    """
  return _snap.TInt_LoadFrugalIntV(*args)

class TUInt(object):
    """Proxy of C++ TUInt class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = _swig_property(_snap.TUInt_Val_get, _snap.TUInt_Val_set)
    Rnd = _swig_property(_snap.TUInt_Rnd_get, _snap.TUInt_Rnd_set)
    def __init__(self, *args): 
        """
        __init__(TUInt self) -> TUInt
        __init__(TUInt self, uint const & _Val) -> TUInt

        Parameters:
            _Val: uint const &

        __init__(TUInt self, TSIn SIn) -> TUInt

        Parameters:
            SIn: TSIn &

        """
        _snap.TUInt_swiginit(self,_snap.new_TUInt(*args))
    def Load(self, *args):
        """
        Load(TUInt self, TSIn SIn)

        Parameters:
            SIn: TSIn &

        """
        return _snap.TUInt_Load(self, *args)

    def Save(self, *args):
        """
        Save(TUInt self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.TUInt_Save(self, *args)

    def __call__(self, *args):
        """
        __call__(TUInt self) -> uint
        __call__(TUInt self) -> uint &

        Parameters:
            self: TUInt *

        """
        return _snap.TUInt___call__(self, *args)

    def __invert__(self):
        """
        __invert__(TUInt self) -> TUInt

        Parameters:
            self: TUInt *

        """
        return _snap.TUInt___invert__(self)

    def __iand__(self, *args):
        """
        __iand__(TUInt self, TUInt UInt) -> TUInt

        Parameters:
            UInt: TUInt const &

        """
        return _snap.TUInt___iand__(self, *args)

    def __ior__(self, *args):
        """
        __ior__(TUInt self, TUInt UInt) -> TUInt

        Parameters:
            UInt: TUInt const &

        """
        return _snap.TUInt___ior__(self, *args)

    def __ixor__(self, *args):
        """
        __ixor__(TUInt self, TUInt UInt) -> TUInt

        Parameters:
            UInt: TUInt const &

        """
        return _snap.TUInt___ixor__(self, *args)

    def __irshift__(self, *args):
        """
        __irshift__(TUInt self, int const & ShiftBits) -> TUInt

        Parameters:
            ShiftBits: int const &

        """
        return _snap.TUInt___irshift__(self, *args)

    def __ilshift__(self, *args):
        """
        __ilshift__(TUInt self, int const & ShiftBits) -> TUInt

        Parameters:
            ShiftBits: int const &

        """
        return _snap.TUInt___ilshift__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(TUInt self) -> int

        Parameters:
            self: TUInt const *

        """
        return _snap.TUInt_GetMemUsed(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TUInt self) -> int

        Parameters:
            self: TUInt const *

        """
        return _snap.TUInt_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(TUInt self) -> int

        Parameters:
            self: TUInt const *

        """
        return _snap.TUInt_GetSecHashCd(self)

    def GetRnd(Range=0):
        """
        GetRnd(uint const & Range=0) -> uint

        Parameters:
            Range: uint const &

        GetRnd() -> uint
        """
        return _snap.TUInt_GetRnd(Range)

    GetRnd = staticmethod(GetRnd)
    def GetKiloStr(*args):
        """
        GetKiloStr(uint const & Val) -> TStr

        Parameters:
            Val: uint const &

        """
        return _snap.TUInt_GetKiloStr(*args)

    GetKiloStr = staticmethod(GetKiloStr)
    def GetMegaStr(*args):
        """
        GetMegaStr(uint const & Val) -> TStr

        Parameters:
            Val: uint const &

        """
        return _snap.TUInt_GetMegaStr(*args)

    GetMegaStr = staticmethod(GetMegaStr)
    def JavaUIntToCppUInt(*args):
        """
        JavaUIntToCppUInt(uint const & JavaUInt) -> uint

        Parameters:
            JavaUInt: uint const &

        """
        return _snap.TUInt_JavaUIntToCppUInt(*args)

    JavaUIntToCppUInt = staticmethod(JavaUIntToCppUInt)
    def IsIpStr(*args):
        """
        IsIpStr(TStr IpStr, uint & Ip, char const & SplitCh='.') -> bool

        Parameters:
            IpStr: TStr const &
            Ip: uint &
            SplitCh: char const &

        IsIpStr(TStr IpStr, uint & Ip) -> bool

        Parameters:
            IpStr: TStr const &
            Ip: uint &

        IsIpStr(TStr IpStr, char const & SplitCh='.') -> bool

        Parameters:
            IpStr: TStr const &
            SplitCh: char const &

        IsIpStr(TStr IpStr) -> bool

        Parameters:
            IpStr: TStr const &

        """
        return _snap.TUInt_IsIpStr(*args)

    IsIpStr = staticmethod(IsIpStr)
    def GetUIntFromIpStr(*args):
        """
        GetUIntFromIpStr(TStr IpStr, char const & SplitCh='.') -> uint

        Parameters:
            IpStr: TStr const &
            SplitCh: char const &

        GetUIntFromIpStr(TStr IpStr) -> uint

        Parameters:
            IpStr: TStr const &

        """
        return _snap.TUInt_GetUIntFromIpStr(*args)

    GetUIntFromIpStr = staticmethod(GetUIntFromIpStr)
    def GetStrFromIpUInt(*args):
        """
        GetStrFromIpUInt(uint const & Ip) -> TStr

        Parameters:
            Ip: uint const &

        """
        return _snap.TUInt_GetStrFromIpUInt(*args)

    GetStrFromIpUInt = staticmethod(GetStrFromIpUInt)
    def IsIpv6Str(*args):
        """
        IsIpv6Str(TStr IpStr, char const & SplitCh=':') -> bool

        Parameters:
            IpStr: TStr const &
            SplitCh: char const &

        IsIpv6Str(TStr IpStr) -> bool

        Parameters:
            IpStr: TStr const &

        """
        return _snap.TUInt_IsIpv6Str(*args)

    IsIpv6Str = staticmethod(IsIpv6Str)
    __swig_destroy__ = _snap.delete_TUInt
TUInt.Load = new_instancemethod(_snap.TUInt_Load,None,TUInt)
TUInt.Save = new_instancemethod(_snap.TUInt_Save,None,TUInt)
TUInt.__call__ = new_instancemethod(_snap.TUInt___call__,None,TUInt)
TUInt.__invert__ = new_instancemethod(_snap.TUInt___invert__,None,TUInt)
TUInt.__iand__ = new_instancemethod(_snap.TUInt___iand__,None,TUInt)
TUInt.__ior__ = new_instancemethod(_snap.TUInt___ior__,None,TUInt)
TUInt.__ixor__ = new_instancemethod(_snap.TUInt___ixor__,None,TUInt)
TUInt.__irshift__ = new_instancemethod(_snap.TUInt___irshift__,None,TUInt)
TUInt.__ilshift__ = new_instancemethod(_snap.TUInt___ilshift__,None,TUInt)
TUInt.GetMemUsed = new_instancemethod(_snap.TUInt_GetMemUsed,None,TUInt)
TUInt.GetPrimHashCd = new_instancemethod(_snap.TUInt_GetPrimHashCd,None,TUInt)
TUInt.GetSecHashCd = new_instancemethod(_snap.TUInt_GetSecHashCd,None,TUInt)
TUInt_swigregister = _snap.TUInt_swigregister
TUInt_swigregister(TUInt)
TUInt.Mn = _snap.cvar.TUInt_Mn
TUInt.Mx = _snap.cvar.TUInt_Mx

def TUInt_GetRnd(Range=0):
  """
    GetRnd(uint const & Range=0) -> uint

    Parameters:
        Range: uint const &

    TUInt_GetRnd() -> uint
    """
  return _snap.TUInt_GetRnd(Range)

def TUInt_GetKiloStr(*args):
  """
    TUInt_GetKiloStr(uint const & Val) -> TStr

    Parameters:
        Val: uint const &

    """
  return _snap.TUInt_GetKiloStr(*args)

def TUInt_GetMegaStr(*args):
  """
    TUInt_GetMegaStr(uint const & Val) -> TStr

    Parameters:
        Val: uint const &

    """
  return _snap.TUInt_GetMegaStr(*args)

def TUInt_JavaUIntToCppUInt(*args):
  """
    TUInt_JavaUIntToCppUInt(uint const & JavaUInt) -> uint

    Parameters:
        JavaUInt: uint const &

    """
  return _snap.TUInt_JavaUIntToCppUInt(*args)

def TUInt_IsIpStr(*args):
  """
    IsIpStr(TStr IpStr, uint & Ip, char const & SplitCh='.') -> bool

    Parameters:
        IpStr: TStr const &
        Ip: uint &
        SplitCh: char const &

    IsIpStr(TStr IpStr, uint & Ip) -> bool

    Parameters:
        IpStr: TStr const &
        Ip: uint &

    IsIpStr(TStr IpStr, char const & SplitCh='.') -> bool

    Parameters:
        IpStr: TStr const &
        SplitCh: char const &

    TUInt_IsIpStr(TStr IpStr) -> bool

    Parameters:
        IpStr: TStr const &

    """
  return _snap.TUInt_IsIpStr(*args)

def TUInt_GetUIntFromIpStr(*args):
  """
    GetUIntFromIpStr(TStr IpStr, char const & SplitCh='.') -> uint

    Parameters:
        IpStr: TStr const &
        SplitCh: char const &

    TUInt_GetUIntFromIpStr(TStr IpStr) -> uint

    Parameters:
        IpStr: TStr const &

    """
  return _snap.TUInt_GetUIntFromIpStr(*args)

def TUInt_GetStrFromIpUInt(*args):
  """
    TUInt_GetStrFromIpUInt(uint const & Ip) -> TStr

    Parameters:
        Ip: uint const &

    """
  return _snap.TUInt_GetStrFromIpUInt(*args)

def TUInt_IsIpv6Str(*args):
  """
    IsIpv6Str(TStr IpStr, char const & SplitCh=':') -> bool

    Parameters:
        IpStr: TStr const &
        SplitCh: char const &

    TUInt_IsIpv6Str(TStr IpStr) -> bool

    Parameters:
        IpStr: TStr const &

    """
  return _snap.TUInt_IsIpv6Str(*args)

class TUInt64(object):
    """Proxy of C++ TUInt64 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = _swig_property(_snap.TUInt64_Val_get, _snap.TUInt64_Val_set)
    def __init__(self, *args): 
        """
        __init__(TUInt64 self) -> TUInt64
        __init__(TUInt64 self, TUInt64 Int) -> TUInt64

        Parameters:
            Int: TUInt64 const &

        __init__(TUInt64 self, uint64 const & Int) -> TUInt64

        Parameters:
            Int: uint64 const &

        __init__(TUInt64 self, uint const & MsVal, uint const & LsVal) -> TUInt64

        Parameters:
            MsVal: uint const &
            LsVal: uint const &

        __init__(TUInt64 self, void * Pt) -> TUInt64

        Parameters:
            Pt: void *

        __init__(TUInt64 self, TSIn SIn) -> TUInt64

        Parameters:
            SIn: TSIn &

        """
        _snap.TUInt64_swiginit(self,_snap.new_TUInt64(*args))
    def Load(self, *args):
        """
        Load(TUInt64 self, TSIn SIn)

        Parameters:
            SIn: TSIn &

        """
        return _snap.TUInt64_Load(self, *args)

    def Save(self, *args):
        """
        Save(TUInt64 self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.TUInt64_Save(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(TUInt64 self, TUInt64 Int) -> TUInt64

        Parameters:
            Int: TUInt64 const &

        """
        return _snap.TUInt64___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(TUInt64 self, TUInt64 Int) -> TUInt64

        Parameters:
            Int: TUInt64 const &

        """
        return _snap.TUInt64___isub__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(TUInt64 self) -> int

        Parameters:
            self: TUInt64 const *

        """
        return _snap.TUInt64_GetMemUsed(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TUInt64 self) -> int

        Parameters:
            self: TUInt64 const *

        """
        return _snap.TUInt64_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(TUInt64 self) -> int

        Parameters:
            self: TUInt64 const *

        """
        return _snap.TUInt64_GetSecHashCd(self)

    def GetMsVal(self):
        """
        GetMsVal(TUInt64 self) -> uint

        Parameters:
            self: TUInt64 const *

        """
        return _snap.TUInt64_GetMsVal(self)

    def GetLsVal(self):
        """
        GetLsVal(TUInt64 self) -> uint

        Parameters:
            self: TUInt64 const *

        """
        return _snap.TUInt64_GetLsVal(self)

    def GetHexStr(*args):
        """
        GetHexStr(TUInt64 Int) -> TStr

        Parameters:
            Int: TUInt64 const &

        """
        return _snap.TUInt64_GetHexStr(*args)

    GetHexStr = staticmethod(GetHexStr)
    def GetKiloStr(*args):
        """
        GetKiloStr(uint64 const & Val) -> TStr

        Parameters:
            Val: uint64 const &

        """
        return _snap.TUInt64_GetKiloStr(*args)

    GetKiloStr = staticmethod(GetKiloStr)
    def GetMegaStr(*args):
        """
        GetMegaStr(uint64 const & Val) -> TStr

        Parameters:
            Val: uint64 const &

        """
        return _snap.TUInt64_GetMegaStr(*args)

    GetMegaStr = staticmethod(GetMegaStr)
    __swig_destroy__ = _snap.delete_TUInt64
TUInt64.Load = new_instancemethod(_snap.TUInt64_Load,None,TUInt64)
TUInt64.Save = new_instancemethod(_snap.TUInt64_Save,None,TUInt64)
TUInt64.__iadd__ = new_instancemethod(_snap.TUInt64___iadd__,None,TUInt64)
TUInt64.__isub__ = new_instancemethod(_snap.TUInt64___isub__,None,TUInt64)
TUInt64.GetMemUsed = new_instancemethod(_snap.TUInt64_GetMemUsed,None,TUInt64)
TUInt64.GetPrimHashCd = new_instancemethod(_snap.TUInt64_GetPrimHashCd,None,TUInt64)
TUInt64.GetSecHashCd = new_instancemethod(_snap.TUInt64_GetSecHashCd,None,TUInt64)
TUInt64.GetMsVal = new_instancemethod(_snap.TUInt64_GetMsVal,None,TUInt64)
TUInt64.GetLsVal = new_instancemethod(_snap.TUInt64_GetLsVal,None,TUInt64)
TUInt64_swigregister = _snap.TUInt64_swigregister
TUInt64_swigregister(TUInt64)
TUInt64.Mn = _snap.cvar.TUInt64_Mn
TUInt64.Mx = _snap.cvar.TUInt64_Mx

def TUInt64_GetHexStr(*args):
  """
    TUInt64_GetHexStr(TUInt64 Int) -> TStr

    Parameters:
        Int: TUInt64 const &

    """
  return _snap.TUInt64_GetHexStr(*args)

def TUInt64_GetKiloStr(*args):
  """
    TUInt64_GetKiloStr(uint64 const & Val) -> TStr

    Parameters:
        Val: uint64 const &

    """
  return _snap.TUInt64_GetKiloStr(*args)

def TUInt64_GetMegaStr(*args):
  """
    TUInt64_GetMegaStr(uint64 const & Val) -> TStr

    Parameters:
        Val: uint64 const &

    """
  return _snap.TUInt64_GetMegaStr(*args)

class TFlt(object):
    """Proxy of C++ TFlt class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = _swig_property(_snap.TFlt_Val_get, _snap.TFlt_Val_set)
    Rnd = _swig_property(_snap.TFlt_Rnd_get, _snap.TFlt_Rnd_set)
    def __init__(self, *args): 
        """
        __init__(TFlt self) -> TFlt
        __init__(TFlt self, double const & _Val) -> TFlt

        Parameters:
            _Val: double const &

        __init__(TFlt self, TSIn SIn) -> TFlt

        Parameters:
            SIn: TSIn &

        __init__(TFlt self, TSIn SIn, bool const & IsTxt) -> TFlt

        Parameters:
            SIn: TSIn &
            IsTxt: bool const &

        """
        _snap.TFlt_swiginit(self,_snap.new_TFlt(*args))
    def Load(self, *args):
        """
        Load(TFlt self, TSIn SIn)

        Parameters:
            SIn: TSIn &

        """
        return _snap.TFlt_Load(self, *args)

    def Save(self, *args):
        """
        Save(TFlt self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        Save(TFlt self, TSOut SOut, bool const & IsTxt)

        Parameters:
            SOut: TSOut &
            IsTxt: bool const &

        """
        return _snap.TFlt_Save(self, *args)

    def __eq__(self, *args):
        """
        __eq__(TFlt self, TFlt Flt) -> bool

        Parameters:
            Flt: TFlt const &

        __eq__(TFlt self, double const & Flt) -> bool

        Parameters:
            Flt: double const &

        """
        return _snap.TFlt___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(TFlt self, double const & Flt) -> bool

        Parameters:
            Flt: double const &

        """
        return _snap.TFlt___ne__(self, *args)

    def __call__(self):
        """
        __call__(TFlt self) -> double

        Parameters:
            self: TFlt const *

        """
        return _snap.TFlt___call__(self)

    def __iadd__(self, *args):
        """
        __iadd__(TFlt self, double const & Flt) -> TFlt

        Parameters:
            Flt: double const &

        """
        return _snap.TFlt___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(TFlt self, double const & Flt) -> TFlt

        Parameters:
            Flt: double const &

        """
        return _snap.TFlt___isub__(self, *args)

    def __imul__(self, *args):
        """
        __imul__(TFlt self, double const & Flt) -> TFlt

        Parameters:
            Flt: double const &

        """
        return _snap.TFlt___imul__(self, *args)

    def __idiv__(self, *args):
        """
        __idiv__(TFlt self, double const & Flt) -> TFlt

        Parameters:
            Flt: double const &

        """
        return _snap.TFlt___idiv__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(TFlt self) -> int

        Parameters:
            self: TFlt const *

        """
        return _snap.TFlt_GetMemUsed(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TFlt self) -> int

        Parameters:
            self: TFlt const *

        """
        return _snap.TFlt_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(TFlt self) -> int

        Parameters:
            self: TFlt const *

        """
        return _snap.TFlt_GetSecHashCd(self)

    def Abs(*args):
        """
        Abs(double const & Flt) -> double

        Parameters:
            Flt: double const &

        """
        return _snap.TFlt_Abs(*args)

    Abs = staticmethod(Abs)
    def Sign(*args):
        """
        Sign(double const & Flt) -> int

        Parameters:
            Flt: double const &

        """
        return _snap.TFlt_Sign(*args)

    Sign = staticmethod(Sign)
    def Round(*args):
        """
        Round(double const & Flt) -> int

        Parameters:
            Flt: double const &

        """
        return _snap.TFlt_Round(*args)

    Round = staticmethod(Round)
    def GetRnd():
        """GetRnd() -> double"""
        return _snap.TFlt_GetRnd()

    GetRnd = staticmethod(GetRnd)
    def Eq6(*args):
        """
        Eq6(double const & LFlt, double const & RFlt) -> bool

        Parameters:
            LFlt: double const &
            RFlt: double const &

        """
        return _snap.TFlt_Eq6(*args)

    Eq6 = staticmethod(Eq6)
    def GetMn(*args):
        """
        GetMn(double const & Flt1, double const & Flt2) -> double

        Parameters:
            Flt1: double const &
            Flt2: double const &

        GetMn(double const & Flt1, double const & Flt2, double const & Flt3) -> double

        Parameters:
            Flt1: double const &
            Flt2: double const &
            Flt3: double const &

        GetMn(double const & Flt1, double const & Flt2, double const & Flt3, double const & Flt4) -> double

        Parameters:
            Flt1: double const &
            Flt2: double const &
            Flt3: double const &
            Flt4: double const &

        """
        return _snap.TFlt_GetMn(*args)

    GetMn = staticmethod(GetMn)
    def GetMx(*args):
        """
        GetMx(double const & Flt1, double const & Flt2) -> double

        Parameters:
            Flt1: double const &
            Flt2: double const &

        GetMx(double const & Flt1, double const & Flt2, double const Flt3) -> double

        Parameters:
            Flt1: double const &
            Flt2: double const &
            Flt3: double const

        GetMx(double const & Flt1, double const & Flt2, double const Flt3, double const & Flt4) -> double

        Parameters:
            Flt1: double const &
            Flt2: double const &
            Flt3: double const
            Flt4: double const &

        """
        return _snap.TFlt_GetMx(*args)

    GetMx = staticmethod(GetMx)
    def GetInRng(*args):
        """
        GetInRng(double const & Val, double const & Mn, double const & Mx) -> double

        Parameters:
            Val: double const &
            Mn: double const &
            Mx: double const &

        """
        return _snap.TFlt_GetInRng(*args)

    GetInRng = staticmethod(GetInRng)
    def IsNum(self, *args):
        """
        IsNum(TFlt self, double const & Val) -> bool

        Parameters:
            Val: double const &

        IsNum(TFlt self) -> bool

        Parameters:
            self: TFlt const *

        """
        return _snap.TFlt_IsNum(self, *args)

    def IsNan(self, *args):
        """
        IsNan(TFlt self, double const & Val) -> bool

        Parameters:
            Val: double const &

        IsNan(TFlt self) -> bool

        Parameters:
            self: TFlt const *

        """
        return _snap.TFlt_IsNan(self, *args)

    def GetPrcStr(*args):
        """
        GetPrcStr(double const & RelVal, double const & FullVal) -> TStr

        Parameters:
            RelVal: double const &
            FullVal: double const &

        """
        return _snap.TFlt_GetPrcStr(*args)

    GetPrcStr = staticmethod(GetPrcStr)
    def GetKiloStr(*args):
        """
        GetKiloStr(double const & Val) -> TStr

        Parameters:
            Val: double const &

        """
        return _snap.TFlt_GetKiloStr(*args)

    GetKiloStr = staticmethod(GetKiloStr)
    def GetMegaStr(*args):
        """
        GetMegaStr(double const & Val) -> TStr

        Parameters:
            Val: double const &

        """
        return _snap.TFlt_GetMegaStr(*args)

    GetMegaStr = staticmethod(GetMegaStr)
    def GetGigaStr(*args):
        """
        GetGigaStr(double const & Val) -> TStr

        Parameters:
            Val: double const &

        """
        return _snap.TFlt_GetGigaStr(*args)

    GetGigaStr = staticmethod(GetGigaStr)
    __swig_destroy__ = _snap.delete_TFlt
TFlt.Load = new_instancemethod(_snap.TFlt_Load,None,TFlt)
TFlt.Save = new_instancemethod(_snap.TFlt_Save,None,TFlt)
TFlt.__eq__ = new_instancemethod(_snap.TFlt___eq__,None,TFlt)
TFlt.__ne__ = new_instancemethod(_snap.TFlt___ne__,None,TFlt)
TFlt.__call__ = new_instancemethod(_snap.TFlt___call__,None,TFlt)
TFlt.__iadd__ = new_instancemethod(_snap.TFlt___iadd__,None,TFlt)
TFlt.__isub__ = new_instancemethod(_snap.TFlt___isub__,None,TFlt)
TFlt.__imul__ = new_instancemethod(_snap.TFlt___imul__,None,TFlt)
TFlt.__idiv__ = new_instancemethod(_snap.TFlt___idiv__,None,TFlt)
TFlt.GetMemUsed = new_instancemethod(_snap.TFlt_GetMemUsed,None,TFlt)
TFlt.GetPrimHashCd = new_instancemethod(_snap.TFlt_GetPrimHashCd,None,TFlt)
TFlt.GetSecHashCd = new_instancemethod(_snap.TFlt_GetSecHashCd,None,TFlt)
TFlt.IsNum = new_instancemethod(_snap.TFlt_IsNum,None,TFlt)
TFlt.IsNan = new_instancemethod(_snap.TFlt_IsNan,None,TFlt)
TFlt_swigregister = _snap.TFlt_swigregister
TFlt_swigregister(TFlt)
TFlt.Mn = _snap.cvar.TFlt_Mn
TFlt.Mx = _snap.cvar.TFlt_Mx
TFlt.NInf = _snap.cvar.TFlt_NInf
TFlt.PInf = _snap.cvar.TFlt_PInf
TFlt.Eps = _snap.cvar.TFlt_Eps
TFlt.EpsHalf = _snap.cvar.TFlt_EpsHalf

def TFlt_Abs(*args):
  """
    TFlt_Abs(double const & Flt) -> double

    Parameters:
        Flt: double const &

    """
  return _snap.TFlt_Abs(*args)

def TFlt_Sign(*args):
  """
    TFlt_Sign(double const & Flt) -> int

    Parameters:
        Flt: double const &

    """
  return _snap.TFlt_Sign(*args)

def TFlt_Round(*args):
  """
    TFlt_Round(double const & Flt) -> int

    Parameters:
        Flt: double const &

    """
  return _snap.TFlt_Round(*args)

def TFlt_GetRnd():
  """TFlt_GetRnd() -> double"""
  return _snap.TFlt_GetRnd()

def TFlt_Eq6(*args):
  """
    TFlt_Eq6(double const & LFlt, double const & RFlt) -> bool

    Parameters:
        LFlt: double const &
        RFlt: double const &

    """
  return _snap.TFlt_Eq6(*args)

def TFlt_GetMn(*args):
  """
    GetMn(double const & Flt1, double const & Flt2) -> double

    Parameters:
        Flt1: double const &
        Flt2: double const &

    GetMn(double const & Flt1, double const & Flt2, double const & Flt3) -> double

    Parameters:
        Flt1: double const &
        Flt2: double const &
        Flt3: double const &

    TFlt_GetMn(double const & Flt1, double const & Flt2, double const & Flt3, double const & Flt4) -> double

    Parameters:
        Flt1: double const &
        Flt2: double const &
        Flt3: double const &
        Flt4: double const &

    """
  return _snap.TFlt_GetMn(*args)

def TFlt_GetMx(*args):
  """
    GetMx(double const & Flt1, double const & Flt2) -> double

    Parameters:
        Flt1: double const &
        Flt2: double const &

    GetMx(double const & Flt1, double const & Flt2, double const Flt3) -> double

    Parameters:
        Flt1: double const &
        Flt2: double const &
        Flt3: double const

    TFlt_GetMx(double const & Flt1, double const & Flt2, double const Flt3, double const & Flt4) -> double

    Parameters:
        Flt1: double const &
        Flt2: double const &
        Flt3: double const
        Flt4: double const &

    """
  return _snap.TFlt_GetMx(*args)

def TFlt_GetInRng(*args):
  """
    TFlt_GetInRng(double const & Val, double const & Mn, double const & Mx) -> double

    Parameters:
        Val: double const &
        Mn: double const &
        Mx: double const &

    """
  return _snap.TFlt_GetInRng(*args)

def TFlt_GetPrcStr(*args):
  """
    TFlt_GetPrcStr(double const & RelVal, double const & FullVal) -> TStr

    Parameters:
        RelVal: double const &
        FullVal: double const &

    """
  return _snap.TFlt_GetPrcStr(*args)

def TFlt_GetKiloStr(*args):
  """
    TFlt_GetKiloStr(double const & Val) -> TStr

    Parameters:
        Val: double const &

    """
  return _snap.TFlt_GetKiloStr(*args)

def TFlt_GetMegaStr(*args):
  """
    TFlt_GetMegaStr(double const & Val) -> TStr

    Parameters:
        Val: double const &

    """
  return _snap.TFlt_GetMegaStr(*args)

def TFlt_GetGigaStr(*args):
  """
    TFlt_GetGigaStr(double const & Val) -> TStr

    Parameters:
        Val: double const &

    """
  return _snap.TFlt_GetGigaStr(*args)

class TAscFlt(TFlt):
    """Proxy of C++ TAscFlt class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TAscFlt self) -> TAscFlt
        __init__(TAscFlt self, double const & Val) -> TAscFlt

        Parameters:
            Val: double const &

        __init__(TAscFlt self, TSIn SIn) -> TAscFlt

        Parameters:
            SIn: TSIn &

        """
        _snap.TAscFlt_swiginit(self,_snap.new_TAscFlt(*args))
    def Save(self, *args):
        """
        Save(TAscFlt self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.TAscFlt_Save(self, *args)

    __swig_destroy__ = _snap.delete_TAscFlt
TAscFlt.Save = new_instancemethod(_snap.TAscFlt_Save,None,TAscFlt)
TAscFlt_swigregister = _snap.TAscFlt_swigregister
TAscFlt_swigregister(TAscFlt)

class TSFlt(object):
    """Proxy of C++ TSFlt class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = _swig_property(_snap.TSFlt_Val_get, _snap.TSFlt_Val_set)
    def __init__(self, *args): 
        """
        __init__(TSFlt self) -> TSFlt
        __init__(TSFlt self, sdouble const & _Val) -> TSFlt

        Parameters:
            _Val: sdouble const &

        __init__(TSFlt self, TSIn SIn) -> TSFlt

        Parameters:
            SIn: TSIn &

        """
        _snap.TSFlt_swiginit(self,_snap.new_TSFlt(*args))
    def Save(self, *args):
        """
        Save(TSFlt self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.TSFlt_Save(self, *args)

    def __eq__(self, *args):
        """
        __eq__(TSFlt self, TSFlt SFlt) -> bool

        Parameters:
            SFlt: TSFlt const &

        __eq__(TSFlt self, double const & Flt) -> bool

        Parameters:
            Flt: double const &

        """
        return _snap.TSFlt___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(TSFlt self, double const & Flt) -> bool

        Parameters:
            Flt: double const &

        """
        return _snap.TSFlt___ne__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TSFlt self, TSFlt SFlt) -> bool

        Parameters:
            SFlt: TSFlt const &

        """
        return _snap.TSFlt___lt__(self, *args)

    def __call__(self):
        """
        __call__(TSFlt self) -> sdouble

        Parameters:
            self: TSFlt const *

        """
        return _snap.TSFlt___call__(self)

    def __iadd__(self, *args):
        """
        __iadd__(TSFlt self, double const & SFlt) -> TSFlt

        Parameters:
            SFlt: double const &

        """
        return _snap.TSFlt___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(TSFlt self, double const & SFlt) -> TSFlt

        Parameters:
            SFlt: double const &

        """
        return _snap.TSFlt___isub__(self, *args)

    def __imul__(self, *args):
        """
        __imul__(TSFlt self, double const & SFlt) -> TSFlt

        Parameters:
            SFlt: double const &

        """
        return _snap.TSFlt___imul__(self, *args)

    def __idiv__(self, *args):
        """
        __idiv__(TSFlt self, double const & SFlt) -> TSFlt

        Parameters:
            SFlt: double const &

        """
        return _snap.TSFlt___idiv__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(TSFlt self) -> int

        Parameters:
            self: TSFlt const *

        """
        return _snap.TSFlt_GetMemUsed(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TSFlt self) -> int

        Parameters:
            self: TSFlt const *

        """
        return _snap.TSFlt_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(TSFlt self) -> int

        Parameters:
            self: TSFlt const *

        """
        return _snap.TSFlt_GetSecHashCd(self)

    __swig_destroy__ = _snap.delete_TSFlt
TSFlt.Save = new_instancemethod(_snap.TSFlt_Save,None,TSFlt)
TSFlt.__eq__ = new_instancemethod(_snap.TSFlt___eq__,None,TSFlt)
TSFlt.__ne__ = new_instancemethod(_snap.TSFlt___ne__,None,TSFlt)
TSFlt.__lt__ = new_instancemethod(_snap.TSFlt___lt__,None,TSFlt)
TSFlt.__call__ = new_instancemethod(_snap.TSFlt___call__,None,TSFlt)
TSFlt.__iadd__ = new_instancemethod(_snap.TSFlt___iadd__,None,TSFlt)
TSFlt.__isub__ = new_instancemethod(_snap.TSFlt___isub__,None,TSFlt)
TSFlt.__imul__ = new_instancemethod(_snap.TSFlt___imul__,None,TSFlt)
TSFlt.__idiv__ = new_instancemethod(_snap.TSFlt___idiv__,None,TSFlt)
TSFlt.GetMemUsed = new_instancemethod(_snap.TSFlt_GetMemUsed,None,TSFlt)
TSFlt.GetPrimHashCd = new_instancemethod(_snap.TSFlt_GetPrimHashCd,None,TSFlt)
TSFlt.GetSecHashCd = new_instancemethod(_snap.TSFlt_GetSecHashCd,None,TSFlt)
TSFlt_swigregister = _snap.TSFlt_swigregister
TSFlt_swigregister(TSFlt)
TSFlt.Mn = _snap.cvar.TSFlt_Mn
TSFlt.Mx = _snap.cvar.TSFlt_Mx

class TLFlt(object):
    """Proxy of C++ TLFlt class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = _swig_property(_snap.TLFlt_Val_get, _snap.TLFlt_Val_set)
    def __init__(self, *args): 
        """
        __init__(TLFlt self) -> TLFlt
        __init__(TLFlt self, ldouble const & _Val) -> TLFlt

        Parameters:
            _Val: ldouble const &

        __init__(TLFlt self, TSIn SIn) -> TLFlt

        Parameters:
            SIn: TSIn &

        """
        _snap.TLFlt_swiginit(self,_snap.new_TLFlt(*args))
    def Save(self, *args):
        """
        Save(TLFlt self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.TLFlt_Save(self, *args)

    def __eq__(self, *args):
        """
        __eq__(TLFlt self, TLFlt LFlt) -> bool

        Parameters:
            LFlt: TLFlt const &

        __eq__(TLFlt self, ldouble const & LFlt) -> bool

        Parameters:
            LFlt: ldouble const &

        """
        return _snap.TLFlt___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(TLFlt self, ldouble const & LFlt) -> bool

        Parameters:
            LFlt: ldouble const &

        """
        return _snap.TLFlt___ne__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TLFlt self, TLFlt LFlt) -> bool

        Parameters:
            LFlt: TLFlt const &

        """
        return _snap.TLFlt___lt__(self, *args)

    def __call__(self):
        """
        __call__(TLFlt self) -> ldouble

        Parameters:
            self: TLFlt const *

        """
        return _snap.TLFlt___call__(self)

    def __iadd__(self, *args):
        """
        __iadd__(TLFlt self, ldouble const & LFlt) -> TLFlt

        Parameters:
            LFlt: ldouble const &

        """
        return _snap.TLFlt___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(TLFlt self, ldouble const & LFlt) -> TLFlt

        Parameters:
            LFlt: ldouble const &

        """
        return _snap.TLFlt___isub__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(TLFlt self) -> int

        Parameters:
            self: TLFlt const *

        """
        return _snap.TLFlt_GetMemUsed(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TLFlt self) -> int

        Parameters:
            self: TLFlt const *

        """
        return _snap.TLFlt_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(TLFlt self) -> int

        Parameters:
            self: TLFlt const *

        """
        return _snap.TLFlt_GetSecHashCd(self)

    __swig_destroy__ = _snap.delete_TLFlt
TLFlt.Save = new_instancemethod(_snap.TLFlt_Save,None,TLFlt)
TLFlt.__eq__ = new_instancemethod(_snap.TLFlt___eq__,None,TLFlt)
TLFlt.__ne__ = new_instancemethod(_snap.TLFlt___ne__,None,TLFlt)
TLFlt.__lt__ = new_instancemethod(_snap.TLFlt___lt__,None,TLFlt)
TLFlt.__call__ = new_instancemethod(_snap.TLFlt___call__,None,TLFlt)
TLFlt.__iadd__ = new_instancemethod(_snap.TLFlt___iadd__,None,TLFlt)
TLFlt.__isub__ = new_instancemethod(_snap.TLFlt___isub__,None,TLFlt)
TLFlt.GetMemUsed = new_instancemethod(_snap.TLFlt_GetMemUsed,None,TLFlt)
TLFlt.GetPrimHashCd = new_instancemethod(_snap.TLFlt_GetPrimHashCd,None,TLFlt)
TLFlt.GetSecHashCd = new_instancemethod(_snap.TLFlt_GetSecHashCd,None,TLFlt)
TLFlt_swigregister = _snap.TLFlt_swigregister
TLFlt_swigregister(TLFlt)
TLFlt.Mn = _snap.cvar.TLFlt_Mn
TLFlt.Mx = _snap.cvar.TLFlt_Mx

class TFltRect(object):
    """Proxy of C++ TFltRect class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    MnX = _swig_property(_snap.TFltRect_MnX_get, _snap.TFltRect_MnX_set)
    MnY = _swig_property(_snap.TFltRect_MnY_get, _snap.TFltRect_MnY_set)
    MxX = _swig_property(_snap.TFltRect_MxX_get, _snap.TFltRect_MxX_set)
    MxY = _swig_property(_snap.TFltRect_MxY_get, _snap.TFltRect_MxY_set)
    def __init__(self, *args): 
        """
        __init__(TFltRect self) -> TFltRect
        __init__(TFltRect self, TFltRect FltRect) -> TFltRect

        Parameters:
            FltRect: TFltRect const &

        __init__(TFltRect self, double const & _MnX, double const & _MnY, double const & _MxX, double const & _MxY) -> TFltRect

        Parameters:
            _MnX: double const &
            _MnY: double const &
            _MxX: double const &
            _MxY: double const &

        __init__(TFltRect self, TSIn SIn) -> TFltRect

        Parameters:
            SIn: TSIn &

        """
        _snap.TFltRect_swiginit(self,_snap.new_TFltRect(*args))
    def Save(self, *args):
        """
        Save(TFltRect self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.TFltRect_Save(self, *args)

    def GetMnX(self):
        """
        GetMnX(TFltRect self) -> double

        Parameters:
            self: TFltRect const *

        """
        return _snap.TFltRect_GetMnX(self)

    def GetMnY(self):
        """
        GetMnY(TFltRect self) -> double

        Parameters:
            self: TFltRect const *

        """
        return _snap.TFltRect_GetMnY(self)

    def GetMxX(self):
        """
        GetMxX(TFltRect self) -> double

        Parameters:
            self: TFltRect const *

        """
        return _snap.TFltRect_GetMxX(self)

    def GetMxY(self):
        """
        GetMxY(TFltRect self) -> double

        Parameters:
            self: TFltRect const *

        """
        return _snap.TFltRect_GetMxY(self)

    def GetXLen(self):
        """
        GetXLen(TFltRect self) -> double

        Parameters:
            self: TFltRect const *

        """
        return _snap.TFltRect_GetXLen(self)

    def GetYLen(self):
        """
        GetYLen(TFltRect self) -> double

        Parameters:
            self: TFltRect const *

        """
        return _snap.TFltRect_GetYLen(self)

    def GetXCenter(self):
        """
        GetXCenter(TFltRect self) -> double

        Parameters:
            self: TFltRect const *

        """
        return _snap.TFltRect_GetXCenter(self)

    def GetYCenter(self):
        """
        GetYCenter(TFltRect self) -> double

        Parameters:
            self: TFltRect const *

        """
        return _snap.TFltRect_GetYCenter(self)

    def IsXYIn(self, *args):
        """
        IsXYIn(TFltRect self, double const & X, double const & Y) -> bool

        Parameters:
            X: double const &
            Y: double const &

        """
        return _snap.TFltRect_IsXYIn(self, *args)

    def Intersection(*args):
        """
        Intersection(TFltRect Rect1, TFltRect Rect2) -> bool

        Parameters:
            Rect1: TFltRect const &
            Rect2: TFltRect const &

        """
        return _snap.TFltRect_Intersection(*args)

    Intersection = staticmethod(Intersection)
    __swig_destroy__ = _snap.delete_TFltRect
TFltRect.Save = new_instancemethod(_snap.TFltRect_Save,None,TFltRect)
TFltRect.GetMnX = new_instancemethod(_snap.TFltRect_GetMnX,None,TFltRect)
TFltRect.GetMnY = new_instancemethod(_snap.TFltRect_GetMnY,None,TFltRect)
TFltRect.GetMxX = new_instancemethod(_snap.TFltRect_GetMxX,None,TFltRect)
TFltRect.GetMxY = new_instancemethod(_snap.TFltRect_GetMxY,None,TFltRect)
TFltRect.GetXLen = new_instancemethod(_snap.TFltRect_GetXLen,None,TFltRect)
TFltRect.GetYLen = new_instancemethod(_snap.TFltRect_GetYLen,None,TFltRect)
TFltRect.GetXCenter = new_instancemethod(_snap.TFltRect_GetXCenter,None,TFltRect)
TFltRect.GetYCenter = new_instancemethod(_snap.TFltRect_GetYCenter,None,TFltRect)
TFltRect.IsXYIn = new_instancemethod(_snap.TFltRect_IsXYIn,None,TFltRect)
TFltRect_swigregister = _snap.TFltRect_swigregister
TFltRect_swigregister(TFltRect)

def TFltRect_Intersection(*args):
  """
    TFltRect_Intersection(TFltRect Rect1, TFltRect Rect2) -> bool

    Parameters:
        Rect1: TFltRect const &
        Rect2: TFltRect const &

    """
  return _snap.TFltRect_Intersection(*args)

class TCs(object):
    """Proxy of C++ TCs class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TCs self) -> TCs
        __init__(TCs self, TCs Cs) -> TCs

        Parameters:
            Cs: TCs const &

        __init__(TCs self, int const & Int) -> TCs

        Parameters:
            Int: int const &

        """
        _snap.TCs_swiginit(self,_snap.new_TCs(*args))
    def __eq__(self, *args):
        """
        __eq__(TCs self, TCs Cs) -> bool

        Parameters:
            Cs: TCs const &

        """
        return _snap.TCs___eq__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(TCs self, TCs Cs) -> TCs

        Parameters:
            Cs: TCs const &

        __iadd__(TCs self, char const & Ch) -> TCs

        Parameters:
            Ch: char const &

        __iadd__(TCs self, int const & Int) -> TCs

        Parameters:
            Int: int const &

        """
        return _snap.TCs___iadd__(self, *args)

    def Get(self):
        """
        Get(TCs self) -> int

        Parameters:
            self: TCs const *

        """
        return _snap.TCs_Get(self)

    def GetCsFromBf(*args):
        """
        GetCsFromBf(char * Bf, int const & BfL) -> TCs

        Parameters:
            Bf: char *
            BfL: int const &

        """
        return _snap.TCs_GetCsFromBf(*args)

    GetCsFromBf = staticmethod(GetCsFromBf)
    __swig_destroy__ = _snap.delete_TCs
TCs.__eq__ = new_instancemethod(_snap.TCs___eq__,None,TCs)
TCs.__iadd__ = new_instancemethod(_snap.TCs___iadd__,None,TCs)
TCs.Get = new_instancemethod(_snap.TCs_Get,None,TCs)
TCs_swigregister = _snap.TCs_swigregister
TCs_swigregister(TCs)

def TCs_GetCsFromBf(*args):
  """
    TCs_GetCsFromBf(char * Bf, int const & BfL) -> TCs

    Parameters:
        Bf: char *
        BfL: int const &

    """
  return _snap.TCs_GetCsFromBf(*args)

class TSOutMnp(object):
    """Proxy of C++ TSOutMnp class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def __call__(self, *args):
        """
        __call__(TSOutMnp self, TSOut SOut) -> TSOut

        Parameters:
            SOut: TSOut &

        """
        return _snap.TSOutMnp___call__(self, *args)

    __swig_destroy__ = _snap.delete_TSOutMnp
TSOutMnp.__call__ = new_instancemethod(_snap.TSOutMnp___call__,None,TSOutMnp)
TSOutMnp_swigregister = _snap.TSOutMnp_swigregister
TSOutMnp_swigregister(TSOutMnp)

class TSBase(object):
    """Proxy of C++ TSBase class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TSBase self, TSStr Nm) -> TSBase

        Parameters:
            Nm: TSStr const &

        """
        _snap.TSBase_swiginit(self,_snap.new_TSBase(*args))
    __swig_destroy__ = _snap.delete_TSBase
    def GetSNm(self):
        """
        GetSNm(TSBase self) -> TStr

        Parameters:
            self: TSBase const *

        """
        return _snap.TSBase_GetSNm(self)

TSBase.GetSNm = new_instancemethod(_snap.TSBase_GetSNm,None,TSBase)
TSBase_swigregister = _snap.TSBase_swigregister
TSBase_swigregister(TSBase)

class TSIn(TSBase):
    """Proxy of C++ TSIn class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TSIn
    def Eof(self):
        """
        Eof(TSIn self) -> bool

        Parameters:
            self: TSIn *

        """
        return _snap.TSIn_Eof(self)

    def Len(self):
        """
        Len(TSIn self) -> int

        Parameters:
            self: TSIn const *

        """
        return _snap.TSIn_Len(self)

    def GetCh(self):
        """
        GetCh(TSIn self) -> char

        Parameters:
            self: TSIn *

        """
        return _snap.TSIn_GetCh(self)

    def PeekCh(self):
        """
        PeekCh(TSIn self) -> char

        Parameters:
            self: TSIn *

        """
        return _snap.TSIn_PeekCh(self)

    def GetBf(self, *args):
        """
        GetBf(TSIn self, void const * Bf, TSize const & BfL) -> int

        Parameters:
            Bf: void const *
            BfL: TSize const &

        """
        return _snap.TSIn_GetBf(self, *args)

    def GetNextLnBf(self, *args):
        """
        GetNextLnBf(TSIn self, TChA LnChA) -> bool

        Parameters:
            LnChA: TChA &

        """
        return _snap.TSIn_GetNextLnBf(self, *args)

    def Reset(self):
        """
        Reset(TSIn self)

        Parameters:
            self: TSIn *

        """
        return _snap.TSIn_Reset(self)

    def IsFastMode(self):
        """
        IsFastMode(TSIn self) -> bool

        Parameters:
            self: TSIn const *

        """
        return _snap.TSIn_IsFastMode(self)

    def SetFastMode(self, *args):
        """
        SetFastMode(TSIn self, bool const & _FastMode)

        Parameters:
            _FastMode: bool const &

        """
        return _snap.TSIn_SetFastMode(self, *args)

    def LoadCs(self):
        """
        LoadCs(TSIn self)

        Parameters:
            self: TSIn *

        """
        return _snap.TSIn_LoadCs(self)

    def LoadBf(self, *args):
        """
        LoadBf(TSIn self, void const * Bf, TSize const & BfL)

        Parameters:
            Bf: void const *
            BfL: TSize const &

        """
        return _snap.TSIn_LoadBf(self, *args)

    def LoadNewBf(self, *args):
        """
        LoadNewBf(TSIn self, int const & BfL) -> void *

        Parameters:
            BfL: int const &

        """
        return _snap.TSIn_LoadNewBf(self, *args)

    def Load(self, *args):
        """
        Load(TSIn self, bool & Bool)

        Parameters:
            Bool: bool &

        Load(TSIn self, uchar & UCh)

        Parameters:
            UCh: uchar &

        Load(TSIn self, char & Ch)

        Parameters:
            Ch: char &

        Load(TSIn self, short & Short)

        Parameters:
            Short: short &

        Load(TSIn self, ushort & UShort)

        Parameters:
            UShort: ushort &

        Load(TSIn self, int & Int)

        Parameters:
            Int: int &

        Load(TSIn self, uint & UInt)

        Parameters:
            UInt: uint &

        Load(TSIn self, int64 & Int)

        Parameters:
            Int: int64 &

        Load(TSIn self, uint64 & UInt)

        Parameters:
            UInt: uint64 &

        Load(TSIn self, double & Flt)

        Parameters:
            Flt: double &

        Load(TSIn self, sdouble & SFlt)

        Parameters:
            SFlt: sdouble &

        Load(TSIn self, ldouble & LFlt)

        Parameters:
            LFlt: ldouble &

        Load(TSIn self, char *& CStr, int const & MxCStrLen, int const & CStrLen)

        Parameters:
            CStr: char *&
            MxCStrLen: int const &
            CStrLen: int const &

        Load(TSIn self, char *& CStr)

        Parameters:
            CStr: char *&

        """
        return _snap.TSIn_Load(self, *args)

    def __rshift__(self, *args):
        """
        __rshift__(TSIn self, bool & Bool) -> TSIn

        Parameters:
            Bool: bool &

        __rshift__(TSIn self, uchar & UCh) -> TSIn

        Parameters:
            UCh: uchar &

        __rshift__(TSIn self, char & Ch) -> TSIn

        Parameters:
            Ch: char &

        __rshift__(TSIn self, short & Sh) -> TSIn

        Parameters:
            Sh: short &

        __rshift__(TSIn self, ushort & USh) -> TSIn

        Parameters:
            USh: ushort &

        __rshift__(TSIn self, int & Int) -> TSIn

        Parameters:
            Int: int &

        __rshift__(TSIn self, uint & UInt) -> TSIn

        Parameters:
            UInt: uint &

        __rshift__(TSIn self, int64 & Int) -> TSIn

        Parameters:
            Int: int64 &

        __rshift__(TSIn self, uint64 & UInt) -> TSIn

        Parameters:
            UInt: uint64 &

        __rshift__(TSIn self, float & Flt) -> TSIn

        Parameters:
            Flt: float &

        __rshift__(TSIn self, double & Double) -> TSIn

        Parameters:
            Double: double &

        __rshift__(TSIn self, long double & LDouble) -> TSIn

        Parameters:
            LDouble: long double &

        """
        return _snap.TSIn___rshift__(self, *args)

    def GetNextLn(self, *args):
        """
        GetNextLn(TSIn self, TStr LnStr) -> bool

        Parameters:
            LnStr: TStr &

        GetNextLn(TSIn self, TChA LnChA) -> bool

        Parameters:
            LnChA: TChA &

        """
        return _snap.TSIn_GetNextLn(self, *args)

TSIn.Eof = new_instancemethod(_snap.TSIn_Eof,None,TSIn)
TSIn.Len = new_instancemethod(_snap.TSIn_Len,None,TSIn)
TSIn.GetCh = new_instancemethod(_snap.TSIn_GetCh,None,TSIn)
TSIn.PeekCh = new_instancemethod(_snap.TSIn_PeekCh,None,TSIn)
TSIn.GetBf = new_instancemethod(_snap.TSIn_GetBf,None,TSIn)
TSIn.GetNextLnBf = new_instancemethod(_snap.TSIn_GetNextLnBf,None,TSIn)
TSIn.Reset = new_instancemethod(_snap.TSIn_Reset,None,TSIn)
TSIn.IsFastMode = new_instancemethod(_snap.TSIn_IsFastMode,None,TSIn)
TSIn.SetFastMode = new_instancemethod(_snap.TSIn_SetFastMode,None,TSIn)
TSIn.LoadCs = new_instancemethod(_snap.TSIn_LoadCs,None,TSIn)
TSIn.LoadBf = new_instancemethod(_snap.TSIn_LoadBf,None,TSIn)
TSIn.LoadNewBf = new_instancemethod(_snap.TSIn_LoadNewBf,None,TSIn)
TSIn.Load = new_instancemethod(_snap.TSIn_Load,None,TSIn)
TSIn.__rshift__ = new_instancemethod(_snap.TSIn___rshift__,None,TSIn)
TSIn.GetNextLn = new_instancemethod(_snap.TSIn_GetNextLn,None,TSIn)
TSIn_swigregister = _snap.TSIn_swigregister
TSIn_swigregister(TSIn)
TSIn.StdIn = _snap.cvar.TSIn_StdIn

class TSOut(TSBase):
    """Proxy of C++ TSOut class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TSOut
    def EnableLnTrunc(self, *args):
        """
        EnableLnTrunc(TSOut self, int const & _MxLnLen)

        Parameters:
            _MxLnLen: int const &

        """
        return _snap.TSOut_EnableLnTrunc(self, *args)

    def DisableLnTrunc(self):
        """
        DisableLnTrunc(TSOut self)

        Parameters:
            self: TSOut *

        """
        return _snap.TSOut_DisableLnTrunc(self)

    def PutBf(self, *args):
        """
        PutBf(TSOut self, void const * LBf, TSize const & LBfL) -> int

        Parameters:
            LBf: void const *
            LBfL: TSize const &

        """
        return _snap.TSOut_PutBf(self, *args)

    def Flush(self):
        """
        Flush(TSOut self)

        Parameters:
            self: TSOut *

        """
        return _snap.TSOut_Flush(self)

    def GetFileId(self):
        """
        GetFileId(TSOut self) -> TFileId

        Parameters:
            self: TSOut const *

        """
        return _snap.TSOut_GetFileId(self)

    def PutMem(self, *args):
        """
        PutMem(TSOut self, TMem Mem) -> int

        Parameters:
            Mem: TMem const &

        """
        return _snap.TSOut_PutMem(self, *args)

    def PutCh(self, *args):
        """
        PutCh(TSOut self, char const & Ch) -> int

        Parameters:
            Ch: char const &

        PutCh(TSOut self, char const & Ch, int const & Chs) -> int

        Parameters:
            Ch: char const &
            Chs: int const &

        """
        return _snap.TSOut_PutCh(self, *args)

    def PutBool(self, *args):
        """
        PutBool(TSOut self, bool const & Bool) -> int

        Parameters:
            Bool: bool const &

        """
        return _snap.TSOut_PutBool(self, *args)

    def PutInt(self, *args):
        """
        PutInt(TSOut self, int const & Int) -> int

        Parameters:
            Int: int const &

        PutInt(TSOut self, int const & Int, char const * FmtStr) -> int

        Parameters:
            Int: int const &
            FmtStr: char const *

        """
        return _snap.TSOut_PutInt(self, *args)

    def PutUInt(self, *args):
        """
        PutUInt(TSOut self, uint const & Int) -> int

        Parameters:
            Int: uint const &

        PutUInt(TSOut self, uint const & Int, char const * FmtStr) -> int

        Parameters:
            Int: uint const &
            FmtStr: char const *

        """
        return _snap.TSOut_PutUInt(self, *args)

    def PutFlt(self, *args):
        """
        PutFlt(TSOut self, double const & Flt) -> int

        Parameters:
            Flt: double const &

        PutFlt(TSOut self, double const & Flt, char const * FmtStr) -> int

        Parameters:
            Flt: double const &
            FmtStr: char const *

        """
        return _snap.TSOut_PutFlt(self, *args)

    def PutStr(self, *args):
        """
        PutStr(TSOut self, char const * CStr) -> int

        Parameters:
            CStr: char const *

        PutStr(TSOut self, TChA ChA) -> int

        Parameters:
            ChA: TChA const &

        PutStr(TSOut self, TStr Str, char const * FmtStr) -> int

        Parameters:
            Str: TStr const &
            FmtStr: char const *

        PutStr(TSOut self, TStr Str, bool const & ForceInLn=False) -> int

        Parameters:
            Str: TStr const &
            ForceInLn: bool const &

        PutStr(TSOut self, TStr Str) -> int

        Parameters:
            Str: TStr const &

        """
        return _snap.TSOut_PutStr(self, *args)

    def PutStrLn(self, *args):
        """
        PutStrLn(TSOut self, TStr Str, bool const & ForceInLn=False) -> int

        Parameters:
            Str: TStr const &
            ForceInLn: bool const &

        PutStrLn(TSOut self, TStr Str) -> int

        Parameters:
            Str: TStr const &

        """
        return _snap.TSOut_PutStrLn(self, *args)

    def PutStrFmt(self, *args):
        """
        PutStrFmt(TSOut self, char const * FmtStr) -> int

        Parameters:
            FmtStr: char const *

        """
        return _snap.TSOut_PutStrFmt(self, *args)

    def PutStrFmtLn(self, *args):
        """
        PutStrFmtLn(TSOut self, char const * FmtStr) -> int

        Parameters:
            FmtStr: char const *

        """
        return _snap.TSOut_PutStrFmtLn(self, *args)

    def PutIndent(self, IndentLev=1):
        """
        PutIndent(TSOut self, int const & IndentLev=1) -> int

        Parameters:
            IndentLev: int const &

        PutIndent(TSOut self) -> int

        Parameters:
            self: TSOut *

        """
        return _snap.TSOut_PutIndent(self, IndentLev)

    def PutLn(self, Lns=1):
        """
        PutLn(TSOut self, int const & Lns=1) -> int

        Parameters:
            Lns: int const &

        PutLn(TSOut self) -> int

        Parameters:
            self: TSOut *

        """
        return _snap.TSOut_PutLn(self, Lns)

    def PutDosLn(self, Lns=1):
        """
        PutDosLn(TSOut self, int const & Lns=1) -> int

        Parameters:
            Lns: int const &

        PutDosLn(TSOut self) -> int

        Parameters:
            self: TSOut *

        """
        return _snap.TSOut_PutDosLn(self, Lns)

    def PutSep(self, NextStrLen=0):
        """
        PutSep(TSOut self, int const & NextStrLen=0) -> int

        Parameters:
            NextStrLen: int const &

        PutSep(TSOut self) -> int

        Parameters:
            self: TSOut *

        """
        return _snap.TSOut_PutSep(self, NextStrLen)

    def PutSepLn(self, Lns=0):
        """
        PutSepLn(TSOut self, int const & Lns=0) -> int

        Parameters:
            Lns: int const &

        PutSepLn(TSOut self) -> int

        Parameters:
            self: TSOut *

        """
        return _snap.TSOut_PutSepLn(self, Lns)

    def SaveCs(self):
        """
        SaveCs(TSOut self)

        Parameters:
            self: TSOut *

        """
        return _snap.TSOut_SaveCs(self)

    def SaveBf(self, *args):
        """
        SaveBf(TSOut self, void const * Bf, TSize const & BfL)

        Parameters:
            Bf: void const *
            BfL: TSize const &

        """
        return _snap.TSOut_SaveBf(self, *args)

    def Save(self, *args):
        """
        Save(TSOut self, bool const & Bool)

        Parameters:
            Bool: bool const &

        Save(TSOut self, char const & Ch)

        Parameters:
            Ch: char const &

        Save(TSOut self, uchar const & UCh)

        Parameters:
            UCh: uchar const &

        Save(TSOut self, short const & Short)

        Parameters:
            Short: short const &

        Save(TSOut self, ushort const & UShort)

        Parameters:
            UShort: ushort const &

        Save(TSOut self, int const & Int)

        Parameters:
            Int: int const &

        Save(TSOut self, uint const & UInt)

        Parameters:
            UInt: uint const &

        Save(TSOut self, int64 const & Int)

        Parameters:
            Int: int64 const &

        Save(TSOut self, uint64 const & UInt)

        Parameters:
            UInt: uint64 const &

        Save(TSOut self, double const & Flt)

        Parameters:
            Flt: double const &

        Save(TSOut self, sdouble const & SFlt)

        Parameters:
            SFlt: sdouble const &

        Save(TSOut self, ldouble const & LFlt)

        Parameters:
            LFlt: ldouble const &

        Save(TSOut self, char const * CStr, TSize const & CStrLen)

        Parameters:
            CStr: char const *
            CStrLen: TSize const &

        Save(TSOut self, char const * CStr)

        Parameters:
            CStr: char const *

        Save(TSOut self, TSIn SIn, TSize const & BfL=-1)

        Parameters:
            SIn: TSIn &
            BfL: TSize const &

        Save(TSOut self, TSIn SIn)

        Parameters:
            SIn: TSIn &

        Save(TSOut self, PSIn const & SIn, TSize const & BfL=-1)

        Parameters:
            SIn: PSIn const &
            BfL: TSize const &

        Save(TSOut self, PSIn const & SIn)

        Parameters:
            SIn: PSIn const &

        Save(TSOut self, void const * Bf, TSize const & BfL)

        Parameters:
            Bf: void const *
            BfL: TSize const &

        """
        return _snap.TSOut_Save(self, *args)

    def __lshift__(self, *args):
        """
        __lshift__(TSOut self, bool const & Bool) -> TSOut

        Parameters:
            Bool: bool const &

        __lshift__(TSOut self, uchar const & UCh) -> TSOut

        Parameters:
            UCh: uchar const &

        __lshift__(TSOut self, char const & Ch) -> TSOut

        Parameters:
            Ch: char const &

        __lshift__(TSOut self, short const & Sh) -> TSOut

        Parameters:
            Sh: short const &

        __lshift__(TSOut self, ushort const & USh) -> TSOut

        Parameters:
            USh: ushort const &

        __lshift__(TSOut self, int const & Int) -> TSOut

        Parameters:
            Int: int const &

        __lshift__(TSOut self, uint const & Int) -> TSOut

        Parameters:
            Int: uint const &

        __lshift__(TSOut self, int64 const & Int) -> TSOut

        Parameters:
            Int: int64 const &

        __lshift__(TSOut self, uint64 const & UInt) -> TSOut

        Parameters:
            UInt: uint64 const &

        __lshift__(TSOut self, float const & Flt) -> TSOut

        Parameters:
            Flt: float const &

        __lshift__(TSOut self, double const & Double) -> TSOut

        Parameters:
            Double: double const &

        __lshift__(TSOut self, long double const & LDouble) -> TSOut

        Parameters:
            LDouble: long double const &

        __lshift__(TSOut self, TSOutMnp Mnp) -> TSOut

        Parameters:
            Mnp: TSOutMnp const &

        __lshift__(TSOut self, TSOut &(*)(TSOut &) FuncPt) -> TSOut

        Parameters:
            FuncPt: TSOut &(*)(TSOut &)

        __lshift__(TSOut self, TSIn SIn) -> TSOut

        Parameters:
            SIn: TSIn &

        __lshift__(TSOut self, PSIn & SIn) -> TSOut

        Parameters:
            SIn: PSIn &

        """
        return _snap.TSOut___lshift__(self, *args)

TSOut.EnableLnTrunc = new_instancemethod(_snap.TSOut_EnableLnTrunc,None,TSOut)
TSOut.DisableLnTrunc = new_instancemethod(_snap.TSOut_DisableLnTrunc,None,TSOut)
TSOut.PutBf = new_instancemethod(_snap.TSOut_PutBf,None,TSOut)
TSOut.Flush = new_instancemethod(_snap.TSOut_Flush,None,TSOut)
TSOut.GetFileId = new_instancemethod(_snap.TSOut_GetFileId,None,TSOut)
TSOut.PutMem = new_instancemethod(_snap.TSOut_PutMem,None,TSOut)
TSOut.PutCh = new_instancemethod(_snap.TSOut_PutCh,None,TSOut)
TSOut.PutBool = new_instancemethod(_snap.TSOut_PutBool,None,TSOut)
TSOut.PutInt = new_instancemethod(_snap.TSOut_PutInt,None,TSOut)
TSOut.PutUInt = new_instancemethod(_snap.TSOut_PutUInt,None,TSOut)
TSOut.PutFlt = new_instancemethod(_snap.TSOut_PutFlt,None,TSOut)
TSOut.PutStr = new_instancemethod(_snap.TSOut_PutStr,None,TSOut)
TSOut.PutStrLn = new_instancemethod(_snap.TSOut_PutStrLn,None,TSOut)
TSOut.PutStrFmt = new_instancemethod(_snap.TSOut_PutStrFmt,None,TSOut)
TSOut.PutStrFmtLn = new_instancemethod(_snap.TSOut_PutStrFmtLn,None,TSOut)
TSOut.PutIndent = new_instancemethod(_snap.TSOut_PutIndent,None,TSOut)
TSOut.PutLn = new_instancemethod(_snap.TSOut_PutLn,None,TSOut)
TSOut.PutDosLn = new_instancemethod(_snap.TSOut_PutDosLn,None,TSOut)
TSOut.PutSep = new_instancemethod(_snap.TSOut_PutSep,None,TSOut)
TSOut.PutSepLn = new_instancemethod(_snap.TSOut_PutSepLn,None,TSOut)
TSOut.SaveCs = new_instancemethod(_snap.TSOut_SaveCs,None,TSOut)
TSOut.SaveBf = new_instancemethod(_snap.TSOut_SaveBf,None,TSOut)
TSOut.Save = new_instancemethod(_snap.TSOut_Save,None,TSOut)
TSOut.__lshift__ = new_instancemethod(_snap.TSOut___lshift__,None,TSOut)
TSOut_swigregister = _snap.TSOut_swigregister
TSOut_swigregister(TSOut)
TSOut.StdOut = _snap.cvar.TSOut_StdOut

class TSInOut(TSIn,TSOut):
    """Proxy of C++ TSInOut class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TSInOut
    def SetPos(self, *args):
        """
        SetPos(TSInOut self, int const & Pos)

        Parameters:
            Pos: int const &

        """
        return _snap.TSInOut_SetPos(self, *args)

    def MovePos(self, *args):
        """
        MovePos(TSInOut self, int const & DPos)

        Parameters:
            DPos: int const &

        """
        return _snap.TSInOut_MovePos(self, *args)

    def GetPos(self):
        """
        GetPos(TSInOut self) -> int

        Parameters:
            self: TSInOut const *

        """
        return _snap.TSInOut_GetPos(self)

    def GetSize(self):
        """
        GetSize(TSInOut self) -> int

        Parameters:
            self: TSInOut const *

        """
        return _snap.TSInOut_GetSize(self)

    def Clr(self):
        """
        Clr(TSInOut self)

        Parameters:
            self: TSInOut *

        """
        return _snap.TSInOut_Clr(self)

TSInOut.SetPos = new_instancemethod(_snap.TSInOut_SetPos,None,TSInOut)
TSInOut.MovePos = new_instancemethod(_snap.TSInOut_MovePos,None,TSInOut)
TSInOut.GetPos = new_instancemethod(_snap.TSInOut_GetPos,None,TSInOut)
TSInOut.GetSize = new_instancemethod(_snap.TSInOut_GetSize,None,TSInOut)
TSInOut.Clr = new_instancemethod(_snap.TSInOut_Clr,None,TSInOut)
TSInOut_swigregister = _snap.TSInOut_swigregister
TSInOut_swigregister(TSInOut)

class TStdIn(TSIn):
    """Proxy of C++ TStdIn class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(TStdIn self) -> TStdIn"""
        _snap.TStdIn_swiginit(self,_snap.new_TStdIn())
    def New():
        """New() -> TPt< TSIn >"""
        return _snap.TStdIn_New()

    New = staticmethod(New)
    __swig_destroy__ = _snap.delete_TStdIn
TStdIn_swigregister = _snap.TStdIn_swigregister
TStdIn_swigregister(TStdIn)

def TStdIn_New():
  """TStdIn_New() -> TPt< TSIn >"""
  return _snap.TStdIn_New()

class TStdOut(TSOut):
    """Proxy of C++ TStdOut class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(TStdOut self) -> TStdOut"""
        _snap.TStdOut_swiginit(self,_snap.new_TStdOut())
    def New():
        """New() -> TPt< TSOut >"""
        return _snap.TStdOut_New()

    New = staticmethod(New)
    __swig_destroy__ = _snap.delete_TStdOut
TStdOut_swigregister = _snap.TStdOut_swigregister
TStdOut_swigregister(TStdOut)

def TStdOut_New():
  """TStdOut_New() -> TPt< TSOut >"""
  return _snap.TStdOut_New()

class TFIn(TSIn):
    """Proxy of C++ TFIn class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TFIn self, TStr FNm) -> TFIn

        Parameters:
            FNm: TStr const &

        __init__(TFIn self, TStr FNm, bool & OpenedP) -> TFIn

        Parameters:
            FNm: TStr const &
            OpenedP: bool &

        """
        _snap.TFIn_swiginit(self,_snap.new_TFIn(*args))
    def New(*args):
        """
        New(TStr FNm) -> PSIn

        Parameters:
            FNm: TStr const &

        New(TStr FNm, bool & OpenedP) -> PSIn

        Parameters:
            FNm: TStr const &
            OpenedP: bool &

        """
        return _snap.TFIn_New(*args)

    New = staticmethod(New)
    __swig_destroy__ = _snap.delete_TFIn
TFIn_swigregister = _snap.TFIn_swigregister
TFIn_swigregister(TFIn)

def TFIn_New(*args):
  """
    New(TStr FNm) -> PSIn

    Parameters:
        FNm: TStr const &

    TFIn_New(TStr FNm, bool & OpenedP) -> PSIn

    Parameters:
        FNm: TStr const &
        OpenedP: bool &

    """
  return _snap.TFIn_New(*args)

class TFOut(TSOut):
    """Proxy of C++ TFOut class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TFOut self, TStr _FNm, bool const & Append=False) -> TFOut

        Parameters:
            _FNm: TStr const &
            Append: bool const &

        __init__(TFOut self, TStr _FNm) -> TFOut

        Parameters:
            _FNm: TStr const &

        __init__(TFOut self, TStr _FNm, bool const & Append, bool & OpenedP) -> TFOut

        Parameters:
            _FNm: TStr const &
            Append: bool const &
            OpenedP: bool &

        """
        _snap.TFOut_swiginit(self,_snap.new_TFOut(*args))
    def New(*args):
        """
        New(TStr FNm, bool const & Append=False) -> PSOut

        Parameters:
            FNm: TStr const &
            Append: bool const &

        New(TStr FNm) -> PSOut

        Parameters:
            FNm: TStr const &

        New(TStr FNm, bool const & Append, bool & OpenedP) -> PSOut

        Parameters:
            FNm: TStr const &
            Append: bool const &
            OpenedP: bool &

        """
        return _snap.TFOut_New(*args)

    New = staticmethod(New)
    __swig_destroy__ = _snap.delete_TFOut
TFOut_swigregister = _snap.TFOut_swigregister
TFOut_swigregister(TFOut)

def TFOut_New(*args):
  """
    New(TStr FNm, bool const & Append=False) -> PSOut

    Parameters:
        FNm: TStr const &
        Append: bool const &

    New(TStr FNm) -> PSOut

    Parameters:
        FNm: TStr const &

    TFOut_New(TStr FNm, bool const & Append, bool & OpenedP) -> PSOut

    Parameters:
        FNm: TStr const &
        Append: bool const &
        OpenedP: bool &

    """
  return _snap.TFOut_New(*args)

faUndef = _snap.faUndef
faCreate = _snap.faCreate
faUpdate = _snap.faUpdate
faAppend = _snap.faAppend
faRdOnly = _snap.faRdOnly
faRestore = _snap.faRestore
class TMIn(TSIn):
    """Proxy of C++ TMIn class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TMIn self, void const * _Bf, int const & _BfL, bool const & TakeBf=False) -> TMIn

        Parameters:
            _Bf: void const *
            _BfL: int const &
            TakeBf: bool const &

        __init__(TMIn self, void const * _Bf, int const & _BfL) -> TMIn

        Parameters:
            _Bf: void const *
            _BfL: int const &

        __init__(TMIn self, TSIn SIn) -> TMIn

        Parameters:
            SIn: TSIn &

        __init__(TMIn self, char const * CStr) -> TMIn

        Parameters:
            CStr: char const *

        __init__(TMIn self, TStr Str) -> TMIn

        Parameters:
            Str: TStr const &

        __init__(TMIn self, TChA ChA) -> TMIn

        Parameters:
            ChA: TChA const &

        """
        _snap.TMIn_swiginit(self,_snap.new_TMIn(*args))
    def New(*args):
        """
        New(void const * _Bf, int const & _BfL, bool const & TakeBf=False) -> PSIn

        Parameters:
            _Bf: void const *
            _BfL: int const &
            TakeBf: bool const &

        New(void const * _Bf, int const & _BfL) -> PSIn

        Parameters:
            _Bf: void const *
            _BfL: int const &

        New(char const * CStr) -> PSIn

        Parameters:
            CStr: char const *

        New(TStr Str) -> PSIn

        Parameters:
            Str: TStr const &

        New(TChA ChA) -> PSIn

        Parameters:
            ChA: TChA const &

        """
        return _snap.TMIn_New(*args)

    New = staticmethod(New)
    __swig_destroy__ = _snap.delete_TMIn
    def GetBfAddr(self):
        """
        GetBfAddr(TMIn self) -> char *

        Parameters:
            self: TMIn *

        """
        return _snap.TMIn_GetBfAddr(self)

TMIn.GetBfAddr = new_instancemethod(_snap.TMIn_GetBfAddr,None,TMIn)
TMIn_swigregister = _snap.TMIn_swigregister
TMIn_swigregister(TMIn)

def TMIn_New(*args):
  """
    New(void const * _Bf, int const & _BfL, bool const & TakeBf=False) -> PSIn

    Parameters:
        _Bf: void const *
        _BfL: int const &
        TakeBf: bool const &

    New(void const * _Bf, int const & _BfL) -> PSIn

    Parameters:
        _Bf: void const *
        _BfL: int const &

    New(char const * CStr) -> PSIn

    Parameters:
        CStr: char const *

    New(TStr Str) -> PSIn

    Parameters:
        Str: TStr const &

    TMIn_New(TChA ChA) -> PSIn

    Parameters:
        ChA: TChA const &

    """
  return _snap.TMIn_New(*args)

class TMOut(TSOut):
    """Proxy of C++ TMOut class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def New(MxBfL=1024):
        """
        New(int const & MxBfL=1024) -> PSOut

        Parameters:
            MxBfL: int const &

        New() -> PSOut
        """
        return _snap.TMOut_New(MxBfL)

    New = staticmethod(New)
    def __init__(self, *args): 
        """
        __init__(TMOut self, int const & _MxBfL=1024) -> TMOut

        Parameters:
            _MxBfL: int const &

        __init__(TMOut self) -> TMOut
        __init__(TMOut self, char * _Bf, int const & _MxBfL) -> TMOut

        Parameters:
            _Bf: char *
            _MxBfL: int const &

        """
        _snap.TMOut_swiginit(self,_snap.new_TMOut(*args))
    __swig_destroy__ = _snap.delete_TMOut
    def AppendBf(self, *args):
        """
        AppendBf(TMOut self, void const * LBf, TSize const & LBfL)

        Parameters:
            LBf: void const *
            LBfL: TSize const &

        """
        return _snap.TMOut_AppendBf(self, *args)

    def Len(self):
        """
        Len(TMOut self) -> int

        Parameters:
            self: TMOut const *

        """
        return _snap.TMOut_Len(self)

    def Clr(self):
        """
        Clr(TMOut self)

        Parameters:
            self: TMOut *

        """
        return _snap.TMOut_Clr(self)

    def GetCh(self, *args):
        """
        GetCh(TMOut self, int const & ChN) -> char

        Parameters:
            ChN: int const &

        """
        return _snap.TMOut_GetCh(self, *args)

    def GetAsStr(self):
        """
        GetAsStr(TMOut self) -> TStr

        Parameters:
            self: TMOut const *

        """
        return _snap.TMOut_GetAsStr(self)

    def CutBf(self, *args):
        """
        CutBf(TMOut self, int const & CutBfL)

        Parameters:
            CutBfL: int const &

        """
        return _snap.TMOut_CutBf(self, *args)

    def GetSIn(self, *args):
        """
        GetSIn(TMOut self, bool const & IsCut=True, int const & CutBfL=-1) -> PSIn

        Parameters:
            IsCut: bool const &
            CutBfL: int const &

        GetSIn(TMOut self, bool const & IsCut=True) -> PSIn

        Parameters:
            IsCut: bool const &

        GetSIn(TMOut self) -> PSIn

        Parameters:
            self: TMOut *

        """
        return _snap.TMOut_GetSIn(self, *args)

    def GetBfAddr(self):
        """
        GetBfAddr(TMOut self) -> char *

        Parameters:
            self: TMOut const *

        """
        return _snap.TMOut_GetBfAddr(self)

    def IsCrLfLn(self):
        """
        IsCrLfLn(TMOut self) -> bool

        Parameters:
            self: TMOut const *

        """
        return _snap.TMOut_IsCrLfLn(self)

    def GetCrLfLn(self):
        """
        GetCrLfLn(TMOut self) -> TStr

        Parameters:
            self: TMOut *

        """
        return _snap.TMOut_GetCrLfLn(self)

    def IsEolnLn(self):
        """
        IsEolnLn(TMOut self) -> bool

        Parameters:
            self: TMOut const *

        """
        return _snap.TMOut_IsEolnLn(self)

    def GetEolnLn(self, *args):
        """
        GetEolnLn(TMOut self, bool const & DoAddEoln, bool const & DoCutBf) -> TStr

        Parameters:
            DoAddEoln: bool const &
            DoCutBf: bool const &

        """
        return _snap.TMOut_GetEolnLn(self, *args)

    def MkEolnLn(self):
        """
        MkEolnLn(TMOut self)

        Parameters:
            self: TMOut *

        """
        return _snap.TMOut_MkEolnLn(self)

TMOut.AppendBf = new_instancemethod(_snap.TMOut_AppendBf,None,TMOut)
TMOut.Len = new_instancemethod(_snap.TMOut_Len,None,TMOut)
TMOut.Clr = new_instancemethod(_snap.TMOut_Clr,None,TMOut)
TMOut.GetCh = new_instancemethod(_snap.TMOut_GetCh,None,TMOut)
TMOut.GetAsStr = new_instancemethod(_snap.TMOut_GetAsStr,None,TMOut)
TMOut.CutBf = new_instancemethod(_snap.TMOut_CutBf,None,TMOut)
TMOut.GetSIn = new_instancemethod(_snap.TMOut_GetSIn,None,TMOut)
TMOut.GetBfAddr = new_instancemethod(_snap.TMOut_GetBfAddr,None,TMOut)
TMOut.IsCrLfLn = new_instancemethod(_snap.TMOut_IsCrLfLn,None,TMOut)
TMOut.GetCrLfLn = new_instancemethod(_snap.TMOut_GetCrLfLn,None,TMOut)
TMOut.IsEolnLn = new_instancemethod(_snap.TMOut_IsEolnLn,None,TMOut)
TMOut.GetEolnLn = new_instancemethod(_snap.TMOut_GetEolnLn,None,TMOut)
TMOut.MkEolnLn = new_instancemethod(_snap.TMOut_MkEolnLn,None,TMOut)
TMOut_swigregister = _snap.TMOut_swigregister
TMOut_swigregister(TMOut)

def TMOut_New(MxBfL=1024):
  """
    New(int const & MxBfL=1024) -> PSOut

    Parameters:
        MxBfL: int const &

    TMOut_New() -> PSOut
    """
  return _snap.TMOut_New(MxBfL)

class TChRet(object):
    """Proxy of C++ TChRet class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TChRet self, PSIn const & _SIn, char const & _EofCh=0) -> TChRet

        Parameters:
            _SIn: PSIn const &
            _EofCh: char const &

        __init__(TChRet self, PSIn const & _SIn) -> TChRet

        Parameters:
            _SIn: PSIn const &

        """
        _snap.TChRet_swiginit(self,_snap.new_TChRet(*args))
    def Eof(self):
        """
        Eof(TChRet self) -> bool

        Parameters:
            self: TChRet const *

        """
        return _snap.TChRet_Eof(self)

    def GetCh(self):
        """
        GetCh(TChRet self) -> char

        Parameters:
            self: TChRet *

        """
        return _snap.TChRet_GetCh(self)

    def __call__(self):
        """
        __call__(TChRet self) -> char

        Parameters:
            self: TChRet *

        """
        return _snap.TChRet___call__(self)

    __swig_destroy__ = _snap.delete_TChRet
TChRet.Eof = new_instancemethod(_snap.TChRet_Eof,None,TChRet)
TChRet.GetCh = new_instancemethod(_snap.TChRet_GetCh,None,TChRet)
TChRet.__call__ = new_instancemethod(_snap.TChRet___call__,None,TChRet)
TChRet_swigregister = _snap.TChRet_swigregister
TChRet_swigregister(TChRet)

class TLnRet(object):
    """Proxy of C++ TLnRet class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TLnRet self, PSIn const & _SIn) -> TLnRet

        Parameters:
            _SIn: PSIn const &

        """
        _snap.TLnRet_swiginit(self,_snap.new_TLnRet(*args))
    def NextLn(self, *args):
        """
        NextLn(TLnRet self, TStr LnStr) -> bool

        Parameters:
            LnStr: TStr &

        """
        return _snap.TLnRet_NextLn(self, *args)

    __swig_destroy__ = _snap.delete_TLnRet
TLnRet.NextLn = new_instancemethod(_snap.TLnRet_NextLn,None,TLnRet)
TLnRet_swigregister = _snap.TLnRet_swigregister
TLnRet_swigregister(TLnRet)

class TFile(object):
    """Proxy of C++ TFile class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def Exists(*args):
        """
        Exists(TStr FNm) -> bool

        Parameters:
            FNm: TStr const &

        """
        return _snap.TFile_Exists(*args)

    Exists = staticmethod(Exists)
    def Del(*args):
        """
        Del(TStr FNm, bool const & ThrowExceptP=True)

        Parameters:
            FNm: TStr const &
            ThrowExceptP: bool const &

        Del(TStr FNm)

        Parameters:
            FNm: TStr const &

        """
        return _snap.TFile_Del(*args)

    Del = staticmethod(Del)
    def DelWc(*args):
        """
        DelWc(TStr WcStr, bool const & RecurseDirP=False)

        Parameters:
            WcStr: TStr const &
            RecurseDirP: bool const &

        DelWc(TStr WcStr)

        Parameters:
            WcStr: TStr const &

        """
        return _snap.TFile_DelWc(*args)

    DelWc = staticmethod(DelWc)
    def Rename(*args):
        """
        Rename(TStr SrcFNm, TStr DstFNm)

        Parameters:
            SrcFNm: TStr const &
            DstFNm: TStr const &

        """
        return _snap.TFile_Rename(*args)

    Rename = staticmethod(Rename)
    def GetUniqueFNm(*args):
        """
        GetUniqueFNm(TStr FNm) -> TStr

        Parameters:
            FNm: TStr const &

        """
        return _snap.TFile_GetUniqueFNm(*args)

    GetUniqueFNm = staticmethod(GetUniqueFNm)
    def __init__(self): 
        """__init__(TFile self) -> TFile"""
        _snap.TFile_swiginit(self,_snap.new_TFile())
    __swig_destroy__ = _snap.delete_TFile
TFile_swigregister = _snap.TFile_swigregister
TFile_swigregister(TFile)
TFile.TxtFExt = _snap.cvar.TFile_TxtFExt
TFile.HtmlFExt = _snap.cvar.TFile_HtmlFExt
TFile.HtmFExt = _snap.cvar.TFile_HtmFExt
TFile.GifFExt = _snap.cvar.TFile_GifFExt
TFile.JarFExt = _snap.cvar.TFile_JarFExt

def TFile_Exists(*args):
  """
    TFile_Exists(TStr FNm) -> bool

    Parameters:
        FNm: TStr const &

    """
  return _snap.TFile_Exists(*args)

def TFile_Del(*args):
  """
    Del(TStr FNm, bool const & ThrowExceptP=True)

    Parameters:
        FNm: TStr const &
        ThrowExceptP: bool const &

    TFile_Del(TStr FNm)

    Parameters:
        FNm: TStr const &

    """
  return _snap.TFile_Del(*args)

def TFile_DelWc(*args):
  """
    DelWc(TStr WcStr, bool const & RecurseDirP=False)

    Parameters:
        WcStr: TStr const &
        RecurseDirP: bool const &

    TFile_DelWc(TStr WcStr)

    Parameters:
        WcStr: TStr const &

    """
  return _snap.TFile_DelWc(*args)

def TFile_Rename(*args):
  """
    TFile_Rename(TStr SrcFNm, TStr DstFNm)

    Parameters:
        SrcFNm: TStr const &
        DstFNm: TStr const &

    """
  return _snap.TFile_Rename(*args)

def TFile_GetUniqueFNm(*args):
  """
    TFile_GetUniqueFNm(TStr FNm) -> TStr

    Parameters:
        FNm: TStr const &

    """
  return _snap.TFile_GetUniqueFNm(*args)


def InfoNotify(*args):
  """
    InfoNotify(char const * NotifyCStr)

    Parameters:
        NotifyCStr: char const *

    InfoNotify(TStr MsgStr)

    Parameters:
        MsgStr: TStr const &

    """
  return _snap.InfoNotify(*args)

def WarnNotify(*args):
  """
    WarnNotify(char const * NotifyCStr)

    Parameters:
        NotifyCStr: char const *

    WarnNotify(TStr MsgStr)

    Parameters:
        MsgStr: TStr const &

    """
  return _snap.WarnNotify(*args)

def ErrNotify(*args):
  """
    ErrNotify(char const * NotifyCStr)

    Parameters:
        NotifyCStr: char const *

    ErrNotify(TStr MsgStr)

    Parameters:
        MsgStr: TStr const &

    """
  return _snap.ErrNotify(*args)

def StatNotify(*args):
  """
    StatNotify(char const * NotifyCStr)

    Parameters:
        NotifyCStr: char const *

    StatNotify(TStr MsgStr)

    Parameters:
        MsgStr: TStr const &

    """
  return _snap.StatNotify(*args)
ntInfo = _snap.ntInfo
ntWarn = _snap.ntWarn
ntErr = _snap.ntErr
ntStat = _snap.ntStat
class TNotify(object):
    """Proxy of C++ TNotify class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(TNotify self) -> TNotify"""
        _snap.TNotify_swiginit(self,_snap.new_TNotify())
    __swig_destroy__ = _snap.delete_TNotify
    def OnNotifyFmt(self, *args):
        """
        OnNotifyFmt(TNotify self, TNotifyType const & Type, char const * FmtStr)

        Parameters:
            Type: TNotifyType const &
            FmtStr: char const *

        """
        return _snap.TNotify_OnNotifyFmt(self, *args)

    def OnStatusFmt(self, *args):
        """
        OnStatusFmt(TNotify self, char const * FmtStr)

        Parameters:
            FmtStr: char const *

        """
        return _snap.TNotify_OnStatusFmt(self, *args)

    def OnLnFmt(self, *args):
        """
        OnLnFmt(TNotify self, char const * FmtStr)

        Parameters:
            FmtStr: char const *

        """
        return _snap.TNotify_OnLnFmt(self, *args)

    def OnTxtFmt(self, *args):
        """
        OnTxtFmt(TNotify self, char const * FmtStr)

        Parameters:
            FmtStr: char const *

        """
        return _snap.TNotify_OnTxtFmt(self, *args)

    def GetTypeStr(*args):
        """
        GetTypeStr(TNotifyType const & Type, bool const & Brief=True) -> TStr

        Parameters:
            Type: TNotifyType const &
            Brief: bool const &

        GetTypeStr(TNotifyType const & Type) -> TStr

        Parameters:
            Type: TNotifyType const &

        """
        return _snap.TNotify_GetTypeStr(*args)

    GetTypeStr = staticmethod(GetTypeStr)
    def OnNotify(*args):
        """
        OnNotify(TNotifyType const & arg2, TStr arg3)

        Parameters:
            arg2: TNotifyType const &
            arg3: TStr const &

        OnNotify(PNotify const & Notify, TNotifyType const & Type, TStr MsgStr)

        Parameters:
            Notify: PNotify const &
            Type: TNotifyType const &
            MsgStr: TStr const &

        """
        return _snap.TNotify_OnNotify(*args)

    OnNotify = staticmethod(OnNotify)
    def OnStatus(*args):
        """
        OnStatus(TStr arg2)

        Parameters:
            arg2: TStr const &

        OnStatus(PNotify const & Notify, TStr MsgStr)

        Parameters:
            Notify: PNotify const &
            MsgStr: TStr const &

        """
        return _snap.TNotify_OnStatus(*args)

    OnStatus = staticmethod(OnStatus)
    def OnLn(*args):
        """
        OnLn(TStr arg2)

        Parameters:
            arg2: TStr const &

        OnLn(PNotify const & Notify, TStr MsgStr)

        Parameters:
            Notify: PNotify const &
            MsgStr: TStr const &

        """
        return _snap.TNotify_OnLn(*args)

    OnLn = staticmethod(OnLn)
    def OnTxt(*args):
        """
        OnTxt(TStr arg2)

        Parameters:
            arg2: TStr const &

        OnTxt(PNotify const & Notify, TStr MsgStr)

        Parameters:
            Notify: PNotify const &
            MsgStr: TStr const &

        """
        return _snap.TNotify_OnTxt(*args)

    OnTxt = staticmethod(OnTxt)
    def DfOnNotify(*args):
        """
        DfOnNotify(TNotifyType const & Type, TStr MsgStr)

        Parameters:
            Type: TNotifyType const &
            MsgStr: TStr const &

        """
        return _snap.TNotify_DfOnNotify(*args)

    DfOnNotify = staticmethod(DfOnNotify)
TNotify.OnNotifyFmt = new_instancemethod(_snap.TNotify_OnNotifyFmt,None,TNotify)
TNotify.OnStatusFmt = new_instancemethod(_snap.TNotify_OnStatusFmt,None,TNotify)
TNotify.OnLnFmt = new_instancemethod(_snap.TNotify_OnLnFmt,None,TNotify)
TNotify.OnTxtFmt = new_instancemethod(_snap.TNotify_OnTxtFmt,None,TNotify)
TNotify_swigregister = _snap.TNotify_swigregister
TNotify_swigregister(TNotify)

def TNotify_GetTypeStr(*args):
  """
    GetTypeStr(TNotifyType const & Type, bool const & Brief=True) -> TStr

    Parameters:
        Type: TNotifyType const &
        Brief: bool const &

    TNotify_GetTypeStr(TNotifyType const & Type) -> TStr

    Parameters:
        Type: TNotifyType const &

    """
  return _snap.TNotify_GetTypeStr(*args)

def TNotify_OnNotify(*args):
  """
    OnNotify(TNotifyType const & arg2, TStr arg3)

    Parameters:
        arg2: TNotifyType const &
        arg3: TStr const &

    TNotify_OnNotify(PNotify const & Notify, TNotifyType const & Type, TStr MsgStr)

    Parameters:
        Notify: PNotify const &
        Type: TNotifyType const &
        MsgStr: TStr const &

    """
  return _snap.TNotify_OnNotify(*args)

def TNotify_OnStatus(*args):
  """
    OnStatus(TStr arg2)

    Parameters:
        arg2: TStr const &

    TNotify_OnStatus(PNotify const & Notify, TStr MsgStr)

    Parameters:
        Notify: PNotify const &
        MsgStr: TStr const &

    """
  return _snap.TNotify_OnStatus(*args)

def TNotify_OnLn(*args):
  """
    OnLn(TStr arg2)

    Parameters:
        arg2: TStr const &

    TNotify_OnLn(PNotify const & Notify, TStr MsgStr)

    Parameters:
        Notify: PNotify const &
        MsgStr: TStr const &

    """
  return _snap.TNotify_OnLn(*args)

def TNotify_OnTxt(*args):
  """
    OnTxt(TStr arg2)

    Parameters:
        arg2: TStr const &

    TNotify_OnTxt(PNotify const & Notify, TStr MsgStr)

    Parameters:
        Notify: PNotify const &
        MsgStr: TStr const &

    """
  return _snap.TNotify_OnTxt(*args)

def TNotify_DfOnNotify(*args):
  """
    TNotify_DfOnNotify(TNotifyType const & Type, TStr MsgStr)

    Parameters:
        Type: TNotifyType const &
        MsgStr: TStr const &

    """
  return _snap.TNotify_DfOnNotify(*args)
TNotify.NullNotify = _snap.cvar.TNotify_NullNotify
TNotify.StdNotify = _snap.cvar.TNotify_StdNotify
TNotify.StdErrNotify = _snap.cvar.TNotify_StdErrNotify

class TNullNotify(TNotify):
    """Proxy of C++ TNullNotify class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(TNullNotify self) -> TNullNotify"""
        _snap.TNullNotify_swiginit(self,_snap.new_TNullNotify())
    def New():
        """New() -> PNotify"""
        return _snap.TNullNotify_New()

    New = staticmethod(New)
    __swig_destroy__ = _snap.delete_TNullNotify
TNullNotify_swigregister = _snap.TNullNotify_swigregister
TNullNotify_swigregister(TNullNotify)

def TNullNotify_New():
  """TNullNotify_New() -> PNotify"""
  return _snap.TNullNotify_New()

class TCallbackNotify(TNotify):
    """Proxy of C++ TCallbackNotify class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TCallbackNotify self, TCallbackF const & _CallbackF) -> TCallbackNotify

        Parameters:
            _CallbackF: TCallbackF const &

        """
        _snap.TCallbackNotify_swiginit(self,_snap.new_TCallbackNotify(*args))
    def New(*args):
        """
        New(TCallbackF const & CallbackF) -> PNotify

        Parameters:
            CallbackF: TCallbackF const &

        """
        return _snap.TCallbackNotify_New(*args)

    New = staticmethod(New)
    __swig_destroy__ = _snap.delete_TCallbackNotify
TCallbackNotify_swigregister = _snap.TCallbackNotify_swigregister
TCallbackNotify_swigregister(TCallbackNotify)

def TCallbackNotify_New(*args):
  """
    TCallbackNotify_New(TCallbackF const & CallbackF) -> PNotify

    Parameters:
        CallbackF: TCallbackF const &

    """
  return _snap.TCallbackNotify_New(*args)

class TNativeCallbackNotify(TNotify):
    """Proxy of C++ TNativeCallbackNotify class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TNativeCallbackNotify self, TNativeCallbackF const & _CallbackF) -> TNativeCallbackNotify

        Parameters:
            _CallbackF: TNativeCallbackF const &

        """
        _snap.TNativeCallbackNotify_swiginit(self,_snap.new_TNativeCallbackNotify(*args))
    def New(*args):
        """
        New(TNativeCallbackF const & CallbackF) -> PNotify

        Parameters:
            CallbackF: TNativeCallbackF const &

        """
        return _snap.TNativeCallbackNotify_New(*args)

    New = staticmethod(New)
    __swig_destroy__ = _snap.delete_TNativeCallbackNotify
TNativeCallbackNotify_swigregister = _snap.TNativeCallbackNotify_swigregister
TNativeCallbackNotify_swigregister(TNativeCallbackNotify)

def TNativeCallbackNotify_New(*args):
  """
    TNativeCallbackNotify_New(TNativeCallbackF const & CallbackF) -> PNotify

    Parameters:
        CallbackF: TNativeCallbackF const &

    """
  return _snap.TNativeCallbackNotify_New(*args)

class TStdNotify(TNotify):
    """Proxy of C++ TStdNotify class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(TStdNotify self) -> TStdNotify"""
        _snap.TStdNotify_swiginit(self,_snap.new_TStdNotify())
    def New():
        """New() -> PNotify"""
        return _snap.TStdNotify_New()

    New = staticmethod(New)
    __swig_destroy__ = _snap.delete_TStdNotify
TStdNotify_swigregister = _snap.TStdNotify_swigregister
TStdNotify_swigregister(TStdNotify)

def TStdNotify_New():
  """TStdNotify_New() -> PNotify"""
  return _snap.TStdNotify_New()

class TStdErrNotify(TNotify):
    """Proxy of C++ TStdErrNotify class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(TStdErrNotify self) -> TStdErrNotify"""
        _snap.TStdErrNotify_swiginit(self,_snap.new_TStdErrNotify())
    def New():
        """New() -> PNotify"""
        return _snap.TStdErrNotify_New()

    New = staticmethod(New)
    __swig_destroy__ = _snap.delete_TStdErrNotify
TStdErrNotify_swigregister = _snap.TStdErrNotify_swigregister
TStdErrNotify_swigregister(TStdErrNotify)

def TStdErrNotify_New():
  """TStdErrNotify_New() -> PNotify"""
  return _snap.TStdErrNotify_New()

class TLogNotify(TNotify):
    """Proxy of C++ TLogNotify class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TLogNotify self, PNotify const & _Notify) -> TLogNotify

        Parameters:
            _Notify: PNotify const &

        """
        _snap.TLogNotify_swiginit(self,_snap.new_TLogNotify(*args))
    def New(*args):
        """
        New(PNotify const & Notify) -> PNotify

        Parameters:
            Notify: PNotify const &

        """
        return _snap.TLogNotify_New(*args)

    New = staticmethod(New)
    __swig_destroy__ = _snap.delete_TLogNotify
TLogNotify_swigregister = _snap.TLogNotify_swigregister
TLogNotify_swigregister(TLogNotify)

def TLogNotify_New(*args):
  """
    TLogNotify_New(PNotify const & Notify) -> PNotify

    Parameters:
        Notify: PNotify const &

    """
  return _snap.TLogNotify_New(*args)

class TExcept(object):
    """Proxy of C++ TExcept class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TExcept self, TStr _MsgStr) -> TExcept

        Parameters:
            _MsgStr: TStr const &

        __init__(TExcept self, TStr _MsgStr, TStr _LocStr) -> TExcept

        Parameters:
            _MsgStr: TStr const &
            _LocStr: TStr const &

        """
        _snap.TExcept_swiginit(self,_snap.new_TExcept(*args))
    def New(*args):
        """
        New(TStr MsgStr, TStr LocStr=TStr()) -> PExcept

        Parameters:
            MsgStr: TStr const &
            LocStr: TStr const &

        New(TStr MsgStr) -> PExcept

        Parameters:
            MsgStr: TStr const &

        """
        return _snap.TExcept_New(*args)

    New = staticmethod(New)
    __swig_destroy__ = _snap.delete_TExcept
    def GetMsgStr(self):
        """
        GetMsgStr(TExcept self) -> TStr

        Parameters:
            self: TExcept const *

        """
        return _snap.TExcept_GetMsgStr(self)

    def GetLocStr(self):
        """
        GetLocStr(TExcept self) -> TStr

        Parameters:
            self: TExcept const *

        """
        return _snap.TExcept_GetLocStr(self)

    OnExceptF = _swig_property(_snap.TExcept_OnExceptF_get, _snap.TExcept_OnExceptF_set)
    def IsOnExceptF():
        """IsOnExceptF() -> bool"""
        return _snap.TExcept_IsOnExceptF()

    IsOnExceptF = staticmethod(IsOnExceptF)
    def PutOnExceptF(*args):
        """
        PutOnExceptF(TExcept::TOnExceptF _OnExceptF)

        Parameters:
            _OnExceptF: TExcept::TOnExceptF

        """
        return _snap.TExcept_PutOnExceptF(*args)

    PutOnExceptF = staticmethod(PutOnExceptF)
    def GetOnExceptF():
        """GetOnExceptF() -> TExcept::TOnExceptF"""
        return _snap.TExcept_GetOnExceptF()

    GetOnExceptF = staticmethod(GetOnExceptF)
    def Throw(*args):
        """
        Throw(TStr MsgStr)

        Parameters:
            MsgStr: TStr const &

        Throw(TStr MsgStr, TStr ArgStr)

        Parameters:
            MsgStr: TStr const &
            ArgStr: TStr const &

        Throw(TStr MsgStr, TStr ArgStr1, TStr ArgStr2)

        Parameters:
            MsgStr: TStr const &
            ArgStr1: TStr const &
            ArgStr2: TStr const &

        """
        return _snap.TExcept_Throw(*args)

    Throw = staticmethod(Throw)
    def ThrowFull(*args):
        """
        ThrowFull(TStr MsgStr, TStr LocStr)

        Parameters:
            MsgStr: TStr const &
            LocStr: TStr const &

        """
        return _snap.TExcept_ThrowFull(*args)

    ThrowFull = staticmethod(ThrowFull)
TExcept.GetMsgStr = new_instancemethod(_snap.TExcept_GetMsgStr,None,TExcept)
TExcept.GetLocStr = new_instancemethod(_snap.TExcept_GetLocStr,None,TExcept)
TExcept_swigregister = _snap.TExcept_swigregister
TExcept_swigregister(TExcept)

def TExcept_New(*args):
  """
    New(TStr MsgStr, TStr LocStr=TStr()) -> PExcept

    Parameters:
        MsgStr: TStr const &
        LocStr: TStr const &

    TExcept_New(TStr MsgStr) -> PExcept

    Parameters:
        MsgStr: TStr const &

    """
  return _snap.TExcept_New(*args)

def TExcept_IsOnExceptF():
  """TExcept_IsOnExceptF() -> bool"""
  return _snap.TExcept_IsOnExceptF()

def TExcept_PutOnExceptF(*args):
  """
    TExcept_PutOnExceptF(TExcept::TOnExceptF _OnExceptF)

    Parameters:
        _OnExceptF: TExcept::TOnExceptF

    """
  return _snap.TExcept_PutOnExceptF(*args)

def TExcept_GetOnExceptF():
  """TExcept_GetOnExceptF() -> TExcept::TOnExceptF"""
  return _snap.TExcept_GetOnExceptF()

def TExcept_Throw(*args):
  """
    Throw(TStr MsgStr)

    Parameters:
        MsgStr: TStr const &

    Throw(TStr MsgStr, TStr ArgStr)

    Parameters:
        MsgStr: TStr const &
        ArgStr: TStr const &

    TExcept_Throw(TStr MsgStr, TStr ArgStr1, TStr ArgStr2)

    Parameters:
        MsgStr: TStr const &
        ArgStr1: TStr const &
        ArgStr2: TStr const &

    """
  return _snap.TExcept_Throw(*args)

def TExcept_ThrowFull(*args):
  """
    TExcept_ThrowFull(TStr MsgStr, TStr LocStr)

    Parameters:
        MsgStr: TStr const &
        LocStr: TStr const &

    """
  return _snap.TExcept_ThrowFull(*args)

gfUndef = _snap.gfUndef
gfDirected = _snap.gfDirected
gfMultiGraph = _snap.gfMultiGraph
gfNodeDat = _snap.gfNodeDat
gfEdgeDat = _snap.gfEdgeDat
gfSources = _snap.gfSources
gfBipart = _snap.gfBipart
gfMx = _snap.gfMx

def GetFlagStr(*args):
  """
    GetFlagStr(TGraphFlag const & GraphFlag) -> TStr

    Parameters:
        GraphFlag: TGraphFlag const &

    """
  return _snap.GetFlagStr(*args)
class TUnionFind(object):
    """Proxy of C++ TUnionFind class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def Parent(self, *args):
        """
        Parent(TUnionFind self, int const & Key) -> TInt

        Parameters:
            Key: int const &

        """
        return _snap.TUnionFind_Parent(self, *args)

    def Rank(self, *args):
        """
        Rank(TUnionFind self, int const & Key) -> TInt

        Parameters:
            Key: int const &

        """
        return _snap.TUnionFind_Rank(self, *args)

    def __init__(self, *args): 
        """
        __init__(TUnionFind self) -> TUnionFind
        __init__(TUnionFind self, int const & ExpectKeys) -> TUnionFind

        Parameters:
            ExpectKeys: int const &

        __init__(TUnionFind self, TUnionFind UnionFind) -> TUnionFind

        Parameters:
            UnionFind: TUnionFind const &

        """
        _snap.TUnionFind_swiginit(self,_snap.new_TUnionFind(*args))
    def Len(self):
        """
        Len(TUnionFind self) -> int

        Parameters:
            self: TUnionFind const *

        """
        return _snap.TUnionFind_Len(self)

    def IsKey(self, *args):
        """
        IsKey(TUnionFind self, int const & Key) -> bool

        Parameters:
            Key: int const &

        """
        return _snap.TUnionFind_IsKey(self, *args)

    def GetKeyI(self, *args):
        """
        GetKeyI(TUnionFind self, int const & KeyN) -> int

        Parameters:
            KeyN: int const &

        """
        return _snap.TUnionFind_GetKeyI(self, *args)

    def Find(self, *args):
        """
        Find(TUnionFind self, int const & Key) -> int

        Parameters:
            Key: int const &

        """
        return _snap.TUnionFind_Find(self, *args)

    def Add(self, *args):
        """
        Add(TUnionFind self, int const & Key) -> int

        Parameters:
            Key: int const &

        """
        return _snap.TUnionFind_Add(self, *args)

    def Union(self, *args):
        """
        Union(TUnionFind self, int const & Key1, int const & Key2)

        Parameters:
            Key1: int const &
            Key2: int const &

        """
        return _snap.TUnionFind_Union(self, *args)

    def IsSameSet(self, *args):
        """
        IsSameSet(TUnionFind self, int const & Key1, int const & Key2) -> bool

        Parameters:
            Key1: int const &
            Key2: int const &

        """
        return _snap.TUnionFind_IsSameSet(self, *args)

    def Dump(self):
        """
        Dump(TUnionFind self)

        Parameters:
            self: TUnionFind *

        """
        return _snap.TUnionFind_Dump(self)

    __swig_destroy__ = _snap.delete_TUnionFind
TUnionFind.Parent = new_instancemethod(_snap.TUnionFind_Parent,None,TUnionFind)
TUnionFind.Rank = new_instancemethod(_snap.TUnionFind_Rank,None,TUnionFind)
TUnionFind.Len = new_instancemethod(_snap.TUnionFind_Len,None,TUnionFind)
TUnionFind.IsKey = new_instancemethod(_snap.TUnionFind_IsKey,None,TUnionFind)
TUnionFind.GetKeyI = new_instancemethod(_snap.TUnionFind_GetKeyI,None,TUnionFind)
TUnionFind.Find = new_instancemethod(_snap.TUnionFind_Find,None,TUnionFind)
TUnionFind.Add = new_instancemethod(_snap.TUnionFind_Add,None,TUnionFind)
TUnionFind.Union = new_instancemethod(_snap.TUnionFind_Union,None,TUnionFind)
TUnionFind.IsSameSet = new_instancemethod(_snap.TUnionFind_IsSameSet,None,TUnionFind)
TUnionFind.Dump = new_instancemethod(_snap.TUnionFind_Dump,None,TUnionFind)
TUnionFind_swigregister = _snap.TUnionFind_swigregister
TUnionFind_swigregister(TUnionFind)


def CalcEffDiam(*args):
  """
    CalcEffDiam(TIntFltKdV DistNbrsCdfV, double const & Percentile=0.9) -> double

    Parameters:
        DistNbrsCdfV: TIntFltKdV const &
        Percentile: double const &

    CalcEffDiam(TIntFltKdV DistNbrsCdfV) -> double

    Parameters:
        DistNbrsCdfV: TIntFltKdV const &

    CalcEffDiam(TFltPrV DistNbrsCdfV, double const & Percentile=0.9) -> double

    Parameters:
        DistNbrsCdfV: TFltPrV const &
        Percentile: double const &

    CalcEffDiam(TFltPrV DistNbrsCdfV) -> double

    Parameters:
        DistNbrsCdfV: TFltPrV const &

    """
  return _snap.CalcEffDiam(*args)

def CalcEffDiamPdf(*args):
  """
    CalcEffDiamPdf(TIntFltKdV DistNbrsPdfV, double const & Percentile=0.9) -> double

    Parameters:
        DistNbrsPdfV: TIntFltKdV const &
        Percentile: double const &

    CalcEffDiamPdf(TIntFltKdV DistNbrsPdfV) -> double

    Parameters:
        DistNbrsPdfV: TIntFltKdV const &

    CalcEffDiamPdf(TFltPrV DistNbrsPdfV, double const & Percentile=0.9) -> double

    Parameters:
        DistNbrsPdfV: TFltPrV const &
        Percentile: double const &

    CalcEffDiamPdf(TFltPrV DistNbrsPdfV) -> double

    Parameters:
        DistNbrsPdfV: TFltPrV const &

    """
  return _snap.CalcEffDiamPdf(*args)

def CalcAvgDiamPdf(*args):
  """
    CalcAvgDiamPdf(TIntFltKdV DistNbrsPdfV) -> double

    Parameters:
        DistNbrsPdfV: TIntFltKdV const &

    CalcAvgDiamPdf(TFltPrV DistNbrsPdfV) -> double

    Parameters:
        DistNbrsPdfV: TFltPrV const &

    """
  return _snap.CalcAvgDiamPdf(*args)

def GetDegreeCentr(*args):
  """
    GetDegreeCentr(PUNGraph Graph, int const & NId) -> double

    Parameters:
        Graph: PUNGraph const &
        NId: int const &

    """
  return _snap.GetDegreeCentr(*args)

def GetFarnessCentr(*args):
  """
    GetFarnessCentr(PUNGraph Graph, int const & NId) -> double

    Parameters:
        Graph: PUNGraph const &
        NId: int const &

    """
  return _snap.GetFarnessCentr(*args)

def GetClosenessCentr(*args):
  """
    GetClosenessCentr(PUNGraph Graph, int const & NId) -> double

    Parameters:
        Graph: PUNGraph const &
        NId: int const &

    """
  return _snap.GetClosenessCentr(*args)

def GetBetweennessCentr(*args):
  """
    GetBetweennessCentr(PUNGraph Graph, TIntFltH NIdBtwH, double const & NodeFrac=1.0)

    Parameters:
        Graph: PUNGraph const &
        NIdBtwH: TIntFltH &
        NodeFrac: double const &

    GetBetweennessCentr(PUNGraph Graph, TIntFltH NIdBtwH)

    Parameters:
        Graph: PUNGraph const &
        NIdBtwH: TIntFltH &

    GetBetweennessCentr(PUNGraph Graph, TIntPrFltH EdgeBtwH, double const & NodeFrac=1.0)

    Parameters:
        Graph: PUNGraph const &
        EdgeBtwH: TIntPrFltH &
        NodeFrac: double const &

    GetBetweennessCentr(PUNGraph Graph, TIntPrFltH EdgeBtwH)

    Parameters:
        Graph: PUNGraph const &
        EdgeBtwH: TIntPrFltH &

    GetBetweennessCentr(PUNGraph Graph, TIntFltH NIdBtwH, TIntPrFltH EdgeBtwH, double const & NodeFrac=1.0)

    Parameters:
        Graph: PUNGraph const &
        NIdBtwH: TIntFltH &
        EdgeBtwH: TIntPrFltH &
        NodeFrac: double const &

    GetBetweennessCentr(PUNGraph Graph, TIntFltH NIdBtwH, TIntPrFltH EdgeBtwH)

    Parameters:
        Graph: PUNGraph const &
        NIdBtwH: TIntFltH &
        EdgeBtwH: TIntPrFltH &

    GetBetweennessCentr(PUNGraph Graph, TIntV BtwNIdV, TIntFltH NodeBtwH, bool const & DoNodeCent, TIntPrFltH EdgeBtwH, 
        bool const & DoEdgeCent)

    Parameters:
        Graph: PUNGraph const &
        BtwNIdV: TIntV const &
        NodeBtwH: TIntFltH &
        DoNodeCent: bool const &
        EdgeBtwH: TIntPrFltH &
        DoEdgeCent: bool const &

    """
  return _snap.GetBetweennessCentr(*args)

def GetEigenVectorCentr(*args):
  """
    GetEigenVectorCentr(PUNGraph Graph, TIntFltH NIdEigenH, double const & Eps=1e-4, int const & MaxIter=100)

    Parameters:
        Graph: PUNGraph const &
        NIdEigenH: TIntFltH &
        Eps: double const &
        MaxIter: int const &

    GetEigenVectorCentr(PUNGraph Graph, TIntFltH NIdEigenH, double const & Eps=1e-4)

    Parameters:
        Graph: PUNGraph const &
        NIdEigenH: TIntFltH &
        Eps: double const &

    GetEigenVectorCentr(PUNGraph Graph, TIntFltH NIdEigenH)

    Parameters:
        Graph: PUNGraph const &
        NIdEigenH: TIntFltH &

    """
  return _snap.GetEigenVectorCentr(*args)

def CommunityGirvanNewman(*args):
  """
    CommunityGirvanNewman(PUNGraph Graph, TCnComV CmtyV) -> double

    Parameters:
        Graph: PUNGraph &
        CmtyV: TCnComV &

    """
  return _snap.CommunityGirvanNewman(*args)

def CommunityCNM(*args):
  """
    CommunityCNM(PUNGraph Graph, TCnComV CmtyV) -> double

    Parameters:
        Graph: PUNGraph const &
        CmtyV: TCnComV &

    """
  return _snap.CommunityCNM(*args)

def Infomap(*args):
  """
    Infomap(PUNGraph Graph, TCnComV CmtyV) -> double

    Parameters:
        Graph: PUNGraph &
        CmtyV: TCnComV &

    """
  return _snap.Infomap(*args)

def CmtyGirvanNewmanStep(*args):
  """
    CmtyGirvanNewmanStep(PUNGraph Graph, TIntV Cmty1, TIntV Cmty2)

    Parameters:
        Graph: PUNGraph &
        Cmty1: TIntV &
        Cmty2: TIntV &

    """
  return _snap.CmtyGirvanNewmanStep(*args)

def GetBiConSzCnt(*args):
  """
    GetBiConSzCnt(PUNGraph Graph, TIntPrV SzCntV)

    Parameters:
        Graph: PUNGraph const &
        SzCntV: TIntPrV &

    """
  return _snap.GetBiConSzCnt(*args)

def GetBiCon(*args):
  """
    GetBiCon(PUNGraph Graph, TCnComV BiCnComV)

    Parameters:
        Graph: PUNGraph const &
        BiCnComV: TCnComV &

    """
  return _snap.GetBiCon(*args)

def GetArtPoints(*args):
  """
    GetArtPoints(PUNGraph Graph, TIntV ArtNIdV)

    Parameters:
        Graph: PUNGraph const &
        ArtNIdV: TIntV &

    """
  return _snap.GetArtPoints(*args)

def GetEdgeBridges(*args):
  """
    GetEdgeBridges(PUNGraph Graph, TIntPrV EdgeV)

    Parameters:
        Graph: PUNGraph const &
        EdgeV: TIntPrV &

    """
  return _snap.GetEdgeBridges(*args)

def Get1CnComSzCnt(*args):
  """
    Get1CnComSzCnt(PUNGraph Graph, TIntPrV SzCntV)

    Parameters:
        Graph: PUNGraph const &
        SzCntV: TIntPrV &

    """
  return _snap.Get1CnComSzCnt(*args)

def Get1CnCom(*args):
  """
    Get1CnCom(PUNGraph Graph, TCnComV Cn1ComV)

    Parameters:
        Graph: PUNGraph const &
        Cn1ComV: TCnComV &

    """
  return _snap.Get1CnCom(*args)

def GetMxBiCon(*args):
  """
    GetMxBiCon(PUNGraph Graph, bool const & RenumberNodes=False) -> PUNGraph

    Parameters:
        Graph: PUNGraph const &
        RenumberNodes: bool const &

    GetMxBiCon(PUNGraph Graph) -> PUNGraph

    Parameters:
        Graph: PUNGraph const &

    """
  return _snap.GetMxBiCon(*args)
class TCnCom(object):
    """Proxy of C++ TCnCom class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    NIdV = _swig_property(_snap.TCnCom_NIdV_get, _snap.TCnCom_NIdV_set)
    def __init__(self, *args): 
        """
        __init__(TCnCom self) -> TCnCom
        __init__(TCnCom self, TIntV NodeIdV) -> TCnCom

        Parameters:
            NodeIdV: TIntV const &

        __init__(TCnCom self, TCnCom CC) -> TCnCom

        Parameters:
            CC: TCnCom const &

        __init__(TCnCom self, TSIn SIn) -> TCnCom

        Parameters:
            SIn: TSIn &

        """
        _snap.TCnCom_swiginit(self,_snap.new_TCnCom(*args))
    def Save(self, *args):
        """
        Save(TCnCom self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.TCnCom_Save(self, *args)

    def __eq__(self, *args):
        """
        __eq__(TCnCom self, TCnCom CC) -> bool

        Parameters:
            CC: TCnCom const &

        """
        return _snap.TCnCom___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TCnCom self, TCnCom CC) -> bool

        Parameters:
            CC: TCnCom const &

        """
        return _snap.TCnCom___lt__(self, *args)

    def Len(self):
        """
        Len(TCnCom self) -> int

        Parameters:
            self: TCnCom const *

        """
        return _snap.TCnCom_Len(self)

    def Empty(self):
        """
        Empty(TCnCom self) -> bool

        Parameters:
            self: TCnCom const *

        """
        return _snap.TCnCom_Empty(self)

    def Clr(self):
        """
        Clr(TCnCom self)

        Parameters:
            self: TCnCom *

        """
        return _snap.TCnCom_Clr(self)

    def Add(self, *args):
        """
        Add(TCnCom self, int const & NodeId)

        Parameters:
            NodeId: int const &

        """
        return _snap.TCnCom_Add(self, *args)

    def __call__(self, *args):
        """
        __call__(TCnCom self) -> TIntV
        __call__(TCnCom self) -> TIntV

        Parameters:
            self: TCnCom *

        """
        return _snap.TCnCom___call__(self, *args)

    def GetVal(self, *args):
        """
        GetVal(TCnCom self, int const & NIdN) -> TInt

        Parameters:
            NIdN: int const &

        """
        return _snap.TCnCom_GetVal(self, *args)

    def Sort(self, Asc=True):
        """
        Sort(TCnCom self, bool const & Asc=True)

        Parameters:
            Asc: bool const &

        Sort(TCnCom self)

        Parameters:
            self: TCnCom *

        """
        return _snap.TCnCom_Sort(self, Asc)

    def IsNIdIn(self, *args):
        """
        IsNIdIn(TCnCom self, int const & NId) -> bool

        Parameters:
            NId: int const &

        """
        return _snap.TCnCom_IsNIdIn(self, *args)

    def GetRndNId(self):
        """
        GetRndNId(TCnCom self) -> TInt

        Parameters:
            self: TCnCom const *

        """
        return _snap.TCnCom_GetRndNId(self)

    def Dump(*args):
        """
        Dump(TCnComV CnComV, TStr Desc=TStr())

        Parameters:
            CnComV: TCnComV const &
            Desc: TStr const &

        Dump(TCnComV CnComV)

        Parameters:
            CnComV: TCnComV const &

        """
        return _snap.TCnCom_Dump(*args)

    Dump = staticmethod(Dump)
    def SaveTxt(*args):
        """
        SaveTxt(TCnComV CnComV, TStr FNm, TStr Desc=TStr())

        Parameters:
            CnComV: TCnComV const &
            FNm: TStr const &
            Desc: TStr const &

        SaveTxt(TCnComV CnComV, TStr FNm)

        Parameters:
            CnComV: TCnComV const &
            FNm: TStr const &

        """
        return _snap.TCnCom_SaveTxt(*args)

    SaveTxt = staticmethod(SaveTxt)
    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TCnCom self) -> int

        Parameters:
            self: TCnCom const *

        """
        return _snap.TCnCom_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(TCnCom self) -> int

        Parameters:
            self: TCnCom const *

        """
        return _snap.TCnCom_GetSecHashCd(self)

    __swig_destroy__ = _snap.delete_TCnCom
TCnCom.Save = new_instancemethod(_snap.TCnCom_Save,None,TCnCom)
TCnCom.__eq__ = new_instancemethod(_snap.TCnCom___eq__,None,TCnCom)
TCnCom.__lt__ = new_instancemethod(_snap.TCnCom___lt__,None,TCnCom)
TCnCom.Len = new_instancemethod(_snap.TCnCom_Len,None,TCnCom)
TCnCom.Empty = new_instancemethod(_snap.TCnCom_Empty,None,TCnCom)
TCnCom.Clr = new_instancemethod(_snap.TCnCom_Clr,None,TCnCom)
TCnCom.Add = new_instancemethod(_snap.TCnCom_Add,None,TCnCom)
TCnCom.__call__ = new_instancemethod(_snap.TCnCom___call__,None,TCnCom)
TCnCom.GetVal = new_instancemethod(_snap.TCnCom_GetVal,None,TCnCom)
TCnCom.Sort = new_instancemethod(_snap.TCnCom_Sort,None,TCnCom)
TCnCom.IsNIdIn = new_instancemethod(_snap.TCnCom_IsNIdIn,None,TCnCom)
TCnCom.GetRndNId = new_instancemethod(_snap.TCnCom_GetRndNId,None,TCnCom)
TCnCom.GetPrimHashCd = new_instancemethod(_snap.TCnCom_GetPrimHashCd,None,TCnCom)
TCnCom.GetSecHashCd = new_instancemethod(_snap.TCnCom_GetSecHashCd,None,TCnCom)
TCnCom_swigregister = _snap.TCnCom_swigregister
TCnCom_swigregister(TCnCom)

def TCnCom_Dump(*args):
  """
    Dump(TCnComV CnComV, TStr Desc=TStr())

    Parameters:
        CnComV: TCnComV const &
        Desc: TStr const &

    TCnCom_Dump(TCnComV CnComV)

    Parameters:
        CnComV: TCnComV const &

    """
  return _snap.TCnCom_Dump(*args)

def TCnCom_SaveTxt(*args):
  """
    SaveTxt(TCnComV CnComV, TStr FNm, TStr Desc=TStr())

    Parameters:
        CnComV: TCnComV const &
        FNm: TStr const &
        Desc: TStr const &

    TCnCom_SaveTxt(TCnComV CnComV, TStr FNm)

    Parameters:
        CnComV: TCnComV const &
        FNm: TStr const &

    """
  return _snap.TCnCom_SaveTxt(*args)

class TArtPointVisitor(object):
    """Proxy of C++ TArtPointVisitor class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    VnLowH = _swig_property(_snap.TArtPointVisitor_VnLowH_get, _snap.TArtPointVisitor_VnLowH_set)
    ParentH = _swig_property(_snap.TArtPointVisitor_ParentH_get, _snap.TArtPointVisitor_ParentH_set)
    ArtSet = _swig_property(_snap.TArtPointVisitor_ArtSet_get, _snap.TArtPointVisitor_ArtSet_set)
    Time = _swig_property(_snap.TArtPointVisitor_Time_get, _snap.TArtPointVisitor_Time_set)
    def __init__(self, *args): 
        """
        __init__(TArtPointVisitor self) -> TArtPointVisitor
        __init__(TArtPointVisitor self, int const & Nodes) -> TArtPointVisitor

        Parameters:
            Nodes: int const &

        """
        _snap.TArtPointVisitor_swiginit(self,_snap.new_TArtPointVisitor(*args))
    def DiscoverNode(self, *args):
        """
        DiscoverNode(TArtPointVisitor self, int NId)

        Parameters:
            NId: int

        """
        return _snap.TArtPointVisitor_DiscoverNode(self, *args)

    def FinishNode(self, *args):
        """
        FinishNode(TArtPointVisitor self, int const & NId)

        Parameters:
            NId: int const &

        """
        return _snap.TArtPointVisitor_FinishNode(self, *args)

    def ExamineEdge(self, *args):
        """
        ExamineEdge(TArtPointVisitor self, int const & NId1, int const & NId2)

        Parameters:
            NId1: int const &
            NId2: int const &

        """
        return _snap.TArtPointVisitor_ExamineEdge(self, *args)

    def TreeEdge(self, *args):
        """
        TreeEdge(TArtPointVisitor self, int const & NId1, int const & NId2)

        Parameters:
            NId1: int const &
            NId2: int const &

        """
        return _snap.TArtPointVisitor_TreeEdge(self, *args)

    def BackEdge(self, *args):
        """
        BackEdge(TArtPointVisitor self, int const & NId1, int const & NId2)

        Parameters:
            NId1: int const &
            NId2: int const &

        """
        return _snap.TArtPointVisitor_BackEdge(self, *args)

    def FwdEdge(self, *args):
        """
        FwdEdge(TArtPointVisitor self, int const & NId1, int const & NId2)

        Parameters:
            NId1: int const &
            NId2: int const &

        """
        return _snap.TArtPointVisitor_FwdEdge(self, *args)

    __swig_destroy__ = _snap.delete_TArtPointVisitor
TArtPointVisitor.DiscoverNode = new_instancemethod(_snap.TArtPointVisitor_DiscoverNode,None,TArtPointVisitor)
TArtPointVisitor.FinishNode = new_instancemethod(_snap.TArtPointVisitor_FinishNode,None,TArtPointVisitor)
TArtPointVisitor.ExamineEdge = new_instancemethod(_snap.TArtPointVisitor_ExamineEdge,None,TArtPointVisitor)
TArtPointVisitor.TreeEdge = new_instancemethod(_snap.TArtPointVisitor_TreeEdge,None,TArtPointVisitor)
TArtPointVisitor.BackEdge = new_instancemethod(_snap.TArtPointVisitor_BackEdge,None,TArtPointVisitor)
TArtPointVisitor.FwdEdge = new_instancemethod(_snap.TArtPointVisitor_FwdEdge,None,TArtPointVisitor)
TArtPointVisitor_swigregister = _snap.TArtPointVisitor_swigregister
TArtPointVisitor_swigregister(TArtPointVisitor)

class TBiConVisitor(object):
    """Proxy of C++ TBiConVisitor class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    VnLowH = _swig_property(_snap.TBiConVisitor_VnLowH_get, _snap.TBiConVisitor_VnLowH_set)
    ParentH = _swig_property(_snap.TBiConVisitor_ParentH_get, _snap.TBiConVisitor_ParentH_set)
    Stack = _swig_property(_snap.TBiConVisitor_Stack_get, _snap.TBiConVisitor_Stack_set)
    CnComV = _swig_property(_snap.TBiConVisitor_CnComV_get, _snap.TBiConVisitor_CnComV_set)
    NSet = _swig_property(_snap.TBiConVisitor_NSet_get, _snap.TBiConVisitor_NSet_set)
    Time = _swig_property(_snap.TBiConVisitor_Time_get, _snap.TBiConVisitor_Time_set)
    def __init__(self, *args): 
        """
        __init__(TBiConVisitor self) -> TBiConVisitor
        __init__(TBiConVisitor self, int const & Nodes) -> TBiConVisitor

        Parameters:
            Nodes: int const &

        """
        _snap.TBiConVisitor_swiginit(self,_snap.new_TBiConVisitor(*args))
    def DiscoverNode(self, *args):
        """
        DiscoverNode(TBiConVisitor self, int NId)

        Parameters:
            NId: int

        """
        return _snap.TBiConVisitor_DiscoverNode(self, *args)

    def FinishNode(self, *args):
        """
        FinishNode(TBiConVisitor self, int const & NId)

        Parameters:
            NId: int const &

        """
        return _snap.TBiConVisitor_FinishNode(self, *args)

    def ExamineEdge(self, *args):
        """
        ExamineEdge(TBiConVisitor self, int const & NId1, int const & NId2)

        Parameters:
            NId1: int const &
            NId2: int const &

        """
        return _snap.TBiConVisitor_ExamineEdge(self, *args)

    def TreeEdge(self, *args):
        """
        TreeEdge(TBiConVisitor self, int const & NId1, int const & NId2)

        Parameters:
            NId1: int const &
            NId2: int const &

        """
        return _snap.TBiConVisitor_TreeEdge(self, *args)

    def BackEdge(self, *args):
        """
        BackEdge(TBiConVisitor self, int const & NId1, int const & NId2)

        Parameters:
            NId1: int const &
            NId2: int const &

        """
        return _snap.TBiConVisitor_BackEdge(self, *args)

    def FwdEdge(self, *args):
        """
        FwdEdge(TBiConVisitor self, int const & NId1, int const & NId2)

        Parameters:
            NId1: int const &
            NId2: int const &

        """
        return _snap.TBiConVisitor_FwdEdge(self, *args)

    __swig_destroy__ = _snap.delete_TBiConVisitor
TBiConVisitor.DiscoverNode = new_instancemethod(_snap.TBiConVisitor_DiscoverNode,None,TBiConVisitor)
TBiConVisitor.FinishNode = new_instancemethod(_snap.TBiConVisitor_FinishNode,None,TBiConVisitor)
TBiConVisitor.ExamineEdge = new_instancemethod(_snap.TBiConVisitor_ExamineEdge,None,TBiConVisitor)
TBiConVisitor.TreeEdge = new_instancemethod(_snap.TBiConVisitor_TreeEdge,None,TBiConVisitor)
TBiConVisitor.BackEdge = new_instancemethod(_snap.TBiConVisitor_BackEdge,None,TBiConVisitor)
TBiConVisitor.FwdEdge = new_instancemethod(_snap.TBiConVisitor_FwdEdge,None,TBiConVisitor)
TBiConVisitor_swigregister = _snap.TBiConVisitor_swigregister
TBiConVisitor_swigregister(TBiConVisitor)

class TForestFire(object):
    """Proxy of C++ TForestFire class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TForestFire self) -> TForestFire
        __init__(TForestFire self, PNGraph GraphPt, double const & ForwBurnProb, double const & BackBurnProb, double const & DecayProb=1.0, 
            int const & RndSeed=1) -> TForestFire

        Parameters:
            GraphPt: PNGraph const &
            ForwBurnProb: double const &
            BackBurnProb: double const &
            DecayProb: double const &
            RndSeed: int const &

        __init__(TForestFire self, PNGraph GraphPt, double const & ForwBurnProb, double const & BackBurnProb, double const & DecayProb=1.0) -> TForestFire

        Parameters:
            GraphPt: PNGraph const &
            ForwBurnProb: double const &
            BackBurnProb: double const &
            DecayProb: double const &

        __init__(TForestFire self, PNGraph GraphPt, double const & ForwBurnProb, double const & BackBurnProb) -> TForestFire

        Parameters:
            GraphPt: PNGraph const &
            ForwBurnProb: double const &
            BackBurnProb: double const &

        """
        _snap.TForestFire_swiginit(self,_snap.new_TForestFire(*args))
    def SetGraph(self, *args):
        """
        SetGraph(TForestFire self, PNGraph GraphPt)

        Parameters:
            GraphPt: PNGraph const &

        """
        return _snap.TForestFire_SetGraph(self, *args)

    def GetGraph(self):
        """
        GetGraph(TForestFire self) -> PNGraph

        Parameters:
            self: TForestFire const *

        """
        return _snap.TForestFire_GetGraph(self)

    def SetBurnProb(self, *args):
        """
        SetBurnProb(TForestFire self, double const & ForwBurnProb, double const & BackBurnProb)

        Parameters:
            ForwBurnProb: double const &
            BackBurnProb: double const &

        """
        return _snap.TForestFire_SetBurnProb(self, *args)

    def SetProbDecay(self, *args):
        """
        SetProbDecay(TForestFire self, double const & DecayProb)

        Parameters:
            DecayProb: double const &

        """
        return _snap.TForestFire_SetProbDecay(self, *args)

    def Infect(self, *args):
        """
        Infect(TForestFire self, int const & NodeId)

        Parameters:
            NodeId: int const &

        Infect(TForestFire self, TIntV InfectedNIdV)

        Parameters:
            InfectedNIdV: TIntV const &

        """
        return _snap.TForestFire_Infect(self, *args)

    def InfectAll(self):
        """
        InfectAll(TForestFire self)

        Parameters:
            self: TForestFire *

        """
        return _snap.TForestFire_InfectAll(self)

    def InfectRnd(self, *args):
        """
        InfectRnd(TForestFire self, int const & NInfect)

        Parameters:
            NInfect: int const &

        """
        return _snap.TForestFire_InfectRnd(self, *args)

    def BurnExpFire(self):
        """
        BurnExpFire(TForestFire self)

        Parameters:
            self: TForestFire *

        """
        return _snap.TForestFire_BurnExpFire(self)

    def BurnGeoFire(self):
        """
        BurnGeoFire(TForestFire self)

        Parameters:
            self: TForestFire *

        """
        return _snap.TForestFire_BurnGeoFire(self)

    def GetFireTm(self):
        """
        GetFireTm(TForestFire self) -> int

        Parameters:
            self: TForestFire const *

        """
        return _snap.TForestFire_GetFireTm(self)

    def GetBurned(self):
        """
        GetBurned(TForestFire self) -> int

        Parameters:
            self: TForestFire const *

        """
        return _snap.TForestFire_GetBurned(self)

    def GetBurnedNId(self, *args):
        """
        GetBurnedNId(TForestFire self, int const & NIdN) -> int

        Parameters:
            NIdN: int const &

        """
        return _snap.TForestFire_GetBurnedNId(self, *args)

    def GetBurnedNIdV(self, *args):
        """
        GetBurnedNIdV(TForestFire self) -> TIntV
        GetBurnedNIdV(TForestFire self, TIntV NIdV)

        Parameters:
            NIdV: TIntV &

        """
        return _snap.TForestFire_GetBurnedNIdV(self, *args)

    def PlotFire(self, *args):
        """
        PlotFire(TForestFire self, TStr FNmPref, TStr Desc, bool const & PlotAllBurned=False)

        Parameters:
            FNmPref: TStr const &
            Desc: TStr const &
            PlotAllBurned: bool const &

        PlotFire(TForestFire self, TStr FNmPref, TStr Desc)

        Parameters:
            FNmPref: TStr const &
            Desc: TStr const &

        """
        return _snap.TForestFire_PlotFire(self, *args)

    def GenGraph(*args):
        """
        GenGraph(int const & Nodes, double const & FwdProb, double const & BckProb) -> PNGraph

        Parameters:
            Nodes: int const &
            FwdProb: double const &
            BckProb: double const &

        """
        return _snap.TForestFire_GenGraph(*args)

    GenGraph = staticmethod(GenGraph)
    __swig_destroy__ = _snap.delete_TForestFire
TForestFire.SetGraph = new_instancemethod(_snap.TForestFire_SetGraph,None,TForestFire)
TForestFire.GetGraph = new_instancemethod(_snap.TForestFire_GetGraph,None,TForestFire)
TForestFire.SetBurnProb = new_instancemethod(_snap.TForestFire_SetBurnProb,None,TForestFire)
TForestFire.SetProbDecay = new_instancemethod(_snap.TForestFire_SetProbDecay,None,TForestFire)
TForestFire.Infect = new_instancemethod(_snap.TForestFire_Infect,None,TForestFire)
TForestFire.InfectAll = new_instancemethod(_snap.TForestFire_InfectAll,None,TForestFire)
TForestFire.InfectRnd = new_instancemethod(_snap.TForestFire_InfectRnd,None,TForestFire)
TForestFire.BurnExpFire = new_instancemethod(_snap.TForestFire_BurnExpFire,None,TForestFire)
TForestFire.BurnGeoFire = new_instancemethod(_snap.TForestFire_BurnGeoFire,None,TForestFire)
TForestFire.GetFireTm = new_instancemethod(_snap.TForestFire_GetFireTm,None,TForestFire)
TForestFire.GetBurned = new_instancemethod(_snap.TForestFire_GetBurned,None,TForestFire)
TForestFire.GetBurnedNId = new_instancemethod(_snap.TForestFire_GetBurnedNId,None,TForestFire)
TForestFire.GetBurnedNIdV = new_instancemethod(_snap.TForestFire_GetBurnedNIdV,None,TForestFire)
TForestFire.PlotFire = new_instancemethod(_snap.TForestFire_PlotFire,None,TForestFire)
TForestFire_swigregister = _snap.TForestFire_swigregister
TForestFire_swigregister(TForestFire)

def TForestFire_GenGraph(*args):
  """
    TForestFire_GenGraph(int const & Nodes, double const & FwdProb, double const & BckProb) -> PNGraph

    Parameters:
        Nodes: int const &
        FwdProb: double const &
        BckProb: double const &

    """
  return _snap.TForestFire_GenGraph(*args)

class TFfGGen(object):
    """Proxy of C++ TFfGGen class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    srUndef = _snap.TFfGGen_srUndef
    srOk = _snap.TFfGGen_srOk
    srFlood = _snap.TFfGGen_srFlood
    srTimeLimit = _snap.TFfGGen_srTimeLimit
    TimeLimitSec = _swig_property(_snap.TFfGGen_TimeLimitSec_get, _snap.TFfGGen_TimeLimitSec_set)
    def __init__(self, *args): 
        """
        __init__(TFfGGen self, bool const & BurnExpFireP, int const & StartNNodes, double const & ForwBurnProb, 
            double const & BackBurnProb, double const & DecayProb, double const & Take2AmbasPrb, 
            double const & OrphanPrb) -> TFfGGen

        Parameters:
            BurnExpFireP: bool const &
            StartNNodes: int const &
            ForwBurnProb: double const &
            BackBurnProb: double const &
            DecayProb: double const &
            Take2AmbasPrb: double const &
            OrphanPrb: double const &

        """
        _snap.TFfGGen_swiginit(self,_snap.new_TFfGGen(*args))
    def GetGraph(self):
        """
        GetGraph(TFfGGen self) -> PNGraph

        Parameters:
            self: TFfGGen const *

        """
        return _snap.TFfGGen_GetGraph(self)

    def SetGraph(self, *args):
        """
        SetGraph(TFfGGen self, PNGraph NGraph)

        Parameters:
            NGraph: PNGraph const &

        """
        return _snap.TFfGGen_SetGraph(self, *args)

    def Clr(self):
        """
        Clr(TFfGGen self)

        Parameters:
            self: TFfGGen *

        """
        return _snap.TFfGGen_Clr(self)

    def GetParamStr(self):
        """
        GetParamStr(TFfGGen self) -> TStr

        Parameters:
            self: TFfGGen const *

        """
        return _snap.TFfGGen_GetParamStr(self)

    def AddNodes(self, *args):
        """
        AddNodes(TFfGGen self, int const & GraphNodes, bool const & FloodStop=True) -> TFfGGen::TStopReason

        Parameters:
            GraphNodes: int const &
            FloodStop: bool const &

        AddNodes(TFfGGen self, int const & GraphNodes) -> TFfGGen::TStopReason

        Parameters:
            GraphNodes: int const &

        """
        return _snap.TFfGGen_AddNodes(self, *args)

    def GenGraph(self, *args):
        """
        GenGraph(TFfGGen self, int const & GraphNodes, bool const & FloodStop=True) -> TFfGGen::TStopReason

        Parameters:
            GraphNodes: int const &
            FloodStop: bool const &

        GenGraph(TFfGGen self, int const & GraphNodes) -> TFfGGen::TStopReason

        Parameters:
            GraphNodes: int const &

        GenGraph(TFfGGen self, int const & GraphNodes, PGStatVec & EvolStat, bool const & FloodStop=True) -> TFfGGen::TStopReason

        Parameters:
            GraphNodes: int const &
            EvolStat: PGStatVec &
            FloodStop: bool const &

        GenGraph(TFfGGen self, int const & GraphNodes, PGStatVec & EvolStat) -> TFfGGen::TStopReason

        Parameters:
            GraphNodes: int const &
            EvolStat: PGStatVec &

        """
        return _snap.TFfGGen_GenGraph(self, *args)

    def PlotFireSize(self, *args):
        """
        PlotFireSize(TFfGGen self, TStr FNmPref, TStr DescStr)

        Parameters:
            FNmPref: TStr const &
            DescStr: TStr const &

        """
        return _snap.TFfGGen_PlotFireSize(self, *args)

    def GenFFGraphs(*args):
        """
        GenFFGraphs(double const & FProb, double const & BProb, TStr FNm)

        Parameters:
            FProb: double const &
            BProb: double const &
            FNm: TStr const &

        """
        return _snap.TFfGGen_GenFFGraphs(*args)

    GenFFGraphs = staticmethod(GenFFGraphs)
    __swig_destroy__ = _snap.delete_TFfGGen
TFfGGen.GetGraph = new_instancemethod(_snap.TFfGGen_GetGraph,None,TFfGGen)
TFfGGen.SetGraph = new_instancemethod(_snap.TFfGGen_SetGraph,None,TFfGGen)
TFfGGen.Clr = new_instancemethod(_snap.TFfGGen_Clr,None,TFfGGen)
TFfGGen.GetParamStr = new_instancemethod(_snap.TFfGGen_GetParamStr,None,TFfGGen)
TFfGGen.AddNodes = new_instancemethod(_snap.TFfGGen_AddNodes,None,TFfGGen)
TFfGGen.GenGraph = new_instancemethod(_snap.TFfGGen_GenGraph,None,TFfGGen)
TFfGGen.PlotFireSize = new_instancemethod(_snap.TFfGGen_PlotFireSize,None,TFfGGen)
TFfGGen_swigregister = _snap.TFfGGen_swigregister
TFfGGen_swigregister(TFfGGen)

def TFfGGen_GenFFGraphs(*args):
  """
    TFfGGen_GenFFGraphs(double const & FProb, double const & BProb, TStr FNm)

    Parameters:
        FProb: double const &
        BProb: double const &
        FNm: TStr const &

    """
  return _snap.TFfGGen_GenFFGraphs(*args)

class TUndirFFire(object):
    """Proxy of C++ TUndirFFire class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, _BurnProb=0.3): 
        """
        __init__(TUndirFFire self, double const & _BurnProb=0.3) -> TUndirFFire

        Parameters:
            _BurnProb: double const &

        __init__(TUndirFFire self) -> TUndirFFire
        """
        _snap.TUndirFFire_swiginit(self,_snap.new_TUndirFFire(_BurnProb))
    def SetGraph(self, *args):
        """
        SetGraph(TUndirFFire self, PUNGraph GraphPt)

        Parameters:
            GraphPt: PUNGraph const &

        """
        return _snap.TUndirFFire_SetGraph(self, *args)

    def GetGraph(self):
        """
        GetGraph(TUndirFFire self) -> PUNGraph

        Parameters:
            self: TUndirFFire const *

        """
        return _snap.TUndirFFire_GetGraph(self)

    def GetNBurned(self):
        """
        GetNBurned(TUndirFFire self) -> int

        Parameters:
            self: TUndirFFire const *

        """
        return _snap.TUndirFFire_GetNBurned(self)

    def GetBurnedNId(self, *args):
        """
        GetBurnedNId(TUndirFFire self, int const & n) -> int

        Parameters:
            n: int const &

        """
        return _snap.TUndirFFire_GetBurnedNId(self, *args)

    def BurnGeoFire(self, *args):
        """
        BurnGeoFire(TUndirFFire self, int const & StartNId) -> int

        Parameters:
            StartNId: int const &

        """
        return _snap.TUndirFFire_BurnGeoFire(self, *args)

    def AddNodes(self, *args):
        """
        AddNodes(TUndirFFire self, int const & GraphNodes, bool const & FloodStop=True) -> TFfGGen::TStopReason

        Parameters:
            GraphNodes: int const &
            FloodStop: bool const &

        AddNodes(TUndirFFire self, int const & GraphNodes) -> TFfGGen::TStopReason

        Parameters:
            GraphNodes: int const &

        """
        return _snap.TUndirFFire_AddNodes(self, *args)

    __swig_destroy__ = _snap.delete_TUndirFFire
TUndirFFire.SetGraph = new_instancemethod(_snap.TUndirFFire_SetGraph,None,TUndirFFire)
TUndirFFire.GetGraph = new_instancemethod(_snap.TUndirFFire_GetGraph,None,TUndirFFire)
TUndirFFire.GetNBurned = new_instancemethod(_snap.TUndirFFire_GetNBurned,None,TUndirFFire)
TUndirFFire.GetBurnedNId = new_instancemethod(_snap.TUndirFFire_GetBurnedNId,None,TUndirFFire)
TUndirFFire.BurnGeoFire = new_instancemethod(_snap.TUndirFFire_BurnGeoFire,None,TUndirFFire)
TUndirFFire.AddNodes = new_instancemethod(_snap.TUndirFFire_AddNodes,None,TUndirFFire)
TUndirFFire_swigregister = _snap.TUndirFFire_swigregister
TUndirFFire_swigregister(TUndirFFire)

class TUNGraph(object):
    """Proxy of C++ TUNGraph class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TUNGraph self) -> TUNGraph
        __init__(TUNGraph self, int const & Nodes, int const & Edges) -> TUNGraph

        Parameters:
            Nodes: int const &
            Edges: int const &

        __init__(TUNGraph self, TUNGraph Graph) -> TUNGraph

        Parameters:
            Graph: TUNGraph const &

        __init__(TUNGraph self, TSIn SIn) -> TUNGraph

        Parameters:
            SIn: TSIn &

        """
        _snap.TUNGraph_swiginit(self,_snap.new_TUNGraph(*args))
    def Save(self, *args):
        """
        Save(TUNGraph self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.TUNGraph_Save(self, *args)

    def New(*args):
        """
        New() -> PUNGraph
        New(int const & Nodes, int const & Edges) -> PUNGraph

        Parameters:
            Nodes: int const &
            Edges: int const &

        """
        return _snap.TUNGraph_New(*args)

    New = staticmethod(New)
    def Load(*args):
        """
        Load(TSIn SIn) -> PUNGraph

        Parameters:
            SIn: TSIn &

        """
        return _snap.TUNGraph_Load(*args)

    Load = staticmethod(Load)
    def HasFlag(self, *args):
        """
        HasFlag(TUNGraph self, TGraphFlag const & Flag) -> bool

        Parameters:
            Flag: TGraphFlag const &

        """
        return _snap.TUNGraph_HasFlag(self, *args)

    def GetNodes(self):
        """
        GetNodes(TUNGraph self) -> int

        Parameters:
            self: TUNGraph const *

        """
        return _snap.TUNGraph_GetNodes(self)

    def AddNode(self, *args):
        """
        AddNode(TUNGraph self, int NId=-1) -> int

        Parameters:
            NId: int

        AddNode(TUNGraph self) -> int
        AddNode(TUNGraph self, TUNGraph::TNodeI const & NodeI) -> int

        Parameters:
            NodeI: TUNGraph::TNodeI const &

        AddNode(TUNGraph self, int const & NId, TIntV NbrNIdV) -> int

        Parameters:
            NId: int const &
            NbrNIdV: TIntV const &

        AddNode(TUNGraph self, int const & NId, TVecPool< TInt > const & Pool, int const & NIdVId) -> int

        Parameters:
            NId: int const &
            Pool: TVecPool< TInt > const &
            NIdVId: int const &

        """
        return _snap.TUNGraph_AddNode(self, *args)

    def DelNode(self, *args):
        """
        DelNode(TUNGraph self, int const & NId)

        Parameters:
            NId: int const &

        DelNode(TUNGraph self, TUNGraph::TNode const & NodeI)

        Parameters:
            NodeI: TUNGraph::TNode const &

        """
        return _snap.TUNGraph_DelNode(self, *args)

    def IsNode(self, *args):
        """
        IsNode(TUNGraph self, int const & NId) -> bool

        Parameters:
            NId: int const &

        """
        return _snap.TUNGraph_IsNode(self, *args)

    def GetMxNId(self):
        """
        GetMxNId(TUNGraph self) -> int

        Parameters:
            self: TUNGraph const *

        """
        return _snap.TUNGraph_GetMxNId(self)

    def GetEdges(self):
        """
        GetEdges(TUNGraph self) -> int

        Parameters:
            self: TUNGraph const *

        """
        return _snap.TUNGraph_GetEdges(self)

    def AddEdge(self, *args):
        """
        AddEdge(TUNGraph self, int const & SrcNId, int const & DstNId) -> int

        Parameters:
            SrcNId: int const &
            DstNId: int const &

        AddEdge(TUNGraph self, TUNGraph::TEdgeI const & EdgeI) -> int

        Parameters:
            EdgeI: TUNGraph::TEdgeI const &

        """
        return _snap.TUNGraph_AddEdge(self, *args)

    def DelEdge(self, *args):
        """
        DelEdge(TUNGraph self, int const & SrcNId, int const & DstNId)

        Parameters:
            SrcNId: int const &
            DstNId: int const &

        """
        return _snap.TUNGraph_DelEdge(self, *args)

    def IsEdge(self, *args):
        """
        IsEdge(TUNGraph self, int const & SrcNId, int const & DstNId) -> bool

        Parameters:
            SrcNId: int const &
            DstNId: int const &

        """
        return _snap.TUNGraph_IsEdge(self, *args)

    def GetEI(self, *args):
        """
        GetEI(TUNGraph self, int const & SrcNId, int const & DstNId) -> TUNGraph::TEdgeI

        Parameters:
            SrcNId: int const &
            DstNId: int const &

        """
        return _snap.TUNGraph_GetEI(self, *args)

    def GetRndNId(self, *args):
        """
        GetRndNId(TUNGraph self, TRnd Rnd=Rnd) -> int

        Parameters:
            Rnd: TRnd &

        GetRndNId(TUNGraph self) -> int

        Parameters:
            self: TUNGraph *

        """
        return _snap.TUNGraph_GetRndNId(self, *args)

    def GetRndNI(self, *args):
        """
        GetRndNI(TUNGraph self, TRnd Rnd=Rnd) -> TUNGraph::TNodeI

        Parameters:
            Rnd: TRnd &

        GetRndNI(TUNGraph self) -> TUNGraph::TNodeI

        Parameters:
            self: TUNGraph *

        """
        return _snap.TUNGraph_GetRndNI(self, *args)

    def GetNIdV(self, *args):
        """
        GetNIdV(TUNGraph self, TIntV NIdV)

        Parameters:
            NIdV: TIntV &

        """
        return _snap.TUNGraph_GetNIdV(self, *args)

    def Empty(self):
        """
        Empty(TUNGraph self) -> bool

        Parameters:
            self: TUNGraph const *

        """
        return _snap.TUNGraph_Empty(self)

    def Clr(self):
        """
        Clr(TUNGraph self)

        Parameters:
            self: TUNGraph *

        """
        return _snap.TUNGraph_Clr(self)

    def Reserve(self, *args):
        """
        Reserve(TUNGraph self, int const & Nodes, int const & Edges)

        Parameters:
            Nodes: int const &
            Edges: int const &

        """
        return _snap.TUNGraph_Reserve(self, *args)

    def ReserveNIdDeg(self, *args):
        """
        ReserveNIdDeg(TUNGraph self, int const & NId, int const & Deg)

        Parameters:
            NId: int const &
            Deg: int const &

        """
        return _snap.TUNGraph_ReserveNIdDeg(self, *args)

    def Defrag(self, OnlyNodeLinks=False):
        """
        Defrag(TUNGraph self, bool const & OnlyNodeLinks=False)

        Parameters:
            OnlyNodeLinks: bool const &

        Defrag(TUNGraph self)

        Parameters:
            self: TUNGraph *

        """
        return _snap.TUNGraph_Defrag(self, OnlyNodeLinks)

    def IsOk(self, ThrowExcept=True):
        """
        IsOk(TUNGraph self, bool const & ThrowExcept=True) -> bool

        Parameters:
            ThrowExcept: bool const &

        IsOk(TUNGraph self) -> bool

        Parameters:
            self: TUNGraph const *

        """
        return _snap.TUNGraph_IsOk(self, ThrowExcept)

    def Dump(self, *args):
        """
        Dump(TUNGraph self, FILE * OutF=stdout)

        Parameters:
            OutF: FILE *

        Dump(TUNGraph self)

        Parameters:
            self: TUNGraph const *

        """
        return _snap.TUNGraph_Dump(self, *args)

    def GetSmallGraph():
        """GetSmallGraph() -> PUNGraph"""
        return _snap.TUNGraph_GetSmallGraph()

    GetSmallGraph = staticmethod(GetSmallGraph)
    def BegNI(self, *args):
        """
        BegNI(TUNGraph self) -> TUNGraph::TNodeI
        BegNI(TUNGraph self) -> TUNGraphNodeI

        Parameters:
            self: TUNGraph *

        """
        return _snap.TUNGraph_BegNI(self, *args)

    def EndNI(self, *args):
        """
        EndNI(TUNGraph self) -> TUNGraph::TNodeI
        EndNI(TUNGraph self) -> TUNGraphNodeI

        Parameters:
            self: TUNGraph *

        """
        return _snap.TUNGraph_EndNI(self, *args)

    def GetNI(self, *args):
        """
        GetNI(TUNGraph self, int const & NId) -> TUNGraph::TNodeI

        Parameters:
            NId: int const &

        GetNI(TUNGraph self, int const & NId) -> TUNGraphNodeI

        Parameters:
            NId: int const &

        """
        return _snap.TUNGraph_GetNI(self, *args)

    def BegEI(self, *args):
        """
        BegEI(TUNGraph self) -> TUNGraph::TEdgeI
        BegEI(TUNGraph self) -> TUNGraphEdgeI

        Parameters:
            self: TUNGraph *

        """
        return _snap.TUNGraph_BegEI(self, *args)

    def EndEI(self, *args):
        """
        EndEI(TUNGraph self) -> TUNGraph::TEdgeI
        EndEI(TUNGraph self) -> TUNGraphEdgeI

        Parameters:
            self: TUNGraph *

        """
        return _snap.TUNGraph_EndEI(self, *args)

    __swig_destroy__ = _snap.delete_TUNGraph
TUNGraph.Save = new_instancemethod(_snap.TUNGraph_Save,None,TUNGraph)
TUNGraph.HasFlag = new_instancemethod(_snap.TUNGraph_HasFlag,None,TUNGraph)
TUNGraph.GetNodes = new_instancemethod(_snap.TUNGraph_GetNodes,None,TUNGraph)
TUNGraph.AddNode = new_instancemethod(_snap.TUNGraph_AddNode,None,TUNGraph)
TUNGraph.DelNode = new_instancemethod(_snap.TUNGraph_DelNode,None,TUNGraph)
TUNGraph.IsNode = new_instancemethod(_snap.TUNGraph_IsNode,None,TUNGraph)
TUNGraph.GetMxNId = new_instancemethod(_snap.TUNGraph_GetMxNId,None,TUNGraph)
TUNGraph.GetEdges = new_instancemethod(_snap.TUNGraph_GetEdges,None,TUNGraph)
TUNGraph.AddEdge = new_instancemethod(_snap.TUNGraph_AddEdge,None,TUNGraph)
TUNGraph.DelEdge = new_instancemethod(_snap.TUNGraph_DelEdge,None,TUNGraph)
TUNGraph.IsEdge = new_instancemethod(_snap.TUNGraph_IsEdge,None,TUNGraph)
TUNGraph.GetEI = new_instancemethod(_snap.TUNGraph_GetEI,None,TUNGraph)
TUNGraph.GetRndNId = new_instancemethod(_snap.TUNGraph_GetRndNId,None,TUNGraph)
TUNGraph.GetRndNI = new_instancemethod(_snap.TUNGraph_GetRndNI,None,TUNGraph)
TUNGraph.GetNIdV = new_instancemethod(_snap.TUNGraph_GetNIdV,None,TUNGraph)
TUNGraph.Empty = new_instancemethod(_snap.TUNGraph_Empty,None,TUNGraph)
TUNGraph.Clr = new_instancemethod(_snap.TUNGraph_Clr,None,TUNGraph)
TUNGraph.Reserve = new_instancemethod(_snap.TUNGraph_Reserve,None,TUNGraph)
TUNGraph.ReserveNIdDeg = new_instancemethod(_snap.TUNGraph_ReserveNIdDeg,None,TUNGraph)
TUNGraph.Defrag = new_instancemethod(_snap.TUNGraph_Defrag,None,TUNGraph)
TUNGraph.IsOk = new_instancemethod(_snap.TUNGraph_IsOk,None,TUNGraph)
TUNGraph.Dump = new_instancemethod(_snap.TUNGraph_Dump,None,TUNGraph)
TUNGraph.BegNI = new_instancemethod(_snap.TUNGraph_BegNI,None,TUNGraph)
TUNGraph.EndNI = new_instancemethod(_snap.TUNGraph_EndNI,None,TUNGraph)
TUNGraph.GetNI = new_instancemethod(_snap.TUNGraph_GetNI,None,TUNGraph)
TUNGraph.BegEI = new_instancemethod(_snap.TUNGraph_BegEI,None,TUNGraph)
TUNGraph.EndEI = new_instancemethod(_snap.TUNGraph_EndEI,None,TUNGraph)
TUNGraph_swigregister = _snap.TUNGraph_swigregister
TUNGraph_swigregister(TUNGraph)

def TUNGraph_New(*args):
  """
    New() -> PUNGraph
    TUNGraph_New(int const & Nodes, int const & Edges) -> PUNGraph

    Parameters:
        Nodes: int const &
        Edges: int const &

    """
  return _snap.TUNGraph_New(*args)

def TUNGraph_Load(*args):
  """
    TUNGraph_Load(TSIn SIn) -> PUNGraph

    Parameters:
        SIn: TSIn &

    """
  return _snap.TUNGraph_Load(*args)

def TUNGraph_GetSmallGraph():
  """TUNGraph_GetSmallGraph() -> PUNGraph"""
  return _snap.TUNGraph_GetSmallGraph()

class TNGraph(object):
    """Proxy of C++ TNGraph class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TNGraph self) -> TNGraph
        __init__(TNGraph self, int const & Nodes, int const & Edges) -> TNGraph

        Parameters:
            Nodes: int const &
            Edges: int const &

        __init__(TNGraph self, TNGraph Graph) -> TNGraph

        Parameters:
            Graph: TNGraph const &

        __init__(TNGraph self, TSIn SIn) -> TNGraph

        Parameters:
            SIn: TSIn &

        """
        _snap.TNGraph_swiginit(self,_snap.new_TNGraph(*args))
    def Save(self, *args):
        """
        Save(TNGraph self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.TNGraph_Save(self, *args)

    def New(*args):
        """
        New() -> PNGraph
        New(int const & Nodes, int const & Edges) -> PNGraph

        Parameters:
            Nodes: int const &
            Edges: int const &

        """
        return _snap.TNGraph_New(*args)

    New = staticmethod(New)
    def Load(*args):
        """
        Load(TSIn SIn) -> PNGraph

        Parameters:
            SIn: TSIn &

        """
        return _snap.TNGraph_Load(*args)

    Load = staticmethod(Load)
    def HasFlag(self, *args):
        """
        HasFlag(TNGraph self, TGraphFlag const & Flag) -> bool

        Parameters:
            Flag: TGraphFlag const &

        """
        return _snap.TNGraph_HasFlag(self, *args)

    def GetNodes(self):
        """
        GetNodes(TNGraph self) -> int

        Parameters:
            self: TNGraph const *

        """
        return _snap.TNGraph_GetNodes(self)

    def AddNode(self, *args):
        """
        AddNode(TNGraph self, int NId=-1) -> int

        Parameters:
            NId: int

        AddNode(TNGraph self) -> int
        AddNode(TNGraph self, TNGraph::TNodeI const & NodeId) -> int

        Parameters:
            NodeId: TNGraph::TNodeI const &

        AddNode(TNGraph self, int const & NId, TIntV InNIdV, TIntV OutNIdV) -> int

        Parameters:
            NId: int const &
            InNIdV: TIntV const &
            OutNIdV: TIntV const &

        AddNode(TNGraph self, int const & NId, TVecPool< TInt > const & Pool, int const & SrcVId, int const & DstVId) -> int

        Parameters:
            NId: int const &
            Pool: TVecPool< TInt > const &
            SrcVId: int const &
            DstVId: int const &

        """
        return _snap.TNGraph_AddNode(self, *args)

    def DelNode(self, *args):
        """
        DelNode(TNGraph self, int const & NId)

        Parameters:
            NId: int const &

        DelNode(TNGraph self, TNGraph::TNode const & NodeI)

        Parameters:
            NodeI: TNGraph::TNode const &

        """
        return _snap.TNGraph_DelNode(self, *args)

    def IsNode(self, *args):
        """
        IsNode(TNGraph self, int const & NId) -> bool

        Parameters:
            NId: int const &

        """
        return _snap.TNGraph_IsNode(self, *args)

    def GetMxNId(self):
        """
        GetMxNId(TNGraph self) -> int

        Parameters:
            self: TNGraph const *

        """
        return _snap.TNGraph_GetMxNId(self)

    def GetEdges(self):
        """
        GetEdges(TNGraph self) -> int

        Parameters:
            self: TNGraph const *

        """
        return _snap.TNGraph_GetEdges(self)

    def AddEdge(self, *args):
        """
        AddEdge(TNGraph self, int const & SrcNId, int const & DstNId) -> int

        Parameters:
            SrcNId: int const &
            DstNId: int const &

        AddEdge(TNGraph self, TNGraph::TEdgeI const & EdgeI) -> int

        Parameters:
            EdgeI: TNGraph::TEdgeI const &

        """
        return _snap.TNGraph_AddEdge(self, *args)

    def DelEdge(self, *args):
        """
        DelEdge(TNGraph self, int const & SrcNId, int const & DstNId, bool const & IsDir=True)

        Parameters:
            SrcNId: int const &
            DstNId: int const &
            IsDir: bool const &

        DelEdge(TNGraph self, int const & SrcNId, int const & DstNId)

        Parameters:
            SrcNId: int const &
            DstNId: int const &

        """
        return _snap.TNGraph_DelEdge(self, *args)

    def IsEdge(self, *args):
        """
        IsEdge(TNGraph self, int const & SrcNId, int const & DstNId, bool const & IsDir=True) -> bool

        Parameters:
            SrcNId: int const &
            DstNId: int const &
            IsDir: bool const &

        IsEdge(TNGraph self, int const & SrcNId, int const & DstNId) -> bool

        Parameters:
            SrcNId: int const &
            DstNId: int const &

        """
        return _snap.TNGraph_IsEdge(self, *args)

    def GetEI(self, *args):
        """
        GetEI(TNGraph self, int const & SrcNId, int const & DstNId) -> TNGraph::TEdgeI

        Parameters:
            SrcNId: int const &
            DstNId: int const &

        """
        return _snap.TNGraph_GetEI(self, *args)

    def GetRndNId(self, *args):
        """
        GetRndNId(TNGraph self, TRnd Rnd=Rnd) -> int

        Parameters:
            Rnd: TRnd &

        GetRndNId(TNGraph self) -> int

        Parameters:
            self: TNGraph *

        """
        return _snap.TNGraph_GetRndNId(self, *args)

    def GetRndNI(self, *args):
        """
        GetRndNI(TNGraph self, TRnd Rnd=Rnd) -> TNGraph::TNodeI

        Parameters:
            Rnd: TRnd &

        GetRndNI(TNGraph self) -> TNGraph::TNodeI

        Parameters:
            self: TNGraph *

        """
        return _snap.TNGraph_GetRndNI(self, *args)

    def GetNIdV(self, *args):
        """
        GetNIdV(TNGraph self, TIntV NIdV)

        Parameters:
            NIdV: TIntV &

        """
        return _snap.TNGraph_GetNIdV(self, *args)

    def Empty(self):
        """
        Empty(TNGraph self) -> bool

        Parameters:
            self: TNGraph const *

        """
        return _snap.TNGraph_Empty(self)

    def Clr(self):
        """
        Clr(TNGraph self)

        Parameters:
            self: TNGraph *

        """
        return _snap.TNGraph_Clr(self)

    def Reserve(self, *args):
        """
        Reserve(TNGraph self, int const & Nodes, int const & Edges)

        Parameters:
            Nodes: int const &
            Edges: int const &

        """
        return _snap.TNGraph_Reserve(self, *args)

    def ReserveNIdInDeg(self, *args):
        """
        ReserveNIdInDeg(TNGraph self, int const & NId, int const & InDeg)

        Parameters:
            NId: int const &
            InDeg: int const &

        """
        return _snap.TNGraph_ReserveNIdInDeg(self, *args)

    def ReserveNIdOutDeg(self, *args):
        """
        ReserveNIdOutDeg(TNGraph self, int const & NId, int const & OutDeg)

        Parameters:
            NId: int const &
            OutDeg: int const &

        """
        return _snap.TNGraph_ReserveNIdOutDeg(self, *args)

    def Defrag(self, OnlyNodeLinks=False):
        """
        Defrag(TNGraph self, bool const & OnlyNodeLinks=False)

        Parameters:
            OnlyNodeLinks: bool const &

        Defrag(TNGraph self)

        Parameters:
            self: TNGraph *

        """
        return _snap.TNGraph_Defrag(self, OnlyNodeLinks)

    def IsOk(self, ThrowExcept=True):
        """
        IsOk(TNGraph self, bool const & ThrowExcept=True) -> bool

        Parameters:
            ThrowExcept: bool const &

        IsOk(TNGraph self) -> bool

        Parameters:
            self: TNGraph const *

        """
        return _snap.TNGraph_IsOk(self, ThrowExcept)

    def Dump(self, *args):
        """
        Dump(TNGraph self, FILE * OutF=stdout)

        Parameters:
            OutF: FILE *

        Dump(TNGraph self)

        Parameters:
            self: TNGraph const *

        """
        return _snap.TNGraph_Dump(self, *args)

    def GetSmallGraph():
        """GetSmallGraph() -> PNGraph"""
        return _snap.TNGraph_GetSmallGraph()

    GetSmallGraph = staticmethod(GetSmallGraph)
    def BegNI(self, *args):
        """
        BegNI(TNGraph self) -> TNGraph::TNodeI
        BegNI(TNGraph self) -> TNGraphNodeI

        Parameters:
            self: TNGraph *

        """
        return _snap.TNGraph_BegNI(self, *args)

    def EndNI(self, *args):
        """
        EndNI(TNGraph self) -> TNGraph::TNodeI
        EndNI(TNGraph self) -> TNGraphNodeI

        Parameters:
            self: TNGraph *

        """
        return _snap.TNGraph_EndNI(self, *args)

    def GetNI(self, *args):
        """
        GetNI(TNGraph self, int const & NId) -> TNGraph::TNodeI

        Parameters:
            NId: int const &

        GetNI(TNGraph self, int const & NId) -> TNGraphNodeI

        Parameters:
            NId: int const &

        """
        return _snap.TNGraph_GetNI(self, *args)

    def BegEI(self, *args):
        """
        BegEI(TNGraph self) -> TNGraph::TEdgeI
        BegEI(TNGraph self) -> TNGraphEdgeI

        Parameters:
            self: TNGraph *

        """
        return _snap.TNGraph_BegEI(self, *args)

    def EndEI(self, *args):
        """
        EndEI(TNGraph self) -> TNGraph::TEdgeI
        EndEI(TNGraph self) -> TNGraphEdgeI

        Parameters:
            self: TNGraph *

        """
        return _snap.TNGraph_EndEI(self, *args)

    __swig_destroy__ = _snap.delete_TNGraph
TNGraph.Save = new_instancemethod(_snap.TNGraph_Save,None,TNGraph)
TNGraph.HasFlag = new_instancemethod(_snap.TNGraph_HasFlag,None,TNGraph)
TNGraph.GetNodes = new_instancemethod(_snap.TNGraph_GetNodes,None,TNGraph)
TNGraph.AddNode = new_instancemethod(_snap.TNGraph_AddNode,None,TNGraph)
TNGraph.DelNode = new_instancemethod(_snap.TNGraph_DelNode,None,TNGraph)
TNGraph.IsNode = new_instancemethod(_snap.TNGraph_IsNode,None,TNGraph)
TNGraph.GetMxNId = new_instancemethod(_snap.TNGraph_GetMxNId,None,TNGraph)
TNGraph.GetEdges = new_instancemethod(_snap.TNGraph_GetEdges,None,TNGraph)
TNGraph.AddEdge = new_instancemethod(_snap.TNGraph_AddEdge,None,TNGraph)
TNGraph.DelEdge = new_instancemethod(_snap.TNGraph_DelEdge,None,TNGraph)
TNGraph.IsEdge = new_instancemethod(_snap.TNGraph_IsEdge,None,TNGraph)
TNGraph.GetEI = new_instancemethod(_snap.TNGraph_GetEI,None,TNGraph)
TNGraph.GetRndNId = new_instancemethod(_snap.TNGraph_GetRndNId,None,TNGraph)
TNGraph.GetRndNI = new_instancemethod(_snap.TNGraph_GetRndNI,None,TNGraph)
TNGraph.GetNIdV = new_instancemethod(_snap.TNGraph_GetNIdV,None,TNGraph)
TNGraph.Empty = new_instancemethod(_snap.TNGraph_Empty,None,TNGraph)
TNGraph.Clr = new_instancemethod(_snap.TNGraph_Clr,None,TNGraph)
TNGraph.Reserve = new_instancemethod(_snap.TNGraph_Reserve,None,TNGraph)
TNGraph.ReserveNIdInDeg = new_instancemethod(_snap.TNGraph_ReserveNIdInDeg,None,TNGraph)
TNGraph.ReserveNIdOutDeg = new_instancemethod(_snap.TNGraph_ReserveNIdOutDeg,None,TNGraph)
TNGraph.Defrag = new_instancemethod(_snap.TNGraph_Defrag,None,TNGraph)
TNGraph.IsOk = new_instancemethod(_snap.TNGraph_IsOk,None,TNGraph)
TNGraph.Dump = new_instancemethod(_snap.TNGraph_Dump,None,TNGraph)
TNGraph.BegNI = new_instancemethod(_snap.TNGraph_BegNI,None,TNGraph)
TNGraph.EndNI = new_instancemethod(_snap.TNGraph_EndNI,None,TNGraph)
TNGraph.GetNI = new_instancemethod(_snap.TNGraph_GetNI,None,TNGraph)
TNGraph.BegEI = new_instancemethod(_snap.TNGraph_BegEI,None,TNGraph)
TNGraph.EndEI = new_instancemethod(_snap.TNGraph_EndEI,None,TNGraph)
TNGraph_swigregister = _snap.TNGraph_swigregister
TNGraph_swigregister(TNGraph)

def TNGraph_New(*args):
  """
    New() -> PNGraph
    TNGraph_New(int const & Nodes, int const & Edges) -> PNGraph

    Parameters:
        Nodes: int const &
        Edges: int const &

    """
  return _snap.TNGraph_New(*args)

def TNGraph_Load(*args):
  """
    TNGraph_Load(TSIn SIn) -> PNGraph

    Parameters:
        SIn: TSIn &

    """
  return _snap.TNGraph_Load(*args)

def TNGraph_GetSmallGraph():
  """TNGraph_GetSmallGraph() -> PNGraph"""
  return _snap.TNGraph_GetSmallGraph()

class TNEGraph(object):
    """Proxy of C++ TNEGraph class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TNEGraph self) -> TNEGraph
        __init__(TNEGraph self, int const & Nodes, int const & Edges) -> TNEGraph

        Parameters:
            Nodes: int const &
            Edges: int const &

        __init__(TNEGraph self, TNEGraph Graph) -> TNEGraph

        Parameters:
            Graph: TNEGraph const &

        __init__(TNEGraph self, TSIn SIn) -> TNEGraph

        Parameters:
            SIn: TSIn &

        """
        _snap.TNEGraph_swiginit(self,_snap.new_TNEGraph(*args))
    def Save(self, *args):
        """
        Save(TNEGraph self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.TNEGraph_Save(self, *args)

    def New(*args):
        """
        New() -> PNEGraph
        New(int const & Nodes, int const & Edges) -> PNEGraph

        Parameters:
            Nodes: int const &
            Edges: int const &

        """
        return _snap.TNEGraph_New(*args)

    New = staticmethod(New)
    def Load(*args):
        """
        Load(TSIn SIn) -> PNEGraph

        Parameters:
            SIn: TSIn &

        """
        return _snap.TNEGraph_Load(*args)

    Load = staticmethod(Load)
    def HasFlag(self, *args):
        """
        HasFlag(TNEGraph self, TGraphFlag const & Flag) -> bool

        Parameters:
            Flag: TGraphFlag const &

        """
        return _snap.TNEGraph_HasFlag(self, *args)

    def GetNodes(self):
        """
        GetNodes(TNEGraph self) -> int

        Parameters:
            self: TNEGraph const *

        """
        return _snap.TNEGraph_GetNodes(self)

    def AddNode(self, *args):
        """
        AddNode(TNEGraph self, int NId=-1) -> int

        Parameters:
            NId: int

        AddNode(TNEGraph self) -> int
        AddNode(TNEGraph self, TNEGraph::TNodeI const & NodeId) -> int

        Parameters:
            NodeId: TNEGraph::TNodeI const &

        """
        return _snap.TNEGraph_AddNode(self, *args)

    def DelNode(self, *args):
        """
        DelNode(TNEGraph self, int const & NId)

        Parameters:
            NId: int const &

        DelNode(TNEGraph self, TNEGraph::TNode const & NodeI)

        Parameters:
            NodeI: TNEGraph::TNode const &

        """
        return _snap.TNEGraph_DelNode(self, *args)

    def IsNode(self, *args):
        """
        IsNode(TNEGraph self, int const & NId) -> bool

        Parameters:
            NId: int const &

        """
        return _snap.TNEGraph_IsNode(self, *args)

    def BegNI(self):
        """
        BegNI(TNEGraph self) -> TNEGraph::TNodeI

        Parameters:
            self: TNEGraph const *

        """
        return _snap.TNEGraph_BegNI(self)

    def EndNI(self):
        """
        EndNI(TNEGraph self) -> TNEGraph::TNodeI

        Parameters:
            self: TNEGraph const *

        """
        return _snap.TNEGraph_EndNI(self)

    def GetNI(self, *args):
        """
        GetNI(TNEGraph self, int const & NId) -> TNEGraph::TNodeI

        Parameters:
            NId: int const &

        """
        return _snap.TNEGraph_GetNI(self, *args)

    def GetMxNId(self):
        """
        GetMxNId(TNEGraph self) -> int

        Parameters:
            self: TNEGraph const *

        """
        return _snap.TNEGraph_GetMxNId(self)

    def GetEdges(self):
        """
        GetEdges(TNEGraph self) -> int

        Parameters:
            self: TNEGraph const *

        """
        return _snap.TNEGraph_GetEdges(self)

    def AddEdge(self, *args):
        """
        AddEdge(TNEGraph self, int const & SrcNId, int const & DstNId, int EId=-1) -> int

        Parameters:
            SrcNId: int const &
            DstNId: int const &
            EId: int

        AddEdge(TNEGraph self, int const & SrcNId, int const & DstNId) -> int

        Parameters:
            SrcNId: int const &
            DstNId: int const &

        AddEdge(TNEGraph self, TNEGraph::TEdgeI const & EdgeI) -> int

        Parameters:
            EdgeI: TNEGraph::TEdgeI const &

        """
        return _snap.TNEGraph_AddEdge(self, *args)

    def DelEdge(self, *args):
        """
        DelEdge(TNEGraph self, int const & EId)

        Parameters:
            EId: int const &

        DelEdge(TNEGraph self, int const & SrcNId, int const & DstNId, bool const & IsDir=True)

        Parameters:
            SrcNId: int const &
            DstNId: int const &
            IsDir: bool const &

        DelEdge(TNEGraph self, int const & SrcNId, int const & DstNId)

        Parameters:
            SrcNId: int const &
            DstNId: int const &

        """
        return _snap.TNEGraph_DelEdge(self, *args)

    def IsEdge(self, *args):
        """
        IsEdge(TNEGraph self, int const & EId) -> bool

        Parameters:
            EId: int const &

        IsEdge(TNEGraph self, int const & SrcNId, int const & DstNId, bool const & IsDir=True) -> bool

        Parameters:
            SrcNId: int const &
            DstNId: int const &
            IsDir: bool const &

        IsEdge(TNEGraph self, int const & SrcNId, int const & DstNId) -> bool

        Parameters:
            SrcNId: int const &
            DstNId: int const &

        IsEdge(TNEGraph self, int const & SrcNId, int const & DstNId, int & EId, bool const & IsDir=True) -> bool

        Parameters:
            SrcNId: int const &
            DstNId: int const &
            EId: int &
            IsDir: bool const &

        IsEdge(TNEGraph self, int const & SrcNId, int const & DstNId, int & EId) -> bool

        Parameters:
            SrcNId: int const &
            DstNId: int const &
            EId: int &

        """
        return _snap.TNEGraph_IsEdge(self, *args)

    def GetEId(self, *args):
        """
        GetEId(TNEGraph self, int const & SrcNId, int const & DstNId) -> int

        Parameters:
            SrcNId: int const &
            DstNId: int const &

        """
        return _snap.TNEGraph_GetEId(self, *args)

    def BegEI(self):
        """
        BegEI(TNEGraph self) -> TNEGraph::TEdgeI

        Parameters:
            self: TNEGraph const *

        """
        return _snap.TNEGraph_BegEI(self)

    def EndEI(self):
        """
        EndEI(TNEGraph self) -> TNEGraph::TEdgeI

        Parameters:
            self: TNEGraph const *

        """
        return _snap.TNEGraph_EndEI(self)

    def GetEI(self, *args):
        """
        GetEI(TNEGraph self, int const & EId) -> TNEGraph::TEdgeI

        Parameters:
            EId: int const &

        GetEI(TNEGraph self, int const & SrcNId, int const & DstNId) -> TNEGraph::TEdgeI

        Parameters:
            SrcNId: int const &
            DstNId: int const &

        """
        return _snap.TNEGraph_GetEI(self, *args)

    def GetRndNId(self, *args):
        """
        GetRndNId(TNEGraph self, TRnd Rnd=Rnd) -> int

        Parameters:
            Rnd: TRnd &

        GetRndNId(TNEGraph self) -> int

        Parameters:
            self: TNEGraph *

        """
        return _snap.TNEGraph_GetRndNId(self, *args)

    def GetRndNI(self, *args):
        """
        GetRndNI(TNEGraph self, TRnd Rnd=Rnd) -> TNEGraph::TNodeI

        Parameters:
            Rnd: TRnd &

        GetRndNI(TNEGraph self) -> TNEGraph::TNodeI

        Parameters:
            self: TNEGraph *

        """
        return _snap.TNEGraph_GetRndNI(self, *args)

    def GetRndEId(self, *args):
        """
        GetRndEId(TNEGraph self, TRnd Rnd=Rnd) -> int

        Parameters:
            Rnd: TRnd &

        GetRndEId(TNEGraph self) -> int

        Parameters:
            self: TNEGraph *

        """
        return _snap.TNEGraph_GetRndEId(self, *args)

    def GetRndEI(self, *args):
        """
        GetRndEI(TNEGraph self, TRnd Rnd=Rnd) -> TNEGraph::TEdgeI

        Parameters:
            Rnd: TRnd &

        GetRndEI(TNEGraph self) -> TNEGraph::TEdgeI

        Parameters:
            self: TNEGraph *

        """
        return _snap.TNEGraph_GetRndEI(self, *args)

    def GetNIdV(self, *args):
        """
        GetNIdV(TNEGraph self, TIntV NIdV)

        Parameters:
            NIdV: TIntV &

        """
        return _snap.TNEGraph_GetNIdV(self, *args)

    def GetEIdV(self, *args):
        """
        GetEIdV(TNEGraph self, TIntV EIdV)

        Parameters:
            EIdV: TIntV &

        """
        return _snap.TNEGraph_GetEIdV(self, *args)

    def Empty(self):
        """
        Empty(TNEGraph self) -> bool

        Parameters:
            self: TNEGraph const *

        """
        return _snap.TNEGraph_Empty(self)

    def Clr(self):
        """
        Clr(TNEGraph self)

        Parameters:
            self: TNEGraph *

        """
        return _snap.TNEGraph_Clr(self)

    def Reserve(self, *args):
        """
        Reserve(TNEGraph self, int const & Nodes, int const & Edges)

        Parameters:
            Nodes: int const &
            Edges: int const &

        """
        return _snap.TNEGraph_Reserve(self, *args)

    def Defrag(self, OnlyNodeLinks=False):
        """
        Defrag(TNEGraph self, bool const & OnlyNodeLinks=False)

        Parameters:
            OnlyNodeLinks: bool const &

        Defrag(TNEGraph self)

        Parameters:
            self: TNEGraph *

        """
        return _snap.TNEGraph_Defrag(self, OnlyNodeLinks)

    def IsOk(self, ThrowExcept=True):
        """
        IsOk(TNEGraph self, bool const & ThrowExcept=True) -> bool

        Parameters:
            ThrowExcept: bool const &

        IsOk(TNEGraph self) -> bool

        Parameters:
            self: TNEGraph const *

        """
        return _snap.TNEGraph_IsOk(self, ThrowExcept)

    def Dump(self, *args):
        """
        Dump(TNEGraph self, FILE * OutF=stdout)

        Parameters:
            OutF: FILE *

        Dump(TNEGraph self)

        Parameters:
            self: TNEGraph const *

        """
        return _snap.TNEGraph_Dump(self, *args)

    __swig_destroy__ = _snap.delete_TNEGraph
TNEGraph.Save = new_instancemethod(_snap.TNEGraph_Save,None,TNEGraph)
TNEGraph.HasFlag = new_instancemethod(_snap.TNEGraph_HasFlag,None,TNEGraph)
TNEGraph.GetNodes = new_instancemethod(_snap.TNEGraph_GetNodes,None,TNEGraph)
TNEGraph.AddNode = new_instancemethod(_snap.TNEGraph_AddNode,None,TNEGraph)
TNEGraph.DelNode = new_instancemethod(_snap.TNEGraph_DelNode,None,TNEGraph)
TNEGraph.IsNode = new_instancemethod(_snap.TNEGraph_IsNode,None,TNEGraph)
TNEGraph.BegNI = new_instancemethod(_snap.TNEGraph_BegNI,None,TNEGraph)
TNEGraph.EndNI = new_instancemethod(_snap.TNEGraph_EndNI,None,TNEGraph)
TNEGraph.GetNI = new_instancemethod(_snap.TNEGraph_GetNI,None,TNEGraph)
TNEGraph.GetMxNId = new_instancemethod(_snap.TNEGraph_GetMxNId,None,TNEGraph)
TNEGraph.GetEdges = new_instancemethod(_snap.TNEGraph_GetEdges,None,TNEGraph)
TNEGraph.AddEdge = new_instancemethod(_snap.TNEGraph_AddEdge,None,TNEGraph)
TNEGraph.DelEdge = new_instancemethod(_snap.TNEGraph_DelEdge,None,TNEGraph)
TNEGraph.IsEdge = new_instancemethod(_snap.TNEGraph_IsEdge,None,TNEGraph)
TNEGraph.GetEId = new_instancemethod(_snap.TNEGraph_GetEId,None,TNEGraph)
TNEGraph.BegEI = new_instancemethod(_snap.TNEGraph_BegEI,None,TNEGraph)
TNEGraph.EndEI = new_instancemethod(_snap.TNEGraph_EndEI,None,TNEGraph)
TNEGraph.GetEI = new_instancemethod(_snap.TNEGraph_GetEI,None,TNEGraph)
TNEGraph.GetRndNId = new_instancemethod(_snap.TNEGraph_GetRndNId,None,TNEGraph)
TNEGraph.GetRndNI = new_instancemethod(_snap.TNEGraph_GetRndNI,None,TNEGraph)
TNEGraph.GetRndEId = new_instancemethod(_snap.TNEGraph_GetRndEId,None,TNEGraph)
TNEGraph.GetRndEI = new_instancemethod(_snap.TNEGraph_GetRndEI,None,TNEGraph)
TNEGraph.GetNIdV = new_instancemethod(_snap.TNEGraph_GetNIdV,None,TNEGraph)
TNEGraph.GetEIdV = new_instancemethod(_snap.TNEGraph_GetEIdV,None,TNEGraph)
TNEGraph.Empty = new_instancemethod(_snap.TNEGraph_Empty,None,TNEGraph)
TNEGraph.Clr = new_instancemethod(_snap.TNEGraph_Clr,None,TNEGraph)
TNEGraph.Reserve = new_instancemethod(_snap.TNEGraph_Reserve,None,TNEGraph)
TNEGraph.Defrag = new_instancemethod(_snap.TNEGraph_Defrag,None,TNEGraph)
TNEGraph.IsOk = new_instancemethod(_snap.TNEGraph_IsOk,None,TNEGraph)
TNEGraph.Dump = new_instancemethod(_snap.TNEGraph_Dump,None,TNEGraph)
TNEGraph_swigregister = _snap.TNEGraph_swigregister
TNEGraph_swigregister(TNEGraph)

def TNEGraph_New(*args):
  """
    New() -> PNEGraph
    TNEGraph_New(int const & Nodes, int const & Edges) -> PNEGraph

    Parameters:
        Nodes: int const &
        Edges: int const &

    """
  return _snap.TNEGraph_New(*args)

def TNEGraph_Load(*args):
  """
    TNEGraph_Load(TSIn SIn) -> PNEGraph

    Parameters:
        SIn: TSIn &

    """
  return _snap.TNEGraph_Load(*args)

class TBPGraph(object):
    """Proxy of C++ TBPGraph class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    bgsUndef = _snap.TBPGraph_bgsUndef
    bgsLeft = _snap.TBPGraph_bgsLeft
    bgsRight = _snap.TBPGraph_bgsRight
    bgsBoth = _snap.TBPGraph_bgsBoth
    def __init__(self, *args): 
        """
        __init__(TBPGraph self) -> TBPGraph
        __init__(TBPGraph self, int const & Nodes, int const & Edges) -> TBPGraph

        Parameters:
            Nodes: int const &
            Edges: int const &

        __init__(TBPGraph self, TBPGraph BPGraph) -> TBPGraph

        Parameters:
            BPGraph: TBPGraph const &

        __init__(TBPGraph self, TSIn SIn) -> TBPGraph

        Parameters:
            SIn: TSIn &

        """
        _snap.TBPGraph_swiginit(self,_snap.new_TBPGraph(*args))
    def Save(self, *args):
        """
        Save(TBPGraph self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.TBPGraph_Save(self, *args)

    def New(*args):
        """
        New() -> PBPGraph
        New(int const & Nodes, int const & Edges) -> PBPGraph

        Parameters:
            Nodes: int const &
            Edges: int const &

        """
        return _snap.TBPGraph_New(*args)

    New = staticmethod(New)
    def Load(*args):
        """
        Load(TSIn SIn) -> PBPGraph

        Parameters:
            SIn: TSIn &

        """
        return _snap.TBPGraph_Load(*args)

    Load = staticmethod(Load)
    def GetNodes(self):
        """
        GetNodes(TBPGraph self) -> int

        Parameters:
            self: TBPGraph const *

        """
        return _snap.TBPGraph_GetNodes(self)

    def GetLNodes(self):
        """
        GetLNodes(TBPGraph self) -> int

        Parameters:
            self: TBPGraph const *

        """
        return _snap.TBPGraph_GetLNodes(self)

    def GetRNodes(self):
        """
        GetRNodes(TBPGraph self) -> int

        Parameters:
            self: TBPGraph const *

        """
        return _snap.TBPGraph_GetRNodes(self)

    def AddNode(self, *args):
        """
        AddNode(TBPGraph self, int NId=-1, bool const & LeftNode=True) -> int

        Parameters:
            NId: int
            LeftNode: bool const &

        AddNode(TBPGraph self, int NId=-1) -> int

        Parameters:
            NId: int

        AddNode(TBPGraph self) -> int
        AddNode(TBPGraph self, TBPGraph::TNodeI const & NodeI) -> int

        Parameters:
            NodeI: TBPGraph::TNodeI const &

        """
        return _snap.TBPGraph_AddNode(self, *args)

    def DelNode(self, *args):
        """
        DelNode(TBPGraph self, int const & NId)

        Parameters:
            NId: int const &

        DelNode(TBPGraph self, TBPGraph::TNode const & NodeI)

        Parameters:
            NodeI: TBPGraph::TNode const &

        """
        return _snap.TBPGraph_DelNode(self, *args)

    def IsNode(self, *args):
        """
        IsNode(TBPGraph self, int const & NId) -> bool

        Parameters:
            NId: int const &

        """
        return _snap.TBPGraph_IsNode(self, *args)

    def IsLNode(self, *args):
        """
        IsLNode(TBPGraph self, int const & NId) -> bool

        Parameters:
            NId: int const &

        """
        return _snap.TBPGraph_IsLNode(self, *args)

    def IsRNode(self, *args):
        """
        IsRNode(TBPGraph self, int const & NId) -> bool

        Parameters:
            NId: int const &

        """
        return _snap.TBPGraph_IsRNode(self, *args)

    def GetMxNId(self):
        """
        GetMxNId(TBPGraph self) -> int

        Parameters:
            self: TBPGraph const *

        """
        return _snap.TBPGraph_GetMxNId(self)

    def BegNI(self):
        """
        BegNI(TBPGraph self) -> TBPGraph::TNodeI

        Parameters:
            self: TBPGraph const *

        """
        return _snap.TBPGraph_BegNI(self)

    def EndNI(self):
        """
        EndNI(TBPGraph self) -> TBPGraph::TNodeI

        Parameters:
            self: TBPGraph const *

        """
        return _snap.TBPGraph_EndNI(self)

    def GetNI(self, *args):
        """
        GetNI(TBPGraph self, int const & NId) -> TBPGraph::TNodeI

        Parameters:
            NId: int const &

        """
        return _snap.TBPGraph_GetNI(self, *args)

    def BegLNI(self):
        """
        BegLNI(TBPGraph self) -> TBPGraph::TNodeI

        Parameters:
            self: TBPGraph const *

        """
        return _snap.TBPGraph_BegLNI(self)

    def EndLNI(self):
        """
        EndLNI(TBPGraph self) -> TBPGraph::TNodeI

        Parameters:
            self: TBPGraph const *

        """
        return _snap.TBPGraph_EndLNI(self)

    def BegRNI(self):
        """
        BegRNI(TBPGraph self) -> TBPGraph::TNodeI

        Parameters:
            self: TBPGraph const *

        """
        return _snap.TBPGraph_BegRNI(self)

    def EndRNI(self):
        """
        EndRNI(TBPGraph self) -> TBPGraph::TNodeI

        Parameters:
            self: TBPGraph const *

        """
        return _snap.TBPGraph_EndRNI(self)

    def GetEdges(self):
        """
        GetEdges(TBPGraph self) -> int

        Parameters:
            self: TBPGraph const *

        """
        return _snap.TBPGraph_GetEdges(self)

    def AddEdge(self, *args):
        """
        AddEdge(TBPGraph self, int const & LeftNId, int const & RightNId) -> int

        Parameters:
            LeftNId: int const &
            RightNId: int const &

        AddEdge(TBPGraph self, TBPGraph::TEdgeI const & EdgeI) -> int

        Parameters:
            EdgeI: TBPGraph::TEdgeI const &

        """
        return _snap.TBPGraph_AddEdge(self, *args)

    def DelEdge(self, *args):
        """
        DelEdge(TBPGraph self, int const & LeftNId, int const & RightNId)

        Parameters:
            LeftNId: int const &
            RightNId: int const &

        """
        return _snap.TBPGraph_DelEdge(self, *args)

    def IsEdge(self, *args):
        """
        IsEdge(TBPGraph self, int const & LeftNId, int const & RightNId) -> bool

        Parameters:
            LeftNId: int const &
            RightNId: int const &

        """
        return _snap.TBPGraph_IsEdge(self, *args)

    def BegEI(self):
        """
        BegEI(TBPGraph self) -> TBPGraph::TEdgeI

        Parameters:
            self: TBPGraph const *

        """
        return _snap.TBPGraph_BegEI(self)

    def EndEI(self):
        """
        EndEI(TBPGraph self) -> TBPGraph::TEdgeI

        Parameters:
            self: TBPGraph const *

        """
        return _snap.TBPGraph_EndEI(self)

    def GetEI(self, *args):
        """
        GetEI(TBPGraph self, int const & LeftNId, int const & RightNId) -> TBPGraph::TEdgeI

        Parameters:
            LeftNId: int const &
            RightNId: int const &

        """
        return _snap.TBPGraph_GetEI(self, *args)

    def GetRndNId(self, *args):
        """
        GetRndNId(TBPGraph self, TRnd Rnd=Rnd) -> int

        Parameters:
            Rnd: TRnd &

        GetRndNId(TBPGraph self) -> int

        Parameters:
            self: TBPGraph *

        """
        return _snap.TBPGraph_GetRndNId(self, *args)

    def GetRndLNId(self, *args):
        """
        GetRndLNId(TBPGraph self, TRnd Rnd=Rnd) -> int

        Parameters:
            Rnd: TRnd &

        GetRndLNId(TBPGraph self) -> int

        Parameters:
            self: TBPGraph *

        """
        return _snap.TBPGraph_GetRndLNId(self, *args)

    def GetRndRNId(self, *args):
        """
        GetRndRNId(TBPGraph self, TRnd Rnd=Rnd) -> int

        Parameters:
            Rnd: TRnd &

        GetRndRNId(TBPGraph self) -> int

        Parameters:
            self: TBPGraph *

        """
        return _snap.TBPGraph_GetRndRNId(self, *args)

    def GetRndNI(self, *args):
        """
        GetRndNI(TBPGraph self, TRnd Rnd=Rnd) -> TBPGraph::TNodeI

        Parameters:
            Rnd: TRnd &

        GetRndNI(TBPGraph self) -> TBPGraph::TNodeI

        Parameters:
            self: TBPGraph *

        """
        return _snap.TBPGraph_GetRndNI(self, *args)

    def GetNIdV(self, *args):
        """
        GetNIdV(TBPGraph self, TIntV NIdV)

        Parameters:
            NIdV: TIntV &

        """
        return _snap.TBPGraph_GetNIdV(self, *args)

    def GetLNIdV(self, *args):
        """
        GetLNIdV(TBPGraph self, TIntV NIdV)

        Parameters:
            NIdV: TIntV &

        """
        return _snap.TBPGraph_GetLNIdV(self, *args)

    def GetRNIdV(self, *args):
        """
        GetRNIdV(TBPGraph self, TIntV NIdV)

        Parameters:
            NIdV: TIntV &

        """
        return _snap.TBPGraph_GetRNIdV(self, *args)

    def Empty(self):
        """
        Empty(TBPGraph self) -> bool

        Parameters:
            self: TBPGraph const *

        """
        return _snap.TBPGraph_Empty(self)

    def Clr(self):
        """
        Clr(TBPGraph self)

        Parameters:
            self: TBPGraph *

        """
        return _snap.TBPGraph_Clr(self)

    def Reserve(self, *args):
        """
        Reserve(TBPGraph self, int const & Nodes, int const & Edges)

        Parameters:
            Nodes: int const &
            Edges: int const &

        """
        return _snap.TBPGraph_Reserve(self, *args)

    def Defrag(self, OnlyNodeLinks=False):
        """
        Defrag(TBPGraph self, bool const & OnlyNodeLinks=False)

        Parameters:
            OnlyNodeLinks: bool const &

        Defrag(TBPGraph self)

        Parameters:
            self: TBPGraph *

        """
        return _snap.TBPGraph_Defrag(self, OnlyNodeLinks)

    def IsOk(self, ThrowExcept=True):
        """
        IsOk(TBPGraph self, bool const & ThrowExcept=True) -> bool

        Parameters:
            ThrowExcept: bool const &

        IsOk(TBPGraph self) -> bool

        Parameters:
            self: TBPGraph const *

        """
        return _snap.TBPGraph_IsOk(self, ThrowExcept)

    def Dump(self, *args):
        """
        Dump(TBPGraph self, FILE * OutF=stdout)

        Parameters:
            OutF: FILE *

        Dump(TBPGraph self)

        Parameters:
            self: TBPGraph const *

        """
        return _snap.TBPGraph_Dump(self, *args)

    def GetSmallGraph():
        """GetSmallGraph() -> PBPGraph"""
        return _snap.TBPGraph_GetSmallGraph()

    GetSmallGraph = staticmethod(GetSmallGraph)
    __swig_destroy__ = _snap.delete_TBPGraph
TBPGraph.Save = new_instancemethod(_snap.TBPGraph_Save,None,TBPGraph)
TBPGraph.GetNodes = new_instancemethod(_snap.TBPGraph_GetNodes,None,TBPGraph)
TBPGraph.GetLNodes = new_instancemethod(_snap.TBPGraph_GetLNodes,None,TBPGraph)
TBPGraph.GetRNodes = new_instancemethod(_snap.TBPGraph_GetRNodes,None,TBPGraph)
TBPGraph.AddNode = new_instancemethod(_snap.TBPGraph_AddNode,None,TBPGraph)
TBPGraph.DelNode = new_instancemethod(_snap.TBPGraph_DelNode,None,TBPGraph)
TBPGraph.IsNode = new_instancemethod(_snap.TBPGraph_IsNode,None,TBPGraph)
TBPGraph.IsLNode = new_instancemethod(_snap.TBPGraph_IsLNode,None,TBPGraph)
TBPGraph.IsRNode = new_instancemethod(_snap.TBPGraph_IsRNode,None,TBPGraph)
TBPGraph.GetMxNId = new_instancemethod(_snap.TBPGraph_GetMxNId,None,TBPGraph)
TBPGraph.BegNI = new_instancemethod(_snap.TBPGraph_BegNI,None,TBPGraph)
TBPGraph.EndNI = new_instancemethod(_snap.TBPGraph_EndNI,None,TBPGraph)
TBPGraph.GetNI = new_instancemethod(_snap.TBPGraph_GetNI,None,TBPGraph)
TBPGraph.BegLNI = new_instancemethod(_snap.TBPGraph_BegLNI,None,TBPGraph)
TBPGraph.EndLNI = new_instancemethod(_snap.TBPGraph_EndLNI,None,TBPGraph)
TBPGraph.BegRNI = new_instancemethod(_snap.TBPGraph_BegRNI,None,TBPGraph)
TBPGraph.EndRNI = new_instancemethod(_snap.TBPGraph_EndRNI,None,TBPGraph)
TBPGraph.GetEdges = new_instancemethod(_snap.TBPGraph_GetEdges,None,TBPGraph)
TBPGraph.AddEdge = new_instancemethod(_snap.TBPGraph_AddEdge,None,TBPGraph)
TBPGraph.DelEdge = new_instancemethod(_snap.TBPGraph_DelEdge,None,TBPGraph)
TBPGraph.IsEdge = new_instancemethod(_snap.TBPGraph_IsEdge,None,TBPGraph)
TBPGraph.BegEI = new_instancemethod(_snap.TBPGraph_BegEI,None,TBPGraph)
TBPGraph.EndEI = new_instancemethod(_snap.TBPGraph_EndEI,None,TBPGraph)
TBPGraph.GetEI = new_instancemethod(_snap.TBPGraph_GetEI,None,TBPGraph)
TBPGraph.GetRndNId = new_instancemethod(_snap.TBPGraph_GetRndNId,None,TBPGraph)
TBPGraph.GetRndLNId = new_instancemethod(_snap.TBPGraph_GetRndLNId,None,TBPGraph)
TBPGraph.GetRndRNId = new_instancemethod(_snap.TBPGraph_GetRndRNId,None,TBPGraph)
TBPGraph.GetRndNI = new_instancemethod(_snap.TBPGraph_GetRndNI,None,TBPGraph)
TBPGraph.GetNIdV = new_instancemethod(_snap.TBPGraph_GetNIdV,None,TBPGraph)
TBPGraph.GetLNIdV = new_instancemethod(_snap.TBPGraph_GetLNIdV,None,TBPGraph)
TBPGraph.GetRNIdV = new_instancemethod(_snap.TBPGraph_GetRNIdV,None,TBPGraph)
TBPGraph.Empty = new_instancemethod(_snap.TBPGraph_Empty,None,TBPGraph)
TBPGraph.Clr = new_instancemethod(_snap.TBPGraph_Clr,None,TBPGraph)
TBPGraph.Reserve = new_instancemethod(_snap.TBPGraph_Reserve,None,TBPGraph)
TBPGraph.Defrag = new_instancemethod(_snap.TBPGraph_Defrag,None,TBPGraph)
TBPGraph.IsOk = new_instancemethod(_snap.TBPGraph_IsOk,None,TBPGraph)
TBPGraph.Dump = new_instancemethod(_snap.TBPGraph_Dump,None,TBPGraph)
TBPGraph_swigregister = _snap.TBPGraph_swigregister
TBPGraph_swigregister(TBPGraph)

def TBPGraph_New(*args):
  """
    New() -> PBPGraph
    TBPGraph_New(int const & Nodes, int const & Edges) -> PBPGraph

    Parameters:
        Nodes: int const &
        Edges: int const &

    """
  return _snap.TBPGraph_New(*args)

def TBPGraph_Load(*args):
  """
    TBPGraph_Load(TSIn SIn) -> PBPGraph

    Parameters:
        SIn: TSIn &

    """
  return _snap.TBPGraph_Load(*args)

def TBPGraph_GetSmallGraph():
  """TBPGraph_GetSmallGraph() -> PBPGraph"""
  return _snap.TBPGraph_GetSmallGraph()

class TNEANet(object):
    """Proxy of C++ TNEANet class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TNEANet self) -> TNEANet
        __init__(TNEANet self, int const & Nodes, int const & Edges) -> TNEANet

        Parameters:
            Nodes: int const &
            Edges: int const &

        __init__(TNEANet self, TNEANet Graph) -> TNEANet

        Parameters:
            Graph: TNEANet const &

        __init__(TNEANet self, TSIn SIn) -> TNEANet

        Parameters:
            SIn: TSIn &

        """
        _snap.TNEANet_swiginit(self,_snap.new_TNEANet(*args))
    def Save(self, *args):
        """
        Save(TNEANet self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.TNEANet_Save(self, *args)

    def New(*args):
        """
        New() -> PNEANet
        New(int const & Nodes, int const & Edges) -> PNEANet

        Parameters:
            Nodes: int const &
            Edges: int const &

        """
        return _snap.TNEANet_New(*args)

    New = staticmethod(New)
    def Load(*args):
        """
        Load(TSIn SIn) -> PNEANet

        Parameters:
            SIn: TSIn &

        """
        return _snap.TNEANet_Load(*args)

    Load = staticmethod(Load)
    def HasFlag(self, *args):
        """
        HasFlag(TNEANet self, TGraphFlag const & Flag) -> bool

        Parameters:
            Flag: TGraphFlag const &

        """
        return _snap.TNEANet_HasFlag(self, *args)

    def GetNodes(self):
        """
        GetNodes(TNEANet self) -> int

        Parameters:
            self: TNEANet const *

        """
        return _snap.TNEANet_GetNodes(self)

    def AddNode(self, *args):
        """
        AddNode(TNEANet self, int NId=-1) -> int

        Parameters:
            NId: int

        AddNode(TNEANet self) -> int
        AddNode(TNEANet self, TNEANet::TNodeI const & NodeId) -> int

        Parameters:
            NodeId: TNEANet::TNodeI const &

        """
        return _snap.TNEANet_AddNode(self, *args)

    def DelNode(self, *args):
        """
        DelNode(TNEANet self, int const & NId)

        Parameters:
            NId: int const &

        DelNode(TNEANet self, TNEANet::TNode const & NodeI)

        Parameters:
            NodeI: TNEANet::TNode const &

        """
        return _snap.TNEANet_DelNode(self, *args)

    def IsNode(self, *args):
        """
        IsNode(TNEANet self, int const & NId) -> bool

        Parameters:
            NId: int const &

        """
        return _snap.TNEANet_IsNode(self, *args)

    def GetNAIntI(self, *args):
        """
        GetNAIntI(TNEANet self, TStr attr, int const & NId) -> TNEANet::TAIntI

        Parameters:
            attr: TStr const &
            NId: int const &

        """
        return _snap.TNEANet_GetNAIntI(self, *args)

    def GetNAStrI(self, *args):
        """
        GetNAStrI(TNEANet self, TStr attr, int const & NId) -> TNEANet::TAStrI

        Parameters:
            attr: TStr const &
            NId: int const &

        """
        return _snap.TNEANet_GetNAStrI(self, *args)

    def GetNAFltI(self, *args):
        """
        GetNAFltI(TNEANet self, TStr attr, int const & NId) -> TNEANet::TAFltI

        Parameters:
            attr: TStr const &
            NId: int const &

        """
        return _snap.TNEANet_GetNAFltI(self, *args)

    def AttrNameNI(self, *args):
        """
        AttrNameNI(TNEANet self, TInt NId, TStrV Names)

        Parameters:
            NId: TInt const &
            Names: TStrV &

        AttrNameNI(TNEANet self, TInt NId, TStrIntPrH::TIter NodeHI, TStrV Names)

        Parameters:
            NId: TInt const &
            NodeHI: TStrIntPrH::TIter
            Names: TStrV &

        """
        return _snap.TNEANet_AttrNameNI(self, *args)

    def AttrValueNI(self, *args):
        """
        AttrValueNI(TNEANet self, TInt NId, TStrV Values)

        Parameters:
            NId: TInt const &
            Values: TStrV &

        AttrValueNI(TNEANet self, TInt NId, TStrIntPrH::TIter NodeHI, TStrV Values)

        Parameters:
            NId: TInt const &
            NodeHI: TStrIntPrH::TIter
            Values: TStrV &

        """
        return _snap.TNEANet_AttrValueNI(self, *args)

    def IntAttrNameNI(self, *args):
        """
        IntAttrNameNI(TNEANet self, TInt NId, TStrV Names)

        Parameters:
            NId: TInt const &
            Names: TStrV &

        IntAttrNameNI(TNEANet self, TInt NId, TStrIntPrH::TIter NodeHI, TStrV Names)

        Parameters:
            NId: TInt const &
            NodeHI: TStrIntPrH::TIter
            Names: TStrV &

        """
        return _snap.TNEANet_IntAttrNameNI(self, *args)

    def IntAttrValueNI(self, *args):
        """
        IntAttrValueNI(TNEANet self, TInt NId, TIntV Values)

        Parameters:
            NId: TInt const &
            Values: TIntV &

        IntAttrValueNI(TNEANet self, TInt NId, TStrIntPrH::TIter NodeHI, TIntV Values)

        Parameters:
            NId: TInt const &
            NodeHI: TStrIntPrH::TIter
            Values: TIntV &

        """
        return _snap.TNEANet_IntAttrValueNI(self, *args)

    def StrAttrNameNI(self, *args):
        """
        StrAttrNameNI(TNEANet self, TInt NId, TStrV Names)

        Parameters:
            NId: TInt const &
            Names: TStrV &

        StrAttrNameNI(TNEANet self, TInt NId, TStrIntPrH::TIter NodeHI, TStrV Names)

        Parameters:
            NId: TInt const &
            NodeHI: TStrIntPrH::TIter
            Names: TStrV &

        """
        return _snap.TNEANet_StrAttrNameNI(self, *args)

    def StrAttrValueNI(self, *args):
        """
        StrAttrValueNI(TNEANet self, TInt NId, TStrV Values)

        Parameters:
            NId: TInt const &
            Values: TStrV &

        StrAttrValueNI(TNEANet self, TInt NId, TStrIntPrH::TIter NodeHI, TStrV Values)

        Parameters:
            NId: TInt const &
            NodeHI: TStrIntPrH::TIter
            Values: TStrV &

        """
        return _snap.TNEANet_StrAttrValueNI(self, *args)

    def FltAttrNameNI(self, *args):
        """
        FltAttrNameNI(TNEANet self, TInt NId, TStrV Names)

        Parameters:
            NId: TInt const &
            Names: TStrV &

        FltAttrNameNI(TNEANet self, TInt NId, TStrIntPrH::TIter NodeHI, TStrV Names)

        Parameters:
            NId: TInt const &
            NodeHI: TStrIntPrH::TIter
            Names: TStrV &

        """
        return _snap.TNEANet_FltAttrNameNI(self, *args)

    def FltAttrValueNI(self, *args):
        """
        FltAttrValueNI(TNEANet self, TInt NId, TFltV Values)

        Parameters:
            NId: TInt const &
            Values: TFltV &

        FltAttrValueNI(TNEANet self, TInt NId, TStrIntPrH::TIter NodeHI, TFltV Values)

        Parameters:
            NId: TInt const &
            NodeHI: TStrIntPrH::TIter
            Values: TFltV &

        """
        return _snap.TNEANet_FltAttrValueNI(self, *args)

    def AttrNameEI(self, *args):
        """
        AttrNameEI(TNEANet self, TInt EId, TStrV Names)

        Parameters:
            EId: TInt const &
            Names: TStrV &

        AttrNameEI(TNEANet self, TInt EId, TStrIntPrH::TIter EdgeHI, TStrV Names)

        Parameters:
            EId: TInt const &
            EdgeHI: TStrIntPrH::TIter
            Names: TStrV &

        """
        return _snap.TNEANet_AttrNameEI(self, *args)

    def AttrValueEI(self, *args):
        """
        AttrValueEI(TNEANet self, TInt EId, TStrV Values)

        Parameters:
            EId: TInt const &
            Values: TStrV &

        AttrValueEI(TNEANet self, TInt EId, TStrIntPrH::TIter EdgeHI, TStrV Values)

        Parameters:
            EId: TInt const &
            EdgeHI: TStrIntPrH::TIter
            Values: TStrV &

        """
        return _snap.TNEANet_AttrValueEI(self, *args)

    def IntAttrNameEI(self, *args):
        """
        IntAttrNameEI(TNEANet self, TInt EId, TStrV Names)

        Parameters:
            EId: TInt const &
            Names: TStrV &

        IntAttrNameEI(TNEANet self, TInt EId, TStrIntPrH::TIter EdgeHI, TStrV Names)

        Parameters:
            EId: TInt const &
            EdgeHI: TStrIntPrH::TIter
            Names: TStrV &

        """
        return _snap.TNEANet_IntAttrNameEI(self, *args)

    def IntAttrValueEI(self, *args):
        """
        IntAttrValueEI(TNEANet self, TInt EId, TIntV Values)

        Parameters:
            EId: TInt const &
            Values: TIntV &

        IntAttrValueEI(TNEANet self, TInt EId, TStrIntPrH::TIter EdgeHI, TIntV Values)

        Parameters:
            EId: TInt const &
            EdgeHI: TStrIntPrH::TIter
            Values: TIntV &

        """
        return _snap.TNEANet_IntAttrValueEI(self, *args)

    def StrAttrNameEI(self, *args):
        """
        StrAttrNameEI(TNEANet self, TInt EId, TStrV Names)

        Parameters:
            EId: TInt const &
            Names: TStrV &

        StrAttrNameEI(TNEANet self, TInt EId, TStrIntPrH::TIter EdgeHI, TStrV Names)

        Parameters:
            EId: TInt const &
            EdgeHI: TStrIntPrH::TIter
            Names: TStrV &

        """
        return _snap.TNEANet_StrAttrNameEI(self, *args)

    def StrAttrValueEI(self, *args):
        """
        StrAttrValueEI(TNEANet self, TInt EId, TStrV Values)

        Parameters:
            EId: TInt const &
            Values: TStrV &

        StrAttrValueEI(TNEANet self, TInt EId, TStrIntPrH::TIter EdgeHI, TStrV Values)

        Parameters:
            EId: TInt const &
            EdgeHI: TStrIntPrH::TIter
            Values: TStrV &

        """
        return _snap.TNEANet_StrAttrValueEI(self, *args)

    def FltAttrNameEI(self, *args):
        """
        FltAttrNameEI(TNEANet self, TInt EId, TStrV Names)

        Parameters:
            EId: TInt const &
            Names: TStrV &

        FltAttrNameEI(TNEANet self, TInt EId, TStrIntPrH::TIter EdgeHI, TStrV Names)

        Parameters:
            EId: TInt const &
            EdgeHI: TStrIntPrH::TIter
            Names: TStrV &

        """
        return _snap.TNEANet_FltAttrNameEI(self, *args)

    def FltAttrValueEI(self, *args):
        """
        FltAttrValueEI(TNEANet self, TInt EId, TFltV Values)

        Parameters:
            EId: TInt const &
            Values: TFltV &

        FltAttrValueEI(TNEANet self, TInt EId, TStrIntPrH::TIter EdgeHI, TFltV Values)

        Parameters:
            EId: TInt const &
            EdgeHI: TStrIntPrH::TIter
            Values: TFltV &

        """
        return _snap.TNEANet_FltAttrValueEI(self, *args)

    def GetEAIntI(self, *args):
        """
        GetEAIntI(TNEANet self, TStr attr, int const & EId) -> TNEANet::TAIntI

        Parameters:
            attr: TStr const &
            EId: int const &

        """
        return _snap.TNEANet_GetEAIntI(self, *args)

    def GetEAStrI(self, *args):
        """
        GetEAStrI(TNEANet self, TStr attr, int const & EId) -> TNEANet::TAStrI

        Parameters:
            attr: TStr const &
            EId: int const &

        """
        return _snap.TNEANet_GetEAStrI(self, *args)

    def GetEAFltI(self, *args):
        """
        GetEAFltI(TNEANet self, TStr attr, int const & EId) -> TNEANet::TAFltI

        Parameters:
            attr: TStr const &
            EId: int const &

        """
        return _snap.TNEANet_GetEAFltI(self, *args)

    def GetMxNId(self):
        """
        GetMxNId(TNEANet self) -> int

        Parameters:
            self: TNEANet const *

        """
        return _snap.TNEANet_GetMxNId(self)

    def GetEdges(self):
        """
        GetEdges(TNEANet self) -> int

        Parameters:
            self: TNEANet const *

        """
        return _snap.TNEANet_GetEdges(self)

    def AddEdge(self, *args):
        """
        AddEdge(TNEANet self, int const & SrcNId, int const & DstNId, int EId=-1) -> int

        Parameters:
            SrcNId: int const &
            DstNId: int const &
            EId: int

        AddEdge(TNEANet self, int const & SrcNId, int const & DstNId) -> int

        Parameters:
            SrcNId: int const &
            DstNId: int const &

        AddEdge(TNEANet self, TNEANet::TEdgeI const & EdgeI) -> int

        Parameters:
            EdgeI: TNEANet::TEdgeI const &

        """
        return _snap.TNEANet_AddEdge(self, *args)

    def DelEdge(self, *args):
        """
        DelEdge(TNEANet self, int const & EId)

        Parameters:
            EId: int const &

        DelEdge(TNEANet self, int const & SrcNId, int const & DstNId, bool const & IsDir=True)

        Parameters:
            SrcNId: int const &
            DstNId: int const &
            IsDir: bool const &

        DelEdge(TNEANet self, int const & SrcNId, int const & DstNId)

        Parameters:
            SrcNId: int const &
            DstNId: int const &

        """
        return _snap.TNEANet_DelEdge(self, *args)

    def IsEdge(self, *args):
        """
        IsEdge(TNEANet self, int const & EId) -> bool

        Parameters:
            EId: int const &

        IsEdge(TNEANet self, int const & SrcNId, int const & DstNId, bool const & IsDir=True) -> bool

        Parameters:
            SrcNId: int const &
            DstNId: int const &
            IsDir: bool const &

        IsEdge(TNEANet self, int const & SrcNId, int const & DstNId) -> bool

        Parameters:
            SrcNId: int const &
            DstNId: int const &

        IsEdge(TNEANet self, int const & SrcNId, int const & DstNId, int & EId, bool const & IsDir=True) -> bool

        Parameters:
            SrcNId: int const &
            DstNId: int const &
            EId: int &
            IsDir: bool const &

        IsEdge(TNEANet self, int const & SrcNId, int const & DstNId, int & EId) -> bool

        Parameters:
            SrcNId: int const &
            DstNId: int const &
            EId: int &

        """
        return _snap.TNEANet_IsEdge(self, *args)

    def GetEId(self, *args):
        """
        GetEId(TNEANet self, int const & SrcNId, int const & DstNId) -> int

        Parameters:
            SrcNId: int const &
            DstNId: int const &

        """
        return _snap.TNEANet_GetEId(self, *args)

    def GetEI(self, *args):
        """
        GetEI(TNEANet self, int const & SrcNId, int const & DstNId) -> TNEANet::TEdgeI

        Parameters:
            SrcNId: int const &
            DstNId: int const &

        """
        return _snap.TNEANet_GetEI(self, *args)

    def GetRndNId(self, *args):
        """
        GetRndNId(TNEANet self, TRnd Rnd=Rnd) -> int

        Parameters:
            Rnd: TRnd &

        GetRndNId(TNEANet self) -> int

        Parameters:
            self: TNEANet *

        """
        return _snap.TNEANet_GetRndNId(self, *args)

    def GetRndNI(self, *args):
        """
        GetRndNI(TNEANet self, TRnd Rnd=Rnd) -> TNEANet::TNodeI

        Parameters:
            Rnd: TRnd &

        GetRndNI(TNEANet self) -> TNEANet::TNodeI

        Parameters:
            self: TNEANet *

        """
        return _snap.TNEANet_GetRndNI(self, *args)

    def GetRndEId(self, *args):
        """
        GetRndEId(TNEANet self, TRnd Rnd=Rnd) -> int

        Parameters:
            Rnd: TRnd &

        GetRndEId(TNEANet self) -> int

        Parameters:
            self: TNEANet *

        """
        return _snap.TNEANet_GetRndEId(self, *args)

    def GetRndEI(self, *args):
        """
        GetRndEI(TNEANet self, TRnd Rnd=Rnd) -> TNEANet::TEdgeI

        Parameters:
            Rnd: TRnd &

        GetRndEI(TNEANet self) -> TNEANet::TEdgeI

        Parameters:
            self: TNEANet *

        """
        return _snap.TNEANet_GetRndEI(self, *args)

    def GetNIdV(self, *args):
        """
        GetNIdV(TNEANet self, TIntV NIdV)

        Parameters:
            NIdV: TIntV &

        """
        return _snap.TNEANet_GetNIdV(self, *args)

    def GetEIdV(self, *args):
        """
        GetEIdV(TNEANet self, TIntV EIdV)

        Parameters:
            EIdV: TIntV &

        """
        return _snap.TNEANet_GetEIdV(self, *args)

    def Empty(self):
        """
        Empty(TNEANet self) -> bool

        Parameters:
            self: TNEANet const *

        """
        return _snap.TNEANet_Empty(self)

    def Clr(self):
        """
        Clr(TNEANet self)

        Parameters:
            self: TNEANet *

        """
        return _snap.TNEANet_Clr(self)

    def Reserve(self, *args):
        """
        Reserve(TNEANet self, int const & Nodes, int const & Edges)

        Parameters:
            Nodes: int const &
            Edges: int const &

        """
        return _snap.TNEANet_Reserve(self, *args)

    def Defrag(self, OnlyNodeLinks=False):
        """
        Defrag(TNEANet self, bool const & OnlyNodeLinks=False)

        Parameters:
            OnlyNodeLinks: bool const &

        Defrag(TNEANet self)

        Parameters:
            self: TNEANet *

        """
        return _snap.TNEANet_Defrag(self, OnlyNodeLinks)

    def IsOk(self, ThrowExcept=True):
        """
        IsOk(TNEANet self, bool const & ThrowExcept=True) -> bool

        Parameters:
            ThrowExcept: bool const &

        IsOk(TNEANet self) -> bool

        Parameters:
            self: TNEANet const *

        """
        return _snap.TNEANet_IsOk(self, ThrowExcept)

    def Dump(self, *args):
        """
        Dump(TNEANet self, FILE * OutF=stdout)

        Parameters:
            OutF: FILE *

        Dump(TNEANet self)

        Parameters:
            self: TNEANet const *

        """
        return _snap.TNEANet_Dump(self, *args)

    def AddIntAttrDatN(self, *args):
        """
        AddIntAttrDatN(TNEANet self, TNEANet::TNodeI const & NodeId, TInt value, TStr attr) -> int

        Parameters:
            NodeId: TNEANet::TNodeI const &
            value: TInt const &
            attr: TStr const &

        AddIntAttrDatN(TNEANet self, int const & NId, TInt value, TStr attr) -> int

        Parameters:
            NId: int const &
            value: TInt const &
            attr: TStr const &

        """
        return _snap.TNEANet_AddIntAttrDatN(self, *args)

    def AddStrAttrDatN(self, *args):
        """
        AddStrAttrDatN(TNEANet self, TNEANet::TNodeI const & NodeId, TStr value, TStr attr) -> int

        Parameters:
            NodeId: TNEANet::TNodeI const &
            value: TStr const &
            attr: TStr const &

        AddStrAttrDatN(TNEANet self, int const & NId, TStr value, TStr attr) -> int

        Parameters:
            NId: int const &
            value: TStr const &
            attr: TStr const &

        """
        return _snap.TNEANet_AddStrAttrDatN(self, *args)

    def AddFltAttrDatN(self, *args):
        """
        AddFltAttrDatN(TNEANet self, TNEANet::TNodeI const & NodeId, TFlt value, TStr attr) -> int

        Parameters:
            NodeId: TNEANet::TNodeI const &
            value: TFlt const &
            attr: TStr const &

        AddFltAttrDatN(TNEANet self, int const & NId, TFlt value, TStr attr) -> int

        Parameters:
            NId: int const &
            value: TFlt const &
            attr: TStr const &

        """
        return _snap.TNEANet_AddFltAttrDatN(self, *args)

    def AddIntAttrDatE(self, *args):
        """
        AddIntAttrDatE(TNEANet self, TNEANet::TEdgeI const & EdgeId, TInt value, TStr attr) -> int

        Parameters:
            EdgeId: TNEANet::TEdgeI const &
            value: TInt const &
            attr: TStr const &

        AddIntAttrDatE(TNEANet self, int const & EId, TInt value, TStr attr) -> int

        Parameters:
            EId: int const &
            value: TInt const &
            attr: TStr const &

        """
        return _snap.TNEANet_AddIntAttrDatE(self, *args)

    def AddStrAttrDatE(self, *args):
        """
        AddStrAttrDatE(TNEANet self, TNEANet::TEdgeI const & EdgeId, TStr value, TStr attr) -> int

        Parameters:
            EdgeId: TNEANet::TEdgeI const &
            value: TStr const &
            attr: TStr const &

        AddStrAttrDatE(TNEANet self, int const & EId, TStr value, TStr attr) -> int

        Parameters:
            EId: int const &
            value: TStr const &
            attr: TStr const &

        """
        return _snap.TNEANet_AddStrAttrDatE(self, *args)

    def AddFltAttrDatE(self, *args):
        """
        AddFltAttrDatE(TNEANet self, TNEANet::TEdgeI const & EdgeId, TFlt value, TStr attr) -> int

        Parameters:
            EdgeId: TNEANet::TEdgeI const &
            value: TFlt const &
            attr: TStr const &

        AddFltAttrDatE(TNEANet self, int const & EId, TFlt value, TStr attr) -> int

        Parameters:
            EId: int const &
            value: TFlt const &
            attr: TStr const &

        """
        return _snap.TNEANet_AddFltAttrDatE(self, *args)

    def GetIntAttrDatN(self, *args):
        """
        GetIntAttrDatN(TNEANet self, TNEANet::TNodeI const & NodeId, TStr attr) -> TInt

        Parameters:
            NodeId: TNEANet::TNodeI const &
            attr: TStr const &

        GetIntAttrDatN(TNEANet self, int const & NId, TStr attr) -> TInt

        Parameters:
            NId: int const &
            attr: TStr const &

        """
        return _snap.TNEANet_GetIntAttrDatN(self, *args)

    def GetStrAttrDatN(self, *args):
        """
        GetStrAttrDatN(TNEANet self, TNEANet::TNodeI const & NodeId, TStr attr) -> TStr

        Parameters:
            NodeId: TNEANet::TNodeI const &
            attr: TStr const &

        GetStrAttrDatN(TNEANet self, int const & NId, TStr attr) -> TStr

        Parameters:
            NId: int const &
            attr: TStr const &

        """
        return _snap.TNEANet_GetStrAttrDatN(self, *args)

    def GetFltAttrDatN(self, *args):
        """
        GetFltAttrDatN(TNEANet self, TNEANet::TNodeI const & NodeId, TStr attr) -> TFlt

        Parameters:
            NodeId: TNEANet::TNodeI const &
            attr: TStr const &

        GetFltAttrDatN(TNEANet self, int const & NId, TStr attr) -> TFlt

        Parameters:
            NId: int const &
            attr: TStr const &

        """
        return _snap.TNEANet_GetFltAttrDatN(self, *args)

    def GetIntAttrDatE(self, *args):
        """
        GetIntAttrDatE(TNEANet self, TNEANet::TEdgeI const & EdgeId, TStr attr) -> TInt

        Parameters:
            EdgeId: TNEANet::TEdgeI const &
            attr: TStr const &

        GetIntAttrDatE(TNEANet self, int const & EId, TStr attr) -> TInt

        Parameters:
            EId: int const &
            attr: TStr const &

        """
        return _snap.TNEANet_GetIntAttrDatE(self, *args)

    def GetStrAttrDatE(self, *args):
        """
        GetStrAttrDatE(TNEANet self, TNEANet::TEdgeI const & EdgeId, TStr attr) -> TStr

        Parameters:
            EdgeId: TNEANet::TEdgeI const &
            attr: TStr const &

        GetStrAttrDatE(TNEANet self, int const & EId, TStr attr) -> TStr

        Parameters:
            EId: int const &
            attr: TStr const &

        """
        return _snap.TNEANet_GetStrAttrDatE(self, *args)

    def GetFltAttrDatE(self, *args):
        """
        GetFltAttrDatE(TNEANet self, TNEANet::TEdgeI const & EdgeId, TStr attr) -> TFlt

        Parameters:
            EdgeId: TNEANet::TEdgeI const &
            attr: TStr const &

        GetFltAttrDatE(TNEANet self, int const & EId, TStr attr) -> TFlt

        Parameters:
            EId: int const &
            attr: TStr const &

        """
        return _snap.TNEANet_GetFltAttrDatE(self, *args)

    def DelAttrDatN(self, *args):
        """
        DelAttrDatN(TNEANet self, TNEANet::TNodeI const & NodeId, TStr attr) -> int

        Parameters:
            NodeId: TNEANet::TNodeI const &
            attr: TStr const &

        DelAttrDatN(TNEANet self, int const & NId, TStr attr) -> int

        Parameters:
            NId: int const &
            attr: TStr const &

        """
        return _snap.TNEANet_DelAttrDatN(self, *args)

    def DelAttrDatE(self, *args):
        """
        DelAttrDatE(TNEANet self, TNEANet::TEdgeI const & EdgeId, TStr attr) -> int

        Parameters:
            EdgeId: TNEANet::TEdgeI const &
            attr: TStr const &

        DelAttrDatE(TNEANet self, int const & EId, TStr attr) -> int

        Parameters:
            EId: int const &
            attr: TStr const &

        """
        return _snap.TNEANet_DelAttrDatE(self, *args)

    def AddIntAttrN(self, *args):
        """
        AddIntAttrN(TNEANet self, TStr attr, TInt defaultValue=Mn) -> int

        Parameters:
            attr: TStr const &
            defaultValue: TInt

        AddIntAttrN(TNEANet self, TStr attr) -> int

        Parameters:
            attr: TStr const &

        """
        return _snap.TNEANet_AddIntAttrN(self, *args)

    def AddStrAttrN(self, *args):
        """
        AddStrAttrN(TNEANet self, TStr attr, TStr defaultValue=TStr::GetNullStr()) -> int

        Parameters:
            attr: TStr const &
            defaultValue: TStr

        AddStrAttrN(TNEANet self, TStr attr) -> int

        Parameters:
            attr: TStr const &

        """
        return _snap.TNEANet_AddStrAttrN(self, *args)

    def AddFltAttrN(self, *args):
        """
        AddFltAttrN(TNEANet self, TStr attr, TFlt defaultValue=Mn) -> int

        Parameters:
            attr: TStr const &
            defaultValue: TFlt

        AddFltAttrN(TNEANet self, TStr attr) -> int

        Parameters:
            attr: TStr const &

        """
        return _snap.TNEANet_AddFltAttrN(self, *args)

    def AddIntAttrE(self, *args):
        """
        AddIntAttrE(TNEANet self, TStr attr, TInt defaultValue=Mn) -> int

        Parameters:
            attr: TStr const &
            defaultValue: TInt

        AddIntAttrE(TNEANet self, TStr attr) -> int

        Parameters:
            attr: TStr const &

        """
        return _snap.TNEANet_AddIntAttrE(self, *args)

    def AddStrAttrE(self, *args):
        """
        AddStrAttrE(TNEANet self, TStr attr, TStr defaultValue=TStr::GetNullStr()) -> int

        Parameters:
            attr: TStr const &
            defaultValue: TStr

        AddStrAttrE(TNEANet self, TStr attr) -> int

        Parameters:
            attr: TStr const &

        """
        return _snap.TNEANet_AddStrAttrE(self, *args)

    def AddFltAttrE(self, *args):
        """
        AddFltAttrE(TNEANet self, TStr attr, TFlt defaultValue=Mn) -> int

        Parameters:
            attr: TStr const &
            defaultValue: TFlt

        AddFltAttrE(TNEANet self, TStr attr) -> int

        Parameters:
            attr: TStr const &

        """
        return _snap.TNEANet_AddFltAttrE(self, *args)

    def DelAttrN(self, *args):
        """
        DelAttrN(TNEANet self, TStr attr) -> int

        Parameters:
            attr: TStr const &

        """
        return _snap.TNEANet_DelAttrN(self, *args)

    def DelAttrE(self, *args):
        """
        DelAttrE(TNEANet self, TStr attr) -> int

        Parameters:
            attr: TStr const &

        """
        return _snap.TNEANet_DelAttrE(self, *args)

    def NodeAttrIsDeleted(self, *args):
        """
        NodeAttrIsDeleted(TNEANet self, int const & NId, TStrIntPrH::TIter const & NodeHI) -> bool

        Parameters:
            NId: int const &
            NodeHI: TStrIntPrH::TIter const &

        """
        return _snap.TNEANet_NodeAttrIsDeleted(self, *args)

    def NodeAttrIsIntDeleted(self, *args):
        """
        NodeAttrIsIntDeleted(TNEANet self, int const & NId, TStrIntPrH::TIter const & NodeHI) -> bool

        Parameters:
            NId: int const &
            NodeHI: TStrIntPrH::TIter const &

        """
        return _snap.TNEANet_NodeAttrIsIntDeleted(self, *args)

    def NodeAttrIsStrDeleted(self, *args):
        """
        NodeAttrIsStrDeleted(TNEANet self, int const & NId, TStrIntPrH::TIter const & NodeHI) -> bool

        Parameters:
            NId: int const &
            NodeHI: TStrIntPrH::TIter const &

        """
        return _snap.TNEANet_NodeAttrIsStrDeleted(self, *args)

    def NodeAttrIsFltDeleted(self, *args):
        """
        NodeAttrIsFltDeleted(TNEANet self, int const & NId, TStrIntPrH::TIter const & NodeHI) -> bool

        Parameters:
            NId: int const &
            NodeHI: TStrIntPrH::TIter const &

        """
        return _snap.TNEANet_NodeAttrIsFltDeleted(self, *args)

    def EdgeAttrIsDeleted(self, *args):
        """
        EdgeAttrIsDeleted(TNEANet self, int const & EId, TStrIntPrH::TIter const & EdgeHI) -> bool

        Parameters:
            EId: int const &
            EdgeHI: TStrIntPrH::TIter const &

        """
        return _snap.TNEANet_EdgeAttrIsDeleted(self, *args)

    def EdgeAttrIsIntDeleted(self, *args):
        """
        EdgeAttrIsIntDeleted(TNEANet self, int const & EId, TStrIntPrH::TIter const & EdgeHI) -> bool

        Parameters:
            EId: int const &
            EdgeHI: TStrIntPrH::TIter const &

        """
        return _snap.TNEANet_EdgeAttrIsIntDeleted(self, *args)

    def EdgeAttrIsStrDeleted(self, *args):
        """
        EdgeAttrIsStrDeleted(TNEANet self, int const & EId, TStrIntPrH::TIter const & EdgeHI) -> bool

        Parameters:
            EId: int const &
            EdgeHI: TStrIntPrH::TIter const &

        """
        return _snap.TNEANet_EdgeAttrIsStrDeleted(self, *args)

    def EdgeAttrIsFltDeleted(self, *args):
        """
        EdgeAttrIsFltDeleted(TNEANet self, int const & EId, TStrIntPrH::TIter const & EdgeHI) -> bool

        Parameters:
            EId: int const &
            EdgeHI: TStrIntPrH::TIter const &

        """
        return _snap.TNEANet_EdgeAttrIsFltDeleted(self, *args)

    def GetNodeAttrValue(self, *args):
        """
        GetNodeAttrValue(TNEANet self, int const & NId, TStrIntPrH::TIter const & NodeHI) -> TStr

        Parameters:
            NId: int const &
            NodeHI: TStrIntPrH::TIter const &

        """
        return _snap.TNEANet_GetNodeAttrValue(self, *args)

    def GetEdgeAttrValue(self, *args):
        """
        GetEdgeAttrValue(TNEANet self, int const & EId, TStrIntPrH::TIter const & EdgeHI) -> TStr

        Parameters:
            EId: int const &
            EdgeHI: TStrIntPrH::TIter const &

        """
        return _snap.TNEANet_GetEdgeAttrValue(self, *args)

    def BegNI(self, *args):
        """
        BegNI(TNEANet self) -> TNEANet::TNodeI
        BegNI(TNEANet self) -> TNEANetNodeI

        Parameters:
            self: TNEANet *

        """
        return _snap.TNEANet_BegNI(self, *args)

    def EndNI(self, *args):
        """
        EndNI(TNEANet self) -> TNEANet::TNodeI
        EndNI(TNEANet self) -> TNEANetNodeI

        Parameters:
            self: TNEANet *

        """
        return _snap.TNEANet_EndNI(self, *args)

    def GetNI(self, *args):
        """
        GetNI(TNEANet self, int const & NId) -> TNEANet::TNodeI

        Parameters:
            NId: int const &

        GetNI(TNEANet self, int const & NId) -> TNEANetNodeI

        Parameters:
            NId: int const &

        """
        return _snap.TNEANet_GetNI(self, *args)

    def BegEI(self, *args):
        """
        BegEI(TNEANet self) -> TNEANet::TEdgeI
        BegEI(TNEANet self) -> TNEANetEdgeI

        Parameters:
            self: TNEANet *

        """
        return _snap.TNEANet_BegEI(self, *args)

    def EndEI(self, *args):
        """
        EndEI(TNEANet self) -> TNEANet::TEdgeI
        EndEI(TNEANet self) -> TNEANetEdgeI

        Parameters:
            self: TNEANet *

        """
        return _snap.TNEANet_EndEI(self, *args)

    def BegNAIntI(self, *args):
        """
        BegNAIntI(TNEANet self, TStr attr) -> TNEANet::TAIntI

        Parameters:
            attr: TStr const &

        BegNAIntI(TNEANet self, TStr attr) -> TNEANetAIntI

        Parameters:
            attr: TStr const &

        """
        return _snap.TNEANet_BegNAIntI(self, *args)

    def EndNAIntI(self, *args):
        """
        EndNAIntI(TNEANet self, TStr attr) -> TNEANet::TAIntI

        Parameters:
            attr: TStr const &

        EndNAIntI(TNEANet self, TStr attr) -> TNEANetAIntI

        Parameters:
            attr: TStr const &

        """
        return _snap.TNEANet_EndNAIntI(self, *args)

    def BegNAStrI(self, *args):
        """
        BegNAStrI(TNEANet self, TStr attr) -> TNEANet::TAStrI

        Parameters:
            attr: TStr const &

        BegNAStrI(TNEANet self, TStr attr) -> TNEANetAStrI

        Parameters:
            attr: TStr const &

        """
        return _snap.TNEANet_BegNAStrI(self, *args)

    def EndNAStrI(self, *args):
        """
        EndNAStrI(TNEANet self, TStr attr) -> TNEANet::TAStrI

        Parameters:
            attr: TStr const &

        EndNAStrI(TNEANet self, TStr attr) -> TNEANetAStrI

        Parameters:
            attr: TStr const &

        """
        return _snap.TNEANet_EndNAStrI(self, *args)

    def BegNAFltI(self, *args):
        """
        BegNAFltI(TNEANet self, TStr attr) -> TNEANet::TAFltI

        Parameters:
            attr: TStr const &

        BegNAFltI(TNEANet self, TStr attr) -> TNEANetAFltI

        Parameters:
            attr: TStr const &

        """
        return _snap.TNEANet_BegNAFltI(self, *args)

    def EndNAFltI(self, *args):
        """
        EndNAFltI(TNEANet self, TStr attr) -> TNEANet::TAFltI

        Parameters:
            attr: TStr const &

        EndNAFltI(TNEANet self, TStr attr) -> TNEANetAFltI

        Parameters:
            attr: TStr const &

        """
        return _snap.TNEANet_EndNAFltI(self, *args)

    def BegEAIntI(self, *args):
        """
        BegEAIntI(TNEANet self, TStr attr) -> TNEANet::TAIntI

        Parameters:
            attr: TStr const &

        BegEAIntI(TNEANet self, TStr attr) -> TNEANetAIntI

        Parameters:
            attr: TStr const &

        """
        return _snap.TNEANet_BegEAIntI(self, *args)

    def EndEAIntI(self, *args):
        """
        EndEAIntI(TNEANet self, TStr attr) -> TNEANet::TAIntI

        Parameters:
            attr: TStr const &

        EndEAIntI(TNEANet self, TStr attr) -> TNEANetAIntI

        Parameters:
            attr: TStr const &

        """
        return _snap.TNEANet_EndEAIntI(self, *args)

    def BegEAStrI(self, *args):
        """
        BegEAStrI(TNEANet self, TStr attr) -> TNEANet::TAStrI

        Parameters:
            attr: TStr const &

        BegEAStrI(TNEANet self, TStr attr) -> TNEANetAStrI

        Parameters:
            attr: TStr const &

        """
        return _snap.TNEANet_BegEAStrI(self, *args)

    def EndEAStrI(self, *args):
        """
        EndEAStrI(TNEANet self, TStr attr) -> TNEANet::TAStrI

        Parameters:
            attr: TStr const &

        EndEAStrI(TNEANet self, TStr attr) -> TNEANetAStrI

        Parameters:
            attr: TStr const &

        """
        return _snap.TNEANet_EndEAStrI(self, *args)

    def BegEAFltI(self, *args):
        """
        BegEAFltI(TNEANet self, TStr attr) -> TNEANet::TAFltI

        Parameters:
            attr: TStr const &

        BegEAFltI(TNEANet self, TStr attr) -> TNEANetAFltI

        Parameters:
            attr: TStr const &

        """
        return _snap.TNEANet_BegEAFltI(self, *args)

    def EndEAFltI(self, *args):
        """
        EndEAFltI(TNEANet self, TStr attr) -> TNEANet::TAFltI

        Parameters:
            attr: TStr const &

        EndEAFltI(TNEANet self, TStr attr) -> TNEANetAFltI

        Parameters:
            attr: TStr const &

        """
        return _snap.TNEANet_EndEAFltI(self, *args)

    __swig_destroy__ = _snap.delete_TNEANet
TNEANet.Save = new_instancemethod(_snap.TNEANet_Save,None,TNEANet)
TNEANet.HasFlag = new_instancemethod(_snap.TNEANet_HasFlag,None,TNEANet)
TNEANet.GetNodes = new_instancemethod(_snap.TNEANet_GetNodes,None,TNEANet)
TNEANet.AddNode = new_instancemethod(_snap.TNEANet_AddNode,None,TNEANet)
TNEANet.DelNode = new_instancemethod(_snap.TNEANet_DelNode,None,TNEANet)
TNEANet.IsNode = new_instancemethod(_snap.TNEANet_IsNode,None,TNEANet)
TNEANet.GetNAIntI = new_instancemethod(_snap.TNEANet_GetNAIntI,None,TNEANet)
TNEANet.GetNAStrI = new_instancemethod(_snap.TNEANet_GetNAStrI,None,TNEANet)
TNEANet.GetNAFltI = new_instancemethod(_snap.TNEANet_GetNAFltI,None,TNEANet)
TNEANet.AttrNameNI = new_instancemethod(_snap.TNEANet_AttrNameNI,None,TNEANet)
TNEANet.AttrValueNI = new_instancemethod(_snap.TNEANet_AttrValueNI,None,TNEANet)
TNEANet.IntAttrNameNI = new_instancemethod(_snap.TNEANet_IntAttrNameNI,None,TNEANet)
TNEANet.IntAttrValueNI = new_instancemethod(_snap.TNEANet_IntAttrValueNI,None,TNEANet)
TNEANet.StrAttrNameNI = new_instancemethod(_snap.TNEANet_StrAttrNameNI,None,TNEANet)
TNEANet.StrAttrValueNI = new_instancemethod(_snap.TNEANet_StrAttrValueNI,None,TNEANet)
TNEANet.FltAttrNameNI = new_instancemethod(_snap.TNEANet_FltAttrNameNI,None,TNEANet)
TNEANet.FltAttrValueNI = new_instancemethod(_snap.TNEANet_FltAttrValueNI,None,TNEANet)
TNEANet.AttrNameEI = new_instancemethod(_snap.TNEANet_AttrNameEI,None,TNEANet)
TNEANet.AttrValueEI = new_instancemethod(_snap.TNEANet_AttrValueEI,None,TNEANet)
TNEANet.IntAttrNameEI = new_instancemethod(_snap.TNEANet_IntAttrNameEI,None,TNEANet)
TNEANet.IntAttrValueEI = new_instancemethod(_snap.TNEANet_IntAttrValueEI,None,TNEANet)
TNEANet.StrAttrNameEI = new_instancemethod(_snap.TNEANet_StrAttrNameEI,None,TNEANet)
TNEANet.StrAttrValueEI = new_instancemethod(_snap.TNEANet_StrAttrValueEI,None,TNEANet)
TNEANet.FltAttrNameEI = new_instancemethod(_snap.TNEANet_FltAttrNameEI,None,TNEANet)
TNEANet.FltAttrValueEI = new_instancemethod(_snap.TNEANet_FltAttrValueEI,None,TNEANet)
TNEANet.GetEAIntI = new_instancemethod(_snap.TNEANet_GetEAIntI,None,TNEANet)
TNEANet.GetEAStrI = new_instancemethod(_snap.TNEANet_GetEAStrI,None,TNEANet)
TNEANet.GetEAFltI = new_instancemethod(_snap.TNEANet_GetEAFltI,None,TNEANet)
TNEANet.GetMxNId = new_instancemethod(_snap.TNEANet_GetMxNId,None,TNEANet)
TNEANet.GetEdges = new_instancemethod(_snap.TNEANet_GetEdges,None,TNEANet)
TNEANet.AddEdge = new_instancemethod(_snap.TNEANet_AddEdge,None,TNEANet)
TNEANet.DelEdge = new_instancemethod(_snap.TNEANet_DelEdge,None,TNEANet)
TNEANet.IsEdge = new_instancemethod(_snap.TNEANet_IsEdge,None,TNEANet)
TNEANet.GetEId = new_instancemethod(_snap.TNEANet_GetEId,None,TNEANet)
TNEANet.GetEI = new_instancemethod(_snap.TNEANet_GetEI,None,TNEANet)
TNEANet.GetRndNId = new_instancemethod(_snap.TNEANet_GetRndNId,None,TNEANet)
TNEANet.GetRndNI = new_instancemethod(_snap.TNEANet_GetRndNI,None,TNEANet)
TNEANet.GetRndEId = new_instancemethod(_snap.TNEANet_GetRndEId,None,TNEANet)
TNEANet.GetRndEI = new_instancemethod(_snap.TNEANet_GetRndEI,None,TNEANet)
TNEANet.GetNIdV = new_instancemethod(_snap.TNEANet_GetNIdV,None,TNEANet)
TNEANet.GetEIdV = new_instancemethod(_snap.TNEANet_GetEIdV,None,TNEANet)
TNEANet.Empty = new_instancemethod(_snap.TNEANet_Empty,None,TNEANet)
TNEANet.Clr = new_instancemethod(_snap.TNEANet_Clr,None,TNEANet)
TNEANet.Reserve = new_instancemethod(_snap.TNEANet_Reserve,None,TNEANet)
TNEANet.Defrag = new_instancemethod(_snap.TNEANet_Defrag,None,TNEANet)
TNEANet.IsOk = new_instancemethod(_snap.TNEANet_IsOk,None,TNEANet)
TNEANet.Dump = new_instancemethod(_snap.TNEANet_Dump,None,TNEANet)
TNEANet.AddIntAttrDatN = new_instancemethod(_snap.TNEANet_AddIntAttrDatN,None,TNEANet)
TNEANet.AddStrAttrDatN = new_instancemethod(_snap.TNEANet_AddStrAttrDatN,None,TNEANet)
TNEANet.AddFltAttrDatN = new_instancemethod(_snap.TNEANet_AddFltAttrDatN,None,TNEANet)
TNEANet.AddIntAttrDatE = new_instancemethod(_snap.TNEANet_AddIntAttrDatE,None,TNEANet)
TNEANet.AddStrAttrDatE = new_instancemethod(_snap.TNEANet_AddStrAttrDatE,None,TNEANet)
TNEANet.AddFltAttrDatE = new_instancemethod(_snap.TNEANet_AddFltAttrDatE,None,TNEANet)
TNEANet.GetIntAttrDatN = new_instancemethod(_snap.TNEANet_GetIntAttrDatN,None,TNEANet)
TNEANet.GetStrAttrDatN = new_instancemethod(_snap.TNEANet_GetStrAttrDatN,None,TNEANet)
TNEANet.GetFltAttrDatN = new_instancemethod(_snap.TNEANet_GetFltAttrDatN,None,TNEANet)
TNEANet.GetIntAttrDatE = new_instancemethod(_snap.TNEANet_GetIntAttrDatE,None,TNEANet)
TNEANet.GetStrAttrDatE = new_instancemethod(_snap.TNEANet_GetStrAttrDatE,None,TNEANet)
TNEANet.GetFltAttrDatE = new_instancemethod(_snap.TNEANet_GetFltAttrDatE,None,TNEANet)
TNEANet.DelAttrDatN = new_instancemethod(_snap.TNEANet_DelAttrDatN,None,TNEANet)
TNEANet.DelAttrDatE = new_instancemethod(_snap.TNEANet_DelAttrDatE,None,TNEANet)
TNEANet.AddIntAttrN = new_instancemethod(_snap.TNEANet_AddIntAttrN,None,TNEANet)
TNEANet.AddStrAttrN = new_instancemethod(_snap.TNEANet_AddStrAttrN,None,TNEANet)
TNEANet.AddFltAttrN = new_instancemethod(_snap.TNEANet_AddFltAttrN,None,TNEANet)
TNEANet.AddIntAttrE = new_instancemethod(_snap.TNEANet_AddIntAttrE,None,TNEANet)
TNEANet.AddStrAttrE = new_instancemethod(_snap.TNEANet_AddStrAttrE,None,TNEANet)
TNEANet.AddFltAttrE = new_instancemethod(_snap.TNEANet_AddFltAttrE,None,TNEANet)
TNEANet.DelAttrN = new_instancemethod(_snap.TNEANet_DelAttrN,None,TNEANet)
TNEANet.DelAttrE = new_instancemethod(_snap.TNEANet_DelAttrE,None,TNEANet)
TNEANet.NodeAttrIsDeleted = new_instancemethod(_snap.TNEANet_NodeAttrIsDeleted,None,TNEANet)
TNEANet.NodeAttrIsIntDeleted = new_instancemethod(_snap.TNEANet_NodeAttrIsIntDeleted,None,TNEANet)
TNEANet.NodeAttrIsStrDeleted = new_instancemethod(_snap.TNEANet_NodeAttrIsStrDeleted,None,TNEANet)
TNEANet.NodeAttrIsFltDeleted = new_instancemethod(_snap.TNEANet_NodeAttrIsFltDeleted,None,TNEANet)
TNEANet.EdgeAttrIsDeleted = new_instancemethod(_snap.TNEANet_EdgeAttrIsDeleted,None,TNEANet)
TNEANet.EdgeAttrIsIntDeleted = new_instancemethod(_snap.TNEANet_EdgeAttrIsIntDeleted,None,TNEANet)
TNEANet.EdgeAttrIsStrDeleted = new_instancemethod(_snap.TNEANet_EdgeAttrIsStrDeleted,None,TNEANet)
TNEANet.EdgeAttrIsFltDeleted = new_instancemethod(_snap.TNEANet_EdgeAttrIsFltDeleted,None,TNEANet)
TNEANet.GetNodeAttrValue = new_instancemethod(_snap.TNEANet_GetNodeAttrValue,None,TNEANet)
TNEANet.GetEdgeAttrValue = new_instancemethod(_snap.TNEANet_GetEdgeAttrValue,None,TNEANet)
TNEANet.BegNI = new_instancemethod(_snap.TNEANet_BegNI,None,TNEANet)
TNEANet.EndNI = new_instancemethod(_snap.TNEANet_EndNI,None,TNEANet)
TNEANet.GetNI = new_instancemethod(_snap.TNEANet_GetNI,None,TNEANet)
TNEANet.BegEI = new_instancemethod(_snap.TNEANet_BegEI,None,TNEANet)
TNEANet.EndEI = new_instancemethod(_snap.TNEANet_EndEI,None,TNEANet)
TNEANet.BegNAIntI = new_instancemethod(_snap.TNEANet_BegNAIntI,None,TNEANet)
TNEANet.EndNAIntI = new_instancemethod(_snap.TNEANet_EndNAIntI,None,TNEANet)
TNEANet.BegNAStrI = new_instancemethod(_snap.TNEANet_BegNAStrI,None,TNEANet)
TNEANet.EndNAStrI = new_instancemethod(_snap.TNEANet_EndNAStrI,None,TNEANet)
TNEANet.BegNAFltI = new_instancemethod(_snap.TNEANet_BegNAFltI,None,TNEANet)
TNEANet.EndNAFltI = new_instancemethod(_snap.TNEANet_EndNAFltI,None,TNEANet)
TNEANet.BegEAIntI = new_instancemethod(_snap.TNEANet_BegEAIntI,None,TNEANet)
TNEANet.EndEAIntI = new_instancemethod(_snap.TNEANet_EndEAIntI,None,TNEANet)
TNEANet.BegEAStrI = new_instancemethod(_snap.TNEANet_BegEAStrI,None,TNEANet)
TNEANet.EndEAStrI = new_instancemethod(_snap.TNEANet_EndEAStrI,None,TNEANet)
TNEANet.BegEAFltI = new_instancemethod(_snap.TNEANet_BegEAFltI,None,TNEANet)
TNEANet.EndEAFltI = new_instancemethod(_snap.TNEANet_EndEAFltI,None,TNEANet)
TNEANet_swigregister = _snap.TNEANet_swigregister
TNEANet_swigregister(TNEANet)

def TNEANet_New(*args):
  """
    New() -> PNEANet
    TNEANet_New(int const & Nodes, int const & Edges) -> PNEANet

    Parameters:
        Nodes: int const &
        Edges: int const &

    """
  return _snap.TNEANet_New(*args)

def TNEANet_Load(*args):
  """
    TNEANet_Load(TSIn SIn) -> PNEANet

    Parameters:
        SIn: TSIn &

    """
  return _snap.TNEANet_Load(*args)

class TNGraphMtx(object):
    """Proxy of C++ TNGraphMtx class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TNGraphMtx self, PNGraph GraphPt) -> TNGraphMtx

        Parameters:
            GraphPt: PNGraph const &

        __init__(TNGraphMtx self, TNGraphMtx GraphMtx) -> TNGraphMtx

        Parameters:
            GraphMtx: TNGraphMtx const &

        """
        _snap.TNGraphMtx_swiginit(self,_snap.new_TNGraphMtx(*args))
    def PGetRows(self):
        """
        PGetRows(TNGraphMtx self) -> int

        Parameters:
            self: TNGraphMtx const *

        """
        return _snap.TNGraphMtx_PGetRows(self)

    def PGetCols(self):
        """
        PGetCols(TNGraphMtx self) -> int

        Parameters:
            self: TNGraphMtx const *

        """
        return _snap.TNGraphMtx_PGetCols(self)

    def PMultiply(self, *args):
        """
        PMultiply(TNGraphMtx self, TFltVV const & B, int ColId, TFltV Result)

        Parameters:
            B: TFltVV const &
            ColId: int
            Result: TFltV &

        PMultiply(TNGraphMtx self, TFltV Vec, TFltV Result)

        Parameters:
            Vec: TFltV const &
            Result: TFltV &

        """
        return _snap.TNGraphMtx_PMultiply(self, *args)

    def PMultiplyT(self, *args):
        """
        PMultiplyT(TNGraphMtx self, TFltVV const & B, int ColId, TFltV Result)

        Parameters:
            B: TFltVV const &
            ColId: int
            Result: TFltV &

        PMultiplyT(TNGraphMtx self, TFltV Vec, TFltV Result)

        Parameters:
            Vec: TFltV const &
            Result: TFltV &

        """
        return _snap.TNGraphMtx_PMultiplyT(self, *args)

    __swig_destroy__ = _snap.delete_TNGraphMtx
TNGraphMtx.PGetRows = new_instancemethod(_snap.TNGraphMtx_PGetRows,None,TNGraphMtx)
TNGraphMtx.PGetCols = new_instancemethod(_snap.TNGraphMtx_PGetCols,None,TNGraphMtx)
TNGraphMtx.PMultiply = new_instancemethod(_snap.TNGraphMtx_PMultiply,None,TNGraphMtx)
TNGraphMtx.PMultiplyT = new_instancemethod(_snap.TNGraphMtx_PMultiplyT,None,TNGraphMtx)
TNGraphMtx_swigregister = _snap.TNGraphMtx_swigregister
TNGraphMtx_swigregister(TNGraphMtx)

class TUNGraphMtx(object):
    """Proxy of C++ TUNGraphMtx class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TUNGraphMtx self, PUNGraph GraphPt) -> TUNGraphMtx

        Parameters:
            GraphPt: PUNGraph const &

        __init__(TUNGraphMtx self, TUNGraphMtx GraphMtx) -> TUNGraphMtx

        Parameters:
            GraphMtx: TUNGraphMtx const &

        """
        _snap.TUNGraphMtx_swiginit(self,_snap.new_TUNGraphMtx(*args))
    def PGetRows(self):
        """
        PGetRows(TUNGraphMtx self) -> int

        Parameters:
            self: TUNGraphMtx const *

        """
        return _snap.TUNGraphMtx_PGetRows(self)

    def PGetCols(self):
        """
        PGetCols(TUNGraphMtx self) -> int

        Parameters:
            self: TUNGraphMtx const *

        """
        return _snap.TUNGraphMtx_PGetCols(self)

    def PMultiply(self, *args):
        """
        PMultiply(TUNGraphMtx self, TFltVV const & B, int ColId, TFltV Result)

        Parameters:
            B: TFltVV const &
            ColId: int
            Result: TFltV &

        PMultiply(TUNGraphMtx self, TFltV Vec, TFltV Result)

        Parameters:
            Vec: TFltV const &
            Result: TFltV &

        """
        return _snap.TUNGraphMtx_PMultiply(self, *args)

    def PMultiplyT(self, *args):
        """
        PMultiplyT(TUNGraphMtx self, TFltVV const & B, int ColId, TFltV Result)

        Parameters:
            B: TFltVV const &
            ColId: int
            Result: TFltV &

        PMultiplyT(TUNGraphMtx self, TFltV Vec, TFltV Result)

        Parameters:
            Vec: TFltV const &
            Result: TFltV &

        """
        return _snap.TUNGraphMtx_PMultiplyT(self, *args)

    __swig_destroy__ = _snap.delete_TUNGraphMtx
TUNGraphMtx.PGetRows = new_instancemethod(_snap.TUNGraphMtx_PGetRows,None,TUNGraphMtx)
TUNGraphMtx.PGetCols = new_instancemethod(_snap.TUNGraphMtx_PGetCols,None,TUNGraphMtx)
TUNGraphMtx.PMultiply = new_instancemethod(_snap.TUNGraphMtx_PMultiply,None,TUNGraphMtx)
TUNGraphMtx.PMultiplyT = new_instancemethod(_snap.TUNGraphMtx_PMultiplyT,None,TUNGraphMtx)
TUNGraphMtx_swigregister = _snap.TUNGraphMtx_swigregister
TUNGraphMtx_swigregister(TUNGraphMtx)


def GetSngVals(*args):
  """
    GetSngVals(PNGraph Graph, int const & SngVals, TFltV SngValV)

    Parameters:
        Graph: PNGraph const &
        SngVals: int const &
        SngValV: TFltV &

    """
  return _snap.GetSngVals(*args)

def GetSngVec(*args):
  """
    GetSngVec(PNGraph Graph, TFltV LeftSV, TFltV RightSV)

    Parameters:
        Graph: PNGraph const &
        LeftSV: TFltV &
        RightSV: TFltV &

    GetSngVec(PNGraph Graph, int const & SngVecs, TFltV SngValV, TVec< TFltV > & LeftSV, TVec< TFltV > & RightSV)

    Parameters:
        Graph: PNGraph const &
        SngVecs: int const &
        SngValV: TFltV &
        LeftSV: TVec< TFltV > &
        RightSV: TVec< TFltV > &

    """
  return _snap.GetSngVec(*args)

def GetEigVals(*args):
  """
    GetEigVals(PUNGraph Graph, int const & EigVals, TFltV EigValV)

    Parameters:
        Graph: PUNGraph const &
        EigVals: int const &
        EigValV: TFltV &

    """
  return _snap.GetEigVals(*args)

def GetEigVec(*args):
  """
    GetEigVec(PUNGraph Graph, TFltV EigVecV)

    Parameters:
        Graph: PUNGraph const &
        EigVecV: TFltV &

    GetEigVec(PUNGraph Graph, int const & EigVecs, TFltV EigValV, TVec< TFltV > & EigVecV)

    Parameters:
        Graph: PUNGraph const &
        EigVecs: int const &
        EigValV: TFltV &
        EigVecV: TVec< TFltV > &

    """
  return _snap.GetEigVec(*args)

def GetInvParticipRat(*args):
  """
    GetInvParticipRat(PUNGraph Graph, int MaxEigVecs, int TimeLimit, TFltPrV EigValIprV)

    Parameters:
        Graph: PUNGraph const &
        MaxEigVecs: int
        TimeLimit: int
        EigValIprV: TFltPrV &

    """
  return _snap.GetInvParticipRat(*args)

def GetInvParticipRatEig(*args):
  """
    GetInvParticipRatEig(TFltV EigVec) -> double

    Parameters:
        EigVec: TFltV const &

    """
  return _snap.GetInvParticipRatEig(*args)

def LoadDyNet(*args):
  """
    LoadDyNet(TStr FNm) -> PNGraph

    Parameters:
        FNm: TStr const &

    """
  return _snap.LoadDyNet(*args)

def LoadDyNetGraphV(*args):
  """
    LoadDyNetGraphV(TStr FNm) -> TVec< PNGraph >

    Parameters:
        FNm: TStr const &

    """
  return _snap.LoadDyNetGraphV(*args)
gvlDot = _snap.gvlDot
gvlNeato = _snap.gvlNeato
gvlTwopi = _snap.gvlTwopi
gvlCirco = _snap.gvlCirco
gvlSfdp = _snap.gvlSfdp

def GVizDoLayout(*args):
  """
    GVizDoLayout(TStr GraphInFNm, TStr OutFNm, TGVizLayout const & Layout)

    Parameters:
        GraphInFNm: TStr const &
        OutFNm: TStr
        Layout: TGVizLayout const &

    """
  return _snap.GVizDoLayout(*args)

def GVizGetLayoutStr(*args):
  """
    GVizGetLayoutStr(TGVizLayout const & Layout) -> TStr

    Parameters:
        Layout: TGVizLayout const &

    """
  return _snap.GVizGetLayoutStr(*args)
class TBigStrPool(object):
    """Proxy of C++ TBigStrPool class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TBigStrPool self, TSize MxBfLen=0, uint _GrowBy=16*1024*1024) -> TBigStrPool

        Parameters:
            MxBfLen: TSize
            _GrowBy: uint

        __init__(TBigStrPool self, TSize MxBfLen=0) -> TBigStrPool

        Parameters:
            MxBfLen: TSize

        __init__(TBigStrPool self) -> TBigStrPool
        __init__(TBigStrPool self, TSIn SIn, bool LoadCompact=True) -> TBigStrPool

        Parameters:
            SIn: TSIn &
            LoadCompact: bool

        __init__(TBigStrPool self, TSIn SIn) -> TBigStrPool

        Parameters:
            SIn: TSIn &

        __init__(TBigStrPool self, TBigStrPool Pool) -> TBigStrPool

        Parameters:
            Pool: TBigStrPool const &

        """
        _snap.TBigStrPool_swiginit(self,_snap.new_TBigStrPool(*args))
    __swig_destroy__ = _snap.delete_TBigStrPool
    def New(*args):
        """
        New(TSize _MxBfLen=0, uint _GrowBy=16*1024*1024) -> PBigStrPool

        Parameters:
            _MxBfLen: TSize
            _GrowBy: uint

        New(TSize _MxBfLen=0) -> PBigStrPool

        Parameters:
            _MxBfLen: TSize

        New() -> PBigStrPool
        New(TSIn SIn) -> PBigStrPool

        Parameters:
            SIn: TSIn &

        New(TStr fileName) -> PBigStrPool

        Parameters:
            fileName: TStr const &

        """
        return _snap.TBigStrPool_New(*args)

    New = staticmethod(New)
    def Load(*args):
        """
        Load(TSIn SIn, bool LoadCompacted=True) -> PBigStrPool

        Parameters:
            SIn: TSIn &
            LoadCompacted: bool

        Load(TSIn SIn) -> PBigStrPool

        Parameters:
            SIn: TSIn &

        """
        return _snap.TBigStrPool_Load(*args)

    Load = staticmethod(Load)
    def Save(self, *args):
        """
        Save(TBigStrPool self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        Save(TBigStrPool self, TStr fileName)

        Parameters:
            fileName: TStr const &

        """
        return _snap.TBigStrPool_Save(self, *args)

    def GetStrs(self):
        """
        GetStrs(TBigStrPool self) -> int

        Parameters:
            self: TBigStrPool const *

        """
        return _snap.TBigStrPool_GetStrs(self)

    def Len(self):
        """
        Len(TBigStrPool self) -> TSize

        Parameters:
            self: TBigStrPool const *

        """
        return _snap.TBigStrPool_Len(self)

    def Size(self):
        """
        Size(TBigStrPool self) -> TSize

        Parameters:
            self: TBigStrPool const *

        """
        return _snap.TBigStrPool_Size(self)

    def Empty(self):
        """
        Empty(TBigStrPool self) -> bool

        Parameters:
            self: TBigStrPool const *

        """
        return _snap.TBigStrPool_Empty(self)

    def __call__(self):
        """
        __call__(TBigStrPool self) -> char *

        Parameters:
            self: TBigStrPool const *

        """
        return _snap.TBigStrPool___call__(self)

    def AddStr(self, *args):
        """
        AddStr(TBigStrPool self, char const * Str, uint Len) -> int

        Parameters:
            Str: char const *
            Len: uint

        AddStr(TBigStrPool self, char const * Str) -> int

        Parameters:
            Str: char const *

        AddStr(TBigStrPool self, TStr Str) -> int

        Parameters:
            Str: TStr const &

        """
        return _snap.TBigStrPool_AddStr(self, *args)

    def GetCStr(self, *args):
        """
        GetCStr(TBigStrPool self, int const & StrId) -> char const *

        Parameters:
            StrId: int const &

        """
        return _snap.TBigStrPool_GetCStr(self, *args)

    def GetStrFromOffset(self, *args):
        """
        GetStrFromOffset(TBigStrPool self, TSize const & Offset) -> TStr

        Parameters:
            Offset: TSize const &

        """
        return _snap.TBigStrPool_GetStrFromOffset(self, *args)

    def GetCStrFromOffset(self, *args):
        """
        GetCStrFromOffset(TBigStrPool self, TSize const & Offset) -> char const *

        Parameters:
            Offset: TSize const &

        """
        return _snap.TBigStrPool_GetCStrFromOffset(self, *args)

    def Clr(self, DoDel=False):
        """
        Clr(TBigStrPool self, bool DoDel=False)

        Parameters:
            DoDel: bool

        Clr(TBigStrPool self)

        Parameters:
            self: TBigStrPool *

        """
        return _snap.TBigStrPool_Clr(self, DoDel)

    def Cmp(self, *args):
        """
        Cmp(TBigStrPool self, int const & StrId, char const * Str) -> int

        Parameters:
            StrId: int const &
            Str: char const *

        """
        return _snap.TBigStrPool_Cmp(self, *args)

    def GetPrimHashCd(self, *args):
        """
        GetPrimHashCd(TBigStrPool self, char const * CStr) -> int

        Parameters:
            CStr: char const *

        GetPrimHashCd(TBigStrPool self, int const & StrId) -> int

        Parameters:
            StrId: int const &

        """
        return _snap.TBigStrPool_GetPrimHashCd(self, *args)

    def GetSecHashCd(self, *args):
        """
        GetSecHashCd(TBigStrPool self, char const * CStr) -> int

        Parameters:
            CStr: char const *

        GetSecHashCd(TBigStrPool self, int const & StrId) -> int

        Parameters:
            StrId: int const &

        """
        return _snap.TBigStrPool_GetSecHashCd(self, *args)

TBigStrPool.Save = new_instancemethod(_snap.TBigStrPool_Save,None,TBigStrPool)
TBigStrPool.GetStrs = new_instancemethod(_snap.TBigStrPool_GetStrs,None,TBigStrPool)
TBigStrPool.Len = new_instancemethod(_snap.TBigStrPool_Len,None,TBigStrPool)
TBigStrPool.Size = new_instancemethod(_snap.TBigStrPool_Size,None,TBigStrPool)
TBigStrPool.Empty = new_instancemethod(_snap.TBigStrPool_Empty,None,TBigStrPool)
TBigStrPool.__call__ = new_instancemethod(_snap.TBigStrPool___call__,None,TBigStrPool)
TBigStrPool.AddStr = new_instancemethod(_snap.TBigStrPool_AddStr,None,TBigStrPool)
TBigStrPool.GetCStr = new_instancemethod(_snap.TBigStrPool_GetCStr,None,TBigStrPool)
TBigStrPool.GetStrFromOffset = new_instancemethod(_snap.TBigStrPool_GetStrFromOffset,None,TBigStrPool)
TBigStrPool.GetCStrFromOffset = new_instancemethod(_snap.TBigStrPool_GetCStrFromOffset,None,TBigStrPool)
TBigStrPool.Clr = new_instancemethod(_snap.TBigStrPool_Clr,None,TBigStrPool)
TBigStrPool.Cmp = new_instancemethod(_snap.TBigStrPool_Cmp,None,TBigStrPool)
TBigStrPool.GetPrimHashCd = new_instancemethod(_snap.TBigStrPool_GetPrimHashCd,None,TBigStrPool)
TBigStrPool.GetSecHashCd = new_instancemethod(_snap.TBigStrPool_GetSecHashCd,None,TBigStrPool)
TBigStrPool_swigregister = _snap.TBigStrPool_swigregister
TBigStrPool_swigregister(TBigStrPool)

def TBigStrPool_New(*args):
  """
    New(TSize _MxBfLen=0, uint _GrowBy=16*1024*1024) -> PBigStrPool

    Parameters:
        _MxBfLen: TSize
        _GrowBy: uint

    New(TSize _MxBfLen=0) -> PBigStrPool

    Parameters:
        _MxBfLen: TSize

    New() -> PBigStrPool
    New(TSIn SIn) -> PBigStrPool

    Parameters:
        SIn: TSIn &

    TBigStrPool_New(TStr fileName) -> PBigStrPool

    Parameters:
        fileName: TStr const &

    """
  return _snap.TBigStrPool_New(*args)

def TBigStrPool_Load(*args):
  """
    Load(TSIn SIn, bool LoadCompacted=True) -> PBigStrPool

    Parameters:
        SIn: TSIn &
        LoadCompacted: bool

    TBigStrPool_Load(TSIn SIn) -> PBigStrPool

    Parameters:
        SIn: TSIn &

    """
  return _snap.TBigStrPool_Load(*args)

class TStrHashF_OldGLib(object):
    """Proxy of C++ TStrHashF_OldGLib class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def GetPrimHashCd(*args):
        """
        GetPrimHashCd(char const * p) -> int

        Parameters:
            p: char const *

        GetPrimHashCd(TStr s) -> int

        Parameters:
            s: TStr const &

        """
        return _snap.TStrHashF_OldGLib_GetPrimHashCd(*args)

    GetPrimHashCd = staticmethod(GetPrimHashCd)
    def GetSecHashCd(*args):
        """
        GetSecHashCd(char const * p) -> int

        Parameters:
            p: char const *

        GetSecHashCd(TStr s) -> int

        Parameters:
            s: TStr const &

        """
        return _snap.TStrHashF_OldGLib_GetSecHashCd(*args)

    GetSecHashCd = staticmethod(GetSecHashCd)
    def __init__(self): 
        """__init__(TStrHashF_OldGLib self) -> TStrHashF_OldGLib"""
        _snap.TStrHashF_OldGLib_swiginit(self,_snap.new_TStrHashF_OldGLib())
    __swig_destroy__ = _snap.delete_TStrHashF_OldGLib
TStrHashF_OldGLib_swigregister = _snap.TStrHashF_OldGLib_swigregister
TStrHashF_OldGLib_swigregister(TStrHashF_OldGLib)

def TStrHashF_OldGLib_GetPrimHashCd(*args):
  """
    GetPrimHashCd(char const * p) -> int

    Parameters:
        p: char const *

    TStrHashF_OldGLib_GetPrimHashCd(TStr s) -> int

    Parameters:
        s: TStr const &

    """
  return _snap.TStrHashF_OldGLib_GetPrimHashCd(*args)

def TStrHashF_OldGLib_GetSecHashCd(*args):
  """
    GetSecHashCd(char const * p) -> int

    Parameters:
        p: char const *

    TStrHashF_OldGLib_GetSecHashCd(TStr s) -> int

    Parameters:
        s: TStr const &

    """
  return _snap.TStrHashF_OldGLib_GetSecHashCd(*args)

class TStrHashF_Md5(object):
    """Proxy of C++ TStrHashF_Md5 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def GetPrimHashCd(*args):
        """
        GetPrimHashCd(char const * p) -> int

        Parameters:
            p: char const *

        GetPrimHashCd(TStr s) -> int

        Parameters:
            s: TStr const &

        """
        return _snap.TStrHashF_Md5_GetPrimHashCd(*args)

    GetPrimHashCd = staticmethod(GetPrimHashCd)
    def GetSecHashCd(*args):
        """
        GetSecHashCd(char const * p) -> int

        Parameters:
            p: char const *

        GetSecHashCd(TStr s) -> int

        Parameters:
            s: TStr const &

        """
        return _snap.TStrHashF_Md5_GetSecHashCd(*args)

    GetSecHashCd = staticmethod(GetSecHashCd)
    def __init__(self): 
        """__init__(TStrHashF_Md5 self) -> TStrHashF_Md5"""
        _snap.TStrHashF_Md5_swiginit(self,_snap.new_TStrHashF_Md5())
    __swig_destroy__ = _snap.delete_TStrHashF_Md5
TStrHashF_Md5_swigregister = _snap.TStrHashF_Md5_swigregister
TStrHashF_Md5_swigregister(TStrHashF_Md5)

def TStrHashF_Md5_GetPrimHashCd(*args):
  """
    GetPrimHashCd(char const * p) -> int

    Parameters:
        p: char const *

    TStrHashF_Md5_GetPrimHashCd(TStr s) -> int

    Parameters:
        s: TStr const &

    """
  return _snap.TStrHashF_Md5_GetPrimHashCd(*args)

def TStrHashF_Md5_GetSecHashCd(*args):
  """
    GetSecHashCd(char const * p) -> int

    Parameters:
        p: char const *

    TStrHashF_Md5_GetSecHashCd(TStr s) -> int

    Parameters:
        s: TStr const &

    """
  return _snap.TStrHashF_Md5_GetSecHashCd(*args)

class TStrHashF_DJB(object):
    """Proxy of C++ TStrHashF_DJB class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def GetPrimHashCd(*args):
        """
        GetPrimHashCd(char const * p) -> int

        Parameters:
            p: char const *

        GetPrimHashCd(TStr s) -> int

        Parameters:
            s: TStr const &

        """
        return _snap.TStrHashF_DJB_GetPrimHashCd(*args)

    GetPrimHashCd = staticmethod(GetPrimHashCd)
    def GetSecHashCd(*args):
        """
        GetSecHashCd(char const * p) -> int

        Parameters:
            p: char const *

        GetSecHashCd(TStr s) -> int

        Parameters:
            s: TStr const &

        """
        return _snap.TStrHashF_DJB_GetSecHashCd(*args)

    GetSecHashCd = staticmethod(GetSecHashCd)
    def __init__(self): 
        """__init__(TStrHashF_DJB self) -> TStrHashF_DJB"""
        _snap.TStrHashF_DJB_swiginit(self,_snap.new_TStrHashF_DJB())
    __swig_destroy__ = _snap.delete_TStrHashF_DJB
TStrHashF_DJB_swigregister = _snap.TStrHashF_DJB_swigregister
TStrHashF_DJB_swigregister(TStrHashF_DJB)

def TStrHashF_DJB_GetPrimHashCd(*args):
  """
    GetPrimHashCd(char const * p) -> int

    Parameters:
        p: char const *

    TStrHashF_DJB_GetPrimHashCd(TStr s) -> int

    Parameters:
        s: TStr const &

    """
  return _snap.TStrHashF_DJB_GetPrimHashCd(*args)

def TStrHashF_DJB_GetSecHashCd(*args):
  """
    GetSecHashCd(char const * p) -> int

    Parameters:
        p: char const *

    TStrHashF_DJB_GetSecHashCd(TStr s) -> int

    Parameters:
        s: TStr const &

    """
  return _snap.TStrHashF_DJB_GetSecHashCd(*args)


def GenRndBipart(*args):
  """
    GenRndBipart(int const & LeftNodes, int const & RightNodes, int const & Edges, TRnd Rnd=Rnd) -> PBPGraph

    Parameters:
        LeftNodes: int const &
        RightNodes: int const &
        Edges: int const &
        Rnd: TRnd &

    GenRndBipart(int const & LeftNodes, int const & RightNodes, int const & Edges) -> PBPGraph

    Parameters:
        LeftNodes: int const &
        RightNodes: int const &
        Edges: int const &

    """
  return _snap.GenRndBipart(*args)

def GenRndDegK(*args):
  """
    GenRndDegK(int const & Nodes, int const & NodeDeg, int const & NSwitch=100, TRnd Rnd=Rnd) -> PUNGraph

    Parameters:
        Nodes: int const &
        NodeDeg: int const &
        NSwitch: int const &
        Rnd: TRnd &

    GenRndDegK(int const & Nodes, int const & NodeDeg, int const & NSwitch=100) -> PUNGraph

    Parameters:
        Nodes: int const &
        NodeDeg: int const &
        NSwitch: int const &

    GenRndDegK(int const & Nodes, int const & NodeDeg) -> PUNGraph

    Parameters:
        Nodes: int const &
        NodeDeg: int const &

    """
  return _snap.GenRndDegK(*args)

def GenRndPowerLaw(*args):
  """
    GenRndPowerLaw(int const & Nodes, double const & PowerExp, bool const & ConfModel=True, TRnd Rnd=Rnd) -> PUNGraph

    Parameters:
        Nodes: int const &
        PowerExp: double const &
        ConfModel: bool const &
        Rnd: TRnd &

    GenRndPowerLaw(int const & Nodes, double const & PowerExp, bool const & ConfModel=True) -> PUNGraph

    Parameters:
        Nodes: int const &
        PowerExp: double const &
        ConfModel: bool const &

    GenRndPowerLaw(int const & Nodes, double const & PowerExp) -> PUNGraph

    Parameters:
        Nodes: int const &
        PowerExp: double const &

    """
  return _snap.GenRndPowerLaw(*args)

def GenDegSeq(*args):
  """
    GenDegSeq(TIntV DegSeqV, TRnd Rnd=Rnd) -> PUNGraph

    Parameters:
        DegSeqV: TIntV const &
        Rnd: TRnd &

    GenDegSeq(TIntV DegSeqV) -> PUNGraph

    Parameters:
        DegSeqV: TIntV const &

    """
  return _snap.GenDegSeq(*args)

def GenPrefAttach(*args):
  """
    GenPrefAttach(int const & Nodes, int const & NodeOutDeg, TRnd Rnd=Rnd) -> PUNGraph

    Parameters:
        Nodes: int const &
        NodeOutDeg: int const &
        Rnd: TRnd &

    GenPrefAttach(int const & Nodes, int const & NodeOutDeg) -> PUNGraph

    Parameters:
        Nodes: int const &
        NodeOutDeg: int const &

    """
  return _snap.GenPrefAttach(*args)

def GenGeoPrefAttach(*args):
  """
    GenGeoPrefAttach(int const & Nodes, int const & OutDeg, double const & Beta, TRnd Rnd=Rnd) -> PUNGraph

    Parameters:
        Nodes: int const &
        OutDeg: int const &
        Beta: double const &
        Rnd: TRnd &

    GenGeoPrefAttach(int const & Nodes, int const & OutDeg, double const & Beta) -> PUNGraph

    Parameters:
        Nodes: int const &
        OutDeg: int const &
        Beta: double const &

    """
  return _snap.GenGeoPrefAttach(*args)

def GenSmallWorld(*args):
  """
    GenSmallWorld(int const & Nodes, int const & NodeOutDeg, double const & RewireProb, TRnd Rnd=Rnd) -> PUNGraph

    Parameters:
        Nodes: int const &
        NodeOutDeg: int const &
        RewireProb: double const &
        Rnd: TRnd &

    GenSmallWorld(int const & Nodes, int const & NodeOutDeg, double const & RewireProb) -> PUNGraph

    Parameters:
        Nodes: int const &
        NodeOutDeg: int const &
        RewireProb: double const &

    """
  return _snap.GenSmallWorld(*args)

def GenForestFire(*args):
  """
    GenForestFire(int const & Nodes, double const & FwdProb, double const & BckProb) -> PNGraph

    Parameters:
        Nodes: int const &
        FwdProb: double const &
        BckProb: double const &

    """
  return _snap.GenForestFire(*args)

def GenCopyModel(*args):
  """
    GenCopyModel(int const & Nodes, double const & Beta, TRnd Rnd=Rnd) -> PNGraph

    Parameters:
        Nodes: int const &
        Beta: double const &
        Rnd: TRnd &

    GenCopyModel(int const & Nodes, double const & Beta) -> PNGraph

    Parameters:
        Nodes: int const &
        Beta: double const &

    """
  return _snap.GenCopyModel(*args)

def GenRMat(*args):
  """
    GenRMat(int const & Nodes, int const & Edges, double const & A, double const & B, double const & C, 
        TRnd Rnd=Rnd) -> PNGraph

    Parameters:
        Nodes: int const &
        Edges: int const &
        A: double const &
        B: double const &
        C: double const &
        Rnd: TRnd &

    GenRMat(int const & Nodes, int const & Edges, double const & A, double const & B, double const & C) -> PNGraph

    Parameters:
        Nodes: int const &
        Edges: int const &
        A: double const &
        B: double const &
        C: double const &

    """
  return _snap.GenRMat(*args)

def GenRMatEpinions():
  """GenRMatEpinions() -> PNGraph"""
  return _snap.GenRMatEpinions()

def GenRewire(*args):
  """
    GenRewire(PUNGraph Graph, int const & NSwitch=100, TRnd Rnd=Rnd) -> PUNGraph

    Parameters:
        Graph: PUNGraph const &
        NSwitch: int const &
        Rnd: TRnd &

    GenRewire(PUNGraph Graph, int const & NSwitch=100) -> PUNGraph

    Parameters:
        Graph: PUNGraph const &
        NSwitch: int const &

    GenRewire(PUNGraph Graph) -> PUNGraph

    Parameters:
        Graph: PUNGraph const &

    GenRewire(PNGraph Graph, int const & NSwitch=100, TRnd Rnd=Rnd) -> PNGraph

    Parameters:
        Graph: PNGraph const &
        NSwitch: int const &
        Rnd: TRnd &

    GenRewire(PNGraph Graph, int const & NSwitch=100) -> PNGraph

    Parameters:
        Graph: PNGraph const &
        NSwitch: int const &

    GenRewire(PNGraph Graph) -> PNGraph

    Parameters:
        Graph: PNGraph const &

    GenRewire(PBPGraph const & Graph, int const & NSwitch=100, TRnd Rnd=Rnd) -> PBPGraph

    Parameters:
        Graph: PBPGraph const &
        NSwitch: int const &
        Rnd: TRnd &

    GenRewire(PBPGraph const & Graph, int const & NSwitch=100) -> PBPGraph

    Parameters:
        Graph: PBPGraph const &
        NSwitch: int const &

    GenRewire(PBPGraph const & Graph) -> PBPGraph

    Parameters:
        Graph: PBPGraph const &

    """
  return _snap.GenRewire(*args)

def GenConfModel(*args):
  """
    GenConfModel(TIntV DegSeqV, TRnd Rnd=Rnd) -> PUNGraph

    Parameters:
        DegSeqV: TIntV const &
        Rnd: TRnd &

    GenConfModel(TIntV DegSeqV) -> PUNGraph

    Parameters:
        DegSeqV: TIntV const &

    GenConfModel(PUNGraph G) -> PUNGraph

    Parameters:
        G: PUNGraph const &

    """
  return _snap.GenConfModel(*args)

def GetSubGraph(*args):
  """
    GetSubGraph(PUNGraph Graph, TIntV NIdV, bool const & RenumberNodes=False) -> PUNGraph

    Parameters:
        Graph: PUNGraph const &
        NIdV: TIntV const &
        RenumberNodes: bool const &

    GetSubGraph(PUNGraph Graph, TIntV NIdV) -> PUNGraph

    Parameters:
        Graph: PUNGraph const &
        NIdV: TIntV const &

    GetSubGraph(PNGraph Graph, TIntV NIdV, bool const & RenumberNodes=False) -> PNGraph

    Parameters:
        Graph: PNGraph const &
        NIdV: TIntV const &
        RenumberNodes: bool const &

    GetSubGraph(PNGraph Graph, TIntV NIdV) -> PNGraph

    Parameters:
        Graph: PNGraph const &
        NIdV: TIntV const &

    """
  return _snap.GetSubGraph(*args)
class TGUtil(object):
    """Proxy of C++ TGUtil class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def GetCdf(*args):
        """
        GetCdf(TIntPrV PdfV, TIntPrV CdfV)

        Parameters:
            PdfV: TIntPrV const &
            CdfV: TIntPrV &

        GetCdf(TFltPrV PdfV, TFltPrV CdfV)

        Parameters:
            PdfV: TFltPrV const &
            CdfV: TFltPrV &

        GetCdf(TIntFltKdV PdfV, TIntFltKdV CdfV)

        Parameters:
            PdfV: TIntFltKdV const &
            CdfV: TIntFltKdV &

        GetCdf(TIntPrV PdfV) -> TIntPrV

        Parameters:
            PdfV: TIntPrV const &

        GetCdf(TFltPrV PdfV) -> TFltPrV

        Parameters:
            PdfV: TFltPrV const &

        """
        return _snap.TGUtil_GetCdf(*args)

    GetCdf = staticmethod(GetCdf)
    def GetCCdf(*args):
        """
        GetCCdf(TIntPrV PdfV, TIntPrV CCdfV)

        Parameters:
            PdfV: TIntPrV const &
            CCdfV: TIntPrV &

        GetCCdf(TFltPrV PdfV, TFltPrV CCdfV)

        Parameters:
            PdfV: TFltPrV const &
            CCdfV: TFltPrV &

        GetCCdf(TIntFltKdV PdfV, TIntFltKdV CCdfV)

        Parameters:
            PdfV: TIntFltKdV const &
            CCdfV: TIntFltKdV &

        GetCCdf(TIntPrV PdfV) -> TIntPrV

        Parameters:
            PdfV: TIntPrV const &

        GetCCdf(TFltPrV PdfV) -> TFltPrV

        Parameters:
            PdfV: TFltPrV const &

        """
        return _snap.TGUtil_GetCCdf(*args)

    GetCCdf = staticmethod(GetCCdf)
    def GetPdf(*args):
        """
        GetPdf(TIntPrV CdfV, TIntPrV PdfV)

        Parameters:
            CdfV: TIntPrV const &
            PdfV: TIntPrV &

        GetPdf(TFltPrV CdfV, TFltPrV PdfV)

        Parameters:
            CdfV: TFltPrV const &
            PdfV: TFltPrV &

        GetPdf(TIntFltKdV CdfV, TIntFltKdV PdfV)

        Parameters:
            CdfV: TIntFltKdV const &
            PdfV: TIntFltKdV &

        """
        return _snap.TGUtil_GetPdf(*args)

    GetPdf = staticmethod(GetPdf)
    def Normalize(*args):
        """
        Normalize(TFltPrV PdfV)

        Parameters:
            PdfV: TFltPrV &

        Normalize(TIntFltKdV PdfV)

        Parameters:
            PdfV: TIntFltKdV &

        """
        return _snap.TGUtil_Normalize(*args)

    Normalize = staticmethod(Normalize)
    def MakeExpBins(*args):
        """
        MakeExpBins(TFltPrV XYValV, TFltPrV ExpXYValV, double const & BinFactor=2, double const & MinYVal=1)

        Parameters:
            XYValV: TFltPrV const &
            ExpXYValV: TFltPrV &
            BinFactor: double const &
            MinYVal: double const &

        MakeExpBins(TFltPrV XYValV, TFltPrV ExpXYValV, double const & BinFactor=2)

        Parameters:
            XYValV: TFltPrV const &
            ExpXYValV: TFltPrV &
            BinFactor: double const &

        MakeExpBins(TFltPrV XYValV, TFltPrV ExpXYValV)

        Parameters:
            XYValV: TFltPrV const &
            ExpXYValV: TFltPrV &

        MakeExpBins(TFltKdV const & XYValV, TFltKdV & ExpXYValV, double const & BinFactor=2, double const & MinYVal=1)

        Parameters:
            XYValV: TFltKdV const &
            ExpXYValV: TFltKdV &
            BinFactor: double const &
            MinYVal: double const &

        MakeExpBins(TFltKdV const & XYValV, TFltKdV & ExpXYValV, double const & BinFactor=2)

        Parameters:
            XYValV: TFltKdV const &
            ExpXYValV: TFltKdV &
            BinFactor: double const &

        MakeExpBins(TFltKdV const & XYValV, TFltKdV & ExpXYValV)

        Parameters:
            XYValV: TFltKdV const &
            ExpXYValV: TFltKdV &

        MakeExpBins(TFltV YValV, TFltV ExpYValV, double const & BinFactor=1.01)

        Parameters:
            YValV: TFltV const &
            ExpYValV: TFltV &
            BinFactor: double const &

        MakeExpBins(TFltV YValV, TFltV ExpYValV)

        Parameters:
            YValV: TFltV const &
            ExpYValV: TFltV &

        MakeExpBins(TIntV YValV, TIntV ExpYValV, double const & BinFactor=1.01)

        Parameters:
            YValV: TIntV const &
            ExpYValV: TIntV &
            BinFactor: double const &

        MakeExpBins(TIntV YValV, TIntV ExpYValV)

        Parameters:
            YValV: TIntV const &
            ExpYValV: TIntV &

        """
        return _snap.TGUtil_MakeExpBins(*args)

    MakeExpBins = staticmethod(MakeExpBins)
    def __init__(self): 
        """__init__(TGUtil self) -> TGUtil"""
        _snap.TGUtil_swiginit(self,_snap.new_TGUtil())
    __swig_destroy__ = _snap.delete_TGUtil
TGUtil_swigregister = _snap.TGUtil_swigregister
TGUtil_swigregister(TGUtil)

def TGUtil_GetCdf(*args):
  """
    GetCdf(TIntPrV PdfV, TIntPrV CdfV)

    Parameters:
        PdfV: TIntPrV const &
        CdfV: TIntPrV &

    GetCdf(TFltPrV PdfV, TFltPrV CdfV)

    Parameters:
        PdfV: TFltPrV const &
        CdfV: TFltPrV &

    GetCdf(TIntFltKdV PdfV, TIntFltKdV CdfV)

    Parameters:
        PdfV: TIntFltKdV const &
        CdfV: TIntFltKdV &

    GetCdf(TIntPrV PdfV) -> TIntPrV

    Parameters:
        PdfV: TIntPrV const &

    TGUtil_GetCdf(TFltPrV PdfV) -> TFltPrV

    Parameters:
        PdfV: TFltPrV const &

    """
  return _snap.TGUtil_GetCdf(*args)

def TGUtil_GetCCdf(*args):
  """
    GetCCdf(TIntPrV PdfV, TIntPrV CCdfV)

    Parameters:
        PdfV: TIntPrV const &
        CCdfV: TIntPrV &

    GetCCdf(TFltPrV PdfV, TFltPrV CCdfV)

    Parameters:
        PdfV: TFltPrV const &
        CCdfV: TFltPrV &

    GetCCdf(TIntFltKdV PdfV, TIntFltKdV CCdfV)

    Parameters:
        PdfV: TIntFltKdV const &
        CCdfV: TIntFltKdV &

    GetCCdf(TIntPrV PdfV) -> TIntPrV

    Parameters:
        PdfV: TIntPrV const &

    TGUtil_GetCCdf(TFltPrV PdfV) -> TFltPrV

    Parameters:
        PdfV: TFltPrV const &

    """
  return _snap.TGUtil_GetCCdf(*args)

def TGUtil_GetPdf(*args):
  """
    GetPdf(TIntPrV CdfV, TIntPrV PdfV)

    Parameters:
        CdfV: TIntPrV const &
        PdfV: TIntPrV &

    GetPdf(TFltPrV CdfV, TFltPrV PdfV)

    Parameters:
        CdfV: TFltPrV const &
        PdfV: TFltPrV &

    TGUtil_GetPdf(TIntFltKdV CdfV, TIntFltKdV PdfV)

    Parameters:
        CdfV: TIntFltKdV const &
        PdfV: TIntFltKdV &

    """
  return _snap.TGUtil_GetPdf(*args)

def TGUtil_Normalize(*args):
  """
    Normalize(TFltPrV PdfV)

    Parameters:
        PdfV: TFltPrV &

    TGUtil_Normalize(TIntFltKdV PdfV)

    Parameters:
        PdfV: TIntFltKdV &

    """
  return _snap.TGUtil_Normalize(*args)

def TGUtil_MakeExpBins(*args):
  """
    MakeExpBins(TFltPrV XYValV, TFltPrV ExpXYValV, double const & BinFactor=2, double const & MinYVal=1)

    Parameters:
        XYValV: TFltPrV const &
        ExpXYValV: TFltPrV &
        BinFactor: double const &
        MinYVal: double const &

    MakeExpBins(TFltPrV XYValV, TFltPrV ExpXYValV, double const & BinFactor=2)

    Parameters:
        XYValV: TFltPrV const &
        ExpXYValV: TFltPrV &
        BinFactor: double const &

    MakeExpBins(TFltPrV XYValV, TFltPrV ExpXYValV)

    Parameters:
        XYValV: TFltPrV const &
        ExpXYValV: TFltPrV &

    MakeExpBins(TFltKdV const & XYValV, TFltKdV & ExpXYValV, double const & BinFactor=2, double const & MinYVal=1)

    Parameters:
        XYValV: TFltKdV const &
        ExpXYValV: TFltKdV &
        BinFactor: double const &
        MinYVal: double const &

    MakeExpBins(TFltKdV const & XYValV, TFltKdV & ExpXYValV, double const & BinFactor=2)

    Parameters:
        XYValV: TFltKdV const &
        ExpXYValV: TFltKdV &
        BinFactor: double const &

    MakeExpBins(TFltKdV const & XYValV, TFltKdV & ExpXYValV)

    Parameters:
        XYValV: TFltKdV const &
        ExpXYValV: TFltKdV &

    MakeExpBins(TFltV YValV, TFltV ExpYValV, double const & BinFactor=1.01)

    Parameters:
        YValV: TFltV const &
        ExpYValV: TFltV &
        BinFactor: double const &

    MakeExpBins(TFltV YValV, TFltV ExpYValV)

    Parameters:
        YValV: TFltV const &
        ExpYValV: TFltV &

    MakeExpBins(TIntV YValV, TIntV ExpYValV, double const & BinFactor=1.01)

    Parameters:
        YValV: TIntV const &
        ExpYValV: TIntV &
        BinFactor: double const &

    TGUtil_MakeExpBins(TIntV YValV, TIntV ExpYValV)

    Parameters:
        YValV: TIntV const &
        ExpYValV: TIntV &

    """
  return _snap.TGUtil_MakeExpBins(*args)

class TStrUtil(object):
    """Proxy of C++ TStrUtil class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def GetXmlTagVal(*args):
        """
        GetXmlTagVal(TXmlLx & XmlLx, TChA TagNm) -> TChA

        Parameters:
            XmlLx: TXmlLx &
            TagNm: TChA const &

        """
        return _snap.TStrUtil_GetXmlTagVal(*args)

    GetXmlTagVal = staticmethod(GetXmlTagVal)
    def GetXmlTagNmVal(*args):
        """
        GetXmlTagNmVal(TXmlLx & XmlLx, TChA TagNm, TChA TagVal)

        Parameters:
            XmlLx: TXmlLx &
            TagNm: TChA &
            TagVal: TChA &

        """
        return _snap.TStrUtil_GetXmlTagNmVal(*args)

    GetXmlTagNmVal = staticmethod(GetXmlTagNmVal)
    def GetXmlTagNmVal2(*args):
        """
        GetXmlTagNmVal2(TXmlLx & XmlLx, TChA TagNm, TChA TagVal, bool const & TakeTagNms) -> bool

        Parameters:
            XmlLx: TXmlLx &
            TagNm: TChA &
            TagVal: TChA &
            TakeTagNms: bool const &

        """
        return _snap.TStrUtil_GetXmlTagNmVal2(*args)

    GetXmlTagNmVal2 = staticmethod(GetXmlTagNmVal2)
    def GetDomNm(*args):
        """
        GetDomNm(TChA UrlChA) -> TChA

        Parameters:
            UrlChA: TChA const &

        """
        return _snap.TStrUtil_GetDomNm(*args)

    GetDomNm = staticmethod(GetDomNm)
    def GetDomNm2(*args):
        """
        GetDomNm2(TChA UrlChA) -> TChA

        Parameters:
            UrlChA: TChA const &

        """
        return _snap.TStrUtil_GetDomNm2(*args)

    GetDomNm2 = staticmethod(GetDomNm2)
    def GetWebsiteNm(*args):
        """
        GetWebsiteNm(TChA UrlChA) -> TChA

        Parameters:
            UrlChA: TChA const &

        """
        return _snap.TStrUtil_GetWebsiteNm(*args)

    GetWebsiteNm = staticmethod(GetWebsiteNm)
    def GetNormalizedUrl(*args):
        """
        GetNormalizedUrl(TChA UrlIn, TChA BaseUrl, TChA UrlOut) -> bool

        Parameters:
            UrlIn: TChA const &
            BaseUrl: TChA const &
            UrlOut: TChA &

        """
        return _snap.TStrUtil_GetNormalizedUrl(*args)

    GetNormalizedUrl = staticmethod(GetNormalizedUrl)
    def StripEnd(*args):
        """
        StripEnd(TChA Str, TChA SearchStr, TChA NewStr) -> bool

        Parameters:
            Str: TChA const &
            SearchStr: TChA const &
            NewStr: TChA &

        """
        return _snap.TStrUtil_StripEnd(*args)

    StripEnd = staticmethod(StripEnd)
    def GetShorStr(*args):
        """
        GetShorStr(TChA LongStr, int const MaxLen=50) -> TChA

        Parameters:
            LongStr: TChA const &
            MaxLen: int const

        GetShorStr(TChA LongStr) -> TChA

        Parameters:
            LongStr: TChA const &

        """
        return _snap.TStrUtil_GetShorStr(*args)

    GetShorStr = staticmethod(GetShorStr)
    def GetCleanStr(*args):
        """
        GetCleanStr(TChA ChA) -> TChA

        Parameters:
            ChA: TChA const &

        """
        return _snap.TStrUtil_GetCleanStr(*args)

    GetCleanStr = staticmethod(GetCleanStr)
    def GetCleanWrdStr(*args):
        """
        GetCleanWrdStr(TChA ChA) -> TChA

        Parameters:
            ChA: TChA const &

        """
        return _snap.TStrUtil_GetCleanWrdStr(*args)

    GetCleanWrdStr = staticmethod(GetCleanWrdStr)
    def CountWords(*args):
        """
        CountWords(char const * CStr) -> int

        Parameters:
            CStr: char const *

        CountWords(TChA ChA) -> int

        Parameters:
            ChA: TChA const &

        CountWords(TChA ChA, TStrHash< TInt > const & StopWordH) -> int

        Parameters:
            ChA: TChA const &
            StopWordH: TStrHash< TInt > const &

        """
        return _snap.TStrUtil_CountWords(*args)

    CountWords = staticmethod(CountWords)
    def SplitWords(*args):
        """
        SplitWords(TChA ChA, TVec< char * > & WrdV, bool const & SplitOnWs=True) -> int

        Parameters:
            ChA: TChA &
            WrdV: TVec< char * > &
            SplitOnWs: bool const &

        SplitWords(TChA ChA, TVec< char * > & WrdV) -> int

        Parameters:
            ChA: TChA &
            WrdV: TVec< char * > &

        """
        return _snap.TStrUtil_SplitWords(*args)

    SplitWords = staticmethod(SplitWords)
    def SplitOnCh(*args):
        """
        SplitOnCh(TChA ChA, TVec< char * > & WrdV, char const & Ch, bool const & SkipEmpty=False) -> int

        Parameters:
            ChA: TChA &
            WrdV: TVec< char * > &
            Ch: char const &
            SkipEmpty: bool const &

        SplitOnCh(TChA ChA, TVec< char * > & WrdV, char const & Ch) -> int

        Parameters:
            ChA: TChA &
            WrdV: TVec< char * > &
            Ch: char const &

        """
        return _snap.TStrUtil_SplitOnCh(*args)

    SplitOnCh = staticmethod(SplitOnCh)
    def SplitLines(*args):
        """
        SplitLines(TChA ChA, TVec< char * > & LineV, bool const & SkipEmpty=False) -> int

        Parameters:
            ChA: TChA &
            LineV: TVec< char * > &
            SkipEmpty: bool const &

        SplitLines(TChA ChA, TVec< char * > & LineV) -> int

        Parameters:
            ChA: TChA &
            LineV: TVec< char * > &

        """
        return _snap.TStrUtil_SplitLines(*args)

    SplitLines = staticmethod(SplitLines)
    def SplitSentences(*args):
        """
        SplitSentences(TChA ChA, TVec< char * > & SentenceV) -> int

        Parameters:
            ChA: TChA &
            SentenceV: TVec< char * > &

        """
        return _snap.TStrUtil_SplitSentences(*args)

    SplitSentences = staticmethod(SplitSentences)
    def RemoveHtmlTags(*args):
        """
        RemoveHtmlTags(TChA HtmlStr, TChA TextStr)

        Parameters:
            HtmlStr: TChA const &
            TextStr: TChA &

        """
        return _snap.TStrUtil_RemoveHtmlTags(*args)

    RemoveHtmlTags = staticmethod(RemoveHtmlTags)
    def IsLatinStr(*args):
        """
        IsLatinStr(TChA Str, double const & MinAlFrac) -> bool

        Parameters:
            Str: TChA const &
            MinAlFrac: double const &

        """
        return _snap.TStrUtil_IsLatinStr(*args)

    IsLatinStr = staticmethod(IsLatinStr)
    def GetWIdV(*args):
        """
        GetWIdV(TStrHash< TInt > const & StrH, char const * CStr, TIntV WIdV)

        Parameters:
            StrH: TStrHash< TInt > const &
            CStr: char const *
            WIdV: TIntV &

        """
        return _snap.TStrUtil_GetWIdV(*args)

    GetWIdV = staticmethod(GetWIdV)
    def GetAddWIdV(*args):
        """
        GetAddWIdV(TStrHash< TInt > & StrH, char const * CStr, TIntV WIdV)

        Parameters:
            StrH: TStrHash< TInt > &
            CStr: char const *
            WIdV: TIntV &

        """
        return _snap.TStrUtil_GetAddWIdV(*args)

    GetAddWIdV = staticmethod(GetAddWIdV)
    def GetTmFromStr(*args):
        """
        GetTmFromStr(char const * TmStr, TSecTm & Tm) -> bool

        Parameters:
            TmStr: char const *
            Tm: TSecTm &

        """
        return _snap.TStrUtil_GetTmFromStr(*args)

    GetTmFromStr = staticmethod(GetTmFromStr)
    def GetStdName(*args):
        """
        GetStdName(TStr AuthorName) -> TStr

        Parameters:
            AuthorName: TStr

        """
        return _snap.TStrUtil_GetStdName(*args)

    GetStdName = staticmethod(GetStdName)
    def GetStdNameV(*args):
        """
        GetStdNameV(TStr AuthorNames, TStrV StdNameV)

        Parameters:
            AuthorNames: TStr
            StdNameV: TStrV &

        """
        return _snap.TStrUtil_GetStdNameV(*args)

    GetStdNameV = staticmethod(GetStdNameV)
    def __init__(self): 
        """__init__(TStrUtil self) -> TStrUtil"""
        _snap.TStrUtil_swiginit(self,_snap.new_TStrUtil())
    __swig_destroy__ = _snap.delete_TStrUtil
TStrUtil_swigregister = _snap.TStrUtil_swigregister
TStrUtil_swigregister(TStrUtil)

def TStrUtil_GetXmlTagVal(*args):
  """
    TStrUtil_GetXmlTagVal(TXmlLx & XmlLx, TChA TagNm) -> TChA

    Parameters:
        XmlLx: TXmlLx &
        TagNm: TChA const &

    """
  return _snap.TStrUtil_GetXmlTagVal(*args)

def TStrUtil_GetXmlTagNmVal(*args):
  """
    TStrUtil_GetXmlTagNmVal(TXmlLx & XmlLx, TChA TagNm, TChA TagVal)

    Parameters:
        XmlLx: TXmlLx &
        TagNm: TChA &
        TagVal: TChA &

    """
  return _snap.TStrUtil_GetXmlTagNmVal(*args)

def TStrUtil_GetXmlTagNmVal2(*args):
  """
    TStrUtil_GetXmlTagNmVal2(TXmlLx & XmlLx, TChA TagNm, TChA TagVal, bool const & TakeTagNms) -> bool

    Parameters:
        XmlLx: TXmlLx &
        TagNm: TChA &
        TagVal: TChA &
        TakeTagNms: bool const &

    """
  return _snap.TStrUtil_GetXmlTagNmVal2(*args)

def TStrUtil_GetDomNm(*args):
  """
    TStrUtil_GetDomNm(TChA UrlChA) -> TChA

    Parameters:
        UrlChA: TChA const &

    """
  return _snap.TStrUtil_GetDomNm(*args)

def TStrUtil_GetDomNm2(*args):
  """
    TStrUtil_GetDomNm2(TChA UrlChA) -> TChA

    Parameters:
        UrlChA: TChA const &

    """
  return _snap.TStrUtil_GetDomNm2(*args)

def TStrUtil_GetWebsiteNm(*args):
  """
    TStrUtil_GetWebsiteNm(TChA UrlChA) -> TChA

    Parameters:
        UrlChA: TChA const &

    """
  return _snap.TStrUtil_GetWebsiteNm(*args)

def TStrUtil_GetNormalizedUrl(*args):
  """
    TStrUtil_GetNormalizedUrl(TChA UrlIn, TChA BaseUrl, TChA UrlOut) -> bool

    Parameters:
        UrlIn: TChA const &
        BaseUrl: TChA const &
        UrlOut: TChA &

    """
  return _snap.TStrUtil_GetNormalizedUrl(*args)

def TStrUtil_StripEnd(*args):
  """
    TStrUtil_StripEnd(TChA Str, TChA SearchStr, TChA NewStr) -> bool

    Parameters:
        Str: TChA const &
        SearchStr: TChA const &
        NewStr: TChA &

    """
  return _snap.TStrUtil_StripEnd(*args)

def TStrUtil_GetShorStr(*args):
  """
    GetShorStr(TChA LongStr, int const MaxLen=50) -> TChA

    Parameters:
        LongStr: TChA const &
        MaxLen: int const

    TStrUtil_GetShorStr(TChA LongStr) -> TChA

    Parameters:
        LongStr: TChA const &

    """
  return _snap.TStrUtil_GetShorStr(*args)

def TStrUtil_GetCleanStr(*args):
  """
    TStrUtil_GetCleanStr(TChA ChA) -> TChA

    Parameters:
        ChA: TChA const &

    """
  return _snap.TStrUtil_GetCleanStr(*args)

def TStrUtil_GetCleanWrdStr(*args):
  """
    TStrUtil_GetCleanWrdStr(TChA ChA) -> TChA

    Parameters:
        ChA: TChA const &

    """
  return _snap.TStrUtil_GetCleanWrdStr(*args)

def TStrUtil_CountWords(*args):
  """
    CountWords(char const * CStr) -> int

    Parameters:
        CStr: char const *

    CountWords(TChA ChA) -> int

    Parameters:
        ChA: TChA const &

    TStrUtil_CountWords(TChA ChA, TStrHash< TInt > const & StopWordH) -> int

    Parameters:
        ChA: TChA const &
        StopWordH: TStrHash< TInt > const &

    """
  return _snap.TStrUtil_CountWords(*args)

def TStrUtil_SplitWords(*args):
  """
    SplitWords(TChA ChA, TVec< char * > & WrdV, bool const & SplitOnWs=True) -> int

    Parameters:
        ChA: TChA &
        WrdV: TVec< char * > &
        SplitOnWs: bool const &

    TStrUtil_SplitWords(TChA ChA, TVec< char * > & WrdV) -> int

    Parameters:
        ChA: TChA &
        WrdV: TVec< char * > &

    """
  return _snap.TStrUtil_SplitWords(*args)

def TStrUtil_SplitOnCh(*args):
  """
    SplitOnCh(TChA ChA, TVec< char * > & WrdV, char const & Ch, bool const & SkipEmpty=False) -> int

    Parameters:
        ChA: TChA &
        WrdV: TVec< char * > &
        Ch: char const &
        SkipEmpty: bool const &

    TStrUtil_SplitOnCh(TChA ChA, TVec< char * > & WrdV, char const & Ch) -> int

    Parameters:
        ChA: TChA &
        WrdV: TVec< char * > &
        Ch: char const &

    """
  return _snap.TStrUtil_SplitOnCh(*args)

def TStrUtil_SplitLines(*args):
  """
    SplitLines(TChA ChA, TVec< char * > & LineV, bool const & SkipEmpty=False) -> int

    Parameters:
        ChA: TChA &
        LineV: TVec< char * > &
        SkipEmpty: bool const &

    TStrUtil_SplitLines(TChA ChA, TVec< char * > & LineV) -> int

    Parameters:
        ChA: TChA &
        LineV: TVec< char * > &

    """
  return _snap.TStrUtil_SplitLines(*args)

def TStrUtil_SplitSentences(*args):
  """
    TStrUtil_SplitSentences(TChA ChA, TVec< char * > & SentenceV) -> int

    Parameters:
        ChA: TChA &
        SentenceV: TVec< char * > &

    """
  return _snap.TStrUtil_SplitSentences(*args)

def TStrUtil_RemoveHtmlTags(*args):
  """
    TStrUtil_RemoveHtmlTags(TChA HtmlStr, TChA TextStr)

    Parameters:
        HtmlStr: TChA const &
        TextStr: TChA &

    """
  return _snap.TStrUtil_RemoveHtmlTags(*args)

def TStrUtil_IsLatinStr(*args):
  """
    TStrUtil_IsLatinStr(TChA Str, double const & MinAlFrac) -> bool

    Parameters:
        Str: TChA const &
        MinAlFrac: double const &

    """
  return _snap.TStrUtil_IsLatinStr(*args)

def TStrUtil_GetWIdV(*args):
  """
    TStrUtil_GetWIdV(TStrHash< TInt > const & StrH, char const * CStr, TIntV WIdV)

    Parameters:
        StrH: TStrHash< TInt > const &
        CStr: char const *
        WIdV: TIntV &

    """
  return _snap.TStrUtil_GetWIdV(*args)

def TStrUtil_GetAddWIdV(*args):
  """
    TStrUtil_GetAddWIdV(TStrHash< TInt > & StrH, char const * CStr, TIntV WIdV)

    Parameters:
        StrH: TStrHash< TInt > &
        CStr: char const *
        WIdV: TIntV &

    """
  return _snap.TStrUtil_GetAddWIdV(*args)

def TStrUtil_GetTmFromStr(*args):
  """
    TStrUtil_GetTmFromStr(char const * TmStr, TSecTm & Tm) -> bool

    Parameters:
        TmStr: char const *
        Tm: TSecTm &

    """
  return _snap.TStrUtil_GetTmFromStr(*args)

def TStrUtil_GetStdName(*args):
  """
    TStrUtil_GetStdName(TStr AuthorName) -> TStr

    Parameters:
        AuthorName: TStr

    """
  return _snap.TStrUtil_GetStdName(*args)

def TStrUtil_GetStdNameV(*args):
  """
    TStrUtil_GetStdNameV(TStr AuthorNames, TStrV StdNameV)

    Parameters:
        AuthorNames: TStr
        StdNameV: TStrV &

    """
  return _snap.TStrUtil_GetStdNameV(*args)


def PlotEigValRank(*args):
  """
    PlotEigValRank(PUNGraph Graph, int const & EigVals, TStr FNmPref, TStr DescStr=TStr())

    Parameters:
        Graph: PUNGraph const &
        EigVals: int const &
        FNmPref: TStr const &
        DescStr: TStr

    PlotEigValRank(PUNGraph Graph, int const & EigVals, TStr FNmPref)

    Parameters:
        Graph: PUNGraph const &
        EigVals: int const &
        FNmPref: TStr const &

    """
  return _snap.PlotEigValRank(*args)

def PlotEigValDistr(*args):
  """
    PlotEigValDistr(PUNGraph Graph, int const & EigVals, TStr FNmPref, TStr DescStr=TStr())

    Parameters:
        Graph: PUNGraph const &
        EigVals: int const &
        FNmPref: TStr const &
        DescStr: TStr

    PlotEigValDistr(PUNGraph Graph, int const & EigVals, TStr FNmPref)

    Parameters:
        Graph: PUNGraph const &
        EigVals: int const &
        FNmPref: TStr const &

    """
  return _snap.PlotEigValDistr(*args)

def PlotInvParticipRat(*args):
  """
    PlotInvParticipRat(PUNGraph Graph, int const & MaxEigVecs, int const & TimeLimit, TStr FNmPref, TStr DescStr=TStr())

    Parameters:
        Graph: PUNGraph const &
        MaxEigVecs: int const &
        TimeLimit: int const &
        FNmPref: TStr const &
        DescStr: TStr

    PlotInvParticipRat(PUNGraph Graph, int const & MaxEigVecs, int const & TimeLimit, TStr FNmPref)

    Parameters:
        Graph: PUNGraph const &
        MaxEigVecs: int const &
        TimeLimit: int const &
        FNmPref: TStr const &

    """
  return _snap.PlotInvParticipRat(*args)

def PlotSngValRank(*args):
  """
    PlotSngValRank(PNGraph Graph, int const & SngVals, TStr FNmPref, TStr DescStr=TStr())

    Parameters:
        Graph: PNGraph const &
        SngVals: int const &
        FNmPref: TStr const &
        DescStr: TStr

    PlotSngValRank(PNGraph Graph, int const & SngVals, TStr FNmPref)

    Parameters:
        Graph: PNGraph const &
        SngVals: int const &
        FNmPref: TStr const &

    """
  return _snap.PlotSngValRank(*args)

def PlotSngValDistr(*args):
  """
    PlotSngValDistr(PNGraph Graph, int const & SngVals, TStr FNmPref, TStr DescStr=TStr())

    Parameters:
        Graph: PNGraph const &
        SngVals: int const &
        FNmPref: TStr const &
        DescStr: TStr

    PlotSngValDistr(PNGraph Graph, int const & SngVals, TStr FNmPref)

    Parameters:
        Graph: PNGraph const &
        SngVals: int const &
        FNmPref: TStr const &

    """
  return _snap.PlotSngValDistr(*args)

def PlotSngVec(*args):
  """
    PlotSngVec(PNGraph Graph, TStr FNmPref, TStr DescStr=TStr())

    Parameters:
        Graph: PNGraph const &
        FNmPref: TStr const &
        DescStr: TStr

    PlotSngVec(PNGraph Graph, TStr FNmPref)

    Parameters:
        Graph: PNGraph const &
        FNmPref: TStr const &

    """
  return _snap.PlotSngVec(*args)
class TCliqueOverlap(object):
    """Proxy of C++ TCliqueOverlap class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def GetRelativeComplement(*args):
        """
        GetRelativeComplement(TIntSet A, TIntSet B, TIntSet Complement)

        Parameters:
            A: THashSet< TInt > const &
            B: THashSet< TInt > const &
            Complement: THashSet< TInt > &

        """
        return _snap.TCliqueOverlap_GetRelativeComplement(*args)

    GetRelativeComplement = staticmethod(GetRelativeComplement)
    def GetIntersection(*args):
        """
        GetIntersection(TIntSet A, TIntSet B, TIntSet C)

        Parameters:
            A: THashSet< TInt > const &
            B: THashSet< TInt > const &
            C: THashSet< TInt > &

        """
        return _snap.TCliqueOverlap_GetIntersection(*args)

    GetIntersection = staticmethod(GetIntersection)
    def Intersection(*args):
        """
        Intersection(TIntSet A, TIntSet B) -> int

        Parameters:
            A: THashSet< TInt > const &
            B: THashSet< TInt > const &

        """
        return _snap.TCliqueOverlap_Intersection(*args)

    Intersection = staticmethod(Intersection)
    def CalculateOverlapMtx(*args):
        """
        CalculateOverlapMtx(TIntIntVV MaxCliques, int MinNodeOverlap, TIntIntVV OverlapMtx)

        Parameters:
            MaxCliques: TVec< TIntV > const &
            MinNodeOverlap: int
            OverlapMtx: TVec< TIntV > &

        CalculateOverlapMtx(TIntIntVV MaxCliques, int MinNodeOverlap) -> PUNGraph

        Parameters:
            MaxCliques: TVec< TIntV > const &
            MinNodeOverlap: int

        """
        return _snap.TCliqueOverlap_CalculateOverlapMtx(*args)

    CalculateOverlapMtx = staticmethod(CalculateOverlapMtx)
    def GetOverlapCliques(*args):
        """
        GetOverlapCliques(TIntIntVV OverlapMtx, int MinNodeOverlap, TIntIntVV CliqueIdVV)

        Parameters:
            OverlapMtx: TVec< TIntV > const &
            MinNodeOverlap: int
            CliqueIdVV: TVec< TIntV > &

        GetOverlapCliques(TIntIntVV OverlapMtx, TIntIntVV MaxCliques, double MinOverlapFrac, TIntIntVV CliqueIdVV)

        Parameters:
            OverlapMtx: TVec< TIntV > const &
            MaxCliques: TVec< TIntV > const &
            MinOverlapFrac: double
            CliqueIdVV: TVec< TIntV > &

        """
        return _snap.TCliqueOverlap_GetOverlapCliques(*args)

    GetOverlapCliques = staticmethod(GetOverlapCliques)
    def __init__(self): 
        """__init__(TCliqueOverlap self) -> TCliqueOverlap"""
        _snap.TCliqueOverlap_swiginit(self,_snap.new_TCliqueOverlap())
    def GetMaximalCliques(self, *args):
        """
        GetMaximalCliques(TCliqueOverlap self, PUNGraph G, int MinMaxCliqueSize, TIntIntVV MaxCliques)

        Parameters:
            G: PUNGraph const &
            MinMaxCliqueSize: int
            MaxCliques: TVec< TIntV > &

        """
        return _snap.TCliqueOverlap_GetMaximalCliques(self, *args)

    def GetMaxCliques(*args):
        """
        GetMaxCliques(PUNGraph G, int MinMaxCliqueSize, TIntIntVV MaxCliques)

        Parameters:
            G: PUNGraph const &
            MinMaxCliqueSize: int
            MaxCliques: TVec< TIntV > &

        """
        return _snap.TCliqueOverlap_GetMaxCliques(*args)

    GetMaxCliques = staticmethod(GetMaxCliques)
    def GetCPMCommunities(*args):
        """
        GetCPMCommunities(PUNGraph G, int MinMaxCliqueSize, TIntIntVV Communities)

        Parameters:
            G: PUNGraph const &
            MinMaxCliqueSize: int
            Communities: TVec< TIntV > &

        """
        return _snap.TCliqueOverlap_GetCPMCommunities(*args)

    GetCPMCommunities = staticmethod(GetCPMCommunities)
    __swig_destroy__ = _snap.delete_TCliqueOverlap
TCliqueOverlap.GetMaximalCliques = new_instancemethod(_snap.TCliqueOverlap_GetMaximalCliques,None,TCliqueOverlap)
TCliqueOverlap_swigregister = _snap.TCliqueOverlap_swigregister
TCliqueOverlap_swigregister(TCliqueOverlap)

def TCliqueOverlap_GetRelativeComplement(*args):
  """
    TCliqueOverlap_GetRelativeComplement(TIntSet A, TIntSet B, TIntSet Complement)

    Parameters:
        A: THashSet< TInt > const &
        B: THashSet< TInt > const &
        Complement: THashSet< TInt > &

    """
  return _snap.TCliqueOverlap_GetRelativeComplement(*args)

def TCliqueOverlap_GetIntersection(*args):
  """
    TCliqueOverlap_GetIntersection(TIntSet A, TIntSet B, TIntSet C)

    Parameters:
        A: THashSet< TInt > const &
        B: THashSet< TInt > const &
        C: THashSet< TInt > &

    """
  return _snap.TCliqueOverlap_GetIntersection(*args)

def TCliqueOverlap_Intersection(*args):
  """
    TCliqueOverlap_Intersection(TIntSet A, TIntSet B) -> int

    Parameters:
        A: THashSet< TInt > const &
        B: THashSet< TInt > const &

    """
  return _snap.TCliqueOverlap_Intersection(*args)

def TCliqueOverlap_CalculateOverlapMtx(*args):
  """
    CalculateOverlapMtx(TIntIntVV MaxCliques, int MinNodeOverlap, TIntIntVV OverlapMtx)

    Parameters:
        MaxCliques: TVec< TIntV > const &
        MinNodeOverlap: int
        OverlapMtx: TVec< TIntV > &

    TCliqueOverlap_CalculateOverlapMtx(TIntIntVV MaxCliques, int MinNodeOverlap) -> PUNGraph

    Parameters:
        MaxCliques: TVec< TIntV > const &
        MinNodeOverlap: int

    """
  return _snap.TCliqueOverlap_CalculateOverlapMtx(*args)

def TCliqueOverlap_GetOverlapCliques(*args):
  """
    GetOverlapCliques(TIntIntVV OverlapMtx, int MinNodeOverlap, TIntIntVV CliqueIdVV)

    Parameters:
        OverlapMtx: TVec< TIntV > const &
        MinNodeOverlap: int
        CliqueIdVV: TVec< TIntV > &

    TCliqueOverlap_GetOverlapCliques(TIntIntVV OverlapMtx, TIntIntVV MaxCliques, double MinOverlapFrac, TIntIntVV CliqueIdVV)

    Parameters:
        OverlapMtx: TVec< TIntV > const &
        MaxCliques: TVec< TIntV > const &
        MinOverlapFrac: double
        CliqueIdVV: TVec< TIntV > &

    """
  return _snap.TCliqueOverlap_GetOverlapCliques(*args)

def TCliqueOverlap_GetMaxCliques(*args):
  """
    TCliqueOverlap_GetMaxCliques(PUNGraph G, int MinMaxCliqueSize, TIntIntVV MaxCliques)

    Parameters:
        G: PUNGraph const &
        MinMaxCliqueSize: int
        MaxCliques: TVec< TIntV > &

    """
  return _snap.TCliqueOverlap_GetMaxCliques(*args)

def TCliqueOverlap_GetCPMCommunities(*args):
  """
    TCliqueOverlap_GetCPMCommunities(PUNGraph G, int MinMaxCliqueSize, TIntIntVV Communities)

    Parameters:
        G: PUNGraph const &
        MinMaxCliqueSize: int
        Communities: TVec< TIntV > &

    """
  return _snap.TCliqueOverlap_GetCPMCommunities(*args)

class TIntPr(object):
    """Proxy of C++ TPair<(TInt,TInt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = _swig_property(_snap.TIntPr_Val1_get, _snap.TIntPr_Val1_set)
    Val2 = _swig_property(_snap.TIntPr_Val2_get, _snap.TIntPr_Val2_set)
    def __init__(self, *args): 
        """
        __init__(TPair<(TInt,TInt)> self) -> TIntPr
        __init__(TPair<(TInt,TInt)> self, TIntPr Pair) -> TIntPr

        Parameters:
            Pair: TPair< TInt,TInt > const &

        __init__(TPair<(TInt,TInt)> self, TInt _Val1, TInt _Val2) -> TIntPr

        Parameters:
            _Val1: TInt const &
            _Val2: TInt const &

        __init__(TPair<(TInt,TInt)> self, TSIn SIn) -> TIntPr

        Parameters:
            SIn: TSIn &

        """
        _snap.TIntPr_swiginit(self,_snap.new_TIntPr(*args))
    def Save(self, *args):
        """
        Save(TIntPr self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.TIntPr_Save(self, *args)

    def Load(self, *args):
        """
        Load(TIntPr self, TSIn SIn)

        Parameters:
            SIn: TSIn &

        """
        return _snap.TIntPr_Load(self, *args)

    def __eq__(self, *args):
        """
        __eq__(TIntPr self, TIntPr Pair) -> bool

        Parameters:
            Pair: TPair< TInt,TInt > const &

        """
        return _snap.TIntPr___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TIntPr self, TIntPr Pair) -> bool

        Parameters:
            Pair: TPair< TInt,TInt > const &

        """
        return _snap.TIntPr___lt__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(TIntPr self) -> int

        Parameters:
            self: TPair< TInt,TInt > const *

        """
        return _snap.TIntPr_GetMemUsed(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TIntPr self) -> int

        Parameters:
            self: TPair< TInt,TInt > const *

        """
        return _snap.TIntPr_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(TIntPr self) -> int

        Parameters:
            self: TPair< TInt,TInt > const *

        """
        return _snap.TIntPr_GetSecHashCd(self)

    def GetVal(self, *args):
        """
        GetVal(TIntPr self, TInt _Val1, TInt _Val2)

        Parameters:
            _Val1: TInt &
            _Val2: TInt &

        """
        return _snap.TIntPr_GetVal(self, *args)

    def GetVal1(self):
        """
        GetVal1(TIntPr self) -> TInt

        Parameters:
            self: TPair< TInt,TInt > const *

        """
        return _snap.TIntPr_GetVal1(self)

    def GetVal2(self):
        """
        GetVal2(TIntPr self) -> TInt

        Parameters:
            self: TPair< TInt,TInt > const *

        """
        return _snap.TIntPr_GetVal2(self)

    __swig_destroy__ = _snap.delete_TIntPr
TIntPr.Save = new_instancemethod(_snap.TIntPr_Save,None,TIntPr)
TIntPr.Load = new_instancemethod(_snap.TIntPr_Load,None,TIntPr)
TIntPr.__eq__ = new_instancemethod(_snap.TIntPr___eq__,None,TIntPr)
TIntPr.__lt__ = new_instancemethod(_snap.TIntPr___lt__,None,TIntPr)
TIntPr.GetMemUsed = new_instancemethod(_snap.TIntPr_GetMemUsed,None,TIntPr)
TIntPr.GetPrimHashCd = new_instancemethod(_snap.TIntPr_GetPrimHashCd,None,TIntPr)
TIntPr.GetSecHashCd = new_instancemethod(_snap.TIntPr_GetSecHashCd,None,TIntPr)
TIntPr.GetVal = new_instancemethod(_snap.TIntPr_GetVal,None,TIntPr)
TIntPr.GetVal1 = new_instancemethod(_snap.TIntPr_GetVal1,None,TIntPr)
TIntPr.GetVal2 = new_instancemethod(_snap.TIntPr_GetVal2,None,TIntPr)
TIntPr_swigregister = _snap.TIntPr_swigregister
TIntPr_swigregister(TIntPr)

class TFltPr(object):
    """Proxy of C++ TPair<(TFlt,TFlt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = _swig_property(_snap.TFltPr_Val1_get, _snap.TFltPr_Val1_set)
    Val2 = _swig_property(_snap.TFltPr_Val2_get, _snap.TFltPr_Val2_set)
    def __init__(self, *args): 
        """
        __init__(TPair<(TFlt,TFlt)> self) -> TFltPr
        __init__(TPair<(TFlt,TFlt)> self, TFltPr Pair) -> TFltPr

        Parameters:
            Pair: TPair< TFlt,TFlt > const &

        __init__(TPair<(TFlt,TFlt)> self, TFlt _Val1, TFlt _Val2) -> TFltPr

        Parameters:
            _Val1: TFlt const &
            _Val2: TFlt const &

        __init__(TPair<(TFlt,TFlt)> self, TSIn SIn) -> TFltPr

        Parameters:
            SIn: TSIn &

        """
        _snap.TFltPr_swiginit(self,_snap.new_TFltPr(*args))
    def Save(self, *args):
        """
        Save(TFltPr self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.TFltPr_Save(self, *args)

    def Load(self, *args):
        """
        Load(TFltPr self, TSIn SIn)

        Parameters:
            SIn: TSIn &

        """
        return _snap.TFltPr_Load(self, *args)

    def __eq__(self, *args):
        """
        __eq__(TFltPr self, TFltPr Pair) -> bool

        Parameters:
            Pair: TPair< TFlt,TFlt > const &

        """
        return _snap.TFltPr___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TFltPr self, TFltPr Pair) -> bool

        Parameters:
            Pair: TPair< TFlt,TFlt > const &

        """
        return _snap.TFltPr___lt__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(TFltPr self) -> int

        Parameters:
            self: TPair< TFlt,TFlt > const *

        """
        return _snap.TFltPr_GetMemUsed(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TFltPr self) -> int

        Parameters:
            self: TPair< TFlt,TFlt > const *

        """
        return _snap.TFltPr_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(TFltPr self) -> int

        Parameters:
            self: TPair< TFlt,TFlt > const *

        """
        return _snap.TFltPr_GetSecHashCd(self)

    def GetVal(self, *args):
        """
        GetVal(TFltPr self, TFlt _Val1, TFlt _Val2)

        Parameters:
            _Val1: TFlt &
            _Val2: TFlt &

        """
        return _snap.TFltPr_GetVal(self, *args)

    def GetVal1(self):
        """
        GetVal1(TFltPr self) -> TFlt

        Parameters:
            self: TPair< TFlt,TFlt > const *

        """
        return _snap.TFltPr_GetVal1(self)

    def GetVal2(self):
        """
        GetVal2(TFltPr self) -> TFlt

        Parameters:
            self: TPair< TFlt,TFlt > const *

        """
        return _snap.TFltPr_GetVal2(self)

    __swig_destroy__ = _snap.delete_TFltPr
TFltPr.Save = new_instancemethod(_snap.TFltPr_Save,None,TFltPr)
TFltPr.Load = new_instancemethod(_snap.TFltPr_Load,None,TFltPr)
TFltPr.__eq__ = new_instancemethod(_snap.TFltPr___eq__,None,TFltPr)
TFltPr.__lt__ = new_instancemethod(_snap.TFltPr___lt__,None,TFltPr)
TFltPr.GetMemUsed = new_instancemethod(_snap.TFltPr_GetMemUsed,None,TFltPr)
TFltPr.GetPrimHashCd = new_instancemethod(_snap.TFltPr_GetPrimHashCd,None,TFltPr)
TFltPr.GetSecHashCd = new_instancemethod(_snap.TFltPr_GetSecHashCd,None,TFltPr)
TFltPr.GetVal = new_instancemethod(_snap.TFltPr_GetVal,None,TFltPr)
TFltPr.GetVal1 = new_instancemethod(_snap.TFltPr_GetVal1,None,TFltPr)
TFltPr.GetVal2 = new_instancemethod(_snap.TFltPr_GetVal2,None,TFltPr)
TFltPr_swigregister = _snap.TFltPr_swigregister
TFltPr_swigregister(TFltPr)

class TIntTr(object):
    """Proxy of C++ TTriple<(TInt,TInt,TInt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = _swig_property(_snap.TIntTr_Val1_get, _snap.TIntTr_Val1_set)
    Val2 = _swig_property(_snap.TIntTr_Val2_get, _snap.TIntTr_Val2_set)
    Val3 = _swig_property(_snap.TIntTr_Val3_get, _snap.TIntTr_Val3_set)
    def __init__(self, *args): 
        """
        __init__(TTriple<(TInt,TInt,TInt)> self) -> TIntTr
        __init__(TTriple<(TInt,TInt,TInt)> self, TIntTr Triple) -> TIntTr

        Parameters:
            Triple: TTriple< TInt,TInt,TInt > const &

        __init__(TTriple<(TInt,TInt,TInt)> self, TInt _Val1, TInt _Val2, TInt _Val3) -> TIntTr

        Parameters:
            _Val1: TInt const &
            _Val2: TInt const &
            _Val3: TInt const &

        __init__(TTriple<(TInt,TInt,TInt)> self, TSIn SIn) -> TIntTr

        Parameters:
            SIn: TSIn &

        """
        _snap.TIntTr_swiginit(self,_snap.new_TIntTr(*args))
    def Save(self, *args):
        """
        Save(TIntTr self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.TIntTr_Save(self, *args)

    def __eq__(self, *args):
        """
        __eq__(TIntTr self, TIntTr Triple) -> bool

        Parameters:
            Triple: TTriple< TInt,TInt,TInt > const &

        """
        return _snap.TIntTr___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TIntTr self, TIntTr Triple) -> bool

        Parameters:
            Triple: TTriple< TInt,TInt,TInt > const &

        """
        return _snap.TIntTr___lt__(self, *args)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TIntTr self) -> int

        Parameters:
            self: TTriple< TInt,TInt,TInt > const *

        """
        return _snap.TIntTr_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(TIntTr self) -> int

        Parameters:
            self: TTriple< TInt,TInt,TInt > const *

        """
        return _snap.TIntTr_GetSecHashCd(self)

    def GetMemUsed(self):
        """
        GetMemUsed(TIntTr self) -> int

        Parameters:
            self: TTriple< TInt,TInt,TInt > const *

        """
        return _snap.TIntTr_GetMemUsed(self)

    def GetVal(self, *args):
        """
        GetVal(TIntTr self, TInt _Val1, TInt _Val2, TInt _Val3)

        Parameters:
            _Val1: TInt &
            _Val2: TInt &
            _Val3: TInt &

        """
        return _snap.TIntTr_GetVal(self, *args)

    __swig_destroy__ = _snap.delete_TIntTr
TIntTr.Save = new_instancemethod(_snap.TIntTr_Save,None,TIntTr)
TIntTr.__eq__ = new_instancemethod(_snap.TIntTr___eq__,None,TIntTr)
TIntTr.__lt__ = new_instancemethod(_snap.TIntTr___lt__,None,TIntTr)
TIntTr.GetPrimHashCd = new_instancemethod(_snap.TIntTr_GetPrimHashCd,None,TIntTr)
TIntTr.GetSecHashCd = new_instancemethod(_snap.TIntTr_GetSecHashCd,None,TIntTr)
TIntTr.GetMemUsed = new_instancemethod(_snap.TIntTr_GetMemUsed,None,TIntTr)
TIntTr.GetVal = new_instancemethod(_snap.TIntTr_GetVal,None,TIntTr)
TIntTr_swigregister = _snap.TIntTr_swigregister
TIntTr_swigregister(TIntTr)

class TIntFltKd(object):
    """Proxy of C++ TKeyDat<(TInt,TFlt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Key = _swig_property(_snap.TIntFltKd_Key_get, _snap.TIntFltKd_Key_set)
    Dat = _swig_property(_snap.TIntFltKd_Dat_get, _snap.TIntFltKd_Dat_set)
    def __init__(self, *args): 
        """
        __init__(TKeyDat<(TInt,TFlt)> self) -> TIntFltKd
        __init__(TKeyDat<(TInt,TFlt)> self, TIntFltKd KeyDat) -> TIntFltKd

        Parameters:
            KeyDat: TKeyDat< TInt,TFlt > const &

        __init__(TKeyDat<(TInt,TFlt)> self, TInt _Key) -> TIntFltKd

        Parameters:
            _Key: TInt const &

        __init__(TKeyDat<(TInt,TFlt)> self, TInt _Key, TFlt _Dat) -> TIntFltKd

        Parameters:
            _Key: TInt const &
            _Dat: TFlt const &

        __init__(TKeyDat<(TInt,TFlt)> self, TSIn SIn) -> TIntFltKd

        Parameters:
            SIn: TSIn &

        """
        _snap.TIntFltKd_swiginit(self,_snap.new_TIntFltKd(*args))
    def Save(self, *args):
        """
        Save(TIntFltKd self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.TIntFltKd_Save(self, *args)

    def __eq__(self, *args):
        """
        __eq__(TIntFltKd self, TIntFltKd KeyDat) -> bool

        Parameters:
            KeyDat: TKeyDat< TInt,TFlt > const &

        """
        return _snap.TIntFltKd___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TIntFltKd self, TIntFltKd KeyDat) -> bool

        Parameters:
            KeyDat: TKeyDat< TInt,TFlt > const &

        """
        return _snap.TIntFltKd___lt__(self, *args)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TIntFltKd self) -> int

        Parameters:
            self: TKeyDat< TInt,TFlt > const *

        """
        return _snap.TIntFltKd_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(TIntFltKd self) -> int

        Parameters:
            self: TKeyDat< TInt,TFlt > const *

        """
        return _snap.TIntFltKd_GetSecHashCd(self)

    __swig_destroy__ = _snap.delete_TIntFltKd
TIntFltKd.Save = new_instancemethod(_snap.TIntFltKd_Save,None,TIntFltKd)
TIntFltKd.__eq__ = new_instancemethod(_snap.TIntFltKd___eq__,None,TIntFltKd)
TIntFltKd.__lt__ = new_instancemethod(_snap.TIntFltKd___lt__,None,TIntFltKd)
TIntFltKd.GetPrimHashCd = new_instancemethod(_snap.TIntFltKd_GetPrimHashCd,None,TIntFltKd)
TIntFltKd.GetSecHashCd = new_instancemethod(_snap.TIntFltKd_GetSecHashCd,None,TIntFltKd)
TIntFltKd_swigregister = _snap.TIntFltKd_swigregister
TIntFltKd_swigregister(TIntFltKd)

class TIntV(object):
    """Proxy of C++ TVec<(TInt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TIntV
    def __init__(self, *args): 
        """
        __init__(TVec<(TInt)> self) -> TIntV
        __init__(TVec<(TInt)> self, TIntV Vec) -> TIntV

        Parameters:
            Vec: TVec< TInt,int > const &

        __init__(TVec<(TInt)> self, int const & _Vals) -> TIntV

        Parameters:
            _Vals: int const &

        __init__(TVec<(TInt)> self, int const & _MxVals, int const & _Vals) -> TIntV

        Parameters:
            _MxVals: int const &
            _Vals: int const &

        __init__(TVec<(TInt)> self, TInt _ValT, int const & _Vals) -> TIntV

        Parameters:
            _ValT: TInt *
            _Vals: int const &

        __init__(TVec<(TInt)> self, TSIn SIn) -> TIntV

        Parameters:
            SIn: TSIn &

        """
        _snap.TIntV_swiginit(self,_snap.new_TIntV(*args))
    def Load(self, *args):
        """
        Load(TIntV self, TSIn SIn)

        Parameters:
            SIn: TSIn &

        """
        return _snap.TIntV_Load(self, *args)

    def Save(self, *args):
        """
        Save(TIntV self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.TIntV_Save(self, *args)

    def __add__(self, *args):
        """
        __add__(TIntV self, TInt Val) -> TIntV

        Parameters:
            Val: TInt const &

        """
        return _snap.TIntV___add__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(TIntV self, TIntV Vec) -> bool

        Parameters:
            Vec: TVec< TInt,int > const &

        """
        return _snap.TIntV___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TIntV self, TIntV Vec) -> bool

        Parameters:
            Vec: TVec< TInt,int > const &

        """
        return _snap.TIntV___lt__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(TIntV self) -> int

        Parameters:
            self: TVec< TInt > const *

        """
        return _snap.TIntV_GetMemUsed(self)

    def GetMemSize(self):
        """
        GetMemSize(TIntV self) -> int

        Parameters:
            self: TVec< TInt > const *

        """
        return _snap.TIntV_GetMemSize(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TIntV self) -> int

        Parameters:
            self: TVec< TInt > const *

        """
        return _snap.TIntV_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(TIntV self) -> int

        Parameters:
            self: TVec< TInt > const *

        """
        return _snap.TIntV_GetSecHashCd(self)

    def Gen(self, *args):
        """
        Gen(TIntV self, int const & _Vals)

        Parameters:
            _Vals: int const &

        Gen(TIntV self, int const & _MxVals, int const & _Vals)

        Parameters:
            _MxVals: int const &
            _Vals: int const &

        """
        return _snap.TIntV_Gen(self, *args)

    def GenExt(self, *args):
        """
        GenExt(TIntV self, TInt _ValT, int const & _Vals)

        Parameters:
            _ValT: TInt *
            _Vals: int const &

        """
        return _snap.TIntV_GenExt(self, *args)

    def IsExt(self):
        """
        IsExt(TIntV self) -> bool

        Parameters:
            self: TVec< TInt > const *

        """
        return _snap.TIntV_IsExt(self)

    def Reserve(self, *args):
        """
        Reserve(TIntV self, int const & _MxVals)

        Parameters:
            _MxVals: int const &

        Reserve(TIntV self, int const & _MxVals, int const & _Vals)

        Parameters:
            _MxVals: int const &
            _Vals: int const &

        """
        return _snap.TIntV_Reserve(self, *args)

    def Clr(self, *args):
        """
        Clr(TIntV self, bool const & DoDel=True, int const & NoDelLim=-1)

        Parameters:
            DoDel: bool const &
            NoDelLim: int const &

        Clr(TIntV self, bool const & DoDel=True)

        Parameters:
            DoDel: bool const &

        Clr(TIntV self)

        Parameters:
            self: TVec< TInt > *

        """
        return _snap.TIntV_Clr(self, *args)

    def Trunc(self, *args):
        """
        Trunc(TIntV self, int const & _Vals=-1)

        Parameters:
            _Vals: int const &

        Trunc(TIntV self)

        Parameters:
            self: TVec< TInt > *

        """
        return _snap.TIntV_Trunc(self, *args)

    def Pack(self):
        """
        Pack(TIntV self)

        Parameters:
            self: TVec< TInt > *

        """
        return _snap.TIntV_Pack(self)

    def MoveFrom(self, *args):
        """
        MoveFrom(TIntV self, TIntV Vec)

        Parameters:
            Vec: TVec< TInt,int > &

        """
        return _snap.TIntV_MoveFrom(self, *args)

    def Empty(self):
        """
        Empty(TIntV self) -> bool

        Parameters:
            self: TVec< TInt > const *

        """
        return _snap.TIntV_Empty(self)

    def Len(self):
        """
        Len(TIntV self) -> int

        Parameters:
            self: TVec< TInt > const *

        """
        return _snap.TIntV_Len(self)

    def Reserved(self):
        """
        Reserved(TIntV self) -> int

        Parameters:
            self: TVec< TInt > const *

        """
        return _snap.TIntV_Reserved(self)

    def Last(self, *args):
        """
        Last(TIntV self) -> TInt
        Last(TIntV self) -> TInt

        Parameters:
            self: TVec< TInt > *

        """
        return _snap.TIntV_Last(self, *args)

    def LastValN(self):
        """
        LastValN(TIntV self) -> int

        Parameters:
            self: TVec< TInt > const *

        """
        return _snap.TIntV_LastValN(self)

    def LastLast(self, *args):
        """
        LastLast(TIntV self) -> TInt
        LastLast(TIntV self) -> TInt

        Parameters:
            self: TVec< TInt > *

        """
        return _snap.TIntV_LastLast(self, *args)

    def BegI(self):
        """
        BegI(TIntV self) -> TInt

        Parameters:
            self: TVec< TInt > const *

        """
        return _snap.TIntV_BegI(self)

    def EndI(self):
        """
        EndI(TIntV self) -> TInt

        Parameters:
            self: TVec< TInt > const *

        """
        return _snap.TIntV_EndI(self)

    def GetI(self, *args):
        """
        GetI(TIntV self, int const & ValN) -> TInt

        Parameters:
            ValN: int const &

        """
        return _snap.TIntV_GetI(self, *args)

    def Add(self, *args):
        """
        Add(TIntV self) -> int
        Add(TIntV self, TInt Val) -> int

        Parameters:
            Val: TInt const &

        Add(TIntV self, TInt Val) -> int

        Parameters:
            Val: TInt &

        Add(TIntV self, TInt Val, int const & ResizeLen) -> int

        Parameters:
            Val: TInt const &
            ResizeLen: int const &

        """
        return _snap.TIntV_Add(self, *args)

    def AddV(self, *args):
        """
        AddV(TIntV self, TIntV ValV) -> int

        Parameters:
            ValV: TVec< TInt,int > const &

        """
        return _snap.TIntV_AddV(self, *args)

    def AddSorted(self, *args):
        """
        AddSorted(TIntV self, TInt Val, bool const & Asc=True, int const & _MxVals=-1) -> int

        Parameters:
            Val: TInt const &
            Asc: bool const &
            _MxVals: int const &

        AddSorted(TIntV self, TInt Val, bool const & Asc=True) -> int

        Parameters:
            Val: TInt const &
            Asc: bool const &

        AddSorted(TIntV self, TInt Val) -> int

        Parameters:
            Val: TInt const &

        """
        return _snap.TIntV_AddSorted(self, *args)

    def AddBackSorted(self, *args):
        """
        AddBackSorted(TIntV self, TInt Val, bool const & Asc) -> int

        Parameters:
            Val: TInt const &
            Asc: bool const &

        """
        return _snap.TIntV_AddBackSorted(self, *args)

    def AddMerged(self, *args):
        """
        AddMerged(TIntV self, TInt Val) -> int

        Parameters:
            Val: TInt const &

        """
        return _snap.TIntV_AddMerged(self, *args)

    def AddVMerged(self, *args):
        """
        AddVMerged(TIntV self, TIntV ValV) -> int

        Parameters:
            ValV: TVec< TInt,int > const &

        """
        return _snap.TIntV_AddVMerged(self, *args)

    def AddUnique(self, *args):
        """
        AddUnique(TIntV self, TInt Val) -> int

        Parameters:
            Val: TInt const &

        """
        return _snap.TIntV_AddUnique(self, *args)

    def GetVal(self, *args):
        """
        GetVal(TIntV self, int const & ValN) -> TInt

        Parameters:
            ValN: int const &

        GetVal(TIntV self, int const & ValN) -> TInt

        Parameters:
            ValN: int const &

        """
        return _snap.TIntV_GetVal(self, *args)

    def SetVal(self, *args):
        """
        SetVal(TIntV self, int const & ValN, TInt Val)

        Parameters:
            ValN: int const &
            Val: TInt const &

        """
        return _snap.TIntV_SetVal(self, *args)

    def GetSubValV(self, *args):
        """
        GetSubValV(TIntV self, int const & BValN, int const & EValN, TIntV ValV)

        Parameters:
            BValN: int const &
            EValN: int const &
            ValV: TVec< TInt,int > &

        """
        return _snap.TIntV_GetSubValV(self, *args)

    def Ins(self, *args):
        """
        Ins(TIntV self, int const & ValN, TInt Val)

        Parameters:
            ValN: int const &
            Val: TInt const &

        """
        return _snap.TIntV_Ins(self, *args)

    def Del(self, *args):
        """
        Del(TIntV self, int const & ValN)

        Parameters:
            ValN: int const &

        Del(TIntV self, int const & MnValN, int const & MxValN)

        Parameters:
            MnValN: int const &
            MxValN: int const &

        """
        return _snap.TIntV_Del(self, *args)

    def DelLast(self):
        """
        DelLast(TIntV self)

        Parameters:
            self: TVec< TInt > *

        """
        return _snap.TIntV_DelLast(self)

    def DelIfIn(self, *args):
        """
        DelIfIn(TIntV self, TInt Val) -> bool

        Parameters:
            Val: TInt const &

        """
        return _snap.TIntV_DelIfIn(self, *args)

    def DelAll(self, *args):
        """
        DelAll(TIntV self, TInt Val)

        Parameters:
            Val: TInt const &

        """
        return _snap.TIntV_DelAll(self, *args)

    def PutAll(self, *args):
        """
        PutAll(TIntV self, TInt Val)

        Parameters:
            Val: TInt const &

        """
        return _snap.TIntV_PutAll(self, *args)

    def Swap(self, *args):
        """
        Swap(TIntV self, TIntV Vec)

        Parameters:
            Vec: TVec< TInt,int > &

        Swap(TIntV self, int const & ValN1, int const & ValN2)

        Parameters:
            ValN1: int const &
            ValN2: int const &

        """
        return _snap.TIntV_Swap(self, *args)

    def SwapI(*args):
        """
        SwapI(TInt LVal, TInt RVal)

        Parameters:
            LVal: TVec< TInt >::TIter
            RVal: TVec< TInt >::TIter

        """
        return _snap.TIntV_SwapI(*args)

    SwapI = staticmethod(SwapI)
    def NextPerm(self):
        """
        NextPerm(TIntV self) -> bool

        Parameters:
            self: TVec< TInt > *

        """
        return _snap.TIntV_NextPerm(self)

    def PrevPerm(self):
        """
        PrevPerm(TIntV self) -> bool

        Parameters:
            self: TVec< TInt > *

        """
        return _snap.TIntV_PrevPerm(self)

    def GetPivotValN(self, *args):
        """
        GetPivotValN(TIntV self, int const & LValN, int const & RValN) -> int

        Parameters:
            LValN: int const &
            RValN: int const &

        """
        return _snap.TIntV_GetPivotValN(self, *args)

    def BSort(self, *args):
        """
        BSort(TIntV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters:
            MnLValN: int const &
            MxRValN: int const &
            Asc: bool const &

        """
        return _snap.TIntV_BSort(self, *args)

    def ISort(self, *args):
        """
        ISort(TIntV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters:
            MnLValN: int const &
            MxRValN: int const &
            Asc: bool const &

        """
        return _snap.TIntV_ISort(self, *args)

    def Partition(self, *args):
        """
        Partition(TIntV self, int const & MnLValN, int const & MxRValN, bool const & Asc) -> int

        Parameters:
            MnLValN: int const &
            MxRValN: int const &
            Asc: bool const &

        """
        return _snap.TIntV_Partition(self, *args)

    def QSort(self, *args):
        """
        QSort(TIntV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters:
            MnLValN: int const &
            MxRValN: int const &
            Asc: bool const &

        """
        return _snap.TIntV_QSort(self, *args)

    def Sort(self, Asc=True):
        """
        Sort(TIntV self, bool const & Asc=True)

        Parameters:
            Asc: bool const &

        Sort(TIntV self)

        Parameters:
            self: TVec< TInt > *

        """
        return _snap.TIntV_Sort(self, Asc)

    def IsSorted(self, Asc=True):
        """
        IsSorted(TIntV self, bool const & Asc=True) -> bool

        Parameters:
            Asc: bool const &

        IsSorted(TIntV self) -> bool

        Parameters:
            self: TVec< TInt > const *

        """
        return _snap.TIntV_IsSorted(self, Asc)

    def Shuffle(self, *args):
        """
        Shuffle(TIntV self, TRnd Rnd)

        Parameters:
            Rnd: TRnd &

        """
        return _snap.TIntV_Shuffle(self, *args)

    def Reverse(self, *args):
        """
        Reverse(TIntV self)
        Reverse(TIntV self, int LValN, int RValN)

        Parameters:
            LValN: int
            RValN: int

        """
        return _snap.TIntV_Reverse(self, *args)

    def Merge(self):
        """
        Merge(TIntV self)

        Parameters:
            self: TVec< TInt > *

        """
        return _snap.TIntV_Merge(self)

    def Intrs(self, *args):
        """
        Intrs(TIntV self, TIntV ValV)

        Parameters:
            ValV: TVec< TInt,int > const &

        Intrs(TIntV self, TIntV ValV, TIntV DstValV)

        Parameters:
            ValV: TVec< TInt,int > const &
            DstValV: TVec< TInt,int > &

        """
        return _snap.TIntV_Intrs(self, *args)

    def Union(self, *args):
        """
        Union(TIntV self, TIntV ValV)

        Parameters:
            ValV: TVec< TInt,int > const &

        Union(TIntV self, TIntV ValV, TIntV DstValV)

        Parameters:
            ValV: TVec< TInt,int > const &
            DstValV: TVec< TInt,int > &

        """
        return _snap.TIntV_Union(self, *args)

    def Diff(self, *args):
        """
        Diff(TIntV self, TIntV ValV)

        Parameters:
            ValV: TVec< TInt,int > const &

        Diff(TIntV self, TIntV ValV, TIntV DstValV)

        Parameters:
            ValV: TVec< TInt,int > const &
            DstValV: TVec< TInt,int > &

        """
        return _snap.TIntV_Diff(self, *args)

    def IntrsLen(self, *args):
        """
        IntrsLen(TIntV self, TIntV ValV) -> int

        Parameters:
            ValV: TVec< TInt,int > const &

        """
        return _snap.TIntV_IntrsLen(self, *args)

    def UnionLen(self, *args):
        """
        UnionLen(TIntV self, TIntV ValV) -> int

        Parameters:
            ValV: TVec< TInt,int > const &

        """
        return _snap.TIntV_UnionLen(self, *args)

    def Count(self, *args):
        """
        Count(TIntV self, TInt Val) -> int

        Parameters:
            Val: TInt const &

        """
        return _snap.TIntV_Count(self, *args)

    def SearchBin(self, *args):
        """
        SearchBin(TIntV self, TInt Val) -> int

        Parameters:
            Val: TInt const &

        SearchBin(TIntV self, TInt Val, int & InsValN) -> int

        Parameters:
            Val: TInt const &
            InsValN: int &

        """
        return _snap.TIntV_SearchBin(self, *args)

    def SearchForw(self, *args):
        """
        SearchForw(TIntV self, TInt Val, int const & BValN=0) -> int

        Parameters:
            Val: TInt const &
            BValN: int const &

        SearchForw(TIntV self, TInt Val) -> int

        Parameters:
            Val: TInt const &

        """
        return _snap.TIntV_SearchForw(self, *args)

    def SearchBack(self, *args):
        """
        SearchBack(TIntV self, TInt Val) -> int

        Parameters:
            Val: TInt const &

        """
        return _snap.TIntV_SearchBack(self, *args)

    def SearchVForw(self, *args):
        """
        SearchVForw(TIntV self, TIntV ValV, int const & BValN=0) -> int

        Parameters:
            ValV: TVec< TInt,int > const &
            BValN: int const &

        SearchVForw(TIntV self, TIntV ValV) -> int

        Parameters:
            ValV: TVec< TInt,int > const &

        """
        return _snap.TIntV_SearchVForw(self, *args)

    def IsIn(self, *args):
        """
        IsIn(TIntV self, TInt Val) -> bool

        Parameters:
            Val: TInt const &

        IsIn(TIntV self, TInt Val, int & ValN) -> bool

        Parameters:
            Val: TInt const &
            ValN: int &

        """
        return _snap.TIntV_IsIn(self, *args)

    def IsInBin(self, *args):
        """
        IsInBin(TIntV self, TInt Val) -> bool

        Parameters:
            Val: TInt const &

        """
        return _snap.TIntV_IsInBin(self, *args)

    def GetDat(self, *args):
        """
        GetDat(TIntV self, TInt Val) -> TInt

        Parameters:
            Val: TInt const &

        """
        return _snap.TIntV_GetDat(self, *args)

    def GetAddDat(self, *args):
        """
        GetAddDat(TIntV self, TInt Val) -> TInt

        Parameters:
            Val: TInt const &

        """
        return _snap.TIntV_GetAddDat(self, *args)

    def GetMxValN(self):
        """
        GetMxValN(TIntV self) -> int

        Parameters:
            self: TVec< TInt > const *

        """
        return _snap.TIntV_GetMxValN(self)

    def GetV(*args):
        """
        GetV(TInt Val1) -> TIntV

        Parameters:
            Val1: TInt const &

        GetV(TInt Val1, TInt Val2) -> TIntV

        Parameters:
            Val1: TInt const &
            Val2: TInt const &

        GetV(TInt Val1, TInt Val2, TInt Val3) -> TIntV

        Parameters:
            Val1: TInt const &
            Val2: TInt const &
            Val3: TInt const &

        GetV(TInt Val1, TInt Val2, TInt Val3, TInt Val4) -> TIntV

        Parameters:
            Val1: TInt const &
            Val2: TInt const &
            Val3: TInt const &
            Val4: TInt const &

        GetV(TInt Val1, TInt Val2, TInt Val3, TInt Val4, TInt Val5) -> TIntV

        Parameters:
            Val1: TInt const &
            Val2: TInt const &
            Val3: TInt const &
            Val4: TInt const &
            Val5: TInt const &

        GetV(TInt Val1, TInt Val2, TInt Val3, TInt Val4, TInt Val5, TInt Val6) -> TIntV

        Parameters:
            Val1: TInt const &
            Val2: TInt const &
            Val3: TInt const &
            Val4: TInt const &
            Val5: TInt const &
            Val6: TInt const &

        GetV(TInt Val1, TInt Val2, TInt Val3, TInt Val4, TInt Val5, TInt Val6, TInt Val7) -> TIntV

        Parameters:
            Val1: TInt const &
            Val2: TInt const &
            Val3: TInt const &
            Val4: TInt const &
            Val5: TInt const &
            Val6: TInt const &
            Val7: TInt const &

        GetV(TInt Val1, TInt Val2, TInt Val3, TInt Val4, TInt Val5, TInt Val6, TInt Val7, TInt Val8) -> TIntV

        Parameters:
            Val1: TInt const &
            Val2: TInt const &
            Val3: TInt const &
            Val4: TInt const &
            Val5: TInt const &
            Val6: TInt const &
            Val7: TInt const &
            Val8: TInt const &

        GetV(TInt Val1, TInt Val2, TInt Val3, TInt Val4, TInt Val5, TInt Val6, TInt Val7, TInt Val8, 
            TInt Val9) -> TIntV

        Parameters:
            Val1: TInt const &
            Val2: TInt const &
            Val3: TInt const &
            Val4: TInt const &
            Val5: TInt const &
            Val6: TInt const &
            Val7: TInt const &
            Val8: TInt const &
            Val9: TInt const &

        """
        return _snap.TIntV_GetV(*args)

    GetV = staticmethod(GetV)
TIntV.Load = new_instancemethod(_snap.TIntV_Load,None,TIntV)
TIntV.Save = new_instancemethod(_snap.TIntV_Save,None,TIntV)
TIntV.__add__ = new_instancemethod(_snap.TIntV___add__,None,TIntV)
TIntV.__eq__ = new_instancemethod(_snap.TIntV___eq__,None,TIntV)
TIntV.__lt__ = new_instancemethod(_snap.TIntV___lt__,None,TIntV)
TIntV.GetMemUsed = new_instancemethod(_snap.TIntV_GetMemUsed,None,TIntV)
TIntV.GetMemSize = new_instancemethod(_snap.TIntV_GetMemSize,None,TIntV)
TIntV.GetPrimHashCd = new_instancemethod(_snap.TIntV_GetPrimHashCd,None,TIntV)
TIntV.GetSecHashCd = new_instancemethod(_snap.TIntV_GetSecHashCd,None,TIntV)
TIntV.Gen = new_instancemethod(_snap.TIntV_Gen,None,TIntV)
TIntV.GenExt = new_instancemethod(_snap.TIntV_GenExt,None,TIntV)
TIntV.IsExt = new_instancemethod(_snap.TIntV_IsExt,None,TIntV)
TIntV.Reserve = new_instancemethod(_snap.TIntV_Reserve,None,TIntV)
TIntV.Clr = new_instancemethod(_snap.TIntV_Clr,None,TIntV)
TIntV.Trunc = new_instancemethod(_snap.TIntV_Trunc,None,TIntV)
TIntV.Pack = new_instancemethod(_snap.TIntV_Pack,None,TIntV)
TIntV.MoveFrom = new_instancemethod(_snap.TIntV_MoveFrom,None,TIntV)
TIntV.Empty = new_instancemethod(_snap.TIntV_Empty,None,TIntV)
TIntV.Len = new_instancemethod(_snap.TIntV_Len,None,TIntV)
TIntV.Reserved = new_instancemethod(_snap.TIntV_Reserved,None,TIntV)
TIntV.Last = new_instancemethod(_snap.TIntV_Last,None,TIntV)
TIntV.LastValN = new_instancemethod(_snap.TIntV_LastValN,None,TIntV)
TIntV.LastLast = new_instancemethod(_snap.TIntV_LastLast,None,TIntV)
TIntV.BegI = new_instancemethod(_snap.TIntV_BegI,None,TIntV)
TIntV.EndI = new_instancemethod(_snap.TIntV_EndI,None,TIntV)
TIntV.GetI = new_instancemethod(_snap.TIntV_GetI,None,TIntV)
TIntV.Add = new_instancemethod(_snap.TIntV_Add,None,TIntV)
TIntV.AddV = new_instancemethod(_snap.TIntV_AddV,None,TIntV)
TIntV.AddSorted = new_instancemethod(_snap.TIntV_AddSorted,None,TIntV)
TIntV.AddBackSorted = new_instancemethod(_snap.TIntV_AddBackSorted,None,TIntV)
TIntV.AddMerged = new_instancemethod(_snap.TIntV_AddMerged,None,TIntV)
TIntV.AddVMerged = new_instancemethod(_snap.TIntV_AddVMerged,None,TIntV)
TIntV.AddUnique = new_instancemethod(_snap.TIntV_AddUnique,None,TIntV)
TIntV.GetVal = new_instancemethod(_snap.TIntV_GetVal,None,TIntV)
TIntV.SetVal = new_instancemethod(_snap.TIntV_SetVal,None,TIntV)
TIntV.GetSubValV = new_instancemethod(_snap.TIntV_GetSubValV,None,TIntV)
TIntV.Ins = new_instancemethod(_snap.TIntV_Ins,None,TIntV)
TIntV.Del = new_instancemethod(_snap.TIntV_Del,None,TIntV)
TIntV.DelLast = new_instancemethod(_snap.TIntV_DelLast,None,TIntV)
TIntV.DelIfIn = new_instancemethod(_snap.TIntV_DelIfIn,None,TIntV)
TIntV.DelAll = new_instancemethod(_snap.TIntV_DelAll,None,TIntV)
TIntV.PutAll = new_instancemethod(_snap.TIntV_PutAll,None,TIntV)
TIntV.Swap = new_instancemethod(_snap.TIntV_Swap,None,TIntV)
TIntV.NextPerm = new_instancemethod(_snap.TIntV_NextPerm,None,TIntV)
TIntV.PrevPerm = new_instancemethod(_snap.TIntV_PrevPerm,None,TIntV)
TIntV.GetPivotValN = new_instancemethod(_snap.TIntV_GetPivotValN,None,TIntV)
TIntV.BSort = new_instancemethod(_snap.TIntV_BSort,None,TIntV)
TIntV.ISort = new_instancemethod(_snap.TIntV_ISort,None,TIntV)
TIntV.Partition = new_instancemethod(_snap.TIntV_Partition,None,TIntV)
TIntV.QSort = new_instancemethod(_snap.TIntV_QSort,None,TIntV)
TIntV.Sort = new_instancemethod(_snap.TIntV_Sort,None,TIntV)
TIntV.IsSorted = new_instancemethod(_snap.TIntV_IsSorted,None,TIntV)
TIntV.Shuffle = new_instancemethod(_snap.TIntV_Shuffle,None,TIntV)
TIntV.Reverse = new_instancemethod(_snap.TIntV_Reverse,None,TIntV)
TIntV.Merge = new_instancemethod(_snap.TIntV_Merge,None,TIntV)
TIntV.Intrs = new_instancemethod(_snap.TIntV_Intrs,None,TIntV)
TIntV.Union = new_instancemethod(_snap.TIntV_Union,None,TIntV)
TIntV.Diff = new_instancemethod(_snap.TIntV_Diff,None,TIntV)
TIntV.IntrsLen = new_instancemethod(_snap.TIntV_IntrsLen,None,TIntV)
TIntV.UnionLen = new_instancemethod(_snap.TIntV_UnionLen,None,TIntV)
TIntV.Count = new_instancemethod(_snap.TIntV_Count,None,TIntV)
TIntV.SearchBin = new_instancemethod(_snap.TIntV_SearchBin,None,TIntV)
TIntV.SearchForw = new_instancemethod(_snap.TIntV_SearchForw,None,TIntV)
TIntV.SearchBack = new_instancemethod(_snap.TIntV_SearchBack,None,TIntV)
TIntV.SearchVForw = new_instancemethod(_snap.TIntV_SearchVForw,None,TIntV)
TIntV.IsIn = new_instancemethod(_snap.TIntV_IsIn,None,TIntV)
TIntV.IsInBin = new_instancemethod(_snap.TIntV_IsInBin,None,TIntV)
TIntV.GetDat = new_instancemethod(_snap.TIntV_GetDat,None,TIntV)
TIntV.GetAddDat = new_instancemethod(_snap.TIntV_GetAddDat,None,TIntV)
TIntV.GetMxValN = new_instancemethod(_snap.TIntV_GetMxValN,None,TIntV)
TIntV_swigregister = _snap.TIntV_swigregister
TIntV_swigregister(TIntV)

def TIntV_SwapI(*args):
  """
    TIntV_SwapI(TInt LVal, TInt RVal)

    Parameters:
        LVal: TVec< TInt >::TIter
        RVal: TVec< TInt >::TIter

    """
  return _snap.TIntV_SwapI(*args)

def TIntV_GetV(*args):
  """
    GetV(TInt Val1) -> TIntV

    Parameters:
        Val1: TInt const &

    GetV(TInt Val1, TInt Val2) -> TIntV

    Parameters:
        Val1: TInt const &
        Val2: TInt const &

    GetV(TInt Val1, TInt Val2, TInt Val3) -> TIntV

    Parameters:
        Val1: TInt const &
        Val2: TInt const &
        Val3: TInt const &

    GetV(TInt Val1, TInt Val2, TInt Val3, TInt Val4) -> TIntV

    Parameters:
        Val1: TInt const &
        Val2: TInt const &
        Val3: TInt const &
        Val4: TInt const &

    GetV(TInt Val1, TInt Val2, TInt Val3, TInt Val4, TInt Val5) -> TIntV

    Parameters:
        Val1: TInt const &
        Val2: TInt const &
        Val3: TInt const &
        Val4: TInt const &
        Val5: TInt const &

    GetV(TInt Val1, TInt Val2, TInt Val3, TInt Val4, TInt Val5, TInt Val6) -> TIntV

    Parameters:
        Val1: TInt const &
        Val2: TInt const &
        Val3: TInt const &
        Val4: TInt const &
        Val5: TInt const &
        Val6: TInt const &

    GetV(TInt Val1, TInt Val2, TInt Val3, TInt Val4, TInt Val5, TInt Val6, TInt Val7) -> TIntV

    Parameters:
        Val1: TInt const &
        Val2: TInt const &
        Val3: TInt const &
        Val4: TInt const &
        Val5: TInt const &
        Val6: TInt const &
        Val7: TInt const &

    GetV(TInt Val1, TInt Val2, TInt Val3, TInt Val4, TInt Val5, TInt Val6, TInt Val7, TInt Val8) -> TIntV

    Parameters:
        Val1: TInt const &
        Val2: TInt const &
        Val3: TInt const &
        Val4: TInt const &
        Val5: TInt const &
        Val6: TInt const &
        Val7: TInt const &
        Val8: TInt const &

    TIntV_GetV(TInt Val1, TInt Val2, TInt Val3, TInt Val4, TInt Val5, TInt Val6, TInt Val7, TInt Val8, 
        TInt Val9) -> TIntV

    Parameters:
        Val1: TInt const &
        Val2: TInt const &
        Val3: TInt const &
        Val4: TInt const &
        Val5: TInt const &
        Val6: TInt const &
        Val7: TInt const &
        Val8: TInt const &
        Val9: TInt const &

    """
  return _snap.TIntV_GetV(*args)

class TFltV(object):
    """Proxy of C++ TVec<(TFlt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TFltV
    def __init__(self, *args): 
        """
        __init__(TVec<(TFlt)> self) -> TFltV
        __init__(TVec<(TFlt)> self, TFltV Vec) -> TFltV

        Parameters:
            Vec: TVec< TFlt,int > const &

        __init__(TVec<(TFlt)> self, int const & _Vals) -> TFltV

        Parameters:
            _Vals: int const &

        __init__(TVec<(TFlt)> self, int const & _MxVals, int const & _Vals) -> TFltV

        Parameters:
            _MxVals: int const &
            _Vals: int const &

        __init__(TVec<(TFlt)> self, TFlt _ValT, int const & _Vals) -> TFltV

        Parameters:
            _ValT: TFlt *
            _Vals: int const &

        __init__(TVec<(TFlt)> self, TSIn SIn) -> TFltV

        Parameters:
            SIn: TSIn &

        """
        _snap.TFltV_swiginit(self,_snap.new_TFltV(*args))
    def Load(self, *args):
        """
        Load(TFltV self, TSIn SIn)

        Parameters:
            SIn: TSIn &

        """
        return _snap.TFltV_Load(self, *args)

    def Save(self, *args):
        """
        Save(TFltV self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.TFltV_Save(self, *args)

    def __add__(self, *args):
        """
        __add__(TFltV self, TFlt Val) -> TFltV

        Parameters:
            Val: TFlt const &

        """
        return _snap.TFltV___add__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(TFltV self, TFltV Vec) -> bool

        Parameters:
            Vec: TVec< TFlt,int > const &

        """
        return _snap.TFltV___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TFltV self, TFltV Vec) -> bool

        Parameters:
            Vec: TVec< TFlt,int > const &

        """
        return _snap.TFltV___lt__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(TFltV self) -> int

        Parameters:
            self: TVec< TFlt > const *

        """
        return _snap.TFltV_GetMemUsed(self)

    def GetMemSize(self):
        """
        GetMemSize(TFltV self) -> int

        Parameters:
            self: TVec< TFlt > const *

        """
        return _snap.TFltV_GetMemSize(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TFltV self) -> int

        Parameters:
            self: TVec< TFlt > const *

        """
        return _snap.TFltV_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(TFltV self) -> int

        Parameters:
            self: TVec< TFlt > const *

        """
        return _snap.TFltV_GetSecHashCd(self)

    def Gen(self, *args):
        """
        Gen(TFltV self, int const & _Vals)

        Parameters:
            _Vals: int const &

        Gen(TFltV self, int const & _MxVals, int const & _Vals)

        Parameters:
            _MxVals: int const &
            _Vals: int const &

        """
        return _snap.TFltV_Gen(self, *args)

    def GenExt(self, *args):
        """
        GenExt(TFltV self, TFlt _ValT, int const & _Vals)

        Parameters:
            _ValT: TFlt *
            _Vals: int const &

        """
        return _snap.TFltV_GenExt(self, *args)

    def IsExt(self):
        """
        IsExt(TFltV self) -> bool

        Parameters:
            self: TVec< TFlt > const *

        """
        return _snap.TFltV_IsExt(self)

    def Reserve(self, *args):
        """
        Reserve(TFltV self, int const & _MxVals)

        Parameters:
            _MxVals: int const &

        Reserve(TFltV self, int const & _MxVals, int const & _Vals)

        Parameters:
            _MxVals: int const &
            _Vals: int const &

        """
        return _snap.TFltV_Reserve(self, *args)

    def Clr(self, *args):
        """
        Clr(TFltV self, bool const & DoDel=True, int const & NoDelLim=-1)

        Parameters:
            DoDel: bool const &
            NoDelLim: int const &

        Clr(TFltV self, bool const & DoDel=True)

        Parameters:
            DoDel: bool const &

        Clr(TFltV self)

        Parameters:
            self: TVec< TFlt > *

        """
        return _snap.TFltV_Clr(self, *args)

    def Trunc(self, *args):
        """
        Trunc(TFltV self, int const & _Vals=-1)

        Parameters:
            _Vals: int const &

        Trunc(TFltV self)

        Parameters:
            self: TVec< TFlt > *

        """
        return _snap.TFltV_Trunc(self, *args)

    def Pack(self):
        """
        Pack(TFltV self)

        Parameters:
            self: TVec< TFlt > *

        """
        return _snap.TFltV_Pack(self)

    def MoveFrom(self, *args):
        """
        MoveFrom(TFltV self, TFltV Vec)

        Parameters:
            Vec: TVec< TFlt,int > &

        """
        return _snap.TFltV_MoveFrom(self, *args)

    def Empty(self):
        """
        Empty(TFltV self) -> bool

        Parameters:
            self: TVec< TFlt > const *

        """
        return _snap.TFltV_Empty(self)

    def Len(self):
        """
        Len(TFltV self) -> int

        Parameters:
            self: TVec< TFlt > const *

        """
        return _snap.TFltV_Len(self)

    def Reserved(self):
        """
        Reserved(TFltV self) -> int

        Parameters:
            self: TVec< TFlt > const *

        """
        return _snap.TFltV_Reserved(self)

    def Last(self, *args):
        """
        Last(TFltV self) -> TFlt
        Last(TFltV self) -> TFlt

        Parameters:
            self: TVec< TFlt > *

        """
        return _snap.TFltV_Last(self, *args)

    def LastValN(self):
        """
        LastValN(TFltV self) -> int

        Parameters:
            self: TVec< TFlt > const *

        """
        return _snap.TFltV_LastValN(self)

    def LastLast(self, *args):
        """
        LastLast(TFltV self) -> TFlt
        LastLast(TFltV self) -> TFlt

        Parameters:
            self: TVec< TFlt > *

        """
        return _snap.TFltV_LastLast(self, *args)

    def BegI(self):
        """
        BegI(TFltV self) -> TFlt

        Parameters:
            self: TVec< TFlt > const *

        """
        return _snap.TFltV_BegI(self)

    def EndI(self):
        """
        EndI(TFltV self) -> TFlt

        Parameters:
            self: TVec< TFlt > const *

        """
        return _snap.TFltV_EndI(self)

    def GetI(self, *args):
        """
        GetI(TFltV self, int const & ValN) -> TFlt

        Parameters:
            ValN: int const &

        """
        return _snap.TFltV_GetI(self, *args)

    def Add(self, *args):
        """
        Add(TFltV self) -> int
        Add(TFltV self, TFlt Val) -> int

        Parameters:
            Val: TFlt const &

        Add(TFltV self, TFlt Val) -> int

        Parameters:
            Val: TFlt &

        Add(TFltV self, TFlt Val, int const & ResizeLen) -> int

        Parameters:
            Val: TFlt const &
            ResizeLen: int const &

        """
        return _snap.TFltV_Add(self, *args)

    def AddV(self, *args):
        """
        AddV(TFltV self, TFltV ValV) -> int

        Parameters:
            ValV: TVec< TFlt,int > const &

        """
        return _snap.TFltV_AddV(self, *args)

    def AddSorted(self, *args):
        """
        AddSorted(TFltV self, TFlt Val, bool const & Asc=True, int const & _MxVals=-1) -> int

        Parameters:
            Val: TFlt const &
            Asc: bool const &
            _MxVals: int const &

        AddSorted(TFltV self, TFlt Val, bool const & Asc=True) -> int

        Parameters:
            Val: TFlt const &
            Asc: bool const &

        AddSorted(TFltV self, TFlt Val) -> int

        Parameters:
            Val: TFlt const &

        """
        return _snap.TFltV_AddSorted(self, *args)

    def AddBackSorted(self, *args):
        """
        AddBackSorted(TFltV self, TFlt Val, bool const & Asc) -> int

        Parameters:
            Val: TFlt const &
            Asc: bool const &

        """
        return _snap.TFltV_AddBackSorted(self, *args)

    def AddMerged(self, *args):
        """
        AddMerged(TFltV self, TFlt Val) -> int

        Parameters:
            Val: TFlt const &

        """
        return _snap.TFltV_AddMerged(self, *args)

    def AddVMerged(self, *args):
        """
        AddVMerged(TFltV self, TFltV ValV) -> int

        Parameters:
            ValV: TVec< TFlt,int > const &

        """
        return _snap.TFltV_AddVMerged(self, *args)

    def AddUnique(self, *args):
        """
        AddUnique(TFltV self, TFlt Val) -> int

        Parameters:
            Val: TFlt const &

        """
        return _snap.TFltV_AddUnique(self, *args)

    def GetVal(self, *args):
        """
        GetVal(TFltV self, int const & ValN) -> TFlt

        Parameters:
            ValN: int const &

        GetVal(TFltV self, int const & ValN) -> TFlt

        Parameters:
            ValN: int const &

        """
        return _snap.TFltV_GetVal(self, *args)

    def SetVal(self, *args):
        """
        SetVal(TFltV self, int const & ValN, TFlt Val)

        Parameters:
            ValN: int const &
            Val: TFlt const &

        """
        return _snap.TFltV_SetVal(self, *args)

    def GetSubValV(self, *args):
        """
        GetSubValV(TFltV self, int const & BValN, int const & EValN, TFltV ValV)

        Parameters:
            BValN: int const &
            EValN: int const &
            ValV: TVec< TFlt,int > &

        """
        return _snap.TFltV_GetSubValV(self, *args)

    def Ins(self, *args):
        """
        Ins(TFltV self, int const & ValN, TFlt Val)

        Parameters:
            ValN: int const &
            Val: TFlt const &

        """
        return _snap.TFltV_Ins(self, *args)

    def Del(self, *args):
        """
        Del(TFltV self, int const & ValN)

        Parameters:
            ValN: int const &

        Del(TFltV self, int const & MnValN, int const & MxValN)

        Parameters:
            MnValN: int const &
            MxValN: int const &

        """
        return _snap.TFltV_Del(self, *args)

    def DelLast(self):
        """
        DelLast(TFltV self)

        Parameters:
            self: TVec< TFlt > *

        """
        return _snap.TFltV_DelLast(self)

    def DelIfIn(self, *args):
        """
        DelIfIn(TFltV self, TFlt Val) -> bool

        Parameters:
            Val: TFlt const &

        """
        return _snap.TFltV_DelIfIn(self, *args)

    def DelAll(self, *args):
        """
        DelAll(TFltV self, TFlt Val)

        Parameters:
            Val: TFlt const &

        """
        return _snap.TFltV_DelAll(self, *args)

    def PutAll(self, *args):
        """
        PutAll(TFltV self, TFlt Val)

        Parameters:
            Val: TFlt const &

        """
        return _snap.TFltV_PutAll(self, *args)

    def Swap(self, *args):
        """
        Swap(TFltV self, TFltV Vec)

        Parameters:
            Vec: TVec< TFlt,int > &

        Swap(TFltV self, int const & ValN1, int const & ValN2)

        Parameters:
            ValN1: int const &
            ValN2: int const &

        """
        return _snap.TFltV_Swap(self, *args)

    def SwapI(*args):
        """
        SwapI(TFlt LVal, TFlt RVal)

        Parameters:
            LVal: TVec< TFlt >::TIter
            RVal: TVec< TFlt >::TIter

        """
        return _snap.TFltV_SwapI(*args)

    SwapI = staticmethod(SwapI)
    def NextPerm(self):
        """
        NextPerm(TFltV self) -> bool

        Parameters:
            self: TVec< TFlt > *

        """
        return _snap.TFltV_NextPerm(self)

    def PrevPerm(self):
        """
        PrevPerm(TFltV self) -> bool

        Parameters:
            self: TVec< TFlt > *

        """
        return _snap.TFltV_PrevPerm(self)

    def GetPivotValN(self, *args):
        """
        GetPivotValN(TFltV self, int const & LValN, int const & RValN) -> int

        Parameters:
            LValN: int const &
            RValN: int const &

        """
        return _snap.TFltV_GetPivotValN(self, *args)

    def BSort(self, *args):
        """
        BSort(TFltV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters:
            MnLValN: int const &
            MxRValN: int const &
            Asc: bool const &

        """
        return _snap.TFltV_BSort(self, *args)

    def ISort(self, *args):
        """
        ISort(TFltV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters:
            MnLValN: int const &
            MxRValN: int const &
            Asc: bool const &

        """
        return _snap.TFltV_ISort(self, *args)

    def Partition(self, *args):
        """
        Partition(TFltV self, int const & MnLValN, int const & MxRValN, bool const & Asc) -> int

        Parameters:
            MnLValN: int const &
            MxRValN: int const &
            Asc: bool const &

        """
        return _snap.TFltV_Partition(self, *args)

    def QSort(self, *args):
        """
        QSort(TFltV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters:
            MnLValN: int const &
            MxRValN: int const &
            Asc: bool const &

        """
        return _snap.TFltV_QSort(self, *args)

    def Sort(self, Asc=True):
        """
        Sort(TFltV self, bool const & Asc=True)

        Parameters:
            Asc: bool const &

        Sort(TFltV self)

        Parameters:
            self: TVec< TFlt > *

        """
        return _snap.TFltV_Sort(self, Asc)

    def IsSorted(self, Asc=True):
        """
        IsSorted(TFltV self, bool const & Asc=True) -> bool

        Parameters:
            Asc: bool const &

        IsSorted(TFltV self) -> bool

        Parameters:
            self: TVec< TFlt > const *

        """
        return _snap.TFltV_IsSorted(self, Asc)

    def Shuffle(self, *args):
        """
        Shuffle(TFltV self, TRnd Rnd)

        Parameters:
            Rnd: TRnd &

        """
        return _snap.TFltV_Shuffle(self, *args)

    def Reverse(self, *args):
        """
        Reverse(TFltV self)
        Reverse(TFltV self, int LValN, int RValN)

        Parameters:
            LValN: int
            RValN: int

        """
        return _snap.TFltV_Reverse(self, *args)

    def Merge(self):
        """
        Merge(TFltV self)

        Parameters:
            self: TVec< TFlt > *

        """
        return _snap.TFltV_Merge(self)

    def Intrs(self, *args):
        """
        Intrs(TFltV self, TFltV ValV)

        Parameters:
            ValV: TVec< TFlt,int > const &

        Intrs(TFltV self, TFltV ValV, TFltV DstValV)

        Parameters:
            ValV: TVec< TFlt,int > const &
            DstValV: TVec< TFlt,int > &

        """
        return _snap.TFltV_Intrs(self, *args)

    def Union(self, *args):
        """
        Union(TFltV self, TFltV ValV)

        Parameters:
            ValV: TVec< TFlt,int > const &

        Union(TFltV self, TFltV ValV, TFltV DstValV)

        Parameters:
            ValV: TVec< TFlt,int > const &
            DstValV: TVec< TFlt,int > &

        """
        return _snap.TFltV_Union(self, *args)

    def Diff(self, *args):
        """
        Diff(TFltV self, TFltV ValV)

        Parameters:
            ValV: TVec< TFlt,int > const &

        Diff(TFltV self, TFltV ValV, TFltV DstValV)

        Parameters:
            ValV: TVec< TFlt,int > const &
            DstValV: TVec< TFlt,int > &

        """
        return _snap.TFltV_Diff(self, *args)

    def IntrsLen(self, *args):
        """
        IntrsLen(TFltV self, TFltV ValV) -> int

        Parameters:
            ValV: TVec< TFlt,int > const &

        """
        return _snap.TFltV_IntrsLen(self, *args)

    def UnionLen(self, *args):
        """
        UnionLen(TFltV self, TFltV ValV) -> int

        Parameters:
            ValV: TVec< TFlt,int > const &

        """
        return _snap.TFltV_UnionLen(self, *args)

    def Count(self, *args):
        """
        Count(TFltV self, TFlt Val) -> int

        Parameters:
            Val: TFlt const &

        """
        return _snap.TFltV_Count(self, *args)

    def SearchBin(self, *args):
        """
        SearchBin(TFltV self, TFlt Val) -> int

        Parameters:
            Val: TFlt const &

        SearchBin(TFltV self, TFlt Val, int & InsValN) -> int

        Parameters:
            Val: TFlt const &
            InsValN: int &

        """
        return _snap.TFltV_SearchBin(self, *args)

    def SearchForw(self, *args):
        """
        SearchForw(TFltV self, TFlt Val, int const & BValN=0) -> int

        Parameters:
            Val: TFlt const &
            BValN: int const &

        SearchForw(TFltV self, TFlt Val) -> int

        Parameters:
            Val: TFlt const &

        """
        return _snap.TFltV_SearchForw(self, *args)

    def SearchBack(self, *args):
        """
        SearchBack(TFltV self, TFlt Val) -> int

        Parameters:
            Val: TFlt const &

        """
        return _snap.TFltV_SearchBack(self, *args)

    def SearchVForw(self, *args):
        """
        SearchVForw(TFltV self, TFltV ValV, int const & BValN=0) -> int

        Parameters:
            ValV: TVec< TFlt,int > const &
            BValN: int const &

        SearchVForw(TFltV self, TFltV ValV) -> int

        Parameters:
            ValV: TVec< TFlt,int > const &

        """
        return _snap.TFltV_SearchVForw(self, *args)

    def IsIn(self, *args):
        """
        IsIn(TFltV self, TFlt Val) -> bool

        Parameters:
            Val: TFlt const &

        IsIn(TFltV self, TFlt Val, int & ValN) -> bool

        Parameters:
            Val: TFlt const &
            ValN: int &

        """
        return _snap.TFltV_IsIn(self, *args)

    def IsInBin(self, *args):
        """
        IsInBin(TFltV self, TFlt Val) -> bool

        Parameters:
            Val: TFlt const &

        """
        return _snap.TFltV_IsInBin(self, *args)

    def GetDat(self, *args):
        """
        GetDat(TFltV self, TFlt Val) -> TFlt

        Parameters:
            Val: TFlt const &

        """
        return _snap.TFltV_GetDat(self, *args)

    def GetAddDat(self, *args):
        """
        GetAddDat(TFltV self, TFlt Val) -> TFlt

        Parameters:
            Val: TFlt const &

        """
        return _snap.TFltV_GetAddDat(self, *args)

    def GetMxValN(self):
        """
        GetMxValN(TFltV self) -> int

        Parameters:
            self: TVec< TFlt > const *

        """
        return _snap.TFltV_GetMxValN(self)

    def GetV(*args):
        """
        GetV(TFlt Val1) -> TFltV

        Parameters:
            Val1: TFlt const &

        GetV(TFlt Val1, TFlt Val2) -> TFltV

        Parameters:
            Val1: TFlt const &
            Val2: TFlt const &

        GetV(TFlt Val1, TFlt Val2, TFlt Val3) -> TFltV

        Parameters:
            Val1: TFlt const &
            Val2: TFlt const &
            Val3: TFlt const &

        GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4) -> TFltV

        Parameters:
            Val1: TFlt const &
            Val2: TFlt const &
            Val3: TFlt const &
            Val4: TFlt const &

        GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4, TFlt Val5) -> TFltV

        Parameters:
            Val1: TFlt const &
            Val2: TFlt const &
            Val3: TFlt const &
            Val4: TFlt const &
            Val5: TFlt const &

        GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4, TFlt Val5, TFlt Val6) -> TFltV

        Parameters:
            Val1: TFlt const &
            Val2: TFlt const &
            Val3: TFlt const &
            Val4: TFlt const &
            Val5: TFlt const &
            Val6: TFlt const &

        GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4, TFlt Val5, TFlt Val6, TFlt Val7) -> TFltV

        Parameters:
            Val1: TFlt const &
            Val2: TFlt const &
            Val3: TFlt const &
            Val4: TFlt const &
            Val5: TFlt const &
            Val6: TFlt const &
            Val7: TFlt const &

        GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4, TFlt Val5, TFlt Val6, TFlt Val7, TFlt Val8) -> TFltV

        Parameters:
            Val1: TFlt const &
            Val2: TFlt const &
            Val3: TFlt const &
            Val4: TFlt const &
            Val5: TFlt const &
            Val6: TFlt const &
            Val7: TFlt const &
            Val8: TFlt const &

        GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4, TFlt Val5, TFlt Val6, TFlt Val7, TFlt Val8, 
            TFlt Val9) -> TFltV

        Parameters:
            Val1: TFlt const &
            Val2: TFlt const &
            Val3: TFlt const &
            Val4: TFlt const &
            Val5: TFlt const &
            Val6: TFlt const &
            Val7: TFlt const &
            Val8: TFlt const &
            Val9: TFlt const &

        """
        return _snap.TFltV_GetV(*args)

    GetV = staticmethod(GetV)
TFltV.Load = new_instancemethod(_snap.TFltV_Load,None,TFltV)
TFltV.Save = new_instancemethod(_snap.TFltV_Save,None,TFltV)
TFltV.__add__ = new_instancemethod(_snap.TFltV___add__,None,TFltV)
TFltV.__eq__ = new_instancemethod(_snap.TFltV___eq__,None,TFltV)
TFltV.__lt__ = new_instancemethod(_snap.TFltV___lt__,None,TFltV)
TFltV.GetMemUsed = new_instancemethod(_snap.TFltV_GetMemUsed,None,TFltV)
TFltV.GetMemSize = new_instancemethod(_snap.TFltV_GetMemSize,None,TFltV)
TFltV.GetPrimHashCd = new_instancemethod(_snap.TFltV_GetPrimHashCd,None,TFltV)
TFltV.GetSecHashCd = new_instancemethod(_snap.TFltV_GetSecHashCd,None,TFltV)
TFltV.Gen = new_instancemethod(_snap.TFltV_Gen,None,TFltV)
TFltV.GenExt = new_instancemethod(_snap.TFltV_GenExt,None,TFltV)
TFltV.IsExt = new_instancemethod(_snap.TFltV_IsExt,None,TFltV)
TFltV.Reserve = new_instancemethod(_snap.TFltV_Reserve,None,TFltV)
TFltV.Clr = new_instancemethod(_snap.TFltV_Clr,None,TFltV)
TFltV.Trunc = new_instancemethod(_snap.TFltV_Trunc,None,TFltV)
TFltV.Pack = new_instancemethod(_snap.TFltV_Pack,None,TFltV)
TFltV.MoveFrom = new_instancemethod(_snap.TFltV_MoveFrom,None,TFltV)
TFltV.Empty = new_instancemethod(_snap.TFltV_Empty,None,TFltV)
TFltV.Len = new_instancemethod(_snap.TFltV_Len,None,TFltV)
TFltV.Reserved = new_instancemethod(_snap.TFltV_Reserved,None,TFltV)
TFltV.Last = new_instancemethod(_snap.TFltV_Last,None,TFltV)
TFltV.LastValN = new_instancemethod(_snap.TFltV_LastValN,None,TFltV)
TFltV.LastLast = new_instancemethod(_snap.TFltV_LastLast,None,TFltV)
TFltV.BegI = new_instancemethod(_snap.TFltV_BegI,None,TFltV)
TFltV.EndI = new_instancemethod(_snap.TFltV_EndI,None,TFltV)
TFltV.GetI = new_instancemethod(_snap.TFltV_GetI,None,TFltV)
TFltV.Add = new_instancemethod(_snap.TFltV_Add,None,TFltV)
TFltV.AddV = new_instancemethod(_snap.TFltV_AddV,None,TFltV)
TFltV.AddSorted = new_instancemethod(_snap.TFltV_AddSorted,None,TFltV)
TFltV.AddBackSorted = new_instancemethod(_snap.TFltV_AddBackSorted,None,TFltV)
TFltV.AddMerged = new_instancemethod(_snap.TFltV_AddMerged,None,TFltV)
TFltV.AddVMerged = new_instancemethod(_snap.TFltV_AddVMerged,None,TFltV)
TFltV.AddUnique = new_instancemethod(_snap.TFltV_AddUnique,None,TFltV)
TFltV.GetVal = new_instancemethod(_snap.TFltV_GetVal,None,TFltV)
TFltV.SetVal = new_instancemethod(_snap.TFltV_SetVal,None,TFltV)
TFltV.GetSubValV = new_instancemethod(_snap.TFltV_GetSubValV,None,TFltV)
TFltV.Ins = new_instancemethod(_snap.TFltV_Ins,None,TFltV)
TFltV.Del = new_instancemethod(_snap.TFltV_Del,None,TFltV)
TFltV.DelLast = new_instancemethod(_snap.TFltV_DelLast,None,TFltV)
TFltV.DelIfIn = new_instancemethod(_snap.TFltV_DelIfIn,None,TFltV)
TFltV.DelAll = new_instancemethod(_snap.TFltV_DelAll,None,TFltV)
TFltV.PutAll = new_instancemethod(_snap.TFltV_PutAll,None,TFltV)
TFltV.Swap = new_instancemethod(_snap.TFltV_Swap,None,TFltV)
TFltV.NextPerm = new_instancemethod(_snap.TFltV_NextPerm,None,TFltV)
TFltV.PrevPerm = new_instancemethod(_snap.TFltV_PrevPerm,None,TFltV)
TFltV.GetPivotValN = new_instancemethod(_snap.TFltV_GetPivotValN,None,TFltV)
TFltV.BSort = new_instancemethod(_snap.TFltV_BSort,None,TFltV)
TFltV.ISort = new_instancemethod(_snap.TFltV_ISort,None,TFltV)
TFltV.Partition = new_instancemethod(_snap.TFltV_Partition,None,TFltV)
TFltV.QSort = new_instancemethod(_snap.TFltV_QSort,None,TFltV)
TFltV.Sort = new_instancemethod(_snap.TFltV_Sort,None,TFltV)
TFltV.IsSorted = new_instancemethod(_snap.TFltV_IsSorted,None,TFltV)
TFltV.Shuffle = new_instancemethod(_snap.TFltV_Shuffle,None,TFltV)
TFltV.Reverse = new_instancemethod(_snap.TFltV_Reverse,None,TFltV)
TFltV.Merge = new_instancemethod(_snap.TFltV_Merge,None,TFltV)
TFltV.Intrs = new_instancemethod(_snap.TFltV_Intrs,None,TFltV)
TFltV.Union = new_instancemethod(_snap.TFltV_Union,None,TFltV)
TFltV.Diff = new_instancemethod(_snap.TFltV_Diff,None,TFltV)
TFltV.IntrsLen = new_instancemethod(_snap.TFltV_IntrsLen,None,TFltV)
TFltV.UnionLen = new_instancemethod(_snap.TFltV_UnionLen,None,TFltV)
TFltV.Count = new_instancemethod(_snap.TFltV_Count,None,TFltV)
TFltV.SearchBin = new_instancemethod(_snap.TFltV_SearchBin,None,TFltV)
TFltV.SearchForw = new_instancemethod(_snap.TFltV_SearchForw,None,TFltV)
TFltV.SearchBack = new_instancemethod(_snap.TFltV_SearchBack,None,TFltV)
TFltV.SearchVForw = new_instancemethod(_snap.TFltV_SearchVForw,None,TFltV)
TFltV.IsIn = new_instancemethod(_snap.TFltV_IsIn,None,TFltV)
TFltV.IsInBin = new_instancemethod(_snap.TFltV_IsInBin,None,TFltV)
TFltV.GetDat = new_instancemethod(_snap.TFltV_GetDat,None,TFltV)
TFltV.GetAddDat = new_instancemethod(_snap.TFltV_GetAddDat,None,TFltV)
TFltV.GetMxValN = new_instancemethod(_snap.TFltV_GetMxValN,None,TFltV)
TFltV_swigregister = _snap.TFltV_swigregister
TFltV_swigregister(TFltV)

def TFltV_SwapI(*args):
  """
    TFltV_SwapI(TFlt LVal, TFlt RVal)

    Parameters:
        LVal: TVec< TFlt >::TIter
        RVal: TVec< TFlt >::TIter

    """
  return _snap.TFltV_SwapI(*args)

def TFltV_GetV(*args):
  """
    GetV(TFlt Val1) -> TFltV

    Parameters:
        Val1: TFlt const &

    GetV(TFlt Val1, TFlt Val2) -> TFltV

    Parameters:
        Val1: TFlt const &
        Val2: TFlt const &

    GetV(TFlt Val1, TFlt Val2, TFlt Val3) -> TFltV

    Parameters:
        Val1: TFlt const &
        Val2: TFlt const &
        Val3: TFlt const &

    GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4) -> TFltV

    Parameters:
        Val1: TFlt const &
        Val2: TFlt const &
        Val3: TFlt const &
        Val4: TFlt const &

    GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4, TFlt Val5) -> TFltV

    Parameters:
        Val1: TFlt const &
        Val2: TFlt const &
        Val3: TFlt const &
        Val4: TFlt const &
        Val5: TFlt const &

    GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4, TFlt Val5, TFlt Val6) -> TFltV

    Parameters:
        Val1: TFlt const &
        Val2: TFlt const &
        Val3: TFlt const &
        Val4: TFlt const &
        Val5: TFlt const &
        Val6: TFlt const &

    GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4, TFlt Val5, TFlt Val6, TFlt Val7) -> TFltV

    Parameters:
        Val1: TFlt const &
        Val2: TFlt const &
        Val3: TFlt const &
        Val4: TFlt const &
        Val5: TFlt const &
        Val6: TFlt const &
        Val7: TFlt const &

    GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4, TFlt Val5, TFlt Val6, TFlt Val7, TFlt Val8) -> TFltV

    Parameters:
        Val1: TFlt const &
        Val2: TFlt const &
        Val3: TFlt const &
        Val4: TFlt const &
        Val5: TFlt const &
        Val6: TFlt const &
        Val7: TFlt const &
        Val8: TFlt const &

    TFltV_GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4, TFlt Val5, TFlt Val6, TFlt Val7, TFlt Val8, 
        TFlt Val9) -> TFltV

    Parameters:
        Val1: TFlt const &
        Val2: TFlt const &
        Val3: TFlt const &
        Val4: TFlt const &
        Val5: TFlt const &
        Val6: TFlt const &
        Val7: TFlt const &
        Val8: TFlt const &
        Val9: TFlt const &

    """
  return _snap.TFltV_GetV(*args)

class TIntPrV(object):
    """Proxy of C++ TVec<(TIntPr)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TIntPrV
    def __init__(self, *args): 
        """
        __init__(TVec<(TIntPr)> self) -> TIntPrV
        __init__(TVec<(TIntPr)> self, TIntPrV Vec) -> TIntPrV

        Parameters:
            Vec: TVec< TPair< TInt,TInt >,int > const &

        __init__(TVec<(TIntPr)> self, int const & _Vals) -> TIntPrV

        Parameters:
            _Vals: int const &

        __init__(TVec<(TIntPr)> self, int const & _MxVals, int const & _Vals) -> TIntPrV

        Parameters:
            _MxVals: int const &
            _Vals: int const &

        __init__(TVec<(TIntPr)> self, TIntPr _ValT, int const & _Vals) -> TIntPrV

        Parameters:
            _ValT: TPair< TInt,TInt > *
            _Vals: int const &

        __init__(TVec<(TIntPr)> self, TSIn SIn) -> TIntPrV

        Parameters:
            SIn: TSIn &

        """
        _snap.TIntPrV_swiginit(self,_snap.new_TIntPrV(*args))
    def Load(self, *args):
        """
        Load(TIntPrV self, TSIn SIn)

        Parameters:
            SIn: TSIn &

        """
        return _snap.TIntPrV_Load(self, *args)

    def Save(self, *args):
        """
        Save(TIntPrV self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.TIntPrV_Save(self, *args)

    def __add__(self, *args):
        """
        __add__(TIntPrV self, TIntPr Val) -> TIntPrV

        Parameters:
            Val: TPair< TInt,TInt > const &

        """
        return _snap.TIntPrV___add__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(TIntPrV self, TIntPrV Vec) -> bool

        Parameters:
            Vec: TVec< TPair< TInt,TInt >,int > const &

        """
        return _snap.TIntPrV___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TIntPrV self, TIntPrV Vec) -> bool

        Parameters:
            Vec: TVec< TPair< TInt,TInt >,int > const &

        """
        return _snap.TIntPrV___lt__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(TIntPrV self) -> int

        Parameters:
            self: TVec< TIntPr > const *

        """
        return _snap.TIntPrV_GetMemUsed(self)

    def GetMemSize(self):
        """
        GetMemSize(TIntPrV self) -> int

        Parameters:
            self: TVec< TIntPr > const *

        """
        return _snap.TIntPrV_GetMemSize(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TIntPrV self) -> int

        Parameters:
            self: TVec< TIntPr > const *

        """
        return _snap.TIntPrV_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(TIntPrV self) -> int

        Parameters:
            self: TVec< TIntPr > const *

        """
        return _snap.TIntPrV_GetSecHashCd(self)

    def Gen(self, *args):
        """
        Gen(TIntPrV self, int const & _Vals)

        Parameters:
            _Vals: int const &

        Gen(TIntPrV self, int const & _MxVals, int const & _Vals)

        Parameters:
            _MxVals: int const &
            _Vals: int const &

        """
        return _snap.TIntPrV_Gen(self, *args)

    def GenExt(self, *args):
        """
        GenExt(TIntPrV self, TIntPr _ValT, int const & _Vals)

        Parameters:
            _ValT: TPair< TInt,TInt > *
            _Vals: int const &

        """
        return _snap.TIntPrV_GenExt(self, *args)

    def IsExt(self):
        """
        IsExt(TIntPrV self) -> bool

        Parameters:
            self: TVec< TIntPr > const *

        """
        return _snap.TIntPrV_IsExt(self)

    def Reserve(self, *args):
        """
        Reserve(TIntPrV self, int const & _MxVals)

        Parameters:
            _MxVals: int const &

        Reserve(TIntPrV self, int const & _MxVals, int const & _Vals)

        Parameters:
            _MxVals: int const &
            _Vals: int const &

        """
        return _snap.TIntPrV_Reserve(self, *args)

    def Clr(self, *args):
        """
        Clr(TIntPrV self, bool const & DoDel=True, int const & NoDelLim=-1)

        Parameters:
            DoDel: bool const &
            NoDelLim: int const &

        Clr(TIntPrV self, bool const & DoDel=True)

        Parameters:
            DoDel: bool const &

        Clr(TIntPrV self)

        Parameters:
            self: TVec< TIntPr > *

        """
        return _snap.TIntPrV_Clr(self, *args)

    def Trunc(self, *args):
        """
        Trunc(TIntPrV self, int const & _Vals=-1)

        Parameters:
            _Vals: int const &

        Trunc(TIntPrV self)

        Parameters:
            self: TVec< TIntPr > *

        """
        return _snap.TIntPrV_Trunc(self, *args)

    def Pack(self):
        """
        Pack(TIntPrV self)

        Parameters:
            self: TVec< TIntPr > *

        """
        return _snap.TIntPrV_Pack(self)

    def MoveFrom(self, *args):
        """
        MoveFrom(TIntPrV self, TIntPrV Vec)

        Parameters:
            Vec: TVec< TPair< TInt,TInt >,int > &

        """
        return _snap.TIntPrV_MoveFrom(self, *args)

    def Empty(self):
        """
        Empty(TIntPrV self) -> bool

        Parameters:
            self: TVec< TIntPr > const *

        """
        return _snap.TIntPrV_Empty(self)

    def Len(self):
        """
        Len(TIntPrV self) -> int

        Parameters:
            self: TVec< TIntPr > const *

        """
        return _snap.TIntPrV_Len(self)

    def Reserved(self):
        """
        Reserved(TIntPrV self) -> int

        Parameters:
            self: TVec< TIntPr > const *

        """
        return _snap.TIntPrV_Reserved(self)

    def Last(self, *args):
        """
        Last(TIntPrV self) -> TIntPr
        Last(TIntPrV self) -> TIntPr

        Parameters:
            self: TVec< TIntPr > *

        """
        return _snap.TIntPrV_Last(self, *args)

    def LastValN(self):
        """
        LastValN(TIntPrV self) -> int

        Parameters:
            self: TVec< TIntPr > const *

        """
        return _snap.TIntPrV_LastValN(self)

    def LastLast(self, *args):
        """
        LastLast(TIntPrV self) -> TIntPr
        LastLast(TIntPrV self) -> TIntPr

        Parameters:
            self: TVec< TIntPr > *

        """
        return _snap.TIntPrV_LastLast(self, *args)

    def BegI(self):
        """
        BegI(TIntPrV self) -> TIntPr

        Parameters:
            self: TVec< TIntPr > const *

        """
        return _snap.TIntPrV_BegI(self)

    def EndI(self):
        """
        EndI(TIntPrV self) -> TIntPr

        Parameters:
            self: TVec< TIntPr > const *

        """
        return _snap.TIntPrV_EndI(self)

    def GetI(self, *args):
        """
        GetI(TIntPrV self, int const & ValN) -> TIntPr

        Parameters:
            ValN: int const &

        """
        return _snap.TIntPrV_GetI(self, *args)

    def Add(self, *args):
        """
        Add(TIntPrV self) -> int
        Add(TIntPrV self, TIntPr Val) -> int

        Parameters:
            Val: TPair< TInt,TInt > const &

        Add(TIntPrV self, TIntPr Val) -> int

        Parameters:
            Val: TPair< TInt,TInt > &

        Add(TIntPrV self, TIntPr Val, int const & ResizeLen) -> int

        Parameters:
            Val: TPair< TInt,TInt > const &
            ResizeLen: int const &

        """
        return _snap.TIntPrV_Add(self, *args)

    def AddV(self, *args):
        """
        AddV(TIntPrV self, TIntPrV ValV) -> int

        Parameters:
            ValV: TVec< TPair< TInt,TInt >,int > const &

        """
        return _snap.TIntPrV_AddV(self, *args)

    def AddSorted(self, *args):
        """
        AddSorted(TIntPrV self, TIntPr Val, bool const & Asc=True, int const & _MxVals=-1) -> int

        Parameters:
            Val: TPair< TInt,TInt > const &
            Asc: bool const &
            _MxVals: int const &

        AddSorted(TIntPrV self, TIntPr Val, bool const & Asc=True) -> int

        Parameters:
            Val: TPair< TInt,TInt > const &
            Asc: bool const &

        AddSorted(TIntPrV self, TIntPr Val) -> int

        Parameters:
            Val: TPair< TInt,TInt > const &

        """
        return _snap.TIntPrV_AddSorted(self, *args)

    def AddBackSorted(self, *args):
        """
        AddBackSorted(TIntPrV self, TIntPr Val, bool const & Asc) -> int

        Parameters:
            Val: TPair< TInt,TInt > const &
            Asc: bool const &

        """
        return _snap.TIntPrV_AddBackSorted(self, *args)

    def AddMerged(self, *args):
        """
        AddMerged(TIntPrV self, TIntPr Val) -> int

        Parameters:
            Val: TPair< TInt,TInt > const &

        """
        return _snap.TIntPrV_AddMerged(self, *args)

    def AddVMerged(self, *args):
        """
        AddVMerged(TIntPrV self, TIntPrV ValV) -> int

        Parameters:
            ValV: TVec< TPair< TInt,TInt >,int > const &

        """
        return _snap.TIntPrV_AddVMerged(self, *args)

    def AddUnique(self, *args):
        """
        AddUnique(TIntPrV self, TIntPr Val) -> int

        Parameters:
            Val: TPair< TInt,TInt > const &

        """
        return _snap.TIntPrV_AddUnique(self, *args)

    def GetVal(self, *args):
        """
        GetVal(TIntPrV self, int const & ValN) -> TIntPr

        Parameters:
            ValN: int const &

        GetVal(TIntPrV self, int const & ValN) -> TIntPr

        Parameters:
            ValN: int const &

        """
        return _snap.TIntPrV_GetVal(self, *args)

    def SetVal(self, *args):
        """
        SetVal(TIntPrV self, int const & ValN, TIntPr Val)

        Parameters:
            ValN: int const &
            Val: TPair< TInt,TInt > const &

        """
        return _snap.TIntPrV_SetVal(self, *args)

    def GetSubValV(self, *args):
        """
        GetSubValV(TIntPrV self, int const & BValN, int const & EValN, TIntPrV ValV)

        Parameters:
            BValN: int const &
            EValN: int const &
            ValV: TVec< TPair< TInt,TInt >,int > &

        """
        return _snap.TIntPrV_GetSubValV(self, *args)

    def Ins(self, *args):
        """
        Ins(TIntPrV self, int const & ValN, TIntPr Val)

        Parameters:
            ValN: int const &
            Val: TPair< TInt,TInt > const &

        """
        return _snap.TIntPrV_Ins(self, *args)

    def Del(self, *args):
        """
        Del(TIntPrV self, int const & ValN)

        Parameters:
            ValN: int const &

        Del(TIntPrV self, int const & MnValN, int const & MxValN)

        Parameters:
            MnValN: int const &
            MxValN: int const &

        """
        return _snap.TIntPrV_Del(self, *args)

    def DelLast(self):
        """
        DelLast(TIntPrV self)

        Parameters:
            self: TVec< TIntPr > *

        """
        return _snap.TIntPrV_DelLast(self)

    def DelIfIn(self, *args):
        """
        DelIfIn(TIntPrV self, TIntPr Val) -> bool

        Parameters:
            Val: TPair< TInt,TInt > const &

        """
        return _snap.TIntPrV_DelIfIn(self, *args)

    def DelAll(self, *args):
        """
        DelAll(TIntPrV self, TIntPr Val)

        Parameters:
            Val: TPair< TInt,TInt > const &

        """
        return _snap.TIntPrV_DelAll(self, *args)

    def PutAll(self, *args):
        """
        PutAll(TIntPrV self, TIntPr Val)

        Parameters:
            Val: TPair< TInt,TInt > const &

        """
        return _snap.TIntPrV_PutAll(self, *args)

    def Swap(self, *args):
        """
        Swap(TIntPrV self, TIntPrV Vec)

        Parameters:
            Vec: TVec< TPair< TInt,TInt >,int > &

        Swap(TIntPrV self, int const & ValN1, int const & ValN2)

        Parameters:
            ValN1: int const &
            ValN2: int const &

        """
        return _snap.TIntPrV_Swap(self, *args)

    def SwapI(*args):
        """
        SwapI(TIntPr LVal, TIntPr RVal)

        Parameters:
            LVal: TVec< TPair< TInt,TInt > >::TIter
            RVal: TVec< TPair< TInt,TInt > >::TIter

        """
        return _snap.TIntPrV_SwapI(*args)

    SwapI = staticmethod(SwapI)
    def NextPerm(self):
        """
        NextPerm(TIntPrV self) -> bool

        Parameters:
            self: TVec< TIntPr > *

        """
        return _snap.TIntPrV_NextPerm(self)

    def PrevPerm(self):
        """
        PrevPerm(TIntPrV self) -> bool

        Parameters:
            self: TVec< TIntPr > *

        """
        return _snap.TIntPrV_PrevPerm(self)

    def GetPivotValN(self, *args):
        """
        GetPivotValN(TIntPrV self, int const & LValN, int const & RValN) -> int

        Parameters:
            LValN: int const &
            RValN: int const &

        """
        return _snap.TIntPrV_GetPivotValN(self, *args)

    def BSort(self, *args):
        """
        BSort(TIntPrV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters:
            MnLValN: int const &
            MxRValN: int const &
            Asc: bool const &

        """
        return _snap.TIntPrV_BSort(self, *args)

    def ISort(self, *args):
        """
        ISort(TIntPrV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters:
            MnLValN: int const &
            MxRValN: int const &
            Asc: bool const &

        """
        return _snap.TIntPrV_ISort(self, *args)

    def Partition(self, *args):
        """
        Partition(TIntPrV self, int const & MnLValN, int const & MxRValN, bool const & Asc) -> int

        Parameters:
            MnLValN: int const &
            MxRValN: int const &
            Asc: bool const &

        """
        return _snap.TIntPrV_Partition(self, *args)

    def QSort(self, *args):
        """
        QSort(TIntPrV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters:
            MnLValN: int const &
            MxRValN: int const &
            Asc: bool const &

        """
        return _snap.TIntPrV_QSort(self, *args)

    def Sort(self, Asc=True):
        """
        Sort(TIntPrV self, bool const & Asc=True)

        Parameters:
            Asc: bool const &

        Sort(TIntPrV self)

        Parameters:
            self: TVec< TIntPr > *

        """
        return _snap.TIntPrV_Sort(self, Asc)

    def IsSorted(self, Asc=True):
        """
        IsSorted(TIntPrV self, bool const & Asc=True) -> bool

        Parameters:
            Asc: bool const &

        IsSorted(TIntPrV self) -> bool

        Parameters:
            self: TVec< TIntPr > const *

        """
        return _snap.TIntPrV_IsSorted(self, Asc)

    def Shuffle(self, *args):
        """
        Shuffle(TIntPrV self, TRnd Rnd)

        Parameters:
            Rnd: TRnd &

        """
        return _snap.TIntPrV_Shuffle(self, *args)

    def Reverse(self, *args):
        """
        Reverse(TIntPrV self)
        Reverse(TIntPrV self, int LValN, int RValN)

        Parameters:
            LValN: int
            RValN: int

        """
        return _snap.TIntPrV_Reverse(self, *args)

    def Merge(self):
        """
        Merge(TIntPrV self)

        Parameters:
            self: TVec< TIntPr > *

        """
        return _snap.TIntPrV_Merge(self)

    def Intrs(self, *args):
        """
        Intrs(TIntPrV self, TIntPrV ValV)

        Parameters:
            ValV: TVec< TPair< TInt,TInt >,int > const &

        Intrs(TIntPrV self, TIntPrV ValV, TIntPrV DstValV)

        Parameters:
            ValV: TVec< TPair< TInt,TInt >,int > const &
            DstValV: TVec< TPair< TInt,TInt >,int > &

        """
        return _snap.TIntPrV_Intrs(self, *args)

    def Union(self, *args):
        """
        Union(TIntPrV self, TIntPrV ValV)

        Parameters:
            ValV: TVec< TPair< TInt,TInt >,int > const &

        Union(TIntPrV self, TIntPrV ValV, TIntPrV DstValV)

        Parameters:
            ValV: TVec< TPair< TInt,TInt >,int > const &
            DstValV: TVec< TPair< TInt,TInt >,int > &

        """
        return _snap.TIntPrV_Union(self, *args)

    def Diff(self, *args):
        """
        Diff(TIntPrV self, TIntPrV ValV)

        Parameters:
            ValV: TVec< TPair< TInt,TInt >,int > const &

        Diff(TIntPrV self, TIntPrV ValV, TIntPrV DstValV)

        Parameters:
            ValV: TVec< TPair< TInt,TInt >,int > const &
            DstValV: TVec< TPair< TInt,TInt >,int > &

        """
        return _snap.TIntPrV_Diff(self, *args)

    def IntrsLen(self, *args):
        """
        IntrsLen(TIntPrV self, TIntPrV ValV) -> int

        Parameters:
            ValV: TVec< TPair< TInt,TInt >,int > const &

        """
        return _snap.TIntPrV_IntrsLen(self, *args)

    def UnionLen(self, *args):
        """
        UnionLen(TIntPrV self, TIntPrV ValV) -> int

        Parameters:
            ValV: TVec< TPair< TInt,TInt >,int > const &

        """
        return _snap.TIntPrV_UnionLen(self, *args)

    def Count(self, *args):
        """
        Count(TIntPrV self, TIntPr Val) -> int

        Parameters:
            Val: TPair< TInt,TInt > const &

        """
        return _snap.TIntPrV_Count(self, *args)

    def SearchBin(self, *args):
        """
        SearchBin(TIntPrV self, TIntPr Val) -> int

        Parameters:
            Val: TPair< TInt,TInt > const &

        SearchBin(TIntPrV self, TIntPr Val, int & InsValN) -> int

        Parameters:
            Val: TPair< TInt,TInt > const &
            InsValN: int &

        """
        return _snap.TIntPrV_SearchBin(self, *args)

    def SearchForw(self, *args):
        """
        SearchForw(TIntPrV self, TIntPr Val, int const & BValN=0) -> int

        Parameters:
            Val: TPair< TInt,TInt > const &
            BValN: int const &

        SearchForw(TIntPrV self, TIntPr Val) -> int

        Parameters:
            Val: TPair< TInt,TInt > const &

        """
        return _snap.TIntPrV_SearchForw(self, *args)

    def SearchBack(self, *args):
        """
        SearchBack(TIntPrV self, TIntPr Val) -> int

        Parameters:
            Val: TPair< TInt,TInt > const &

        """
        return _snap.TIntPrV_SearchBack(self, *args)

    def SearchVForw(self, *args):
        """
        SearchVForw(TIntPrV self, TIntPrV ValV, int const & BValN=0) -> int

        Parameters:
            ValV: TVec< TPair< TInt,TInt >,int > const &
            BValN: int const &

        SearchVForw(TIntPrV self, TIntPrV ValV) -> int

        Parameters:
            ValV: TVec< TPair< TInt,TInt >,int > const &

        """
        return _snap.TIntPrV_SearchVForw(self, *args)

    def IsIn(self, *args):
        """
        IsIn(TIntPrV self, TIntPr Val) -> bool

        Parameters:
            Val: TPair< TInt,TInt > const &

        IsIn(TIntPrV self, TIntPr Val, int & ValN) -> bool

        Parameters:
            Val: TPair< TInt,TInt > const &
            ValN: int &

        """
        return _snap.TIntPrV_IsIn(self, *args)

    def IsInBin(self, *args):
        """
        IsInBin(TIntPrV self, TIntPr Val) -> bool

        Parameters:
            Val: TPair< TInt,TInt > const &

        """
        return _snap.TIntPrV_IsInBin(self, *args)

    def GetDat(self, *args):
        """
        GetDat(TIntPrV self, TIntPr Val) -> TIntPr

        Parameters:
            Val: TPair< TInt,TInt > const &

        """
        return _snap.TIntPrV_GetDat(self, *args)

    def GetAddDat(self, *args):
        """
        GetAddDat(TIntPrV self, TIntPr Val) -> TIntPr

        Parameters:
            Val: TPair< TInt,TInt > const &

        """
        return _snap.TIntPrV_GetAddDat(self, *args)

    def GetMxValN(self):
        """
        GetMxValN(TIntPrV self) -> int

        Parameters:
            self: TVec< TIntPr > const *

        """
        return _snap.TIntPrV_GetMxValN(self)

    def GetV(*args):
        """
        GetV(TIntPr Val1) -> TIntPrV

        Parameters:
            Val1: TPair< TInt,TInt > const &

        GetV(TIntPr Val1, TIntPr Val2) -> TIntPrV

        Parameters:
            Val1: TPair< TInt,TInt > const &
            Val2: TPair< TInt,TInt > const &

        GetV(TIntPr Val1, TIntPr Val2, TIntPr Val3) -> TIntPrV

        Parameters:
            Val1: TPair< TInt,TInt > const &
            Val2: TPair< TInt,TInt > const &
            Val3: TPair< TInt,TInt > const &

        GetV(TIntPr Val1, TIntPr Val2, TIntPr Val3, TIntPr Val4) -> TIntPrV

        Parameters:
            Val1: TPair< TInt,TInt > const &
            Val2: TPair< TInt,TInt > const &
            Val3: TPair< TInt,TInt > const &
            Val4: TPair< TInt,TInt > const &

        GetV(TIntPr Val1, TIntPr Val2, TIntPr Val3, TIntPr Val4, TIntPr Val5) -> TIntPrV

        Parameters:
            Val1: TPair< TInt,TInt > const &
            Val2: TPair< TInt,TInt > const &
            Val3: TPair< TInt,TInt > const &
            Val4: TPair< TInt,TInt > const &
            Val5: TPair< TInt,TInt > const &

        GetV(TIntPr Val1, TIntPr Val2, TIntPr Val3, TIntPr Val4, TIntPr Val5, TIntPr Val6) -> TIntPrV

        Parameters:
            Val1: TPair< TInt,TInt > const &
            Val2: TPair< TInt,TInt > const &
            Val3: TPair< TInt,TInt > const &
            Val4: TPair< TInt,TInt > const &
            Val5: TPair< TInt,TInt > const &
            Val6: TPair< TInt,TInt > const &

        GetV(TIntPr Val1, TIntPr Val2, TIntPr Val3, TIntPr Val4, TIntPr Val5, TIntPr Val6, TIntPr Val7) -> TIntPrV

        Parameters:
            Val1: TPair< TInt,TInt > const &
            Val2: TPair< TInt,TInt > const &
            Val3: TPair< TInt,TInt > const &
            Val4: TPair< TInt,TInt > const &
            Val5: TPair< TInt,TInt > const &
            Val6: TPair< TInt,TInt > const &
            Val7: TPair< TInt,TInt > const &

        GetV(TIntPr Val1, TIntPr Val2, TIntPr Val3, TIntPr Val4, TIntPr Val5, TIntPr Val6, TIntPr Val7, 
            TIntPr Val8) -> TIntPrV

        Parameters:
            Val1: TPair< TInt,TInt > const &
            Val2: TPair< TInt,TInt > const &
            Val3: TPair< TInt,TInt > const &
            Val4: TPair< TInt,TInt > const &
            Val5: TPair< TInt,TInt > const &
            Val6: TPair< TInt,TInt > const &
            Val7: TPair< TInt,TInt > const &
            Val8: TPair< TInt,TInt > const &

        GetV(TIntPr Val1, TIntPr Val2, TIntPr Val3, TIntPr Val4, TIntPr Val5, TIntPr Val6, TIntPr Val7, 
            TIntPr Val8, TIntPr Val9) -> TIntPrV

        Parameters:
            Val1: TPair< TInt,TInt > const &
            Val2: TPair< TInt,TInt > const &
            Val3: TPair< TInt,TInt > const &
            Val4: TPair< TInt,TInt > const &
            Val5: TPair< TInt,TInt > const &
            Val6: TPair< TInt,TInt > const &
            Val7: TPair< TInt,TInt > const &
            Val8: TPair< TInt,TInt > const &
            Val9: TPair< TInt,TInt > const &

        """
        return _snap.TIntPrV_GetV(*args)

    GetV = staticmethod(GetV)
TIntPrV.Load = new_instancemethod(_snap.TIntPrV_Load,None,TIntPrV)
TIntPrV.Save = new_instancemethod(_snap.TIntPrV_Save,None,TIntPrV)
TIntPrV.__add__ = new_instancemethod(_snap.TIntPrV___add__,None,TIntPrV)
TIntPrV.__eq__ = new_instancemethod(_snap.TIntPrV___eq__,None,TIntPrV)
TIntPrV.__lt__ = new_instancemethod(_snap.TIntPrV___lt__,None,TIntPrV)
TIntPrV.GetMemUsed = new_instancemethod(_snap.TIntPrV_GetMemUsed,None,TIntPrV)
TIntPrV.GetMemSize = new_instancemethod(_snap.TIntPrV_GetMemSize,None,TIntPrV)
TIntPrV.GetPrimHashCd = new_instancemethod(_snap.TIntPrV_GetPrimHashCd,None,TIntPrV)
TIntPrV.GetSecHashCd = new_instancemethod(_snap.TIntPrV_GetSecHashCd,None,TIntPrV)
TIntPrV.Gen = new_instancemethod(_snap.TIntPrV_Gen,None,TIntPrV)
TIntPrV.GenExt = new_instancemethod(_snap.TIntPrV_GenExt,None,TIntPrV)
TIntPrV.IsExt = new_instancemethod(_snap.TIntPrV_IsExt,None,TIntPrV)
TIntPrV.Reserve = new_instancemethod(_snap.TIntPrV_Reserve,None,TIntPrV)
TIntPrV.Clr = new_instancemethod(_snap.TIntPrV_Clr,None,TIntPrV)
TIntPrV.Trunc = new_instancemethod(_snap.TIntPrV_Trunc,None,TIntPrV)
TIntPrV.Pack = new_instancemethod(_snap.TIntPrV_Pack,None,TIntPrV)
TIntPrV.MoveFrom = new_instancemethod(_snap.TIntPrV_MoveFrom,None,TIntPrV)
TIntPrV.Empty = new_instancemethod(_snap.TIntPrV_Empty,None,TIntPrV)
TIntPrV.Len = new_instancemethod(_snap.TIntPrV_Len,None,TIntPrV)
TIntPrV.Reserved = new_instancemethod(_snap.TIntPrV_Reserved,None,TIntPrV)
TIntPrV.Last = new_instancemethod(_snap.TIntPrV_Last,None,TIntPrV)
TIntPrV.LastValN = new_instancemethod(_snap.TIntPrV_LastValN,None,TIntPrV)
TIntPrV.LastLast = new_instancemethod(_snap.TIntPrV_LastLast,None,TIntPrV)
TIntPrV.BegI = new_instancemethod(_snap.TIntPrV_BegI,None,TIntPrV)
TIntPrV.EndI = new_instancemethod(_snap.TIntPrV_EndI,None,TIntPrV)
TIntPrV.GetI = new_instancemethod(_snap.TIntPrV_GetI,None,TIntPrV)
TIntPrV.Add = new_instancemethod(_snap.TIntPrV_Add,None,TIntPrV)
TIntPrV.AddV = new_instancemethod(_snap.TIntPrV_AddV,None,TIntPrV)
TIntPrV.AddSorted = new_instancemethod(_snap.TIntPrV_AddSorted,None,TIntPrV)
TIntPrV.AddBackSorted = new_instancemethod(_snap.TIntPrV_AddBackSorted,None,TIntPrV)
TIntPrV.AddMerged = new_instancemethod(_snap.TIntPrV_AddMerged,None,TIntPrV)
TIntPrV.AddVMerged = new_instancemethod(_snap.TIntPrV_AddVMerged,None,TIntPrV)
TIntPrV.AddUnique = new_instancemethod(_snap.TIntPrV_AddUnique,None,TIntPrV)
TIntPrV.GetVal = new_instancemethod(_snap.TIntPrV_GetVal,None,TIntPrV)
TIntPrV.SetVal = new_instancemethod(_snap.TIntPrV_SetVal,None,TIntPrV)
TIntPrV.GetSubValV = new_instancemethod(_snap.TIntPrV_GetSubValV,None,TIntPrV)
TIntPrV.Ins = new_instancemethod(_snap.TIntPrV_Ins,None,TIntPrV)
TIntPrV.Del = new_instancemethod(_snap.TIntPrV_Del,None,TIntPrV)
TIntPrV.DelLast = new_instancemethod(_snap.TIntPrV_DelLast,None,TIntPrV)
TIntPrV.DelIfIn = new_instancemethod(_snap.TIntPrV_DelIfIn,None,TIntPrV)
TIntPrV.DelAll = new_instancemethod(_snap.TIntPrV_DelAll,None,TIntPrV)
TIntPrV.PutAll = new_instancemethod(_snap.TIntPrV_PutAll,None,TIntPrV)
TIntPrV.Swap = new_instancemethod(_snap.TIntPrV_Swap,None,TIntPrV)
TIntPrV.NextPerm = new_instancemethod(_snap.TIntPrV_NextPerm,None,TIntPrV)
TIntPrV.PrevPerm = new_instancemethod(_snap.TIntPrV_PrevPerm,None,TIntPrV)
TIntPrV.GetPivotValN = new_instancemethod(_snap.TIntPrV_GetPivotValN,None,TIntPrV)
TIntPrV.BSort = new_instancemethod(_snap.TIntPrV_BSort,None,TIntPrV)
TIntPrV.ISort = new_instancemethod(_snap.TIntPrV_ISort,None,TIntPrV)
TIntPrV.Partition = new_instancemethod(_snap.TIntPrV_Partition,None,TIntPrV)
TIntPrV.QSort = new_instancemethod(_snap.TIntPrV_QSort,None,TIntPrV)
TIntPrV.Sort = new_instancemethod(_snap.TIntPrV_Sort,None,TIntPrV)
TIntPrV.IsSorted = new_instancemethod(_snap.TIntPrV_IsSorted,None,TIntPrV)
TIntPrV.Shuffle = new_instancemethod(_snap.TIntPrV_Shuffle,None,TIntPrV)
TIntPrV.Reverse = new_instancemethod(_snap.TIntPrV_Reverse,None,TIntPrV)
TIntPrV.Merge = new_instancemethod(_snap.TIntPrV_Merge,None,TIntPrV)
TIntPrV.Intrs = new_instancemethod(_snap.TIntPrV_Intrs,None,TIntPrV)
TIntPrV.Union = new_instancemethod(_snap.TIntPrV_Union,None,TIntPrV)
TIntPrV.Diff = new_instancemethod(_snap.TIntPrV_Diff,None,TIntPrV)
TIntPrV.IntrsLen = new_instancemethod(_snap.TIntPrV_IntrsLen,None,TIntPrV)
TIntPrV.UnionLen = new_instancemethod(_snap.TIntPrV_UnionLen,None,TIntPrV)
TIntPrV.Count = new_instancemethod(_snap.TIntPrV_Count,None,TIntPrV)
TIntPrV.SearchBin = new_instancemethod(_snap.TIntPrV_SearchBin,None,TIntPrV)
TIntPrV.SearchForw = new_instancemethod(_snap.TIntPrV_SearchForw,None,TIntPrV)
TIntPrV.SearchBack = new_instancemethod(_snap.TIntPrV_SearchBack,None,TIntPrV)
TIntPrV.SearchVForw = new_instancemethod(_snap.TIntPrV_SearchVForw,None,TIntPrV)
TIntPrV.IsIn = new_instancemethod(_snap.TIntPrV_IsIn,None,TIntPrV)
TIntPrV.IsInBin = new_instancemethod(_snap.TIntPrV_IsInBin,None,TIntPrV)
TIntPrV.GetDat = new_instancemethod(_snap.TIntPrV_GetDat,None,TIntPrV)
TIntPrV.GetAddDat = new_instancemethod(_snap.TIntPrV_GetAddDat,None,TIntPrV)
TIntPrV.GetMxValN = new_instancemethod(_snap.TIntPrV_GetMxValN,None,TIntPrV)
TIntPrV_swigregister = _snap.TIntPrV_swigregister
TIntPrV_swigregister(TIntPrV)

def TIntPrV_SwapI(*args):
  """
    TIntPrV_SwapI(TIntPr LVal, TIntPr RVal)

    Parameters:
        LVal: TVec< TPair< TInt,TInt > >::TIter
        RVal: TVec< TPair< TInt,TInt > >::TIter

    """
  return _snap.TIntPrV_SwapI(*args)

def TIntPrV_GetV(*args):
  """
    GetV(TIntPr Val1) -> TIntPrV

    Parameters:
        Val1: TPair< TInt,TInt > const &

    GetV(TIntPr Val1, TIntPr Val2) -> TIntPrV

    Parameters:
        Val1: TPair< TInt,TInt > const &
        Val2: TPair< TInt,TInt > const &

    GetV(TIntPr Val1, TIntPr Val2, TIntPr Val3) -> TIntPrV

    Parameters:
        Val1: TPair< TInt,TInt > const &
        Val2: TPair< TInt,TInt > const &
        Val3: TPair< TInt,TInt > const &

    GetV(TIntPr Val1, TIntPr Val2, TIntPr Val3, TIntPr Val4) -> TIntPrV

    Parameters:
        Val1: TPair< TInt,TInt > const &
        Val2: TPair< TInt,TInt > const &
        Val3: TPair< TInt,TInt > const &
        Val4: TPair< TInt,TInt > const &

    GetV(TIntPr Val1, TIntPr Val2, TIntPr Val3, TIntPr Val4, TIntPr Val5) -> TIntPrV

    Parameters:
        Val1: TPair< TInt,TInt > const &
        Val2: TPair< TInt,TInt > const &
        Val3: TPair< TInt,TInt > const &
        Val4: TPair< TInt,TInt > const &
        Val5: TPair< TInt,TInt > const &

    GetV(TIntPr Val1, TIntPr Val2, TIntPr Val3, TIntPr Val4, TIntPr Val5, TIntPr Val6) -> TIntPrV

    Parameters:
        Val1: TPair< TInt,TInt > const &
        Val2: TPair< TInt,TInt > const &
        Val3: TPair< TInt,TInt > const &
        Val4: TPair< TInt,TInt > const &
        Val5: TPair< TInt,TInt > const &
        Val6: TPair< TInt,TInt > const &

    GetV(TIntPr Val1, TIntPr Val2, TIntPr Val3, TIntPr Val4, TIntPr Val5, TIntPr Val6, TIntPr Val7) -> TIntPrV

    Parameters:
        Val1: TPair< TInt,TInt > const &
        Val2: TPair< TInt,TInt > const &
        Val3: TPair< TInt,TInt > const &
        Val4: TPair< TInt,TInt > const &
        Val5: TPair< TInt,TInt > const &
        Val6: TPair< TInt,TInt > const &
        Val7: TPair< TInt,TInt > const &

    GetV(TIntPr Val1, TIntPr Val2, TIntPr Val3, TIntPr Val4, TIntPr Val5, TIntPr Val6, TIntPr Val7, 
        TIntPr Val8) -> TIntPrV

    Parameters:
        Val1: TPair< TInt,TInt > const &
        Val2: TPair< TInt,TInt > const &
        Val3: TPair< TInt,TInt > const &
        Val4: TPair< TInt,TInt > const &
        Val5: TPair< TInt,TInt > const &
        Val6: TPair< TInt,TInt > const &
        Val7: TPair< TInt,TInt > const &
        Val8: TPair< TInt,TInt > const &

    TIntPrV_GetV(TIntPr Val1, TIntPr Val2, TIntPr Val3, TIntPr Val4, TIntPr Val5, TIntPr Val6, TIntPr Val7, 
        TIntPr Val8, TIntPr Val9) -> TIntPrV

    Parameters:
        Val1: TPair< TInt,TInt > const &
        Val2: TPair< TInt,TInt > const &
        Val3: TPair< TInt,TInt > const &
        Val4: TPair< TInt,TInt > const &
        Val5: TPair< TInt,TInt > const &
        Val6: TPair< TInt,TInt > const &
        Val7: TPair< TInt,TInt > const &
        Val8: TPair< TInt,TInt > const &
        Val9: TPair< TInt,TInt > const &

    """
  return _snap.TIntPrV_GetV(*args)

class TFltPrV(object):
    """Proxy of C++ TVec<(TFltPr)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TFltPrV
    def __init__(self, *args): 
        """
        __init__(TVec<(TFltPr)> self) -> TFltPrV
        __init__(TVec<(TFltPr)> self, TFltPrV Vec) -> TFltPrV

        Parameters:
            Vec: TVec< TPair< TFlt,TFlt >,int > const &

        __init__(TVec<(TFltPr)> self, int const & _Vals) -> TFltPrV

        Parameters:
            _Vals: int const &

        __init__(TVec<(TFltPr)> self, int const & _MxVals, int const & _Vals) -> TFltPrV

        Parameters:
            _MxVals: int const &
            _Vals: int const &

        __init__(TVec<(TFltPr)> self, TFltPr _ValT, int const & _Vals) -> TFltPrV

        Parameters:
            _ValT: TPair< TFlt,TFlt > *
            _Vals: int const &

        __init__(TVec<(TFltPr)> self, TSIn SIn) -> TFltPrV

        Parameters:
            SIn: TSIn &

        """
        _snap.TFltPrV_swiginit(self,_snap.new_TFltPrV(*args))
    def Load(self, *args):
        """
        Load(TFltPrV self, TSIn SIn)

        Parameters:
            SIn: TSIn &

        """
        return _snap.TFltPrV_Load(self, *args)

    def Save(self, *args):
        """
        Save(TFltPrV self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.TFltPrV_Save(self, *args)

    def __add__(self, *args):
        """
        __add__(TFltPrV self, TFltPr Val) -> TFltPrV

        Parameters:
            Val: TPair< TFlt,TFlt > const &

        """
        return _snap.TFltPrV___add__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(TFltPrV self, TFltPrV Vec) -> bool

        Parameters:
            Vec: TVec< TPair< TFlt,TFlt >,int > const &

        """
        return _snap.TFltPrV___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TFltPrV self, TFltPrV Vec) -> bool

        Parameters:
            Vec: TVec< TPair< TFlt,TFlt >,int > const &

        """
        return _snap.TFltPrV___lt__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(TFltPrV self) -> int

        Parameters:
            self: TVec< TFltPr > const *

        """
        return _snap.TFltPrV_GetMemUsed(self)

    def GetMemSize(self):
        """
        GetMemSize(TFltPrV self) -> int

        Parameters:
            self: TVec< TFltPr > const *

        """
        return _snap.TFltPrV_GetMemSize(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TFltPrV self) -> int

        Parameters:
            self: TVec< TFltPr > const *

        """
        return _snap.TFltPrV_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(TFltPrV self) -> int

        Parameters:
            self: TVec< TFltPr > const *

        """
        return _snap.TFltPrV_GetSecHashCd(self)

    def Gen(self, *args):
        """
        Gen(TFltPrV self, int const & _Vals)

        Parameters:
            _Vals: int const &

        Gen(TFltPrV self, int const & _MxVals, int const & _Vals)

        Parameters:
            _MxVals: int const &
            _Vals: int const &

        """
        return _snap.TFltPrV_Gen(self, *args)

    def GenExt(self, *args):
        """
        GenExt(TFltPrV self, TFltPr _ValT, int const & _Vals)

        Parameters:
            _ValT: TPair< TFlt,TFlt > *
            _Vals: int const &

        """
        return _snap.TFltPrV_GenExt(self, *args)

    def IsExt(self):
        """
        IsExt(TFltPrV self) -> bool

        Parameters:
            self: TVec< TFltPr > const *

        """
        return _snap.TFltPrV_IsExt(self)

    def Reserve(self, *args):
        """
        Reserve(TFltPrV self, int const & _MxVals)

        Parameters:
            _MxVals: int const &

        Reserve(TFltPrV self, int const & _MxVals, int const & _Vals)

        Parameters:
            _MxVals: int const &
            _Vals: int const &

        """
        return _snap.TFltPrV_Reserve(self, *args)

    def Clr(self, *args):
        """
        Clr(TFltPrV self, bool const & DoDel=True, int const & NoDelLim=-1)

        Parameters:
            DoDel: bool const &
            NoDelLim: int const &

        Clr(TFltPrV self, bool const & DoDel=True)

        Parameters:
            DoDel: bool const &

        Clr(TFltPrV self)

        Parameters:
            self: TVec< TFltPr > *

        """
        return _snap.TFltPrV_Clr(self, *args)

    def Trunc(self, *args):
        """
        Trunc(TFltPrV self, int const & _Vals=-1)

        Parameters:
            _Vals: int const &

        Trunc(TFltPrV self)

        Parameters:
            self: TVec< TFltPr > *

        """
        return _snap.TFltPrV_Trunc(self, *args)

    def Pack(self):
        """
        Pack(TFltPrV self)

        Parameters:
            self: TVec< TFltPr > *

        """
        return _snap.TFltPrV_Pack(self)

    def MoveFrom(self, *args):
        """
        MoveFrom(TFltPrV self, TFltPrV Vec)

        Parameters:
            Vec: TVec< TPair< TFlt,TFlt >,int > &

        """
        return _snap.TFltPrV_MoveFrom(self, *args)

    def Empty(self):
        """
        Empty(TFltPrV self) -> bool

        Parameters:
            self: TVec< TFltPr > const *

        """
        return _snap.TFltPrV_Empty(self)

    def Len(self):
        """
        Len(TFltPrV self) -> int

        Parameters:
            self: TVec< TFltPr > const *

        """
        return _snap.TFltPrV_Len(self)

    def Reserved(self):
        """
        Reserved(TFltPrV self) -> int

        Parameters:
            self: TVec< TFltPr > const *

        """
        return _snap.TFltPrV_Reserved(self)

    def Last(self, *args):
        """
        Last(TFltPrV self) -> TFltPr
        Last(TFltPrV self) -> TFltPr

        Parameters:
            self: TVec< TFltPr > *

        """
        return _snap.TFltPrV_Last(self, *args)

    def LastValN(self):
        """
        LastValN(TFltPrV self) -> int

        Parameters:
            self: TVec< TFltPr > const *

        """
        return _snap.TFltPrV_LastValN(self)

    def LastLast(self, *args):
        """
        LastLast(TFltPrV self) -> TFltPr
        LastLast(TFltPrV self) -> TFltPr

        Parameters:
            self: TVec< TFltPr > *

        """
        return _snap.TFltPrV_LastLast(self, *args)

    def BegI(self):
        """
        BegI(TFltPrV self) -> TFltPr

        Parameters:
            self: TVec< TFltPr > const *

        """
        return _snap.TFltPrV_BegI(self)

    def EndI(self):
        """
        EndI(TFltPrV self) -> TFltPr

        Parameters:
            self: TVec< TFltPr > const *

        """
        return _snap.TFltPrV_EndI(self)

    def GetI(self, *args):
        """
        GetI(TFltPrV self, int const & ValN) -> TFltPr

        Parameters:
            ValN: int const &

        """
        return _snap.TFltPrV_GetI(self, *args)

    def Add(self, *args):
        """
        Add(TFltPrV self) -> int
        Add(TFltPrV self, TFltPr Val) -> int

        Parameters:
            Val: TPair< TFlt,TFlt > const &

        Add(TFltPrV self, TFltPr Val) -> int

        Parameters:
            Val: TPair< TFlt,TFlt > &

        Add(TFltPrV self, TFltPr Val, int const & ResizeLen) -> int

        Parameters:
            Val: TPair< TFlt,TFlt > const &
            ResizeLen: int const &

        """
        return _snap.TFltPrV_Add(self, *args)

    def AddV(self, *args):
        """
        AddV(TFltPrV self, TFltPrV ValV) -> int

        Parameters:
            ValV: TVec< TPair< TFlt,TFlt >,int > const &

        """
        return _snap.TFltPrV_AddV(self, *args)

    def AddSorted(self, *args):
        """
        AddSorted(TFltPrV self, TFltPr Val, bool const & Asc=True, int const & _MxVals=-1) -> int

        Parameters:
            Val: TPair< TFlt,TFlt > const &
            Asc: bool const &
            _MxVals: int const &

        AddSorted(TFltPrV self, TFltPr Val, bool const & Asc=True) -> int

        Parameters:
            Val: TPair< TFlt,TFlt > const &
            Asc: bool const &

        AddSorted(TFltPrV self, TFltPr Val) -> int

        Parameters:
            Val: TPair< TFlt,TFlt > const &

        """
        return _snap.TFltPrV_AddSorted(self, *args)

    def AddBackSorted(self, *args):
        """
        AddBackSorted(TFltPrV self, TFltPr Val, bool const & Asc) -> int

        Parameters:
            Val: TPair< TFlt,TFlt > const &
            Asc: bool const &

        """
        return _snap.TFltPrV_AddBackSorted(self, *args)

    def AddMerged(self, *args):
        """
        AddMerged(TFltPrV self, TFltPr Val) -> int

        Parameters:
            Val: TPair< TFlt,TFlt > const &

        """
        return _snap.TFltPrV_AddMerged(self, *args)

    def AddVMerged(self, *args):
        """
        AddVMerged(TFltPrV self, TFltPrV ValV) -> int

        Parameters:
            ValV: TVec< TPair< TFlt,TFlt >,int > const &

        """
        return _snap.TFltPrV_AddVMerged(self, *args)

    def AddUnique(self, *args):
        """
        AddUnique(TFltPrV self, TFltPr Val) -> int

        Parameters:
            Val: TPair< TFlt,TFlt > const &

        """
        return _snap.TFltPrV_AddUnique(self, *args)

    def GetVal(self, *args):
        """
        GetVal(TFltPrV self, int const & ValN) -> TFltPr

        Parameters:
            ValN: int const &

        GetVal(TFltPrV self, int const & ValN) -> TFltPr

        Parameters:
            ValN: int const &

        """
        return _snap.TFltPrV_GetVal(self, *args)

    def SetVal(self, *args):
        """
        SetVal(TFltPrV self, int const & ValN, TFltPr Val)

        Parameters:
            ValN: int const &
            Val: TPair< TFlt,TFlt > const &

        """
        return _snap.TFltPrV_SetVal(self, *args)

    def GetSubValV(self, *args):
        """
        GetSubValV(TFltPrV self, int const & BValN, int const & EValN, TFltPrV ValV)

        Parameters:
            BValN: int const &
            EValN: int const &
            ValV: TVec< TPair< TFlt,TFlt >,int > &

        """
        return _snap.TFltPrV_GetSubValV(self, *args)

    def Ins(self, *args):
        """
        Ins(TFltPrV self, int const & ValN, TFltPr Val)

        Parameters:
            ValN: int const &
            Val: TPair< TFlt,TFlt > const &

        """
        return _snap.TFltPrV_Ins(self, *args)

    def Del(self, *args):
        """
        Del(TFltPrV self, int const & ValN)

        Parameters:
            ValN: int const &

        Del(TFltPrV self, int const & MnValN, int const & MxValN)

        Parameters:
            MnValN: int const &
            MxValN: int const &

        """
        return _snap.TFltPrV_Del(self, *args)

    def DelLast(self):
        """
        DelLast(TFltPrV self)

        Parameters:
            self: TVec< TFltPr > *

        """
        return _snap.TFltPrV_DelLast(self)

    def DelIfIn(self, *args):
        """
        DelIfIn(TFltPrV self, TFltPr Val) -> bool

        Parameters:
            Val: TPair< TFlt,TFlt > const &

        """
        return _snap.TFltPrV_DelIfIn(self, *args)

    def DelAll(self, *args):
        """
        DelAll(TFltPrV self, TFltPr Val)

        Parameters:
            Val: TPair< TFlt,TFlt > const &

        """
        return _snap.TFltPrV_DelAll(self, *args)

    def PutAll(self, *args):
        """
        PutAll(TFltPrV self, TFltPr Val)

        Parameters:
            Val: TPair< TFlt,TFlt > const &

        """
        return _snap.TFltPrV_PutAll(self, *args)

    def Swap(self, *args):
        """
        Swap(TFltPrV self, TFltPrV Vec)

        Parameters:
            Vec: TVec< TPair< TFlt,TFlt >,int > &

        Swap(TFltPrV self, int const & ValN1, int const & ValN2)

        Parameters:
            ValN1: int const &
            ValN2: int const &

        """
        return _snap.TFltPrV_Swap(self, *args)

    def SwapI(*args):
        """
        SwapI(TFltPr LVal, TFltPr RVal)

        Parameters:
            LVal: TVec< TPair< TFlt,TFlt > >::TIter
            RVal: TVec< TPair< TFlt,TFlt > >::TIter

        """
        return _snap.TFltPrV_SwapI(*args)

    SwapI = staticmethod(SwapI)
    def NextPerm(self):
        """
        NextPerm(TFltPrV self) -> bool

        Parameters:
            self: TVec< TFltPr > *

        """
        return _snap.TFltPrV_NextPerm(self)

    def PrevPerm(self):
        """
        PrevPerm(TFltPrV self) -> bool

        Parameters:
            self: TVec< TFltPr > *

        """
        return _snap.TFltPrV_PrevPerm(self)

    def GetPivotValN(self, *args):
        """
        GetPivotValN(TFltPrV self, int const & LValN, int const & RValN) -> int

        Parameters:
            LValN: int const &
            RValN: int const &

        """
        return _snap.TFltPrV_GetPivotValN(self, *args)

    def BSort(self, *args):
        """
        BSort(TFltPrV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters:
            MnLValN: int const &
            MxRValN: int const &
            Asc: bool const &

        """
        return _snap.TFltPrV_BSort(self, *args)

    def ISort(self, *args):
        """
        ISort(TFltPrV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters:
            MnLValN: int const &
            MxRValN: int const &
            Asc: bool const &

        """
        return _snap.TFltPrV_ISort(self, *args)

    def Partition(self, *args):
        """
        Partition(TFltPrV self, int const & MnLValN, int const & MxRValN, bool const & Asc) -> int

        Parameters:
            MnLValN: int const &
            MxRValN: int const &
            Asc: bool const &

        """
        return _snap.TFltPrV_Partition(self, *args)

    def QSort(self, *args):
        """
        QSort(TFltPrV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters:
            MnLValN: int const &
            MxRValN: int const &
            Asc: bool const &

        """
        return _snap.TFltPrV_QSort(self, *args)

    def Sort(self, Asc=True):
        """
        Sort(TFltPrV self, bool const & Asc=True)

        Parameters:
            Asc: bool const &

        Sort(TFltPrV self)

        Parameters:
            self: TVec< TFltPr > *

        """
        return _snap.TFltPrV_Sort(self, Asc)

    def IsSorted(self, Asc=True):
        """
        IsSorted(TFltPrV self, bool const & Asc=True) -> bool

        Parameters:
            Asc: bool const &

        IsSorted(TFltPrV self) -> bool

        Parameters:
            self: TVec< TFltPr > const *

        """
        return _snap.TFltPrV_IsSorted(self, Asc)

    def Shuffle(self, *args):
        """
        Shuffle(TFltPrV self, TRnd Rnd)

        Parameters:
            Rnd: TRnd &

        """
        return _snap.TFltPrV_Shuffle(self, *args)

    def Reverse(self, *args):
        """
        Reverse(TFltPrV self)
        Reverse(TFltPrV self, int LValN, int RValN)

        Parameters:
            LValN: int
            RValN: int

        """
        return _snap.TFltPrV_Reverse(self, *args)

    def Merge(self):
        """
        Merge(TFltPrV self)

        Parameters:
            self: TVec< TFltPr > *

        """
        return _snap.TFltPrV_Merge(self)

    def Intrs(self, *args):
        """
        Intrs(TFltPrV self, TFltPrV ValV)

        Parameters:
            ValV: TVec< TPair< TFlt,TFlt >,int > const &

        Intrs(TFltPrV self, TFltPrV ValV, TFltPrV DstValV)

        Parameters:
            ValV: TVec< TPair< TFlt,TFlt >,int > const &
            DstValV: TVec< TPair< TFlt,TFlt >,int > &

        """
        return _snap.TFltPrV_Intrs(self, *args)

    def Union(self, *args):
        """
        Union(TFltPrV self, TFltPrV ValV)

        Parameters:
            ValV: TVec< TPair< TFlt,TFlt >,int > const &

        Union(TFltPrV self, TFltPrV ValV, TFltPrV DstValV)

        Parameters:
            ValV: TVec< TPair< TFlt,TFlt >,int > const &
            DstValV: TVec< TPair< TFlt,TFlt >,int > &

        """
        return _snap.TFltPrV_Union(self, *args)

    def Diff(self, *args):
        """
        Diff(TFltPrV self, TFltPrV ValV)

        Parameters:
            ValV: TVec< TPair< TFlt,TFlt >,int > const &

        Diff(TFltPrV self, TFltPrV ValV, TFltPrV DstValV)

        Parameters:
            ValV: TVec< TPair< TFlt,TFlt >,int > const &
            DstValV: TVec< TPair< TFlt,TFlt >,int > &

        """
        return _snap.TFltPrV_Diff(self, *args)

    def IntrsLen(self, *args):
        """
        IntrsLen(TFltPrV self, TFltPrV ValV) -> int

        Parameters:
            ValV: TVec< TPair< TFlt,TFlt >,int > const &

        """
        return _snap.TFltPrV_IntrsLen(self, *args)

    def UnionLen(self, *args):
        """
        UnionLen(TFltPrV self, TFltPrV ValV) -> int

        Parameters:
            ValV: TVec< TPair< TFlt,TFlt >,int > const &

        """
        return _snap.TFltPrV_UnionLen(self, *args)

    def Count(self, *args):
        """
        Count(TFltPrV self, TFltPr Val) -> int

        Parameters:
            Val: TPair< TFlt,TFlt > const &

        """
        return _snap.TFltPrV_Count(self, *args)

    def SearchBin(self, *args):
        """
        SearchBin(TFltPrV self, TFltPr Val) -> int

        Parameters:
            Val: TPair< TFlt,TFlt > const &

        SearchBin(TFltPrV self, TFltPr Val, int & InsValN) -> int

        Parameters:
            Val: TPair< TFlt,TFlt > const &
            InsValN: int &

        """
        return _snap.TFltPrV_SearchBin(self, *args)

    def SearchForw(self, *args):
        """
        SearchForw(TFltPrV self, TFltPr Val, int const & BValN=0) -> int

        Parameters:
            Val: TPair< TFlt,TFlt > const &
            BValN: int const &

        SearchForw(TFltPrV self, TFltPr Val) -> int

        Parameters:
            Val: TPair< TFlt,TFlt > const &

        """
        return _snap.TFltPrV_SearchForw(self, *args)

    def SearchBack(self, *args):
        """
        SearchBack(TFltPrV self, TFltPr Val) -> int

        Parameters:
            Val: TPair< TFlt,TFlt > const &

        """
        return _snap.TFltPrV_SearchBack(self, *args)

    def SearchVForw(self, *args):
        """
        SearchVForw(TFltPrV self, TFltPrV ValV, int const & BValN=0) -> int

        Parameters:
            ValV: TVec< TPair< TFlt,TFlt >,int > const &
            BValN: int const &

        SearchVForw(TFltPrV self, TFltPrV ValV) -> int

        Parameters:
            ValV: TVec< TPair< TFlt,TFlt >,int > const &

        """
        return _snap.TFltPrV_SearchVForw(self, *args)

    def IsIn(self, *args):
        """
        IsIn(TFltPrV self, TFltPr Val) -> bool

        Parameters:
            Val: TPair< TFlt,TFlt > const &

        IsIn(TFltPrV self, TFltPr Val, int & ValN) -> bool

        Parameters:
            Val: TPair< TFlt,TFlt > const &
            ValN: int &

        """
        return _snap.TFltPrV_IsIn(self, *args)

    def IsInBin(self, *args):
        """
        IsInBin(TFltPrV self, TFltPr Val) -> bool

        Parameters:
            Val: TPair< TFlt,TFlt > const &

        """
        return _snap.TFltPrV_IsInBin(self, *args)

    def GetDat(self, *args):
        """
        GetDat(TFltPrV self, TFltPr Val) -> TFltPr

        Parameters:
            Val: TPair< TFlt,TFlt > const &

        """
        return _snap.TFltPrV_GetDat(self, *args)

    def GetAddDat(self, *args):
        """
        GetAddDat(TFltPrV self, TFltPr Val) -> TFltPr

        Parameters:
            Val: TPair< TFlt,TFlt > const &

        """
        return _snap.TFltPrV_GetAddDat(self, *args)

    def GetMxValN(self):
        """
        GetMxValN(TFltPrV self) -> int

        Parameters:
            self: TVec< TFltPr > const *

        """
        return _snap.TFltPrV_GetMxValN(self)

    def GetV(*args):
        """
        GetV(TFltPr Val1) -> TFltPrV

        Parameters:
            Val1: TPair< TFlt,TFlt > const &

        GetV(TFltPr Val1, TFltPr Val2) -> TFltPrV

        Parameters:
            Val1: TPair< TFlt,TFlt > const &
            Val2: TPair< TFlt,TFlt > const &

        GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3) -> TFltPrV

        Parameters:
            Val1: TPair< TFlt,TFlt > const &
            Val2: TPair< TFlt,TFlt > const &
            Val3: TPair< TFlt,TFlt > const &

        GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4) -> TFltPrV

        Parameters:
            Val1: TPair< TFlt,TFlt > const &
            Val2: TPair< TFlt,TFlt > const &
            Val3: TPair< TFlt,TFlt > const &
            Val4: TPair< TFlt,TFlt > const &

        GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4, TFltPr Val5) -> TFltPrV

        Parameters:
            Val1: TPair< TFlt,TFlt > const &
            Val2: TPair< TFlt,TFlt > const &
            Val3: TPair< TFlt,TFlt > const &
            Val4: TPair< TFlt,TFlt > const &
            Val5: TPair< TFlt,TFlt > const &

        GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4, TFltPr Val5, TFltPr Val6) -> TFltPrV

        Parameters:
            Val1: TPair< TFlt,TFlt > const &
            Val2: TPair< TFlt,TFlt > const &
            Val3: TPair< TFlt,TFlt > const &
            Val4: TPair< TFlt,TFlt > const &
            Val5: TPair< TFlt,TFlt > const &
            Val6: TPair< TFlt,TFlt > const &

        GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4, TFltPr Val5, TFltPr Val6, TFltPr Val7) -> TFltPrV

        Parameters:
            Val1: TPair< TFlt,TFlt > const &
            Val2: TPair< TFlt,TFlt > const &
            Val3: TPair< TFlt,TFlt > const &
            Val4: TPair< TFlt,TFlt > const &
            Val5: TPair< TFlt,TFlt > const &
            Val6: TPair< TFlt,TFlt > const &
            Val7: TPair< TFlt,TFlt > const &

        GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4, TFltPr Val5, TFltPr Val6, TFltPr Val7, 
            TFltPr Val8) -> TFltPrV

        Parameters:
            Val1: TPair< TFlt,TFlt > const &
            Val2: TPair< TFlt,TFlt > const &
            Val3: TPair< TFlt,TFlt > const &
            Val4: TPair< TFlt,TFlt > const &
            Val5: TPair< TFlt,TFlt > const &
            Val6: TPair< TFlt,TFlt > const &
            Val7: TPair< TFlt,TFlt > const &
            Val8: TPair< TFlt,TFlt > const &

        GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4, TFltPr Val5, TFltPr Val6, TFltPr Val7, 
            TFltPr Val8, TFltPr Val9) -> TFltPrV

        Parameters:
            Val1: TPair< TFlt,TFlt > const &
            Val2: TPair< TFlt,TFlt > const &
            Val3: TPair< TFlt,TFlt > const &
            Val4: TPair< TFlt,TFlt > const &
            Val5: TPair< TFlt,TFlt > const &
            Val6: TPair< TFlt,TFlt > const &
            Val7: TPair< TFlt,TFlt > const &
            Val8: TPair< TFlt,TFlt > const &
            Val9: TPair< TFlt,TFlt > const &

        """
        return _snap.TFltPrV_GetV(*args)

    GetV = staticmethod(GetV)
TFltPrV.Load = new_instancemethod(_snap.TFltPrV_Load,None,TFltPrV)
TFltPrV.Save = new_instancemethod(_snap.TFltPrV_Save,None,TFltPrV)
TFltPrV.__add__ = new_instancemethod(_snap.TFltPrV___add__,None,TFltPrV)
TFltPrV.__eq__ = new_instancemethod(_snap.TFltPrV___eq__,None,TFltPrV)
TFltPrV.__lt__ = new_instancemethod(_snap.TFltPrV___lt__,None,TFltPrV)
TFltPrV.GetMemUsed = new_instancemethod(_snap.TFltPrV_GetMemUsed,None,TFltPrV)
TFltPrV.GetMemSize = new_instancemethod(_snap.TFltPrV_GetMemSize,None,TFltPrV)
TFltPrV.GetPrimHashCd = new_instancemethod(_snap.TFltPrV_GetPrimHashCd,None,TFltPrV)
TFltPrV.GetSecHashCd = new_instancemethod(_snap.TFltPrV_GetSecHashCd,None,TFltPrV)
TFltPrV.Gen = new_instancemethod(_snap.TFltPrV_Gen,None,TFltPrV)
TFltPrV.GenExt = new_instancemethod(_snap.TFltPrV_GenExt,None,TFltPrV)
TFltPrV.IsExt = new_instancemethod(_snap.TFltPrV_IsExt,None,TFltPrV)
TFltPrV.Reserve = new_instancemethod(_snap.TFltPrV_Reserve,None,TFltPrV)
TFltPrV.Clr = new_instancemethod(_snap.TFltPrV_Clr,None,TFltPrV)
TFltPrV.Trunc = new_instancemethod(_snap.TFltPrV_Trunc,None,TFltPrV)
TFltPrV.Pack = new_instancemethod(_snap.TFltPrV_Pack,None,TFltPrV)
TFltPrV.MoveFrom = new_instancemethod(_snap.TFltPrV_MoveFrom,None,TFltPrV)
TFltPrV.Empty = new_instancemethod(_snap.TFltPrV_Empty,None,TFltPrV)
TFltPrV.Len = new_instancemethod(_snap.TFltPrV_Len,None,TFltPrV)
TFltPrV.Reserved = new_instancemethod(_snap.TFltPrV_Reserved,None,TFltPrV)
TFltPrV.Last = new_instancemethod(_snap.TFltPrV_Last,None,TFltPrV)
TFltPrV.LastValN = new_instancemethod(_snap.TFltPrV_LastValN,None,TFltPrV)
TFltPrV.LastLast = new_instancemethod(_snap.TFltPrV_LastLast,None,TFltPrV)
TFltPrV.BegI = new_instancemethod(_snap.TFltPrV_BegI,None,TFltPrV)
TFltPrV.EndI = new_instancemethod(_snap.TFltPrV_EndI,None,TFltPrV)
TFltPrV.GetI = new_instancemethod(_snap.TFltPrV_GetI,None,TFltPrV)
TFltPrV.Add = new_instancemethod(_snap.TFltPrV_Add,None,TFltPrV)
TFltPrV.AddV = new_instancemethod(_snap.TFltPrV_AddV,None,TFltPrV)
TFltPrV.AddSorted = new_instancemethod(_snap.TFltPrV_AddSorted,None,TFltPrV)
TFltPrV.AddBackSorted = new_instancemethod(_snap.TFltPrV_AddBackSorted,None,TFltPrV)
TFltPrV.AddMerged = new_instancemethod(_snap.TFltPrV_AddMerged,None,TFltPrV)
TFltPrV.AddVMerged = new_instancemethod(_snap.TFltPrV_AddVMerged,None,TFltPrV)
TFltPrV.AddUnique = new_instancemethod(_snap.TFltPrV_AddUnique,None,TFltPrV)
TFltPrV.GetVal = new_instancemethod(_snap.TFltPrV_GetVal,None,TFltPrV)
TFltPrV.SetVal = new_instancemethod(_snap.TFltPrV_SetVal,None,TFltPrV)
TFltPrV.GetSubValV = new_instancemethod(_snap.TFltPrV_GetSubValV,None,TFltPrV)
TFltPrV.Ins = new_instancemethod(_snap.TFltPrV_Ins,None,TFltPrV)
TFltPrV.Del = new_instancemethod(_snap.TFltPrV_Del,None,TFltPrV)
TFltPrV.DelLast = new_instancemethod(_snap.TFltPrV_DelLast,None,TFltPrV)
TFltPrV.DelIfIn = new_instancemethod(_snap.TFltPrV_DelIfIn,None,TFltPrV)
TFltPrV.DelAll = new_instancemethod(_snap.TFltPrV_DelAll,None,TFltPrV)
TFltPrV.PutAll = new_instancemethod(_snap.TFltPrV_PutAll,None,TFltPrV)
TFltPrV.Swap = new_instancemethod(_snap.TFltPrV_Swap,None,TFltPrV)
TFltPrV.NextPerm = new_instancemethod(_snap.TFltPrV_NextPerm,None,TFltPrV)
TFltPrV.PrevPerm = new_instancemethod(_snap.TFltPrV_PrevPerm,None,TFltPrV)
TFltPrV.GetPivotValN = new_instancemethod(_snap.TFltPrV_GetPivotValN,None,TFltPrV)
TFltPrV.BSort = new_instancemethod(_snap.TFltPrV_BSort,None,TFltPrV)
TFltPrV.ISort = new_instancemethod(_snap.TFltPrV_ISort,None,TFltPrV)
TFltPrV.Partition = new_instancemethod(_snap.TFltPrV_Partition,None,TFltPrV)
TFltPrV.QSort = new_instancemethod(_snap.TFltPrV_QSort,None,TFltPrV)
TFltPrV.Sort = new_instancemethod(_snap.TFltPrV_Sort,None,TFltPrV)
TFltPrV.IsSorted = new_instancemethod(_snap.TFltPrV_IsSorted,None,TFltPrV)
TFltPrV.Shuffle = new_instancemethod(_snap.TFltPrV_Shuffle,None,TFltPrV)
TFltPrV.Reverse = new_instancemethod(_snap.TFltPrV_Reverse,None,TFltPrV)
TFltPrV.Merge = new_instancemethod(_snap.TFltPrV_Merge,None,TFltPrV)
TFltPrV.Intrs = new_instancemethod(_snap.TFltPrV_Intrs,None,TFltPrV)
TFltPrV.Union = new_instancemethod(_snap.TFltPrV_Union,None,TFltPrV)
TFltPrV.Diff = new_instancemethod(_snap.TFltPrV_Diff,None,TFltPrV)
TFltPrV.IntrsLen = new_instancemethod(_snap.TFltPrV_IntrsLen,None,TFltPrV)
TFltPrV.UnionLen = new_instancemethod(_snap.TFltPrV_UnionLen,None,TFltPrV)
TFltPrV.Count = new_instancemethod(_snap.TFltPrV_Count,None,TFltPrV)
TFltPrV.SearchBin = new_instancemethod(_snap.TFltPrV_SearchBin,None,TFltPrV)
TFltPrV.SearchForw = new_instancemethod(_snap.TFltPrV_SearchForw,None,TFltPrV)
TFltPrV.SearchBack = new_instancemethod(_snap.TFltPrV_SearchBack,None,TFltPrV)
TFltPrV.SearchVForw = new_instancemethod(_snap.TFltPrV_SearchVForw,None,TFltPrV)
TFltPrV.IsIn = new_instancemethod(_snap.TFltPrV_IsIn,None,TFltPrV)
TFltPrV.IsInBin = new_instancemethod(_snap.TFltPrV_IsInBin,None,TFltPrV)
TFltPrV.GetDat = new_instancemethod(_snap.TFltPrV_GetDat,None,TFltPrV)
TFltPrV.GetAddDat = new_instancemethod(_snap.TFltPrV_GetAddDat,None,TFltPrV)
TFltPrV.GetMxValN = new_instancemethod(_snap.TFltPrV_GetMxValN,None,TFltPrV)
TFltPrV_swigregister = _snap.TFltPrV_swigregister
TFltPrV_swigregister(TFltPrV)

def TFltPrV_SwapI(*args):
  """
    TFltPrV_SwapI(TFltPr LVal, TFltPr RVal)

    Parameters:
        LVal: TVec< TPair< TFlt,TFlt > >::TIter
        RVal: TVec< TPair< TFlt,TFlt > >::TIter

    """
  return _snap.TFltPrV_SwapI(*args)

def TFltPrV_GetV(*args):
  """
    GetV(TFltPr Val1) -> TFltPrV

    Parameters:
        Val1: TPair< TFlt,TFlt > const &

    GetV(TFltPr Val1, TFltPr Val2) -> TFltPrV

    Parameters:
        Val1: TPair< TFlt,TFlt > const &
        Val2: TPair< TFlt,TFlt > const &

    GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3) -> TFltPrV

    Parameters:
        Val1: TPair< TFlt,TFlt > const &
        Val2: TPair< TFlt,TFlt > const &
        Val3: TPair< TFlt,TFlt > const &

    GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4) -> TFltPrV

    Parameters:
        Val1: TPair< TFlt,TFlt > const &
        Val2: TPair< TFlt,TFlt > const &
        Val3: TPair< TFlt,TFlt > const &
        Val4: TPair< TFlt,TFlt > const &

    GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4, TFltPr Val5) -> TFltPrV

    Parameters:
        Val1: TPair< TFlt,TFlt > const &
        Val2: TPair< TFlt,TFlt > const &
        Val3: TPair< TFlt,TFlt > const &
        Val4: TPair< TFlt,TFlt > const &
        Val5: TPair< TFlt,TFlt > const &

    GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4, TFltPr Val5, TFltPr Val6) -> TFltPrV

    Parameters:
        Val1: TPair< TFlt,TFlt > const &
        Val2: TPair< TFlt,TFlt > const &
        Val3: TPair< TFlt,TFlt > const &
        Val4: TPair< TFlt,TFlt > const &
        Val5: TPair< TFlt,TFlt > const &
        Val6: TPair< TFlt,TFlt > const &

    GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4, TFltPr Val5, TFltPr Val6, TFltPr Val7) -> TFltPrV

    Parameters:
        Val1: TPair< TFlt,TFlt > const &
        Val2: TPair< TFlt,TFlt > const &
        Val3: TPair< TFlt,TFlt > const &
        Val4: TPair< TFlt,TFlt > const &
        Val5: TPair< TFlt,TFlt > const &
        Val6: TPair< TFlt,TFlt > const &
        Val7: TPair< TFlt,TFlt > const &

    GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4, TFltPr Val5, TFltPr Val6, TFltPr Val7, 
        TFltPr Val8) -> TFltPrV

    Parameters:
        Val1: TPair< TFlt,TFlt > const &
        Val2: TPair< TFlt,TFlt > const &
        Val3: TPair< TFlt,TFlt > const &
        Val4: TPair< TFlt,TFlt > const &
        Val5: TPair< TFlt,TFlt > const &
        Val6: TPair< TFlt,TFlt > const &
        Val7: TPair< TFlt,TFlt > const &
        Val8: TPair< TFlt,TFlt > const &

    TFltPrV_GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4, TFltPr Val5, TFltPr Val6, TFltPr Val7, 
        TFltPr Val8, TFltPr Val9) -> TFltPrV

    Parameters:
        Val1: TPair< TFlt,TFlt > const &
        Val2: TPair< TFlt,TFlt > const &
        Val3: TPair< TFlt,TFlt > const &
        Val4: TPair< TFlt,TFlt > const &
        Val5: TPair< TFlt,TFlt > const &
        Val6: TPair< TFlt,TFlt > const &
        Val7: TPair< TFlt,TFlt > const &
        Val8: TPair< TFlt,TFlt > const &
        Val9: TPair< TFlt,TFlt > const &

    """
  return _snap.TFltPrV_GetV(*args)

class TIntTrV(object):
    """Proxy of C++ TVec<(TIntTr)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TIntTrV
    def __init__(self, *args): 
        """
        __init__(TVec<(TIntTr)> self) -> TIntTrV
        __init__(TVec<(TIntTr)> self, TIntTrV Vec) -> TIntTrV

        Parameters:
            Vec: TVec< TTriple< TInt,TInt,TInt >,int > const &

        __init__(TVec<(TIntTr)> self, int const & _Vals) -> TIntTrV

        Parameters:
            _Vals: int const &

        __init__(TVec<(TIntTr)> self, int const & _MxVals, int const & _Vals) -> TIntTrV

        Parameters:
            _MxVals: int const &
            _Vals: int const &

        __init__(TVec<(TIntTr)> self, TIntTr _ValT, int const & _Vals) -> TIntTrV

        Parameters:
            _ValT: TTriple< TInt,TInt,TInt > *
            _Vals: int const &

        __init__(TVec<(TIntTr)> self, TSIn SIn) -> TIntTrV

        Parameters:
            SIn: TSIn &

        """
        _snap.TIntTrV_swiginit(self,_snap.new_TIntTrV(*args))
    def Load(self, *args):
        """
        Load(TIntTrV self, TSIn SIn)

        Parameters:
            SIn: TSIn &

        """
        return _snap.TIntTrV_Load(self, *args)

    def Save(self, *args):
        """
        Save(TIntTrV self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.TIntTrV_Save(self, *args)

    def __add__(self, *args):
        """
        __add__(TIntTrV self, TIntTr Val) -> TIntTrV

        Parameters:
            Val: TTriple< TInt,TInt,TInt > const &

        """
        return _snap.TIntTrV___add__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(TIntTrV self, TIntTrV Vec) -> bool

        Parameters:
            Vec: TVec< TTriple< TInt,TInt,TInt >,int > const &

        """
        return _snap.TIntTrV___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TIntTrV self, TIntTrV Vec) -> bool

        Parameters:
            Vec: TVec< TTriple< TInt,TInt,TInt >,int > const &

        """
        return _snap.TIntTrV___lt__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(TIntTrV self) -> int

        Parameters:
            self: TVec< TIntTr > const *

        """
        return _snap.TIntTrV_GetMemUsed(self)

    def GetMemSize(self):
        """
        GetMemSize(TIntTrV self) -> int

        Parameters:
            self: TVec< TIntTr > const *

        """
        return _snap.TIntTrV_GetMemSize(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TIntTrV self) -> int

        Parameters:
            self: TVec< TIntTr > const *

        """
        return _snap.TIntTrV_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(TIntTrV self) -> int

        Parameters:
            self: TVec< TIntTr > const *

        """
        return _snap.TIntTrV_GetSecHashCd(self)

    def Gen(self, *args):
        """
        Gen(TIntTrV self, int const & _Vals)

        Parameters:
            _Vals: int const &

        Gen(TIntTrV self, int const & _MxVals, int const & _Vals)

        Parameters:
            _MxVals: int const &
            _Vals: int const &

        """
        return _snap.TIntTrV_Gen(self, *args)

    def GenExt(self, *args):
        """
        GenExt(TIntTrV self, TIntTr _ValT, int const & _Vals)

        Parameters:
            _ValT: TTriple< TInt,TInt,TInt > *
            _Vals: int const &

        """
        return _snap.TIntTrV_GenExt(self, *args)

    def IsExt(self):
        """
        IsExt(TIntTrV self) -> bool

        Parameters:
            self: TVec< TIntTr > const *

        """
        return _snap.TIntTrV_IsExt(self)

    def Reserve(self, *args):
        """
        Reserve(TIntTrV self, int const & _MxVals)

        Parameters:
            _MxVals: int const &

        Reserve(TIntTrV self, int const & _MxVals, int const & _Vals)

        Parameters:
            _MxVals: int const &
            _Vals: int const &

        """
        return _snap.TIntTrV_Reserve(self, *args)

    def Clr(self, *args):
        """
        Clr(TIntTrV self, bool const & DoDel=True, int const & NoDelLim=-1)

        Parameters:
            DoDel: bool const &
            NoDelLim: int const &

        Clr(TIntTrV self, bool const & DoDel=True)

        Parameters:
            DoDel: bool const &

        Clr(TIntTrV self)

        Parameters:
            self: TVec< TIntTr > *

        """
        return _snap.TIntTrV_Clr(self, *args)

    def Trunc(self, *args):
        """
        Trunc(TIntTrV self, int const & _Vals=-1)

        Parameters:
            _Vals: int const &

        Trunc(TIntTrV self)

        Parameters:
            self: TVec< TIntTr > *

        """
        return _snap.TIntTrV_Trunc(self, *args)

    def Pack(self):
        """
        Pack(TIntTrV self)

        Parameters:
            self: TVec< TIntTr > *

        """
        return _snap.TIntTrV_Pack(self)

    def MoveFrom(self, *args):
        """
        MoveFrom(TIntTrV self, TIntTrV Vec)

        Parameters:
            Vec: TVec< TTriple< TInt,TInt,TInt >,int > &

        """
        return _snap.TIntTrV_MoveFrom(self, *args)

    def Empty(self):
        """
        Empty(TIntTrV self) -> bool

        Parameters:
            self: TVec< TIntTr > const *

        """
        return _snap.TIntTrV_Empty(self)

    def Len(self):
        """
        Len(TIntTrV self) -> int

        Parameters:
            self: TVec< TIntTr > const *

        """
        return _snap.TIntTrV_Len(self)

    def Reserved(self):
        """
        Reserved(TIntTrV self) -> int

        Parameters:
            self: TVec< TIntTr > const *

        """
        return _snap.TIntTrV_Reserved(self)

    def Last(self, *args):
        """
        Last(TIntTrV self) -> TIntTr
        Last(TIntTrV self) -> TIntTr

        Parameters:
            self: TVec< TIntTr > *

        """
        return _snap.TIntTrV_Last(self, *args)

    def LastValN(self):
        """
        LastValN(TIntTrV self) -> int

        Parameters:
            self: TVec< TIntTr > const *

        """
        return _snap.TIntTrV_LastValN(self)

    def LastLast(self, *args):
        """
        LastLast(TIntTrV self) -> TIntTr
        LastLast(TIntTrV self) -> TIntTr

        Parameters:
            self: TVec< TIntTr > *

        """
        return _snap.TIntTrV_LastLast(self, *args)

    def BegI(self):
        """
        BegI(TIntTrV self) -> TIntTr

        Parameters:
            self: TVec< TIntTr > const *

        """
        return _snap.TIntTrV_BegI(self)

    def EndI(self):
        """
        EndI(TIntTrV self) -> TIntTr

        Parameters:
            self: TVec< TIntTr > const *

        """
        return _snap.TIntTrV_EndI(self)

    def GetI(self, *args):
        """
        GetI(TIntTrV self, int const & ValN) -> TIntTr

        Parameters:
            ValN: int const &

        """
        return _snap.TIntTrV_GetI(self, *args)

    def Add(self, *args):
        """
        Add(TIntTrV self) -> int
        Add(TIntTrV self, TIntTr Val) -> int

        Parameters:
            Val: TTriple< TInt,TInt,TInt > const &

        Add(TIntTrV self, TIntTr Val) -> int

        Parameters:
            Val: TTriple< TInt,TInt,TInt > &

        Add(TIntTrV self, TIntTr Val, int const & ResizeLen) -> int

        Parameters:
            Val: TTriple< TInt,TInt,TInt > const &
            ResizeLen: int const &

        """
        return _snap.TIntTrV_Add(self, *args)

    def AddV(self, *args):
        """
        AddV(TIntTrV self, TIntTrV ValV) -> int

        Parameters:
            ValV: TVec< TTriple< TInt,TInt,TInt >,int > const &

        """
        return _snap.TIntTrV_AddV(self, *args)

    def AddSorted(self, *args):
        """
        AddSorted(TIntTrV self, TIntTr Val, bool const & Asc=True, int const & _MxVals=-1) -> int

        Parameters:
            Val: TTriple< TInt,TInt,TInt > const &
            Asc: bool const &
            _MxVals: int const &

        AddSorted(TIntTrV self, TIntTr Val, bool const & Asc=True) -> int

        Parameters:
            Val: TTriple< TInt,TInt,TInt > const &
            Asc: bool const &

        AddSorted(TIntTrV self, TIntTr Val) -> int

        Parameters:
            Val: TTriple< TInt,TInt,TInt > const &

        """
        return _snap.TIntTrV_AddSorted(self, *args)

    def AddBackSorted(self, *args):
        """
        AddBackSorted(TIntTrV self, TIntTr Val, bool const & Asc) -> int

        Parameters:
            Val: TTriple< TInt,TInt,TInt > const &
            Asc: bool const &

        """
        return _snap.TIntTrV_AddBackSorted(self, *args)

    def AddMerged(self, *args):
        """
        AddMerged(TIntTrV self, TIntTr Val) -> int

        Parameters:
            Val: TTriple< TInt,TInt,TInt > const &

        """
        return _snap.TIntTrV_AddMerged(self, *args)

    def AddVMerged(self, *args):
        """
        AddVMerged(TIntTrV self, TIntTrV ValV) -> int

        Parameters:
            ValV: TVec< TTriple< TInt,TInt,TInt >,int > const &

        """
        return _snap.TIntTrV_AddVMerged(self, *args)

    def AddUnique(self, *args):
        """
        AddUnique(TIntTrV self, TIntTr Val) -> int

        Parameters:
            Val: TTriple< TInt,TInt,TInt > const &

        """
        return _snap.TIntTrV_AddUnique(self, *args)

    def GetVal(self, *args):
        """
        GetVal(TIntTrV self, int const & ValN) -> TIntTr

        Parameters:
            ValN: int const &

        GetVal(TIntTrV self, int const & ValN) -> TIntTr

        Parameters:
            ValN: int const &

        """
        return _snap.TIntTrV_GetVal(self, *args)

    def SetVal(self, *args):
        """
        SetVal(TIntTrV self, int const & ValN, TIntTr Val)

        Parameters:
            ValN: int const &
            Val: TTriple< TInt,TInt,TInt > const &

        """
        return _snap.TIntTrV_SetVal(self, *args)

    def GetSubValV(self, *args):
        """
        GetSubValV(TIntTrV self, int const & BValN, int const & EValN, TIntTrV ValV)

        Parameters:
            BValN: int const &
            EValN: int const &
            ValV: TVec< TTriple< TInt,TInt,TInt >,int > &

        """
        return _snap.TIntTrV_GetSubValV(self, *args)

    def Ins(self, *args):
        """
        Ins(TIntTrV self, int const & ValN, TIntTr Val)

        Parameters:
            ValN: int const &
            Val: TTriple< TInt,TInt,TInt > const &

        """
        return _snap.TIntTrV_Ins(self, *args)

    def Del(self, *args):
        """
        Del(TIntTrV self, int const & ValN)

        Parameters:
            ValN: int const &

        Del(TIntTrV self, int const & MnValN, int const & MxValN)

        Parameters:
            MnValN: int const &
            MxValN: int const &

        """
        return _snap.TIntTrV_Del(self, *args)

    def DelLast(self):
        """
        DelLast(TIntTrV self)

        Parameters:
            self: TVec< TIntTr > *

        """
        return _snap.TIntTrV_DelLast(self)

    def DelIfIn(self, *args):
        """
        DelIfIn(TIntTrV self, TIntTr Val) -> bool

        Parameters:
            Val: TTriple< TInt,TInt,TInt > const &

        """
        return _snap.TIntTrV_DelIfIn(self, *args)

    def DelAll(self, *args):
        """
        DelAll(TIntTrV self, TIntTr Val)

        Parameters:
            Val: TTriple< TInt,TInt,TInt > const &

        """
        return _snap.TIntTrV_DelAll(self, *args)

    def PutAll(self, *args):
        """
        PutAll(TIntTrV self, TIntTr Val)

        Parameters:
            Val: TTriple< TInt,TInt,TInt > const &

        """
        return _snap.TIntTrV_PutAll(self, *args)

    def Swap(self, *args):
        """
        Swap(TIntTrV self, TIntTrV Vec)

        Parameters:
            Vec: TVec< TTriple< TInt,TInt,TInt >,int > &

        Swap(TIntTrV self, int const & ValN1, int const & ValN2)

        Parameters:
            ValN1: int const &
            ValN2: int const &

        """
        return _snap.TIntTrV_Swap(self, *args)

    def SwapI(*args):
        """
        SwapI(TIntTr LVal, TIntTr RVal)

        Parameters:
            LVal: TVec< TTriple< TInt,TInt,TInt > >::TIter
            RVal: TVec< TTriple< TInt,TInt,TInt > >::TIter

        """
        return _snap.TIntTrV_SwapI(*args)

    SwapI = staticmethod(SwapI)
    def NextPerm(self):
        """
        NextPerm(TIntTrV self) -> bool

        Parameters:
            self: TVec< TIntTr > *

        """
        return _snap.TIntTrV_NextPerm(self)

    def PrevPerm(self):
        """
        PrevPerm(TIntTrV self) -> bool

        Parameters:
            self: TVec< TIntTr > *

        """
        return _snap.TIntTrV_PrevPerm(self)

    def GetPivotValN(self, *args):
        """
        GetPivotValN(TIntTrV self, int const & LValN, int const & RValN) -> int

        Parameters:
            LValN: int const &
            RValN: int const &

        """
        return _snap.TIntTrV_GetPivotValN(self, *args)

    def BSort(self, *args):
        """
        BSort(TIntTrV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters:
            MnLValN: int const &
            MxRValN: int const &
            Asc: bool const &

        """
        return _snap.TIntTrV_BSort(self, *args)

    def ISort(self, *args):
        """
        ISort(TIntTrV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters:
            MnLValN: int const &
            MxRValN: int const &
            Asc: bool const &

        """
        return _snap.TIntTrV_ISort(self, *args)

    def Partition(self, *args):
        """
        Partition(TIntTrV self, int const & MnLValN, int const & MxRValN, bool const & Asc) -> int

        Parameters:
            MnLValN: int const &
            MxRValN: int const &
            Asc: bool const &

        """
        return _snap.TIntTrV_Partition(self, *args)

    def QSort(self, *args):
        """
        QSort(TIntTrV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters:
            MnLValN: int const &
            MxRValN: int const &
            Asc: bool const &

        """
        return _snap.TIntTrV_QSort(self, *args)

    def Sort(self, Asc=True):
        """
        Sort(TIntTrV self, bool const & Asc=True)

        Parameters:
            Asc: bool const &

        Sort(TIntTrV self)

        Parameters:
            self: TVec< TIntTr > *

        """
        return _snap.TIntTrV_Sort(self, Asc)

    def IsSorted(self, Asc=True):
        """
        IsSorted(TIntTrV self, bool const & Asc=True) -> bool

        Parameters:
            Asc: bool const &

        IsSorted(TIntTrV self) -> bool

        Parameters:
            self: TVec< TIntTr > const *

        """
        return _snap.TIntTrV_IsSorted(self, Asc)

    def Shuffle(self, *args):
        """
        Shuffle(TIntTrV self, TRnd Rnd)

        Parameters:
            Rnd: TRnd &

        """
        return _snap.TIntTrV_Shuffle(self, *args)

    def Reverse(self, *args):
        """
        Reverse(TIntTrV self)
        Reverse(TIntTrV self, int LValN, int RValN)

        Parameters:
            LValN: int
            RValN: int

        """
        return _snap.TIntTrV_Reverse(self, *args)

    def Merge(self):
        """
        Merge(TIntTrV self)

        Parameters:
            self: TVec< TIntTr > *

        """
        return _snap.TIntTrV_Merge(self)

    def Intrs(self, *args):
        """
        Intrs(TIntTrV self, TIntTrV ValV)

        Parameters:
            ValV: TVec< TTriple< TInt,TInt,TInt >,int > const &

        Intrs(TIntTrV self, TIntTrV ValV, TIntTrV DstValV)

        Parameters:
            ValV: TVec< TTriple< TInt,TInt,TInt >,int > const &
            DstValV: TVec< TTriple< TInt,TInt,TInt >,int > &

        """
        return _snap.TIntTrV_Intrs(self, *args)

    def Union(self, *args):
        """
        Union(TIntTrV self, TIntTrV ValV)

        Parameters:
            ValV: TVec< TTriple< TInt,TInt,TInt >,int > const &

        Union(TIntTrV self, TIntTrV ValV, TIntTrV DstValV)

        Parameters:
            ValV: TVec< TTriple< TInt,TInt,TInt >,int > const &
            DstValV: TVec< TTriple< TInt,TInt,TInt >,int > &

        """
        return _snap.TIntTrV_Union(self, *args)

    def Diff(self, *args):
        """
        Diff(TIntTrV self, TIntTrV ValV)

        Parameters:
            ValV: TVec< TTriple< TInt,TInt,TInt >,int > const &

        Diff(TIntTrV self, TIntTrV ValV, TIntTrV DstValV)

        Parameters:
            ValV: TVec< TTriple< TInt,TInt,TInt >,int > const &
            DstValV: TVec< TTriple< TInt,TInt,TInt >,int > &

        """
        return _snap.TIntTrV_Diff(self, *args)

    def IntrsLen(self, *args):
        """
        IntrsLen(TIntTrV self, TIntTrV ValV) -> int

        Parameters:
            ValV: TVec< TTriple< TInt,TInt,TInt >,int > const &

        """
        return _snap.TIntTrV_IntrsLen(self, *args)

    def UnionLen(self, *args):
        """
        UnionLen(TIntTrV self, TIntTrV ValV) -> int

        Parameters:
            ValV: TVec< TTriple< TInt,TInt,TInt >,int > const &

        """
        return _snap.TIntTrV_UnionLen(self, *args)

    def Count(self, *args):
        """
        Count(TIntTrV self, TIntTr Val) -> int

        Parameters:
            Val: TTriple< TInt,TInt,TInt > const &

        """
        return _snap.TIntTrV_Count(self, *args)

    def SearchBin(self, *args):
        """
        SearchBin(TIntTrV self, TIntTr Val) -> int

        Parameters:
            Val: TTriple< TInt,TInt,TInt > const &

        SearchBin(TIntTrV self, TIntTr Val, int & InsValN) -> int

        Parameters:
            Val: TTriple< TInt,TInt,TInt > const &
            InsValN: int &

        """
        return _snap.TIntTrV_SearchBin(self, *args)

    def SearchForw(self, *args):
        """
        SearchForw(TIntTrV self, TIntTr Val, int const & BValN=0) -> int

        Parameters:
            Val: TTriple< TInt,TInt,TInt > const &
            BValN: int const &

        SearchForw(TIntTrV self, TIntTr Val) -> int

        Parameters:
            Val: TTriple< TInt,TInt,TInt > const &

        """
        return _snap.TIntTrV_SearchForw(self, *args)

    def SearchBack(self, *args):
        """
        SearchBack(TIntTrV self, TIntTr Val) -> int

        Parameters:
            Val: TTriple< TInt,TInt,TInt > const &

        """
        return _snap.TIntTrV_SearchBack(self, *args)

    def SearchVForw(self, *args):
        """
        SearchVForw(TIntTrV self, TIntTrV ValV, int const & BValN=0) -> int

        Parameters:
            ValV: TVec< TTriple< TInt,TInt,TInt >,int > const &
            BValN: int const &

        SearchVForw(TIntTrV self, TIntTrV ValV) -> int

        Parameters:
            ValV: TVec< TTriple< TInt,TInt,TInt >,int > const &

        """
        return _snap.TIntTrV_SearchVForw(self, *args)

    def IsIn(self, *args):
        """
        IsIn(TIntTrV self, TIntTr Val) -> bool

        Parameters:
            Val: TTriple< TInt,TInt,TInt > const &

        IsIn(TIntTrV self, TIntTr Val, int & ValN) -> bool

        Parameters:
            Val: TTriple< TInt,TInt,TInt > const &
            ValN: int &

        """
        return _snap.TIntTrV_IsIn(self, *args)

    def IsInBin(self, *args):
        """
        IsInBin(TIntTrV self, TIntTr Val) -> bool

        Parameters:
            Val: TTriple< TInt,TInt,TInt > const &

        """
        return _snap.TIntTrV_IsInBin(self, *args)

    def GetDat(self, *args):
        """
        GetDat(TIntTrV self, TIntTr Val) -> TIntTr

        Parameters:
            Val: TTriple< TInt,TInt,TInt > const &

        """
        return _snap.TIntTrV_GetDat(self, *args)

    def GetAddDat(self, *args):
        """
        GetAddDat(TIntTrV self, TIntTr Val) -> TIntTr

        Parameters:
            Val: TTriple< TInt,TInt,TInt > const &

        """
        return _snap.TIntTrV_GetAddDat(self, *args)

    def GetMxValN(self):
        """
        GetMxValN(TIntTrV self) -> int

        Parameters:
            self: TVec< TIntTr > const *

        """
        return _snap.TIntTrV_GetMxValN(self)

    def GetV(*args):
        """
        GetV(TIntTr Val1) -> TIntTrV

        Parameters:
            Val1: TTriple< TInt,TInt,TInt > const &

        GetV(TIntTr Val1, TIntTr Val2) -> TIntTrV

        Parameters:
            Val1: TTriple< TInt,TInt,TInt > const &
            Val2: TTriple< TInt,TInt,TInt > const &

        GetV(TIntTr Val1, TIntTr Val2, TIntTr Val3) -> TIntTrV

        Parameters:
            Val1: TTriple< TInt,TInt,TInt > const &
            Val2: TTriple< TInt,TInt,TInt > const &
            Val3: TTriple< TInt,TInt,TInt > const &

        GetV(TIntTr Val1, TIntTr Val2, TIntTr Val3, TIntTr Val4) -> TIntTrV

        Parameters:
            Val1: TTriple< TInt,TInt,TInt > const &
            Val2: TTriple< TInt,TInt,TInt > const &
            Val3: TTriple< TInt,TInt,TInt > const &
            Val4: TTriple< TInt,TInt,TInt > const &

        GetV(TIntTr Val1, TIntTr Val2, TIntTr Val3, TIntTr Val4, TIntTr Val5) -> TIntTrV

        Parameters:
            Val1: TTriple< TInt,TInt,TInt > const &
            Val2: TTriple< TInt,TInt,TInt > const &
            Val3: TTriple< TInt,TInt,TInt > const &
            Val4: TTriple< TInt,TInt,TInt > const &
            Val5: TTriple< TInt,TInt,TInt > const &

        GetV(TIntTr Val1, TIntTr Val2, TIntTr Val3, TIntTr Val4, TIntTr Val5, TIntTr Val6) -> TIntTrV

        Parameters:
            Val1: TTriple< TInt,TInt,TInt > const &
            Val2: TTriple< TInt,TInt,TInt > const &
            Val3: TTriple< TInt,TInt,TInt > const &
            Val4: TTriple< TInt,TInt,TInt > const &
            Val5: TTriple< TInt,TInt,TInt > const &
            Val6: TTriple< TInt,TInt,TInt > const &

        GetV(TIntTr Val1, TIntTr Val2, TIntTr Val3, TIntTr Val4, TIntTr Val5, TIntTr Val6, TIntTr Val7) -> TIntTrV

        Parameters:
            Val1: TTriple< TInt,TInt,TInt > const &
            Val2: TTriple< TInt,TInt,TInt > const &
            Val3: TTriple< TInt,TInt,TInt > const &
            Val4: TTriple< TInt,TInt,TInt > const &
            Val5: TTriple< TInt,TInt,TInt > const &
            Val6: TTriple< TInt,TInt,TInt > const &
            Val7: TTriple< TInt,TInt,TInt > const &

        GetV(TIntTr Val1, TIntTr Val2, TIntTr Val3, TIntTr Val4, TIntTr Val5, TIntTr Val6, TIntTr Val7, 
            TIntTr Val8) -> TIntTrV

        Parameters:
            Val1: TTriple< TInt,TInt,TInt > const &
            Val2: TTriple< TInt,TInt,TInt > const &
            Val3: TTriple< TInt,TInt,TInt > const &
            Val4: TTriple< TInt,TInt,TInt > const &
            Val5: TTriple< TInt,TInt,TInt > const &
            Val6: TTriple< TInt,TInt,TInt > const &
            Val7: TTriple< TInt,TInt,TInt > const &
            Val8: TTriple< TInt,TInt,TInt > const &

        GetV(TIntTr Val1, TIntTr Val2, TIntTr Val3, TIntTr Val4, TIntTr Val5, TIntTr Val6, TIntTr Val7, 
            TIntTr Val8, TIntTr Val9) -> TIntTrV

        Parameters:
            Val1: TTriple< TInt,TInt,TInt > const &
            Val2: TTriple< TInt,TInt,TInt > const &
            Val3: TTriple< TInt,TInt,TInt > const &
            Val4: TTriple< TInt,TInt,TInt > const &
            Val5: TTriple< TInt,TInt,TInt > const &
            Val6: TTriple< TInt,TInt,TInt > const &
            Val7: TTriple< TInt,TInt,TInt > const &
            Val8: TTriple< TInt,TInt,TInt > const &
            Val9: TTriple< TInt,TInt,TInt > const &

        """
        return _snap.TIntTrV_GetV(*args)

    GetV = staticmethod(GetV)
TIntTrV.Load = new_instancemethod(_snap.TIntTrV_Load,None,TIntTrV)
TIntTrV.Save = new_instancemethod(_snap.TIntTrV_Save,None,TIntTrV)
TIntTrV.__add__ = new_instancemethod(_snap.TIntTrV___add__,None,TIntTrV)
TIntTrV.__eq__ = new_instancemethod(_snap.TIntTrV___eq__,None,TIntTrV)
TIntTrV.__lt__ = new_instancemethod(_snap.TIntTrV___lt__,None,TIntTrV)
TIntTrV.GetMemUsed = new_instancemethod(_snap.TIntTrV_GetMemUsed,None,TIntTrV)
TIntTrV.GetMemSize = new_instancemethod(_snap.TIntTrV_GetMemSize,None,TIntTrV)
TIntTrV.GetPrimHashCd = new_instancemethod(_snap.TIntTrV_GetPrimHashCd,None,TIntTrV)
TIntTrV.GetSecHashCd = new_instancemethod(_snap.TIntTrV_GetSecHashCd,None,TIntTrV)
TIntTrV.Gen = new_instancemethod(_snap.TIntTrV_Gen,None,TIntTrV)
TIntTrV.GenExt = new_instancemethod(_snap.TIntTrV_GenExt,None,TIntTrV)
TIntTrV.IsExt = new_instancemethod(_snap.TIntTrV_IsExt,None,TIntTrV)
TIntTrV.Reserve = new_instancemethod(_snap.TIntTrV_Reserve,None,TIntTrV)
TIntTrV.Clr = new_instancemethod(_snap.TIntTrV_Clr,None,TIntTrV)
TIntTrV.Trunc = new_instancemethod(_snap.TIntTrV_Trunc,None,TIntTrV)
TIntTrV.Pack = new_instancemethod(_snap.TIntTrV_Pack,None,TIntTrV)
TIntTrV.MoveFrom = new_instancemethod(_snap.TIntTrV_MoveFrom,None,TIntTrV)
TIntTrV.Empty = new_instancemethod(_snap.TIntTrV_Empty,None,TIntTrV)
TIntTrV.Len = new_instancemethod(_snap.TIntTrV_Len,None,TIntTrV)
TIntTrV.Reserved = new_instancemethod(_snap.TIntTrV_Reserved,None,TIntTrV)
TIntTrV.Last = new_instancemethod(_snap.TIntTrV_Last,None,TIntTrV)
TIntTrV.LastValN = new_instancemethod(_snap.TIntTrV_LastValN,None,TIntTrV)
TIntTrV.LastLast = new_instancemethod(_snap.TIntTrV_LastLast,None,TIntTrV)
TIntTrV.BegI = new_instancemethod(_snap.TIntTrV_BegI,None,TIntTrV)
TIntTrV.EndI = new_instancemethod(_snap.TIntTrV_EndI,None,TIntTrV)
TIntTrV.GetI = new_instancemethod(_snap.TIntTrV_GetI,None,TIntTrV)
TIntTrV.Add = new_instancemethod(_snap.TIntTrV_Add,None,TIntTrV)
TIntTrV.AddV = new_instancemethod(_snap.TIntTrV_AddV,None,TIntTrV)
TIntTrV.AddSorted = new_instancemethod(_snap.TIntTrV_AddSorted,None,TIntTrV)
TIntTrV.AddBackSorted = new_instancemethod(_snap.TIntTrV_AddBackSorted,None,TIntTrV)
TIntTrV.AddMerged = new_instancemethod(_snap.TIntTrV_AddMerged,None,TIntTrV)
TIntTrV.AddVMerged = new_instancemethod(_snap.TIntTrV_AddVMerged,None,TIntTrV)
TIntTrV.AddUnique = new_instancemethod(_snap.TIntTrV_AddUnique,None,TIntTrV)
TIntTrV.GetVal = new_instancemethod(_snap.TIntTrV_GetVal,None,TIntTrV)
TIntTrV.SetVal = new_instancemethod(_snap.TIntTrV_SetVal,None,TIntTrV)
TIntTrV.GetSubValV = new_instancemethod(_snap.TIntTrV_GetSubValV,None,TIntTrV)
TIntTrV.Ins = new_instancemethod(_snap.TIntTrV_Ins,None,TIntTrV)
TIntTrV.Del = new_instancemethod(_snap.TIntTrV_Del,None,TIntTrV)
TIntTrV.DelLast = new_instancemethod(_snap.TIntTrV_DelLast,None,TIntTrV)
TIntTrV.DelIfIn = new_instancemethod(_snap.TIntTrV_DelIfIn,None,TIntTrV)
TIntTrV.DelAll = new_instancemethod(_snap.TIntTrV_DelAll,None,TIntTrV)
TIntTrV.PutAll = new_instancemethod(_snap.TIntTrV_PutAll,None,TIntTrV)
TIntTrV.Swap = new_instancemethod(_snap.TIntTrV_Swap,None,TIntTrV)
TIntTrV.NextPerm = new_instancemethod(_snap.TIntTrV_NextPerm,None,TIntTrV)
TIntTrV.PrevPerm = new_instancemethod(_snap.TIntTrV_PrevPerm,None,TIntTrV)
TIntTrV.GetPivotValN = new_instancemethod(_snap.TIntTrV_GetPivotValN,None,TIntTrV)
TIntTrV.BSort = new_instancemethod(_snap.TIntTrV_BSort,None,TIntTrV)
TIntTrV.ISort = new_instancemethod(_snap.TIntTrV_ISort,None,TIntTrV)
TIntTrV.Partition = new_instancemethod(_snap.TIntTrV_Partition,None,TIntTrV)
TIntTrV.QSort = new_instancemethod(_snap.TIntTrV_QSort,None,TIntTrV)
TIntTrV.Sort = new_instancemethod(_snap.TIntTrV_Sort,None,TIntTrV)
TIntTrV.IsSorted = new_instancemethod(_snap.TIntTrV_IsSorted,None,TIntTrV)
TIntTrV.Shuffle = new_instancemethod(_snap.TIntTrV_Shuffle,None,TIntTrV)
TIntTrV.Reverse = new_instancemethod(_snap.TIntTrV_Reverse,None,TIntTrV)
TIntTrV.Merge = new_instancemethod(_snap.TIntTrV_Merge,None,TIntTrV)
TIntTrV.Intrs = new_instancemethod(_snap.TIntTrV_Intrs,None,TIntTrV)
TIntTrV.Union = new_instancemethod(_snap.TIntTrV_Union,None,TIntTrV)
TIntTrV.Diff = new_instancemethod(_snap.TIntTrV_Diff,None,TIntTrV)
TIntTrV.IntrsLen = new_instancemethod(_snap.TIntTrV_IntrsLen,None,TIntTrV)
TIntTrV.UnionLen = new_instancemethod(_snap.TIntTrV_UnionLen,None,TIntTrV)
TIntTrV.Count = new_instancemethod(_snap.TIntTrV_Count,None,TIntTrV)
TIntTrV.SearchBin = new_instancemethod(_snap.TIntTrV_SearchBin,None,TIntTrV)
TIntTrV.SearchForw = new_instancemethod(_snap.TIntTrV_SearchForw,None,TIntTrV)
TIntTrV.SearchBack = new_instancemethod(_snap.TIntTrV_SearchBack,None,TIntTrV)
TIntTrV.SearchVForw = new_instancemethod(_snap.TIntTrV_SearchVForw,None,TIntTrV)
TIntTrV.IsIn = new_instancemethod(_snap.TIntTrV_IsIn,None,TIntTrV)
TIntTrV.IsInBin = new_instancemethod(_snap.TIntTrV_IsInBin,None,TIntTrV)
TIntTrV.GetDat = new_instancemethod(_snap.TIntTrV_GetDat,None,TIntTrV)
TIntTrV.GetAddDat = new_instancemethod(_snap.TIntTrV_GetAddDat,None,TIntTrV)
TIntTrV.GetMxValN = new_instancemethod(_snap.TIntTrV_GetMxValN,None,TIntTrV)
TIntTrV_swigregister = _snap.TIntTrV_swigregister
TIntTrV_swigregister(TIntTrV)

def TIntTrV_SwapI(*args):
  """
    TIntTrV_SwapI(TIntTr LVal, TIntTr RVal)

    Parameters:
        LVal: TVec< TTriple< TInt,TInt,TInt > >::TIter
        RVal: TVec< TTriple< TInt,TInt,TInt > >::TIter

    """
  return _snap.TIntTrV_SwapI(*args)

def TIntTrV_GetV(*args):
  """
    GetV(TIntTr Val1) -> TIntTrV

    Parameters:
        Val1: TTriple< TInt,TInt,TInt > const &

    GetV(TIntTr Val1, TIntTr Val2) -> TIntTrV

    Parameters:
        Val1: TTriple< TInt,TInt,TInt > const &
        Val2: TTriple< TInt,TInt,TInt > const &

    GetV(TIntTr Val1, TIntTr Val2, TIntTr Val3) -> TIntTrV

    Parameters:
        Val1: TTriple< TInt,TInt,TInt > const &
        Val2: TTriple< TInt,TInt,TInt > const &
        Val3: TTriple< TInt,TInt,TInt > const &

    GetV(TIntTr Val1, TIntTr Val2, TIntTr Val3, TIntTr Val4) -> TIntTrV

    Parameters:
        Val1: TTriple< TInt,TInt,TInt > const &
        Val2: TTriple< TInt,TInt,TInt > const &
        Val3: TTriple< TInt,TInt,TInt > const &
        Val4: TTriple< TInt,TInt,TInt > const &

    GetV(TIntTr Val1, TIntTr Val2, TIntTr Val3, TIntTr Val4, TIntTr Val5) -> TIntTrV

    Parameters:
        Val1: TTriple< TInt,TInt,TInt > const &
        Val2: TTriple< TInt,TInt,TInt > const &
        Val3: TTriple< TInt,TInt,TInt > const &
        Val4: TTriple< TInt,TInt,TInt > const &
        Val5: TTriple< TInt,TInt,TInt > const &

    GetV(TIntTr Val1, TIntTr Val2, TIntTr Val3, TIntTr Val4, TIntTr Val5, TIntTr Val6) -> TIntTrV

    Parameters:
        Val1: TTriple< TInt,TInt,TInt > const &
        Val2: TTriple< TInt,TInt,TInt > const &
        Val3: TTriple< TInt,TInt,TInt > const &
        Val4: TTriple< TInt,TInt,TInt > const &
        Val5: TTriple< TInt,TInt,TInt > const &
        Val6: TTriple< TInt,TInt,TInt > const &

    GetV(TIntTr Val1, TIntTr Val2, TIntTr Val3, TIntTr Val4, TIntTr Val5, TIntTr Val6, TIntTr Val7) -> TIntTrV

    Parameters:
        Val1: TTriple< TInt,TInt,TInt > const &
        Val2: TTriple< TInt,TInt,TInt > const &
        Val3: TTriple< TInt,TInt,TInt > const &
        Val4: TTriple< TInt,TInt,TInt > const &
        Val5: TTriple< TInt,TInt,TInt > const &
        Val6: TTriple< TInt,TInt,TInt > const &
        Val7: TTriple< TInt,TInt,TInt > const &

    GetV(TIntTr Val1, TIntTr Val2, TIntTr Val3, TIntTr Val4, TIntTr Val5, TIntTr Val6, TIntTr Val7, 
        TIntTr Val8) -> TIntTrV

    Parameters:
        Val1: TTriple< TInt,TInt,TInt > const &
        Val2: TTriple< TInt,TInt,TInt > const &
        Val3: TTriple< TInt,TInt,TInt > const &
        Val4: TTriple< TInt,TInt,TInt > const &
        Val5: TTriple< TInt,TInt,TInt > const &
        Val6: TTriple< TInt,TInt,TInt > const &
        Val7: TTriple< TInt,TInt,TInt > const &
        Val8: TTriple< TInt,TInt,TInt > const &

    TIntTrV_GetV(TIntTr Val1, TIntTr Val2, TIntTr Val3, TIntTr Val4, TIntTr Val5, TIntTr Val6, TIntTr Val7, 
        TIntTr Val8, TIntTr Val9) -> TIntTrV

    Parameters:
        Val1: TTriple< TInt,TInt,TInt > const &
        Val2: TTriple< TInt,TInt,TInt > const &
        Val3: TTriple< TInt,TInt,TInt > const &
        Val4: TTriple< TInt,TInt,TInt > const &
        Val5: TTriple< TInt,TInt,TInt > const &
        Val6: TTriple< TInt,TInt,TInt > const &
        Val7: TTriple< TInt,TInt,TInt > const &
        Val8: TTriple< TInt,TInt,TInt > const &
        Val9: TTriple< TInt,TInt,TInt > const &

    """
  return _snap.TIntTrV_GetV(*args)

class TIntFltKdV(object):
    """Proxy of C++ TVec<(TIntFltKd)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TIntFltKdV
    def __init__(self, *args): 
        """
        __init__(TVec<(TIntFltKd)> self) -> TIntFltKdV
        __init__(TVec<(TIntFltKd)> self, TIntFltKdV Vec) -> TIntFltKdV

        Parameters:
            Vec: TVec< TKeyDat< TInt,TFlt >,int > const &

        __init__(TVec<(TIntFltKd)> self, int const & _Vals) -> TIntFltKdV

        Parameters:
            _Vals: int const &

        __init__(TVec<(TIntFltKd)> self, int const & _MxVals, int const & _Vals) -> TIntFltKdV

        Parameters:
            _MxVals: int const &
            _Vals: int const &

        __init__(TVec<(TIntFltKd)> self, TIntFltKd _ValT, int const & _Vals) -> TIntFltKdV

        Parameters:
            _ValT: TKeyDat< TInt,TFlt > *
            _Vals: int const &

        __init__(TVec<(TIntFltKd)> self, TSIn SIn) -> TIntFltKdV

        Parameters:
            SIn: TSIn &

        """
        _snap.TIntFltKdV_swiginit(self,_snap.new_TIntFltKdV(*args))
    def Load(self, *args):
        """
        Load(TIntFltKdV self, TSIn SIn)

        Parameters:
            SIn: TSIn &

        """
        return _snap.TIntFltKdV_Load(self, *args)

    def Save(self, *args):
        """
        Save(TIntFltKdV self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.TIntFltKdV_Save(self, *args)

    def __add__(self, *args):
        """
        __add__(TIntFltKdV self, TIntFltKd Val) -> TIntFltKdV

        Parameters:
            Val: TKeyDat< TInt,TFlt > const &

        """
        return _snap.TIntFltKdV___add__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(TIntFltKdV self, TIntFltKdV Vec) -> bool

        Parameters:
            Vec: TVec< TKeyDat< TInt,TFlt >,int > const &

        """
        return _snap.TIntFltKdV___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TIntFltKdV self, TIntFltKdV Vec) -> bool

        Parameters:
            Vec: TVec< TKeyDat< TInt,TFlt >,int > const &

        """
        return _snap.TIntFltKdV___lt__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(TIntFltKdV self) -> int

        Parameters:
            self: TVec< TIntFltKd > const *

        """
        return _snap.TIntFltKdV_GetMemUsed(self)

    def GetMemSize(self):
        """
        GetMemSize(TIntFltKdV self) -> int

        Parameters:
            self: TVec< TIntFltKd > const *

        """
        return _snap.TIntFltKdV_GetMemSize(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TIntFltKdV self) -> int

        Parameters:
            self: TVec< TIntFltKd > const *

        """
        return _snap.TIntFltKdV_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(TIntFltKdV self) -> int

        Parameters:
            self: TVec< TIntFltKd > const *

        """
        return _snap.TIntFltKdV_GetSecHashCd(self)

    def Gen(self, *args):
        """
        Gen(TIntFltKdV self, int const & _Vals)

        Parameters:
            _Vals: int const &

        Gen(TIntFltKdV self, int const & _MxVals, int const & _Vals)

        Parameters:
            _MxVals: int const &
            _Vals: int const &

        """
        return _snap.TIntFltKdV_Gen(self, *args)

    def GenExt(self, *args):
        """
        GenExt(TIntFltKdV self, TIntFltKd _ValT, int const & _Vals)

        Parameters:
            _ValT: TKeyDat< TInt,TFlt > *
            _Vals: int const &

        """
        return _snap.TIntFltKdV_GenExt(self, *args)

    def IsExt(self):
        """
        IsExt(TIntFltKdV self) -> bool

        Parameters:
            self: TVec< TIntFltKd > const *

        """
        return _snap.TIntFltKdV_IsExt(self)

    def Reserve(self, *args):
        """
        Reserve(TIntFltKdV self, int const & _MxVals)

        Parameters:
            _MxVals: int const &

        Reserve(TIntFltKdV self, int const & _MxVals, int const & _Vals)

        Parameters:
            _MxVals: int const &
            _Vals: int const &

        """
        return _snap.TIntFltKdV_Reserve(self, *args)

    def Clr(self, *args):
        """
        Clr(TIntFltKdV self, bool const & DoDel=True, int const & NoDelLim=-1)

        Parameters:
            DoDel: bool const &
            NoDelLim: int const &

        Clr(TIntFltKdV self, bool const & DoDel=True)

        Parameters:
            DoDel: bool const &

        Clr(TIntFltKdV self)

        Parameters:
            self: TVec< TIntFltKd > *

        """
        return _snap.TIntFltKdV_Clr(self, *args)

    def Trunc(self, *args):
        """
        Trunc(TIntFltKdV self, int const & _Vals=-1)

        Parameters:
            _Vals: int const &

        Trunc(TIntFltKdV self)

        Parameters:
            self: TVec< TIntFltKd > *

        """
        return _snap.TIntFltKdV_Trunc(self, *args)

    def Pack(self):
        """
        Pack(TIntFltKdV self)

        Parameters:
            self: TVec< TIntFltKd > *

        """
        return _snap.TIntFltKdV_Pack(self)

    def MoveFrom(self, *args):
        """
        MoveFrom(TIntFltKdV self, TIntFltKdV Vec)

        Parameters:
            Vec: TVec< TKeyDat< TInt,TFlt >,int > &

        """
        return _snap.TIntFltKdV_MoveFrom(self, *args)

    def Empty(self):
        """
        Empty(TIntFltKdV self) -> bool

        Parameters:
            self: TVec< TIntFltKd > const *

        """
        return _snap.TIntFltKdV_Empty(self)

    def Len(self):
        """
        Len(TIntFltKdV self) -> int

        Parameters:
            self: TVec< TIntFltKd > const *

        """
        return _snap.TIntFltKdV_Len(self)

    def Reserved(self):
        """
        Reserved(TIntFltKdV self) -> int

        Parameters:
            self: TVec< TIntFltKd > const *

        """
        return _snap.TIntFltKdV_Reserved(self)

    def Last(self, *args):
        """
        Last(TIntFltKdV self) -> TIntFltKd
        Last(TIntFltKdV self) -> TIntFltKd

        Parameters:
            self: TVec< TIntFltKd > *

        """
        return _snap.TIntFltKdV_Last(self, *args)

    def LastValN(self):
        """
        LastValN(TIntFltKdV self) -> int

        Parameters:
            self: TVec< TIntFltKd > const *

        """
        return _snap.TIntFltKdV_LastValN(self)

    def LastLast(self, *args):
        """
        LastLast(TIntFltKdV self) -> TIntFltKd
        LastLast(TIntFltKdV self) -> TIntFltKd

        Parameters:
            self: TVec< TIntFltKd > *

        """
        return _snap.TIntFltKdV_LastLast(self, *args)

    def BegI(self):
        """
        BegI(TIntFltKdV self) -> TIntFltKd

        Parameters:
            self: TVec< TIntFltKd > const *

        """
        return _snap.TIntFltKdV_BegI(self)

    def EndI(self):
        """
        EndI(TIntFltKdV self) -> TIntFltKd

        Parameters:
            self: TVec< TIntFltKd > const *

        """
        return _snap.TIntFltKdV_EndI(self)

    def GetI(self, *args):
        """
        GetI(TIntFltKdV self, int const & ValN) -> TIntFltKd

        Parameters:
            ValN: int const &

        """
        return _snap.TIntFltKdV_GetI(self, *args)

    def Add(self, *args):
        """
        Add(TIntFltKdV self) -> int
        Add(TIntFltKdV self, TIntFltKd Val) -> int

        Parameters:
            Val: TKeyDat< TInt,TFlt > const &

        Add(TIntFltKdV self, TIntFltKd Val) -> int

        Parameters:
            Val: TKeyDat< TInt,TFlt > &

        Add(TIntFltKdV self, TIntFltKd Val, int const & ResizeLen) -> int

        Parameters:
            Val: TKeyDat< TInt,TFlt > const &
            ResizeLen: int const &

        """
        return _snap.TIntFltKdV_Add(self, *args)

    def AddV(self, *args):
        """
        AddV(TIntFltKdV self, TIntFltKdV ValV) -> int

        Parameters:
            ValV: TVec< TKeyDat< TInt,TFlt >,int > const &

        """
        return _snap.TIntFltKdV_AddV(self, *args)

    def AddSorted(self, *args):
        """
        AddSorted(TIntFltKdV self, TIntFltKd Val, bool const & Asc=True, int const & _MxVals=-1) -> int

        Parameters:
            Val: TKeyDat< TInt,TFlt > const &
            Asc: bool const &
            _MxVals: int const &

        AddSorted(TIntFltKdV self, TIntFltKd Val, bool const & Asc=True) -> int

        Parameters:
            Val: TKeyDat< TInt,TFlt > const &
            Asc: bool const &

        AddSorted(TIntFltKdV self, TIntFltKd Val) -> int

        Parameters:
            Val: TKeyDat< TInt,TFlt > const &

        """
        return _snap.TIntFltKdV_AddSorted(self, *args)

    def AddBackSorted(self, *args):
        """
        AddBackSorted(TIntFltKdV self, TIntFltKd Val, bool const & Asc) -> int

        Parameters:
            Val: TKeyDat< TInt,TFlt > const &
            Asc: bool const &

        """
        return _snap.TIntFltKdV_AddBackSorted(self, *args)

    def AddMerged(self, *args):
        """
        AddMerged(TIntFltKdV self, TIntFltKd Val) -> int

        Parameters:
            Val: TKeyDat< TInt,TFlt > const &

        """
        return _snap.TIntFltKdV_AddMerged(self, *args)

    def AddVMerged(self, *args):
        """
        AddVMerged(TIntFltKdV self, TIntFltKdV ValV) -> int

        Parameters:
            ValV: TVec< TKeyDat< TInt,TFlt >,int > const &

        """
        return _snap.TIntFltKdV_AddVMerged(self, *args)

    def AddUnique(self, *args):
        """
        AddUnique(TIntFltKdV self, TIntFltKd Val) -> int

        Parameters:
            Val: TKeyDat< TInt,TFlt > const &

        """
        return _snap.TIntFltKdV_AddUnique(self, *args)

    def GetVal(self, *args):
        """
        GetVal(TIntFltKdV self, int const & ValN) -> TIntFltKd

        Parameters:
            ValN: int const &

        GetVal(TIntFltKdV self, int const & ValN) -> TIntFltKd

        Parameters:
            ValN: int const &

        """
        return _snap.TIntFltKdV_GetVal(self, *args)

    def SetVal(self, *args):
        """
        SetVal(TIntFltKdV self, int const & ValN, TIntFltKd Val)

        Parameters:
            ValN: int const &
            Val: TKeyDat< TInt,TFlt > const &

        """
        return _snap.TIntFltKdV_SetVal(self, *args)

    def GetSubValV(self, *args):
        """
        GetSubValV(TIntFltKdV self, int const & BValN, int const & EValN, TIntFltKdV ValV)

        Parameters:
            BValN: int const &
            EValN: int const &
            ValV: TVec< TKeyDat< TInt,TFlt >,int > &

        """
        return _snap.TIntFltKdV_GetSubValV(self, *args)

    def Ins(self, *args):
        """
        Ins(TIntFltKdV self, int const & ValN, TIntFltKd Val)

        Parameters:
            ValN: int const &
            Val: TKeyDat< TInt,TFlt > const &

        """
        return _snap.TIntFltKdV_Ins(self, *args)

    def Del(self, *args):
        """
        Del(TIntFltKdV self, int const & ValN)

        Parameters:
            ValN: int const &

        Del(TIntFltKdV self, int const & MnValN, int const & MxValN)

        Parameters:
            MnValN: int const &
            MxValN: int const &

        """
        return _snap.TIntFltKdV_Del(self, *args)

    def DelLast(self):
        """
        DelLast(TIntFltKdV self)

        Parameters:
            self: TVec< TIntFltKd > *

        """
        return _snap.TIntFltKdV_DelLast(self)

    def DelIfIn(self, *args):
        """
        DelIfIn(TIntFltKdV self, TIntFltKd Val) -> bool

        Parameters:
            Val: TKeyDat< TInt,TFlt > const &

        """
        return _snap.TIntFltKdV_DelIfIn(self, *args)

    def DelAll(self, *args):
        """
        DelAll(TIntFltKdV self, TIntFltKd Val)

        Parameters:
            Val: TKeyDat< TInt,TFlt > const &

        """
        return _snap.TIntFltKdV_DelAll(self, *args)

    def PutAll(self, *args):
        """
        PutAll(TIntFltKdV self, TIntFltKd Val)

        Parameters:
            Val: TKeyDat< TInt,TFlt > const &

        """
        return _snap.TIntFltKdV_PutAll(self, *args)

    def Swap(self, *args):
        """
        Swap(TIntFltKdV self, TIntFltKdV Vec)

        Parameters:
            Vec: TVec< TKeyDat< TInt,TFlt >,int > &

        Swap(TIntFltKdV self, int const & ValN1, int const & ValN2)

        Parameters:
            ValN1: int const &
            ValN2: int const &

        """
        return _snap.TIntFltKdV_Swap(self, *args)

    def SwapI(*args):
        """
        SwapI(TIntFltKd LVal, TIntFltKd RVal)

        Parameters:
            LVal: TVec< TKeyDat< TInt,TFlt > >::TIter
            RVal: TVec< TKeyDat< TInt,TFlt > >::TIter

        """
        return _snap.TIntFltKdV_SwapI(*args)

    SwapI = staticmethod(SwapI)
    def NextPerm(self):
        """
        NextPerm(TIntFltKdV self) -> bool

        Parameters:
            self: TVec< TIntFltKd > *

        """
        return _snap.TIntFltKdV_NextPerm(self)

    def PrevPerm(self):
        """
        PrevPerm(TIntFltKdV self) -> bool

        Parameters:
            self: TVec< TIntFltKd > *

        """
        return _snap.TIntFltKdV_PrevPerm(self)

    def GetPivotValN(self, *args):
        """
        GetPivotValN(TIntFltKdV self, int const & LValN, int const & RValN) -> int

        Parameters:
            LValN: int const &
            RValN: int const &

        """
        return _snap.TIntFltKdV_GetPivotValN(self, *args)

    def BSort(self, *args):
        """
        BSort(TIntFltKdV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters:
            MnLValN: int const &
            MxRValN: int const &
            Asc: bool const &

        """
        return _snap.TIntFltKdV_BSort(self, *args)

    def ISort(self, *args):
        """
        ISort(TIntFltKdV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters:
            MnLValN: int const &
            MxRValN: int const &
            Asc: bool const &

        """
        return _snap.TIntFltKdV_ISort(self, *args)

    def Partition(self, *args):
        """
        Partition(TIntFltKdV self, int const & MnLValN, int const & MxRValN, bool const & Asc) -> int

        Parameters:
            MnLValN: int const &
            MxRValN: int const &
            Asc: bool const &

        """
        return _snap.TIntFltKdV_Partition(self, *args)

    def QSort(self, *args):
        """
        QSort(TIntFltKdV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters:
            MnLValN: int const &
            MxRValN: int const &
            Asc: bool const &

        """
        return _snap.TIntFltKdV_QSort(self, *args)

    def Sort(self, Asc=True):
        """
        Sort(TIntFltKdV self, bool const & Asc=True)

        Parameters:
            Asc: bool const &

        Sort(TIntFltKdV self)

        Parameters:
            self: TVec< TIntFltKd > *

        """
        return _snap.TIntFltKdV_Sort(self, Asc)

    def IsSorted(self, Asc=True):
        """
        IsSorted(TIntFltKdV self, bool const & Asc=True) -> bool

        Parameters:
            Asc: bool const &

        IsSorted(TIntFltKdV self) -> bool

        Parameters:
            self: TVec< TIntFltKd > const *

        """
        return _snap.TIntFltKdV_IsSorted(self, Asc)

    def Shuffle(self, *args):
        """
        Shuffle(TIntFltKdV self, TRnd Rnd)

        Parameters:
            Rnd: TRnd &

        """
        return _snap.TIntFltKdV_Shuffle(self, *args)

    def Reverse(self, *args):
        """
        Reverse(TIntFltKdV self)
        Reverse(TIntFltKdV self, int LValN, int RValN)

        Parameters:
            LValN: int
            RValN: int

        """
        return _snap.TIntFltKdV_Reverse(self, *args)

    def Merge(self):
        """
        Merge(TIntFltKdV self)

        Parameters:
            self: TVec< TIntFltKd > *

        """
        return _snap.TIntFltKdV_Merge(self)

    def Intrs(self, *args):
        """
        Intrs(TIntFltKdV self, TIntFltKdV ValV)

        Parameters:
            ValV: TVec< TKeyDat< TInt,TFlt >,int > const &

        Intrs(TIntFltKdV self, TIntFltKdV ValV, TIntFltKdV DstValV)

        Parameters:
            ValV: TVec< TKeyDat< TInt,TFlt >,int > const &
            DstValV: TVec< TKeyDat< TInt,TFlt >,int > &

        """
        return _snap.TIntFltKdV_Intrs(self, *args)

    def Union(self, *args):
        """
        Union(TIntFltKdV self, TIntFltKdV ValV)

        Parameters:
            ValV: TVec< TKeyDat< TInt,TFlt >,int > const &

        Union(TIntFltKdV self, TIntFltKdV ValV, TIntFltKdV DstValV)

        Parameters:
            ValV: TVec< TKeyDat< TInt,TFlt >,int > const &
            DstValV: TVec< TKeyDat< TInt,TFlt >,int > &

        """
        return _snap.TIntFltKdV_Union(self, *args)

    def Diff(self, *args):
        """
        Diff(TIntFltKdV self, TIntFltKdV ValV)

        Parameters:
            ValV: TVec< TKeyDat< TInt,TFlt >,int > const &

        Diff(TIntFltKdV self, TIntFltKdV ValV, TIntFltKdV DstValV)

        Parameters:
            ValV: TVec< TKeyDat< TInt,TFlt >,int > const &
            DstValV: TVec< TKeyDat< TInt,TFlt >,int > &

        """
        return _snap.TIntFltKdV_Diff(self, *args)

    def IntrsLen(self, *args):
        """
        IntrsLen(TIntFltKdV self, TIntFltKdV ValV) -> int

        Parameters:
            ValV: TVec< TKeyDat< TInt,TFlt >,int > const &

        """
        return _snap.TIntFltKdV_IntrsLen(self, *args)

    def UnionLen(self, *args):
        """
        UnionLen(TIntFltKdV self, TIntFltKdV ValV) -> int

        Parameters:
            ValV: TVec< TKeyDat< TInt,TFlt >,int > const &

        """
        return _snap.TIntFltKdV_UnionLen(self, *args)

    def Count(self, *args):
        """
        Count(TIntFltKdV self, TIntFltKd Val) -> int

        Parameters:
            Val: TKeyDat< TInt,TFlt > const &

        """
        return _snap.TIntFltKdV_Count(self, *args)

    def SearchBin(self, *args):
        """
        SearchBin(TIntFltKdV self, TIntFltKd Val) -> int

        Parameters:
            Val: TKeyDat< TInt,TFlt > const &

        SearchBin(TIntFltKdV self, TIntFltKd Val, int & InsValN) -> int

        Parameters:
            Val: TKeyDat< TInt,TFlt > const &
            InsValN: int &

        """
        return _snap.TIntFltKdV_SearchBin(self, *args)

    def SearchForw(self, *args):
        """
        SearchForw(TIntFltKdV self, TIntFltKd Val, int const & BValN=0) -> int

        Parameters:
            Val: TKeyDat< TInt,TFlt > const &
            BValN: int const &

        SearchForw(TIntFltKdV self, TIntFltKd Val) -> int

        Parameters:
            Val: TKeyDat< TInt,TFlt > const &

        """
        return _snap.TIntFltKdV_SearchForw(self, *args)

    def SearchBack(self, *args):
        """
        SearchBack(TIntFltKdV self, TIntFltKd Val) -> int

        Parameters:
            Val: TKeyDat< TInt,TFlt > const &

        """
        return _snap.TIntFltKdV_SearchBack(self, *args)

    def SearchVForw(self, *args):
        """
        SearchVForw(TIntFltKdV self, TIntFltKdV ValV, int const & BValN=0) -> int

        Parameters:
            ValV: TVec< TKeyDat< TInt,TFlt >,int > const &
            BValN: int const &

        SearchVForw(TIntFltKdV self, TIntFltKdV ValV) -> int

        Parameters:
            ValV: TVec< TKeyDat< TInt,TFlt >,int > const &

        """
        return _snap.TIntFltKdV_SearchVForw(self, *args)

    def IsIn(self, *args):
        """
        IsIn(TIntFltKdV self, TIntFltKd Val) -> bool

        Parameters:
            Val: TKeyDat< TInt,TFlt > const &

        IsIn(TIntFltKdV self, TIntFltKd Val, int & ValN) -> bool

        Parameters:
            Val: TKeyDat< TInt,TFlt > const &
            ValN: int &

        """
        return _snap.TIntFltKdV_IsIn(self, *args)

    def IsInBin(self, *args):
        """
        IsInBin(TIntFltKdV self, TIntFltKd Val) -> bool

        Parameters:
            Val: TKeyDat< TInt,TFlt > const &

        """
        return _snap.TIntFltKdV_IsInBin(self, *args)

    def GetDat(self, *args):
        """
        GetDat(TIntFltKdV self, TIntFltKd Val) -> TIntFltKd

        Parameters:
            Val: TKeyDat< TInt,TFlt > const &

        """
        return _snap.TIntFltKdV_GetDat(self, *args)

    def GetAddDat(self, *args):
        """
        GetAddDat(TIntFltKdV self, TIntFltKd Val) -> TIntFltKd

        Parameters:
            Val: TKeyDat< TInt,TFlt > const &

        """
        return _snap.TIntFltKdV_GetAddDat(self, *args)

    def GetMxValN(self):
        """
        GetMxValN(TIntFltKdV self) -> int

        Parameters:
            self: TVec< TIntFltKd > const *

        """
        return _snap.TIntFltKdV_GetMxValN(self)

    def GetV(*args):
        """
        GetV(TIntFltKd Val1) -> TIntFltKdV

        Parameters:
            Val1: TKeyDat< TInt,TFlt > const &

        GetV(TIntFltKd Val1, TIntFltKd Val2) -> TIntFltKdV

        Parameters:
            Val1: TKeyDat< TInt,TFlt > const &
            Val2: TKeyDat< TInt,TFlt > const &

        GetV(TIntFltKd Val1, TIntFltKd Val2, TIntFltKd Val3) -> TIntFltKdV

        Parameters:
            Val1: TKeyDat< TInt,TFlt > const &
            Val2: TKeyDat< TInt,TFlt > const &
            Val3: TKeyDat< TInt,TFlt > const &

        GetV(TIntFltKd Val1, TIntFltKd Val2, TIntFltKd Val3, TIntFltKd Val4) -> TIntFltKdV

        Parameters:
            Val1: TKeyDat< TInt,TFlt > const &
            Val2: TKeyDat< TInt,TFlt > const &
            Val3: TKeyDat< TInt,TFlt > const &
            Val4: TKeyDat< TInt,TFlt > const &

        GetV(TIntFltKd Val1, TIntFltKd Val2, TIntFltKd Val3, TIntFltKd Val4, TIntFltKd Val5) -> TIntFltKdV

        Parameters:
            Val1: TKeyDat< TInt,TFlt > const &
            Val2: TKeyDat< TInt,TFlt > const &
            Val3: TKeyDat< TInt,TFlt > const &
            Val4: TKeyDat< TInt,TFlt > const &
            Val5: TKeyDat< TInt,TFlt > const &

        GetV(TIntFltKd Val1, TIntFltKd Val2, TIntFltKd Val3, TIntFltKd Val4, TIntFltKd Val5, TIntFltKd Val6) -> TIntFltKdV

        Parameters:
            Val1: TKeyDat< TInt,TFlt > const &
            Val2: TKeyDat< TInt,TFlt > const &
            Val3: TKeyDat< TInt,TFlt > const &
            Val4: TKeyDat< TInt,TFlt > const &
            Val5: TKeyDat< TInt,TFlt > const &
            Val6: TKeyDat< TInt,TFlt > const &

        GetV(TIntFltKd Val1, TIntFltKd Val2, TIntFltKd Val3, TIntFltKd Val4, TIntFltKd Val5, TIntFltKd Val6, 
            TIntFltKd Val7) -> TIntFltKdV

        Parameters:
            Val1: TKeyDat< TInt,TFlt > const &
            Val2: TKeyDat< TInt,TFlt > const &
            Val3: TKeyDat< TInt,TFlt > const &
            Val4: TKeyDat< TInt,TFlt > const &
            Val5: TKeyDat< TInt,TFlt > const &
            Val6: TKeyDat< TInt,TFlt > const &
            Val7: TKeyDat< TInt,TFlt > const &

        GetV(TIntFltKd Val1, TIntFltKd Val2, TIntFltKd Val3, TIntFltKd Val4, TIntFltKd Val5, TIntFltKd Val6, 
            TIntFltKd Val7, TIntFltKd Val8) -> TIntFltKdV

        Parameters:
            Val1: TKeyDat< TInt,TFlt > const &
            Val2: TKeyDat< TInt,TFlt > const &
            Val3: TKeyDat< TInt,TFlt > const &
            Val4: TKeyDat< TInt,TFlt > const &
            Val5: TKeyDat< TInt,TFlt > const &
            Val6: TKeyDat< TInt,TFlt > const &
            Val7: TKeyDat< TInt,TFlt > const &
            Val8: TKeyDat< TInt,TFlt > const &

        GetV(TIntFltKd Val1, TIntFltKd Val2, TIntFltKd Val3, TIntFltKd Val4, TIntFltKd Val5, TIntFltKd Val6, 
            TIntFltKd Val7, TIntFltKd Val8, TIntFltKd Val9) -> TIntFltKdV

        Parameters:
            Val1: TKeyDat< TInt,TFlt > const &
            Val2: TKeyDat< TInt,TFlt > const &
            Val3: TKeyDat< TInt,TFlt > const &
            Val4: TKeyDat< TInt,TFlt > const &
            Val5: TKeyDat< TInt,TFlt > const &
            Val6: TKeyDat< TInt,TFlt > const &
            Val7: TKeyDat< TInt,TFlt > const &
            Val8: TKeyDat< TInt,TFlt > const &
            Val9: TKeyDat< TInt,TFlt > const &

        """
        return _snap.TIntFltKdV_GetV(*args)

    GetV = staticmethod(GetV)
TIntFltKdV.Load = new_instancemethod(_snap.TIntFltKdV_Load,None,TIntFltKdV)
TIntFltKdV.Save = new_instancemethod(_snap.TIntFltKdV_Save,None,TIntFltKdV)
TIntFltKdV.__add__ = new_instancemethod(_snap.TIntFltKdV___add__,None,TIntFltKdV)
TIntFltKdV.__eq__ = new_instancemethod(_snap.TIntFltKdV___eq__,None,TIntFltKdV)
TIntFltKdV.__lt__ = new_instancemethod(_snap.TIntFltKdV___lt__,None,TIntFltKdV)
TIntFltKdV.GetMemUsed = new_instancemethod(_snap.TIntFltKdV_GetMemUsed,None,TIntFltKdV)
TIntFltKdV.GetMemSize = new_instancemethod(_snap.TIntFltKdV_GetMemSize,None,TIntFltKdV)
TIntFltKdV.GetPrimHashCd = new_instancemethod(_snap.TIntFltKdV_GetPrimHashCd,None,TIntFltKdV)
TIntFltKdV.GetSecHashCd = new_instancemethod(_snap.TIntFltKdV_GetSecHashCd,None,TIntFltKdV)
TIntFltKdV.Gen = new_instancemethod(_snap.TIntFltKdV_Gen,None,TIntFltKdV)
TIntFltKdV.GenExt = new_instancemethod(_snap.TIntFltKdV_GenExt,None,TIntFltKdV)
TIntFltKdV.IsExt = new_instancemethod(_snap.TIntFltKdV_IsExt,None,TIntFltKdV)
TIntFltKdV.Reserve = new_instancemethod(_snap.TIntFltKdV_Reserve,None,TIntFltKdV)
TIntFltKdV.Clr = new_instancemethod(_snap.TIntFltKdV_Clr,None,TIntFltKdV)
TIntFltKdV.Trunc = new_instancemethod(_snap.TIntFltKdV_Trunc,None,TIntFltKdV)
TIntFltKdV.Pack = new_instancemethod(_snap.TIntFltKdV_Pack,None,TIntFltKdV)
TIntFltKdV.MoveFrom = new_instancemethod(_snap.TIntFltKdV_MoveFrom,None,TIntFltKdV)
TIntFltKdV.Empty = new_instancemethod(_snap.TIntFltKdV_Empty,None,TIntFltKdV)
TIntFltKdV.Len = new_instancemethod(_snap.TIntFltKdV_Len,None,TIntFltKdV)
TIntFltKdV.Reserved = new_instancemethod(_snap.TIntFltKdV_Reserved,None,TIntFltKdV)
TIntFltKdV.Last = new_instancemethod(_snap.TIntFltKdV_Last,None,TIntFltKdV)
TIntFltKdV.LastValN = new_instancemethod(_snap.TIntFltKdV_LastValN,None,TIntFltKdV)
TIntFltKdV.LastLast = new_instancemethod(_snap.TIntFltKdV_LastLast,None,TIntFltKdV)
TIntFltKdV.BegI = new_instancemethod(_snap.TIntFltKdV_BegI,None,TIntFltKdV)
TIntFltKdV.EndI = new_instancemethod(_snap.TIntFltKdV_EndI,None,TIntFltKdV)
TIntFltKdV.GetI = new_instancemethod(_snap.TIntFltKdV_GetI,None,TIntFltKdV)
TIntFltKdV.Add = new_instancemethod(_snap.TIntFltKdV_Add,None,TIntFltKdV)
TIntFltKdV.AddV = new_instancemethod(_snap.TIntFltKdV_AddV,None,TIntFltKdV)
TIntFltKdV.AddSorted = new_instancemethod(_snap.TIntFltKdV_AddSorted,None,TIntFltKdV)
TIntFltKdV.AddBackSorted = new_instancemethod(_snap.TIntFltKdV_AddBackSorted,None,TIntFltKdV)
TIntFltKdV.AddMerged = new_instancemethod(_snap.TIntFltKdV_AddMerged,None,TIntFltKdV)
TIntFltKdV.AddVMerged = new_instancemethod(_snap.TIntFltKdV_AddVMerged,None,TIntFltKdV)
TIntFltKdV.AddUnique = new_instancemethod(_snap.TIntFltKdV_AddUnique,None,TIntFltKdV)
TIntFltKdV.GetVal = new_instancemethod(_snap.TIntFltKdV_GetVal,None,TIntFltKdV)
TIntFltKdV.SetVal = new_instancemethod(_snap.TIntFltKdV_SetVal,None,TIntFltKdV)
TIntFltKdV.GetSubValV = new_instancemethod(_snap.TIntFltKdV_GetSubValV,None,TIntFltKdV)
TIntFltKdV.Ins = new_instancemethod(_snap.TIntFltKdV_Ins,None,TIntFltKdV)
TIntFltKdV.Del = new_instancemethod(_snap.TIntFltKdV_Del,None,TIntFltKdV)
TIntFltKdV.DelLast = new_instancemethod(_snap.TIntFltKdV_DelLast,None,TIntFltKdV)
TIntFltKdV.DelIfIn = new_instancemethod(_snap.TIntFltKdV_DelIfIn,None,TIntFltKdV)
TIntFltKdV.DelAll = new_instancemethod(_snap.TIntFltKdV_DelAll,None,TIntFltKdV)
TIntFltKdV.PutAll = new_instancemethod(_snap.TIntFltKdV_PutAll,None,TIntFltKdV)
TIntFltKdV.Swap = new_instancemethod(_snap.TIntFltKdV_Swap,None,TIntFltKdV)
TIntFltKdV.NextPerm = new_instancemethod(_snap.TIntFltKdV_NextPerm,None,TIntFltKdV)
TIntFltKdV.PrevPerm = new_instancemethod(_snap.TIntFltKdV_PrevPerm,None,TIntFltKdV)
TIntFltKdV.GetPivotValN = new_instancemethod(_snap.TIntFltKdV_GetPivotValN,None,TIntFltKdV)
TIntFltKdV.BSort = new_instancemethod(_snap.TIntFltKdV_BSort,None,TIntFltKdV)
TIntFltKdV.ISort = new_instancemethod(_snap.TIntFltKdV_ISort,None,TIntFltKdV)
TIntFltKdV.Partition = new_instancemethod(_snap.TIntFltKdV_Partition,None,TIntFltKdV)
TIntFltKdV.QSort = new_instancemethod(_snap.TIntFltKdV_QSort,None,TIntFltKdV)
TIntFltKdV.Sort = new_instancemethod(_snap.TIntFltKdV_Sort,None,TIntFltKdV)
TIntFltKdV.IsSorted = new_instancemethod(_snap.TIntFltKdV_IsSorted,None,TIntFltKdV)
TIntFltKdV.Shuffle = new_instancemethod(_snap.TIntFltKdV_Shuffle,None,TIntFltKdV)
TIntFltKdV.Reverse = new_instancemethod(_snap.TIntFltKdV_Reverse,None,TIntFltKdV)
TIntFltKdV.Merge = new_instancemethod(_snap.TIntFltKdV_Merge,None,TIntFltKdV)
TIntFltKdV.Intrs = new_instancemethod(_snap.TIntFltKdV_Intrs,None,TIntFltKdV)
TIntFltKdV.Union = new_instancemethod(_snap.TIntFltKdV_Union,None,TIntFltKdV)
TIntFltKdV.Diff = new_instancemethod(_snap.TIntFltKdV_Diff,None,TIntFltKdV)
TIntFltKdV.IntrsLen = new_instancemethod(_snap.TIntFltKdV_IntrsLen,None,TIntFltKdV)
TIntFltKdV.UnionLen = new_instancemethod(_snap.TIntFltKdV_UnionLen,None,TIntFltKdV)
TIntFltKdV.Count = new_instancemethod(_snap.TIntFltKdV_Count,None,TIntFltKdV)
TIntFltKdV.SearchBin = new_instancemethod(_snap.TIntFltKdV_SearchBin,None,TIntFltKdV)
TIntFltKdV.SearchForw = new_instancemethod(_snap.TIntFltKdV_SearchForw,None,TIntFltKdV)
TIntFltKdV.SearchBack = new_instancemethod(_snap.TIntFltKdV_SearchBack,None,TIntFltKdV)
TIntFltKdV.SearchVForw = new_instancemethod(_snap.TIntFltKdV_SearchVForw,None,TIntFltKdV)
TIntFltKdV.IsIn = new_instancemethod(_snap.TIntFltKdV_IsIn,None,TIntFltKdV)
TIntFltKdV.IsInBin = new_instancemethod(_snap.TIntFltKdV_IsInBin,None,TIntFltKdV)
TIntFltKdV.GetDat = new_instancemethod(_snap.TIntFltKdV_GetDat,None,TIntFltKdV)
TIntFltKdV.GetAddDat = new_instancemethod(_snap.TIntFltKdV_GetAddDat,None,TIntFltKdV)
TIntFltKdV.GetMxValN = new_instancemethod(_snap.TIntFltKdV_GetMxValN,None,TIntFltKdV)
TIntFltKdV_swigregister = _snap.TIntFltKdV_swigregister
TIntFltKdV_swigregister(TIntFltKdV)

def TIntFltKdV_SwapI(*args):
  """
    TIntFltKdV_SwapI(TIntFltKd LVal, TIntFltKd RVal)

    Parameters:
        LVal: TVec< TKeyDat< TInt,TFlt > >::TIter
        RVal: TVec< TKeyDat< TInt,TFlt > >::TIter

    """
  return _snap.TIntFltKdV_SwapI(*args)

def TIntFltKdV_GetV(*args):
  """
    GetV(TIntFltKd Val1) -> TIntFltKdV

    Parameters:
        Val1: TKeyDat< TInt,TFlt > const &

    GetV(TIntFltKd Val1, TIntFltKd Val2) -> TIntFltKdV

    Parameters:
        Val1: TKeyDat< TInt,TFlt > const &
        Val2: TKeyDat< TInt,TFlt > const &

    GetV(TIntFltKd Val1, TIntFltKd Val2, TIntFltKd Val3) -> TIntFltKdV

    Parameters:
        Val1: TKeyDat< TInt,TFlt > const &
        Val2: TKeyDat< TInt,TFlt > const &
        Val3: TKeyDat< TInt,TFlt > const &

    GetV(TIntFltKd Val1, TIntFltKd Val2, TIntFltKd Val3, TIntFltKd Val4) -> TIntFltKdV

    Parameters:
        Val1: TKeyDat< TInt,TFlt > const &
        Val2: TKeyDat< TInt,TFlt > const &
        Val3: TKeyDat< TInt,TFlt > const &
        Val4: TKeyDat< TInt,TFlt > const &

    GetV(TIntFltKd Val1, TIntFltKd Val2, TIntFltKd Val3, TIntFltKd Val4, TIntFltKd Val5) -> TIntFltKdV

    Parameters:
        Val1: TKeyDat< TInt,TFlt > const &
        Val2: TKeyDat< TInt,TFlt > const &
        Val3: TKeyDat< TInt,TFlt > const &
        Val4: TKeyDat< TInt,TFlt > const &
        Val5: TKeyDat< TInt,TFlt > const &

    GetV(TIntFltKd Val1, TIntFltKd Val2, TIntFltKd Val3, TIntFltKd Val4, TIntFltKd Val5, TIntFltKd Val6) -> TIntFltKdV

    Parameters:
        Val1: TKeyDat< TInt,TFlt > const &
        Val2: TKeyDat< TInt,TFlt > const &
        Val3: TKeyDat< TInt,TFlt > const &
        Val4: TKeyDat< TInt,TFlt > const &
        Val5: TKeyDat< TInt,TFlt > const &
        Val6: TKeyDat< TInt,TFlt > const &

    GetV(TIntFltKd Val1, TIntFltKd Val2, TIntFltKd Val3, TIntFltKd Val4, TIntFltKd Val5, TIntFltKd Val6, 
        TIntFltKd Val7) -> TIntFltKdV

    Parameters:
        Val1: TKeyDat< TInt,TFlt > const &
        Val2: TKeyDat< TInt,TFlt > const &
        Val3: TKeyDat< TInt,TFlt > const &
        Val4: TKeyDat< TInt,TFlt > const &
        Val5: TKeyDat< TInt,TFlt > const &
        Val6: TKeyDat< TInt,TFlt > const &
        Val7: TKeyDat< TInt,TFlt > const &

    GetV(TIntFltKd Val1, TIntFltKd Val2, TIntFltKd Val3, TIntFltKd Val4, TIntFltKd Val5, TIntFltKd Val6, 
        TIntFltKd Val7, TIntFltKd Val8) -> TIntFltKdV

    Parameters:
        Val1: TKeyDat< TInt,TFlt > const &
        Val2: TKeyDat< TInt,TFlt > const &
        Val3: TKeyDat< TInt,TFlt > const &
        Val4: TKeyDat< TInt,TFlt > const &
        Val5: TKeyDat< TInt,TFlt > const &
        Val6: TKeyDat< TInt,TFlt > const &
        Val7: TKeyDat< TInt,TFlt > const &
        Val8: TKeyDat< TInt,TFlt > const &

    TIntFltKdV_GetV(TIntFltKd Val1, TIntFltKd Val2, TIntFltKd Val3, TIntFltKd Val4, TIntFltKd Val5, TIntFltKd Val6, 
        TIntFltKd Val7, TIntFltKd Val8, TIntFltKd Val9) -> TIntFltKdV

    Parameters:
        Val1: TKeyDat< TInt,TFlt > const &
        Val2: TKeyDat< TInt,TFlt > const &
        Val3: TKeyDat< TInt,TFlt > const &
        Val4: TKeyDat< TInt,TFlt > const &
        Val5: TKeyDat< TInt,TFlt > const &
        Val6: TKeyDat< TInt,TFlt > const &
        Val7: TKeyDat< TInt,TFlt > const &
        Val8: TKeyDat< TInt,TFlt > const &
        Val9: TKeyDat< TInt,TFlt > const &

    """
  return _snap.TIntFltKdV_GetV(*args)

class TIntStrPr(object):
    """Proxy of C++ TPair<(TInt,TStr)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = _swig_property(_snap.TIntStrPr_Val1_get, _snap.TIntStrPr_Val1_set)
    Val2 = _swig_property(_snap.TIntStrPr_Val2_get, _snap.TIntStrPr_Val2_set)
    def __init__(self, *args): 
        """
        __init__(TPair<(TInt,TStr)> self) -> TIntStrPr
        __init__(TPair<(TInt,TStr)> self, TIntStrPr Pair) -> TIntStrPr

        Parameters:
            Pair: TPair< TInt,TStr > const &

        __init__(TPair<(TInt,TStr)> self, TInt _Val1, TStr _Val2) -> TIntStrPr

        Parameters:
            _Val1: TInt const &
            _Val2: TStr const &

        __init__(TPair<(TInt,TStr)> self, TSIn SIn) -> TIntStrPr

        Parameters:
            SIn: TSIn &

        """
        _snap.TIntStrPr_swiginit(self,_snap.new_TIntStrPr(*args))
    def Save(self, *args):
        """
        Save(TIntStrPr self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.TIntStrPr_Save(self, *args)

    def Load(self, *args):
        """
        Load(TIntStrPr self, TSIn SIn)

        Parameters:
            SIn: TSIn &

        """
        return _snap.TIntStrPr_Load(self, *args)

    def __eq__(self, *args):
        """
        __eq__(TIntStrPr self, TIntStrPr Pair) -> bool

        Parameters:
            Pair: TPair< TInt,TStr > const &

        """
        return _snap.TIntStrPr___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TIntStrPr self, TIntStrPr Pair) -> bool

        Parameters:
            Pair: TPair< TInt,TStr > const &

        """
        return _snap.TIntStrPr___lt__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(TIntStrPr self) -> int

        Parameters:
            self: TPair< TInt,TStr > const *

        """
        return _snap.TIntStrPr_GetMemUsed(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TIntStrPr self) -> int

        Parameters:
            self: TPair< TInt,TStr > const *

        """
        return _snap.TIntStrPr_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(TIntStrPr self) -> int

        Parameters:
            self: TPair< TInt,TStr > const *

        """
        return _snap.TIntStrPr_GetSecHashCd(self)

    def GetVal(self, *args):
        """
        GetVal(TIntStrPr self, TInt _Val1, TStr _Val2)

        Parameters:
            _Val1: TInt &
            _Val2: TStr &

        """
        return _snap.TIntStrPr_GetVal(self, *args)

    def GetVal1(self):
        """
        GetVal1(TIntStrPr self) -> TInt

        Parameters:
            self: TPair< TInt,TStr > const *

        """
        return _snap.TIntStrPr_GetVal1(self)

    def GetVal2(self):
        """
        GetVal2(TIntStrPr self) -> TStr

        Parameters:
            self: TPair< TInt,TStr > const *

        """
        return _snap.TIntStrPr_GetVal2(self)

    __swig_destroy__ = _snap.delete_TIntStrPr
TIntStrPr.Save = new_instancemethod(_snap.TIntStrPr_Save,None,TIntStrPr)
TIntStrPr.Load = new_instancemethod(_snap.TIntStrPr_Load,None,TIntStrPr)
TIntStrPr.__eq__ = new_instancemethod(_snap.TIntStrPr___eq__,None,TIntStrPr)
TIntStrPr.__lt__ = new_instancemethod(_snap.TIntStrPr___lt__,None,TIntStrPr)
TIntStrPr.GetMemUsed = new_instancemethod(_snap.TIntStrPr_GetMemUsed,None,TIntStrPr)
TIntStrPr.GetPrimHashCd = new_instancemethod(_snap.TIntStrPr_GetPrimHashCd,None,TIntStrPr)
TIntStrPr.GetSecHashCd = new_instancemethod(_snap.TIntStrPr_GetSecHashCd,None,TIntStrPr)
TIntStrPr.GetVal = new_instancemethod(_snap.TIntStrPr_GetVal,None,TIntStrPr)
TIntStrPr.GetVal1 = new_instancemethod(_snap.TIntStrPr_GetVal1,None,TIntStrPr)
TIntStrPr.GetVal2 = new_instancemethod(_snap.TIntStrPr_GetVal2,None,TIntStrPr)
TIntStrPr_swigregister = _snap.TIntStrPr_swigregister
TIntStrPr_swigregister(TIntStrPr)

class TIntIntVV(object):
    """Proxy of C++ TVec<(TVec<(TInt)>,int)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TIntIntVV
    def __init__(self, *args): 
        """
        __init__(TVec<(TVec<(TInt)>,int)> self) -> TIntIntVV
        __init__(TVec<(TVec<(TInt)>,int)> self, TIntIntVV Vec) -> TIntIntVV

        Parameters:
            Vec: TVec< TVec< TInt,int >,int > const &

        __init__(TVec<(TVec<(TInt)>,int)> self, int const & _Vals) -> TIntIntVV

        Parameters:
            _Vals: int const &

        __init__(TVec<(TVec<(TInt)>,int)> self, int const & _MxVals, int const & _Vals) -> TIntIntVV

        Parameters:
            _MxVals: int const &
            _Vals: int const &

        __init__(TVec<(TVec<(TInt)>,int)> self, TIntV _ValT, int const & _Vals) -> TIntIntVV

        Parameters:
            _ValT: TVec< TInt,int > *
            _Vals: int const &

        __init__(TVec<(TVec<(TInt)>,int)> self, TSIn SIn) -> TIntIntVV

        Parameters:
            SIn: TSIn &

        """
        _snap.TIntIntVV_swiginit(self,_snap.new_TIntIntVV(*args))
    def Load(self, *args):
        """
        Load(TIntIntVV self, TSIn SIn)

        Parameters:
            SIn: TSIn &

        """
        return _snap.TIntIntVV_Load(self, *args)

    def Save(self, *args):
        """
        Save(TIntIntVV self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.TIntIntVV_Save(self, *args)

    def __add__(self, *args):
        """
        __add__(TIntIntVV self, TIntV Val) -> TIntIntVV

        Parameters:
            Val: TVec< TInt,int > const &

        """
        return _snap.TIntIntVV___add__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(TIntIntVV self, TIntIntVV Vec) -> bool

        Parameters:
            Vec: TVec< TVec< TInt,int >,int > const &

        """
        return _snap.TIntIntVV___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TIntIntVV self, TIntIntVV Vec) -> bool

        Parameters:
            Vec: TVec< TVec< TInt,int >,int > const &

        """
        return _snap.TIntIntVV___lt__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(TIntIntVV self) -> int

        Parameters:
            self: TVec< TVec< TInt >,int > const *

        """
        return _snap.TIntIntVV_GetMemUsed(self)

    def GetMemSize(self):
        """
        GetMemSize(TIntIntVV self) -> int

        Parameters:
            self: TVec< TVec< TInt >,int > const *

        """
        return _snap.TIntIntVV_GetMemSize(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TIntIntVV self) -> int

        Parameters:
            self: TVec< TVec< TInt >,int > const *

        """
        return _snap.TIntIntVV_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(TIntIntVV self) -> int

        Parameters:
            self: TVec< TVec< TInt >,int > const *

        """
        return _snap.TIntIntVV_GetSecHashCd(self)

    def Gen(self, *args):
        """
        Gen(TIntIntVV self, int const & _Vals)

        Parameters:
            _Vals: int const &

        Gen(TIntIntVV self, int const & _MxVals, int const & _Vals)

        Parameters:
            _MxVals: int const &
            _Vals: int const &

        """
        return _snap.TIntIntVV_Gen(self, *args)

    def GenExt(self, *args):
        """
        GenExt(TIntIntVV self, TIntV _ValT, int const & _Vals)

        Parameters:
            _ValT: TVec< TInt,int > *
            _Vals: int const &

        """
        return _snap.TIntIntVV_GenExt(self, *args)

    def IsExt(self):
        """
        IsExt(TIntIntVV self) -> bool

        Parameters:
            self: TVec< TVec< TInt >,int > const *

        """
        return _snap.TIntIntVV_IsExt(self)

    def Reserve(self, *args):
        """
        Reserve(TIntIntVV self, int const & _MxVals)

        Parameters:
            _MxVals: int const &

        Reserve(TIntIntVV self, int const & _MxVals, int const & _Vals)

        Parameters:
            _MxVals: int const &
            _Vals: int const &

        """
        return _snap.TIntIntVV_Reserve(self, *args)

    def Clr(self, *args):
        """
        Clr(TIntIntVV self, bool const & DoDel=True, int const & NoDelLim=-1)

        Parameters:
            DoDel: bool const &
            NoDelLim: int const &

        Clr(TIntIntVV self, bool const & DoDel=True)

        Parameters:
            DoDel: bool const &

        Clr(TIntIntVV self)

        Parameters:
            self: TVec< TVec< TInt >,int > *

        """
        return _snap.TIntIntVV_Clr(self, *args)

    def Trunc(self, *args):
        """
        Trunc(TIntIntVV self, int const & _Vals=-1)

        Parameters:
            _Vals: int const &

        Trunc(TIntIntVV self)

        Parameters:
            self: TVec< TVec< TInt >,int > *

        """
        return _snap.TIntIntVV_Trunc(self, *args)

    def Pack(self):
        """
        Pack(TIntIntVV self)

        Parameters:
            self: TVec< TVec< TInt >,int > *

        """
        return _snap.TIntIntVV_Pack(self)

    def MoveFrom(self, *args):
        """
        MoveFrom(TIntIntVV self, TIntIntVV Vec)

        Parameters:
            Vec: TVec< TVec< TInt,int >,int > &

        """
        return _snap.TIntIntVV_MoveFrom(self, *args)

    def Empty(self):
        """
        Empty(TIntIntVV self) -> bool

        Parameters:
            self: TVec< TVec< TInt >,int > const *

        """
        return _snap.TIntIntVV_Empty(self)

    def Len(self):
        """
        Len(TIntIntVV self) -> int

        Parameters:
            self: TVec< TVec< TInt >,int > const *

        """
        return _snap.TIntIntVV_Len(self)

    def Reserved(self):
        """
        Reserved(TIntIntVV self) -> int

        Parameters:
            self: TVec< TVec< TInt >,int > const *

        """
        return _snap.TIntIntVV_Reserved(self)

    def Last(self, *args):
        """
        Last(TIntIntVV self) -> TIntV
        Last(TIntIntVV self) -> TIntV

        Parameters:
            self: TVec< TVec< TInt >,int > *

        """
        return _snap.TIntIntVV_Last(self, *args)

    def LastValN(self):
        """
        LastValN(TIntIntVV self) -> int

        Parameters:
            self: TVec< TVec< TInt >,int > const *

        """
        return _snap.TIntIntVV_LastValN(self)

    def LastLast(self, *args):
        """
        LastLast(TIntIntVV self) -> TIntV
        LastLast(TIntIntVV self) -> TIntV

        Parameters:
            self: TVec< TVec< TInt >,int > *

        """
        return _snap.TIntIntVV_LastLast(self, *args)

    def BegI(self):
        """
        BegI(TIntIntVV self) -> TIntV

        Parameters:
            self: TVec< TVec< TInt >,int > const *

        """
        return _snap.TIntIntVV_BegI(self)

    def EndI(self):
        """
        EndI(TIntIntVV self) -> TIntV

        Parameters:
            self: TVec< TVec< TInt >,int > const *

        """
        return _snap.TIntIntVV_EndI(self)

    def GetI(self, *args):
        """
        GetI(TIntIntVV self, int const & ValN) -> TIntV

        Parameters:
            ValN: int const &

        """
        return _snap.TIntIntVV_GetI(self, *args)

    def Add(self, *args):
        """
        Add(TIntIntVV self) -> int
        Add(TIntIntVV self, TIntV Val) -> int

        Parameters:
            Val: TVec< TInt,int > const &

        Add(TIntIntVV self, TIntV Val) -> int

        Parameters:
            Val: TVec< TInt,int > &

        Add(TIntIntVV self, TIntV Val, int const & ResizeLen) -> int

        Parameters:
            Val: TVec< TInt,int > const &
            ResizeLen: int const &

        """
        return _snap.TIntIntVV_Add(self, *args)

    def AddV(self, *args):
        """
        AddV(TIntIntVV self, TIntIntVV ValV) -> int

        Parameters:
            ValV: TVec< TVec< TInt,int >,int > const &

        """
        return _snap.TIntIntVV_AddV(self, *args)

    def AddSorted(self, *args):
        """
        AddSorted(TIntIntVV self, TIntV Val, bool const & Asc=True, int const & _MxVals=-1) -> int

        Parameters:
            Val: TVec< TInt,int > const &
            Asc: bool const &
            _MxVals: int const &

        AddSorted(TIntIntVV self, TIntV Val, bool const & Asc=True) -> int

        Parameters:
            Val: TVec< TInt,int > const &
            Asc: bool const &

        AddSorted(TIntIntVV self, TIntV Val) -> int

        Parameters:
            Val: TVec< TInt,int > const &

        """
        return _snap.TIntIntVV_AddSorted(self, *args)

    def AddBackSorted(self, *args):
        """
        AddBackSorted(TIntIntVV self, TIntV Val, bool const & Asc) -> int

        Parameters:
            Val: TVec< TInt,int > const &
            Asc: bool const &

        """
        return _snap.TIntIntVV_AddBackSorted(self, *args)

    def AddMerged(self, *args):
        """
        AddMerged(TIntIntVV self, TIntV Val) -> int

        Parameters:
            Val: TVec< TInt,int > const &

        """
        return _snap.TIntIntVV_AddMerged(self, *args)

    def AddVMerged(self, *args):
        """
        AddVMerged(TIntIntVV self, TIntIntVV ValV) -> int

        Parameters:
            ValV: TVec< TVec< TInt,int >,int > const &

        """
        return _snap.TIntIntVV_AddVMerged(self, *args)

    def AddUnique(self, *args):
        """
        AddUnique(TIntIntVV self, TIntV Val) -> int

        Parameters:
            Val: TVec< TInt,int > const &

        """
        return _snap.TIntIntVV_AddUnique(self, *args)

    def GetVal(self, *args):
        """
        GetVal(TIntIntVV self, int const & ValN) -> TIntV

        Parameters:
            ValN: int const &

        GetVal(TIntIntVV self, int const & ValN) -> TIntV

        Parameters:
            ValN: int const &

        """
        return _snap.TIntIntVV_GetVal(self, *args)

    def SetVal(self, *args):
        """
        SetVal(TIntIntVV self, int const & ValN, TIntV Val)

        Parameters:
            ValN: int const &
            Val: TVec< TInt,int > const &

        """
        return _snap.TIntIntVV_SetVal(self, *args)

    def GetSubValV(self, *args):
        """
        GetSubValV(TIntIntVV self, int const & BValN, int const & EValN, TIntIntVV ValV)

        Parameters:
            BValN: int const &
            EValN: int const &
            ValV: TVec< TVec< TInt,int >,int > &

        """
        return _snap.TIntIntVV_GetSubValV(self, *args)

    def Ins(self, *args):
        """
        Ins(TIntIntVV self, int const & ValN, TIntV Val)

        Parameters:
            ValN: int const &
            Val: TVec< TInt,int > const &

        """
        return _snap.TIntIntVV_Ins(self, *args)

    def Del(self, *args):
        """
        Del(TIntIntVV self, int const & ValN)

        Parameters:
            ValN: int const &

        Del(TIntIntVV self, int const & MnValN, int const & MxValN)

        Parameters:
            MnValN: int const &
            MxValN: int const &

        """
        return _snap.TIntIntVV_Del(self, *args)

    def DelLast(self):
        """
        DelLast(TIntIntVV self)

        Parameters:
            self: TVec< TVec< TInt >,int > *

        """
        return _snap.TIntIntVV_DelLast(self)

    def DelIfIn(self, *args):
        """
        DelIfIn(TIntIntVV self, TIntV Val) -> bool

        Parameters:
            Val: TVec< TInt,int > const &

        """
        return _snap.TIntIntVV_DelIfIn(self, *args)

    def DelAll(self, *args):
        """
        DelAll(TIntIntVV self, TIntV Val)

        Parameters:
            Val: TVec< TInt,int > const &

        """
        return _snap.TIntIntVV_DelAll(self, *args)

    def PutAll(self, *args):
        """
        PutAll(TIntIntVV self, TIntV Val)

        Parameters:
            Val: TVec< TInt,int > const &

        """
        return _snap.TIntIntVV_PutAll(self, *args)

    def Swap(self, *args):
        """
        Swap(TIntIntVV self, TIntIntVV Vec)

        Parameters:
            Vec: TVec< TVec< TInt,int >,int > &

        Swap(TIntIntVV self, int const & ValN1, int const & ValN2)

        Parameters:
            ValN1: int const &
            ValN2: int const &

        """
        return _snap.TIntIntVV_Swap(self, *args)

    def SwapI(*args):
        """
        SwapI(TIntV LVal, TIntV RVal)

        Parameters:
            LVal: TVec< TVec< TInt >,int >::TIter
            RVal: TVec< TVec< TInt >,int >::TIter

        """
        return _snap.TIntIntVV_SwapI(*args)

    SwapI = staticmethod(SwapI)
    def NextPerm(self):
        """
        NextPerm(TIntIntVV self) -> bool

        Parameters:
            self: TVec< TVec< TInt >,int > *

        """
        return _snap.TIntIntVV_NextPerm(self)

    def PrevPerm(self):
        """
        PrevPerm(TIntIntVV self) -> bool

        Parameters:
            self: TVec< TVec< TInt >,int > *

        """
        return _snap.TIntIntVV_PrevPerm(self)

    def GetPivotValN(self, *args):
        """
        GetPivotValN(TIntIntVV self, int const & LValN, int const & RValN) -> int

        Parameters:
            LValN: int const &
            RValN: int const &

        """
        return _snap.TIntIntVV_GetPivotValN(self, *args)

    def BSort(self, *args):
        """
        BSort(TIntIntVV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters:
            MnLValN: int const &
            MxRValN: int const &
            Asc: bool const &

        """
        return _snap.TIntIntVV_BSort(self, *args)

    def ISort(self, *args):
        """
        ISort(TIntIntVV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters:
            MnLValN: int const &
            MxRValN: int const &
            Asc: bool const &

        """
        return _snap.TIntIntVV_ISort(self, *args)

    def Partition(self, *args):
        """
        Partition(TIntIntVV self, int const & MnLValN, int const & MxRValN, bool const & Asc) -> int

        Parameters:
            MnLValN: int const &
            MxRValN: int const &
            Asc: bool const &

        """
        return _snap.TIntIntVV_Partition(self, *args)

    def QSort(self, *args):
        """
        QSort(TIntIntVV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters:
            MnLValN: int const &
            MxRValN: int const &
            Asc: bool const &

        """
        return _snap.TIntIntVV_QSort(self, *args)

    def Sort(self, Asc=True):
        """
        Sort(TIntIntVV self, bool const & Asc=True)

        Parameters:
            Asc: bool const &

        Sort(TIntIntVV self)

        Parameters:
            self: TVec< TVec< TInt >,int > *

        """
        return _snap.TIntIntVV_Sort(self, Asc)

    def IsSorted(self, Asc=True):
        """
        IsSorted(TIntIntVV self, bool const & Asc=True) -> bool

        Parameters:
            Asc: bool const &

        IsSorted(TIntIntVV self) -> bool

        Parameters:
            self: TVec< TVec< TInt >,int > const *

        """
        return _snap.TIntIntVV_IsSorted(self, Asc)

    def Shuffle(self, *args):
        """
        Shuffle(TIntIntVV self, TRnd Rnd)

        Parameters:
            Rnd: TRnd &

        """
        return _snap.TIntIntVV_Shuffle(self, *args)

    def Reverse(self, *args):
        """
        Reverse(TIntIntVV self)
        Reverse(TIntIntVV self, int LValN, int RValN)

        Parameters:
            LValN: int
            RValN: int

        """
        return _snap.TIntIntVV_Reverse(self, *args)

    def Merge(self):
        """
        Merge(TIntIntVV self)

        Parameters:
            self: TVec< TVec< TInt >,int > *

        """
        return _snap.TIntIntVV_Merge(self)

    def Intrs(self, *args):
        """
        Intrs(TIntIntVV self, TIntIntVV ValV)

        Parameters:
            ValV: TVec< TVec< TInt,int >,int > const &

        Intrs(TIntIntVV self, TIntIntVV ValV, TIntIntVV DstValV)

        Parameters:
            ValV: TVec< TVec< TInt,int >,int > const &
            DstValV: TVec< TVec< TInt,int >,int > &

        """
        return _snap.TIntIntVV_Intrs(self, *args)

    def Union(self, *args):
        """
        Union(TIntIntVV self, TIntIntVV ValV)

        Parameters:
            ValV: TVec< TVec< TInt,int >,int > const &

        Union(TIntIntVV self, TIntIntVV ValV, TIntIntVV DstValV)

        Parameters:
            ValV: TVec< TVec< TInt,int >,int > const &
            DstValV: TVec< TVec< TInt,int >,int > &

        """
        return _snap.TIntIntVV_Union(self, *args)

    def Diff(self, *args):
        """
        Diff(TIntIntVV self, TIntIntVV ValV)

        Parameters:
            ValV: TVec< TVec< TInt,int >,int > const &

        Diff(TIntIntVV self, TIntIntVV ValV, TIntIntVV DstValV)

        Parameters:
            ValV: TVec< TVec< TInt,int >,int > const &
            DstValV: TVec< TVec< TInt,int >,int > &

        """
        return _snap.TIntIntVV_Diff(self, *args)

    def IntrsLen(self, *args):
        """
        IntrsLen(TIntIntVV self, TIntIntVV ValV) -> int

        Parameters:
            ValV: TVec< TVec< TInt,int >,int > const &

        """
        return _snap.TIntIntVV_IntrsLen(self, *args)

    def UnionLen(self, *args):
        """
        UnionLen(TIntIntVV self, TIntIntVV ValV) -> int

        Parameters:
            ValV: TVec< TVec< TInt,int >,int > const &

        """
        return _snap.TIntIntVV_UnionLen(self, *args)

    def Count(self, *args):
        """
        Count(TIntIntVV self, TIntV Val) -> int

        Parameters:
            Val: TVec< TInt,int > const &

        """
        return _snap.TIntIntVV_Count(self, *args)

    def SearchBin(self, *args):
        """
        SearchBin(TIntIntVV self, TIntV Val) -> int

        Parameters:
            Val: TVec< TInt,int > const &

        SearchBin(TIntIntVV self, TIntV Val, int & InsValN) -> int

        Parameters:
            Val: TVec< TInt,int > const &
            InsValN: int &

        """
        return _snap.TIntIntVV_SearchBin(self, *args)

    def SearchForw(self, *args):
        """
        SearchForw(TIntIntVV self, TIntV Val, int const & BValN=0) -> int

        Parameters:
            Val: TVec< TInt,int > const &
            BValN: int const &

        SearchForw(TIntIntVV self, TIntV Val) -> int

        Parameters:
            Val: TVec< TInt,int > const &

        """
        return _snap.TIntIntVV_SearchForw(self, *args)

    def SearchBack(self, *args):
        """
        SearchBack(TIntIntVV self, TIntV Val) -> int

        Parameters:
            Val: TVec< TInt,int > const &

        """
        return _snap.TIntIntVV_SearchBack(self, *args)

    def SearchVForw(self, *args):
        """
        SearchVForw(TIntIntVV self, TIntIntVV ValV, int const & BValN=0) -> int

        Parameters:
            ValV: TVec< TVec< TInt,int >,int > const &
            BValN: int const &

        SearchVForw(TIntIntVV self, TIntIntVV ValV) -> int

        Parameters:
            ValV: TVec< TVec< TInt,int >,int > const &

        """
        return _snap.TIntIntVV_SearchVForw(self, *args)

    def IsIn(self, *args):
        """
        IsIn(TIntIntVV self, TIntV Val) -> bool

        Parameters:
            Val: TVec< TInt,int > const &

        IsIn(TIntIntVV self, TIntV Val, int & ValN) -> bool

        Parameters:
            Val: TVec< TInt,int > const &
            ValN: int &

        """
        return _snap.TIntIntVV_IsIn(self, *args)

    def IsInBin(self, *args):
        """
        IsInBin(TIntIntVV self, TIntV Val) -> bool

        Parameters:
            Val: TVec< TInt,int > const &

        """
        return _snap.TIntIntVV_IsInBin(self, *args)

    def GetDat(self, *args):
        """
        GetDat(TIntIntVV self, TIntV Val) -> TIntV

        Parameters:
            Val: TVec< TInt,int > const &

        """
        return _snap.TIntIntVV_GetDat(self, *args)

    def GetAddDat(self, *args):
        """
        GetAddDat(TIntIntVV self, TIntV Val) -> TIntV

        Parameters:
            Val: TVec< TInt,int > const &

        """
        return _snap.TIntIntVV_GetAddDat(self, *args)

    def GetMxValN(self):
        """
        GetMxValN(TIntIntVV self) -> int

        Parameters:
            self: TVec< TVec< TInt >,int > const *

        """
        return _snap.TIntIntVV_GetMxValN(self)

    def GetV(*args):
        """
        GetV(TIntV Val1) -> TIntIntVV

        Parameters:
            Val1: TVec< TInt,int > const &

        GetV(TIntV Val1, TIntV Val2) -> TIntIntVV

        Parameters:
            Val1: TVec< TInt,int > const &
            Val2: TVec< TInt,int > const &

        GetV(TIntV Val1, TIntV Val2, TIntV Val3) -> TIntIntVV

        Parameters:
            Val1: TVec< TInt,int > const &
            Val2: TVec< TInt,int > const &
            Val3: TVec< TInt,int > const &

        GetV(TIntV Val1, TIntV Val2, TIntV Val3, TIntV Val4) -> TIntIntVV

        Parameters:
            Val1: TVec< TInt,int > const &
            Val2: TVec< TInt,int > const &
            Val3: TVec< TInt,int > const &
            Val4: TVec< TInt,int > const &

        GetV(TIntV Val1, TIntV Val2, TIntV Val3, TIntV Val4, TIntV Val5) -> TIntIntVV

        Parameters:
            Val1: TVec< TInt,int > const &
            Val2: TVec< TInt,int > const &
            Val3: TVec< TInt,int > const &
            Val4: TVec< TInt,int > const &
            Val5: TVec< TInt,int > const &

        GetV(TIntV Val1, TIntV Val2, TIntV Val3, TIntV Val4, TIntV Val5, TIntV Val6) -> TIntIntVV

        Parameters:
            Val1: TVec< TInt,int > const &
            Val2: TVec< TInt,int > const &
            Val3: TVec< TInt,int > const &
            Val4: TVec< TInt,int > const &
            Val5: TVec< TInt,int > const &
            Val6: TVec< TInt,int > const &

        GetV(TIntV Val1, TIntV Val2, TIntV Val3, TIntV Val4, TIntV Val5, TIntV Val6, TIntV Val7) -> TIntIntVV

        Parameters:
            Val1: TVec< TInt,int > const &
            Val2: TVec< TInt,int > const &
            Val3: TVec< TInt,int > const &
            Val4: TVec< TInt,int > const &
            Val5: TVec< TInt,int > const &
            Val6: TVec< TInt,int > const &
            Val7: TVec< TInt,int > const &

        GetV(TIntV Val1, TIntV Val2, TIntV Val3, TIntV Val4, TIntV Val5, TIntV Val6, TIntV Val7, 
            TIntV Val8) -> TIntIntVV

        Parameters:
            Val1: TVec< TInt,int > const &
            Val2: TVec< TInt,int > const &
            Val3: TVec< TInt,int > const &
            Val4: TVec< TInt,int > const &
            Val5: TVec< TInt,int > const &
            Val6: TVec< TInt,int > const &
            Val7: TVec< TInt,int > const &
            Val8: TVec< TInt,int > const &

        GetV(TIntV Val1, TIntV Val2, TIntV Val3, TIntV Val4, TIntV Val5, TIntV Val6, TIntV Val7, 
            TIntV Val8, TIntV Val9) -> TIntIntVV

        Parameters:
            Val1: TVec< TInt,int > const &
            Val2: TVec< TInt,int > const &
            Val3: TVec< TInt,int > const &
            Val4: TVec< TInt,int > const &
            Val5: TVec< TInt,int > const &
            Val6: TVec< TInt,int > const &
            Val7: TVec< TInt,int > const &
            Val8: TVec< TInt,int > const &
            Val9: TVec< TInt,int > const &

        """
        return _snap.TIntIntVV_GetV(*args)

    GetV = staticmethod(GetV)
TIntIntVV.Load = new_instancemethod(_snap.TIntIntVV_Load,None,TIntIntVV)
TIntIntVV.Save = new_instancemethod(_snap.TIntIntVV_Save,None,TIntIntVV)
TIntIntVV.__add__ = new_instancemethod(_snap.TIntIntVV___add__,None,TIntIntVV)
TIntIntVV.__eq__ = new_instancemethod(_snap.TIntIntVV___eq__,None,TIntIntVV)
TIntIntVV.__lt__ = new_instancemethod(_snap.TIntIntVV___lt__,None,TIntIntVV)
TIntIntVV.GetMemUsed = new_instancemethod(_snap.TIntIntVV_GetMemUsed,None,TIntIntVV)
TIntIntVV.GetMemSize = new_instancemethod(_snap.TIntIntVV_GetMemSize,None,TIntIntVV)
TIntIntVV.GetPrimHashCd = new_instancemethod(_snap.TIntIntVV_GetPrimHashCd,None,TIntIntVV)
TIntIntVV.GetSecHashCd = new_instancemethod(_snap.TIntIntVV_GetSecHashCd,None,TIntIntVV)
TIntIntVV.Gen = new_instancemethod(_snap.TIntIntVV_Gen,None,TIntIntVV)
TIntIntVV.GenExt = new_instancemethod(_snap.TIntIntVV_GenExt,None,TIntIntVV)
TIntIntVV.IsExt = new_instancemethod(_snap.TIntIntVV_IsExt,None,TIntIntVV)
TIntIntVV.Reserve = new_instancemethod(_snap.TIntIntVV_Reserve,None,TIntIntVV)
TIntIntVV.Clr = new_instancemethod(_snap.TIntIntVV_Clr,None,TIntIntVV)
TIntIntVV.Trunc = new_instancemethod(_snap.TIntIntVV_Trunc,None,TIntIntVV)
TIntIntVV.Pack = new_instancemethod(_snap.TIntIntVV_Pack,None,TIntIntVV)
TIntIntVV.MoveFrom = new_instancemethod(_snap.TIntIntVV_MoveFrom,None,TIntIntVV)
TIntIntVV.Empty = new_instancemethod(_snap.TIntIntVV_Empty,None,TIntIntVV)
TIntIntVV.Len = new_instancemethod(_snap.TIntIntVV_Len,None,TIntIntVV)
TIntIntVV.Reserved = new_instancemethod(_snap.TIntIntVV_Reserved,None,TIntIntVV)
TIntIntVV.Last = new_instancemethod(_snap.TIntIntVV_Last,None,TIntIntVV)
TIntIntVV.LastValN = new_instancemethod(_snap.TIntIntVV_LastValN,None,TIntIntVV)
TIntIntVV.LastLast = new_instancemethod(_snap.TIntIntVV_LastLast,None,TIntIntVV)
TIntIntVV.BegI = new_instancemethod(_snap.TIntIntVV_BegI,None,TIntIntVV)
TIntIntVV.EndI = new_instancemethod(_snap.TIntIntVV_EndI,None,TIntIntVV)
TIntIntVV.GetI = new_instancemethod(_snap.TIntIntVV_GetI,None,TIntIntVV)
TIntIntVV.Add = new_instancemethod(_snap.TIntIntVV_Add,None,TIntIntVV)
TIntIntVV.AddV = new_instancemethod(_snap.TIntIntVV_AddV,None,TIntIntVV)
TIntIntVV.AddSorted = new_instancemethod(_snap.TIntIntVV_AddSorted,None,TIntIntVV)
TIntIntVV.AddBackSorted = new_instancemethod(_snap.TIntIntVV_AddBackSorted,None,TIntIntVV)
TIntIntVV.AddMerged = new_instancemethod(_snap.TIntIntVV_AddMerged,None,TIntIntVV)
TIntIntVV.AddVMerged = new_instancemethod(_snap.TIntIntVV_AddVMerged,None,TIntIntVV)
TIntIntVV.AddUnique = new_instancemethod(_snap.TIntIntVV_AddUnique,None,TIntIntVV)
TIntIntVV.GetVal = new_instancemethod(_snap.TIntIntVV_GetVal,None,TIntIntVV)
TIntIntVV.SetVal = new_instancemethod(_snap.TIntIntVV_SetVal,None,TIntIntVV)
TIntIntVV.GetSubValV = new_instancemethod(_snap.TIntIntVV_GetSubValV,None,TIntIntVV)
TIntIntVV.Ins = new_instancemethod(_snap.TIntIntVV_Ins,None,TIntIntVV)
TIntIntVV.Del = new_instancemethod(_snap.TIntIntVV_Del,None,TIntIntVV)
TIntIntVV.DelLast = new_instancemethod(_snap.TIntIntVV_DelLast,None,TIntIntVV)
TIntIntVV.DelIfIn = new_instancemethod(_snap.TIntIntVV_DelIfIn,None,TIntIntVV)
TIntIntVV.DelAll = new_instancemethod(_snap.TIntIntVV_DelAll,None,TIntIntVV)
TIntIntVV.PutAll = new_instancemethod(_snap.TIntIntVV_PutAll,None,TIntIntVV)
TIntIntVV.Swap = new_instancemethod(_snap.TIntIntVV_Swap,None,TIntIntVV)
TIntIntVV.NextPerm = new_instancemethod(_snap.TIntIntVV_NextPerm,None,TIntIntVV)
TIntIntVV.PrevPerm = new_instancemethod(_snap.TIntIntVV_PrevPerm,None,TIntIntVV)
TIntIntVV.GetPivotValN = new_instancemethod(_snap.TIntIntVV_GetPivotValN,None,TIntIntVV)
TIntIntVV.BSort = new_instancemethod(_snap.TIntIntVV_BSort,None,TIntIntVV)
TIntIntVV.ISort = new_instancemethod(_snap.TIntIntVV_ISort,None,TIntIntVV)
TIntIntVV.Partition = new_instancemethod(_snap.TIntIntVV_Partition,None,TIntIntVV)
TIntIntVV.QSort = new_instancemethod(_snap.TIntIntVV_QSort,None,TIntIntVV)
TIntIntVV.Sort = new_instancemethod(_snap.TIntIntVV_Sort,None,TIntIntVV)
TIntIntVV.IsSorted = new_instancemethod(_snap.TIntIntVV_IsSorted,None,TIntIntVV)
TIntIntVV.Shuffle = new_instancemethod(_snap.TIntIntVV_Shuffle,None,TIntIntVV)
TIntIntVV.Reverse = new_instancemethod(_snap.TIntIntVV_Reverse,None,TIntIntVV)
TIntIntVV.Merge = new_instancemethod(_snap.TIntIntVV_Merge,None,TIntIntVV)
TIntIntVV.Intrs = new_instancemethod(_snap.TIntIntVV_Intrs,None,TIntIntVV)
TIntIntVV.Union = new_instancemethod(_snap.TIntIntVV_Union,None,TIntIntVV)
TIntIntVV.Diff = new_instancemethod(_snap.TIntIntVV_Diff,None,TIntIntVV)
TIntIntVV.IntrsLen = new_instancemethod(_snap.TIntIntVV_IntrsLen,None,TIntIntVV)
TIntIntVV.UnionLen = new_instancemethod(_snap.TIntIntVV_UnionLen,None,TIntIntVV)
TIntIntVV.Count = new_instancemethod(_snap.TIntIntVV_Count,None,TIntIntVV)
TIntIntVV.SearchBin = new_instancemethod(_snap.TIntIntVV_SearchBin,None,TIntIntVV)
TIntIntVV.SearchForw = new_instancemethod(_snap.TIntIntVV_SearchForw,None,TIntIntVV)
TIntIntVV.SearchBack = new_instancemethod(_snap.TIntIntVV_SearchBack,None,TIntIntVV)
TIntIntVV.SearchVForw = new_instancemethod(_snap.TIntIntVV_SearchVForw,None,TIntIntVV)
TIntIntVV.IsIn = new_instancemethod(_snap.TIntIntVV_IsIn,None,TIntIntVV)
TIntIntVV.IsInBin = new_instancemethod(_snap.TIntIntVV_IsInBin,None,TIntIntVV)
TIntIntVV.GetDat = new_instancemethod(_snap.TIntIntVV_GetDat,None,TIntIntVV)
TIntIntVV.GetAddDat = new_instancemethod(_snap.TIntIntVV_GetAddDat,None,TIntIntVV)
TIntIntVV.GetMxValN = new_instancemethod(_snap.TIntIntVV_GetMxValN,None,TIntIntVV)
TIntIntVV_swigregister = _snap.TIntIntVV_swigregister
TIntIntVV_swigregister(TIntIntVV)

def TIntIntVV_SwapI(*args):
  """
    TIntIntVV_SwapI(TIntV LVal, TIntV RVal)

    Parameters:
        LVal: TVec< TVec< TInt >,int >::TIter
        RVal: TVec< TVec< TInt >,int >::TIter

    """
  return _snap.TIntIntVV_SwapI(*args)

def TIntIntVV_GetV(*args):
  """
    GetV(TIntV Val1) -> TIntIntVV

    Parameters:
        Val1: TVec< TInt,int > const &

    GetV(TIntV Val1, TIntV Val2) -> TIntIntVV

    Parameters:
        Val1: TVec< TInt,int > const &
        Val2: TVec< TInt,int > const &

    GetV(TIntV Val1, TIntV Val2, TIntV Val3) -> TIntIntVV

    Parameters:
        Val1: TVec< TInt,int > const &
        Val2: TVec< TInt,int > const &
        Val3: TVec< TInt,int > const &

    GetV(TIntV Val1, TIntV Val2, TIntV Val3, TIntV Val4) -> TIntIntVV

    Parameters:
        Val1: TVec< TInt,int > const &
        Val2: TVec< TInt,int > const &
        Val3: TVec< TInt,int > const &
        Val4: TVec< TInt,int > const &

    GetV(TIntV Val1, TIntV Val2, TIntV Val3, TIntV Val4, TIntV Val5) -> TIntIntVV

    Parameters:
        Val1: TVec< TInt,int > const &
        Val2: TVec< TInt,int > const &
        Val3: TVec< TInt,int > const &
        Val4: TVec< TInt,int > const &
        Val5: TVec< TInt,int > const &

    GetV(TIntV Val1, TIntV Val2, TIntV Val3, TIntV Val4, TIntV Val5, TIntV Val6) -> TIntIntVV

    Parameters:
        Val1: TVec< TInt,int > const &
        Val2: TVec< TInt,int > const &
        Val3: TVec< TInt,int > const &
        Val4: TVec< TInt,int > const &
        Val5: TVec< TInt,int > const &
        Val6: TVec< TInt,int > const &

    GetV(TIntV Val1, TIntV Val2, TIntV Val3, TIntV Val4, TIntV Val5, TIntV Val6, TIntV Val7) -> TIntIntVV

    Parameters:
        Val1: TVec< TInt,int > const &
        Val2: TVec< TInt,int > const &
        Val3: TVec< TInt,int > const &
        Val4: TVec< TInt,int > const &
        Val5: TVec< TInt,int > const &
        Val6: TVec< TInt,int > const &
        Val7: TVec< TInt,int > const &

    GetV(TIntV Val1, TIntV Val2, TIntV Val3, TIntV Val4, TIntV Val5, TIntV Val6, TIntV Val7, 
        TIntV Val8) -> TIntIntVV

    Parameters:
        Val1: TVec< TInt,int > const &
        Val2: TVec< TInt,int > const &
        Val3: TVec< TInt,int > const &
        Val4: TVec< TInt,int > const &
        Val5: TVec< TInt,int > const &
        Val6: TVec< TInt,int > const &
        Val7: TVec< TInt,int > const &
        Val8: TVec< TInt,int > const &

    TIntIntVV_GetV(TIntV Val1, TIntV Val2, TIntV Val3, TIntV Val4, TIntV Val5, TIntV Val6, TIntV Val7, 
        TIntV Val8, TIntV Val9) -> TIntIntVV

    Parameters:
        Val1: TVec< TInt,int > const &
        Val2: TVec< TInt,int > const &
        Val3: TVec< TInt,int > const &
        Val4: TVec< TInt,int > const &
        Val5: TVec< TInt,int > const &
        Val6: TVec< TInt,int > const &
        Val7: TVec< TInt,int > const &
        Val8: TVec< TInt,int > const &
        Val9: TVec< TInt,int > const &

    """
  return _snap.TIntIntVV_GetV(*args)

class TIntH(object):
    """Proxy of C++ THash<(TInt,TInt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TIntH_HashPrimes
    def __init__(self, *args): 
        """
        __init__(THash<(TInt,TInt)> self) -> TIntH
        __init__(THash<(TInt,TInt)> self, TIntH Hash) -> TIntH

        Parameters:
            Hash: THash< TInt,TInt > const &

        __init__(THash<(TInt,TInt)> self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntH

        Parameters:
            ExpectVals: int const &
            _AutoSizeP: bool const &

        __init__(THash<(TInt,TInt)> self, int const & ExpectVals) -> TIntH

        Parameters:
            ExpectVals: int const &

        __init__(THash<(TInt,TInt)> self, TSIn SIn) -> TIntH

        Parameters:
            SIn: TSIn &

        """
        _snap.TIntH_swiginit(self,_snap.new_TIntH(*args))
    def Load(self, *args):
        """
        Load(TIntH self, TSIn SIn)

        Parameters:
            SIn: TSIn &

        """
        return _snap.TIntH_Load(self, *args)

    def Save(self, *args):
        """
        Save(TIntH self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.TIntH_Save(self, *args)

    def __eq__(self, *args):
        """
        __eq__(TIntH self, TIntH Hash) -> bool

        Parameters:
            Hash: THash< TInt,TInt > const &

        """
        return _snap.TIntH___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TIntH self, TIntH Hash) -> bool

        Parameters:
            Hash: THash< TInt,TInt > const &

        """
        return _snap.TIntH___lt__(self, *args)

    def __call__(self, *args):
        """
        __call__(TIntH self, TInt Key) -> TInt

        Parameters:
            Key: TInt const &

        """
        return _snap.TIntH___call__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(TIntH self) -> ::TSize

        Parameters:
            self: THash< TInt,TInt > const *

        """
        return _snap.TIntH_GetMemUsed(self)

    def BegI(self):
        """
        BegI(TIntH self) -> TIntHI

        Parameters:
            self: THash< TInt,TInt > const *

        """
        return _snap.TIntH_BegI(self)

    def EndI(self):
        """
        EndI(TIntH self) -> TIntHI

        Parameters:
            self: THash< TInt,TInt > const *

        """
        return _snap.TIntH_EndI(self)

    def GetI(self, *args):
        """
        GetI(TIntH self, TInt Key) -> TIntHI

        Parameters:
            Key: TInt const &

        """
        return _snap.TIntH_GetI(self, *args)

    def Gen(self, *args):
        """
        Gen(TIntH self, int const & ExpectVals)

        Parameters:
            ExpectVals: int const &

        """
        return _snap.TIntH_Gen(self, *args)

    def Clr(self, *args):
        """
        Clr(TIntH self, bool const & DoDel=True, int const & NoDelLim=-1, bool const & ResetDat=True)

        Parameters:
            DoDel: bool const &
            NoDelLim: int const &
            ResetDat: bool const &

        Clr(TIntH self, bool const & DoDel=True, int const & NoDelLim=-1)

        Parameters:
            DoDel: bool const &
            NoDelLim: int const &

        Clr(TIntH self, bool const & DoDel=True)

        Parameters:
            DoDel: bool const &

        Clr(TIntH self)

        Parameters:
            self: THash< TInt,TInt > *

        """
        return _snap.TIntH_Clr(self, *args)

    def Empty(self):
        """
        Empty(TIntH self) -> bool

        Parameters:
            self: THash< TInt,TInt > const *

        """
        return _snap.TIntH_Empty(self)

    def Len(self):
        """
        Len(TIntH self) -> int

        Parameters:
            self: THash< TInt,TInt > const *

        """
        return _snap.TIntH_Len(self)

    def GetPorts(self):
        """
        GetPorts(TIntH self) -> int

        Parameters:
            self: THash< TInt,TInt > const *

        """
        return _snap.TIntH_GetPorts(self)

    def IsAutoSize(self):
        """
        IsAutoSize(TIntH self) -> bool

        Parameters:
            self: THash< TInt,TInt > const *

        """
        return _snap.TIntH_IsAutoSize(self)

    def GetMxKeyIds(self):
        """
        GetMxKeyIds(TIntH self) -> int

        Parameters:
            self: THash< TInt,TInt > const *

        """
        return _snap.TIntH_GetMxKeyIds(self)

    def GetReservedKeyIds(self):
        """
        GetReservedKeyIds(TIntH self) -> int

        Parameters:
            self: THash< TInt,TInt > const *

        """
        return _snap.TIntH_GetReservedKeyIds(self)

    def IsKeyIdEqKeyN(self):
        """
        IsKeyIdEqKeyN(TIntH self) -> bool

        Parameters:
            self: THash< TInt,TInt > const *

        """
        return _snap.TIntH_IsKeyIdEqKeyN(self)

    def AddKey(self, *args):
        """
        AddKey(TIntH self, TInt Key) -> int

        Parameters:
            Key: TInt const &

        """
        return _snap.TIntH_AddKey(self, *args)

    def AddDat(self, *args):
        """
        AddDat(TIntH self, TInt Key) -> TInt

        Parameters:
            Key: TInt const &

        AddDat(TIntH self, TInt Key, TInt Dat) -> TInt

        Parameters:
            Key: TInt const &
            Dat: TInt const &

        """
        return _snap.TIntH_AddDat(self, *args)

    def DelKey(self, *args):
        """
        DelKey(TIntH self, TInt Key)

        Parameters:
            Key: TInt const &

        """
        return _snap.TIntH_DelKey(self, *args)

    def DelIfKey(self, *args):
        """
        DelIfKey(TIntH self, TInt Key) -> bool

        Parameters:
            Key: TInt const &

        """
        return _snap.TIntH_DelIfKey(self, *args)

    def DelKeyId(self, *args):
        """
        DelKeyId(TIntH self, int const & KeyId)

        Parameters:
            KeyId: int const &

        """
        return _snap.TIntH_DelKeyId(self, *args)

    def DelKeyIdV(self, *args):
        """
        DelKeyIdV(TIntH self, TIntV KeyIdV)

        Parameters:
            KeyIdV: TIntV const &

        """
        return _snap.TIntH_DelKeyIdV(self, *args)

    def GetKey(self, *args):
        """
        GetKey(TIntH self, int const & KeyId) -> TInt

        Parameters:
            KeyId: int const &

        """
        return _snap.TIntH_GetKey(self, *args)

    def GetKeyId(self, *args):
        """
        GetKeyId(TIntH self, TInt Key) -> int

        Parameters:
            Key: TInt const &

        """
        return _snap.TIntH_GetKeyId(self, *args)

    def GetRndKeyId(self, *args):
        """
        GetRndKeyId(TIntH self, TRnd Rnd) -> int

        Parameters:
            Rnd: TRnd &

        GetRndKeyId(TIntH self, TRnd Rnd, double const & EmptyFrac) -> int

        Parameters:
            Rnd: TRnd &
            EmptyFrac: double const &

        """
        return _snap.TIntH_GetRndKeyId(self, *args)

    def IsKey(self, *args):
        """
        IsKey(TIntH self, TInt Key) -> bool

        Parameters:
            Key: TInt const &

        IsKey(TIntH self, TInt Key, int & KeyId) -> bool

        Parameters:
            Key: TInt const &
            KeyId: int &

        """
        return _snap.TIntH_IsKey(self, *args)

    def IsKeyId(self, *args):
        """
        IsKeyId(TIntH self, int const & KeyId) -> bool

        Parameters:
            KeyId: int const &

        """
        return _snap.TIntH_IsKeyId(self, *args)

    def GetDat(self, *args):
        """
        GetDat(TIntH self, TInt Key) -> TInt

        Parameters:
            Key: TInt const &

        GetDat(TIntH self, TInt Key) -> TInt

        Parameters:
            Key: TInt const &

        """
        return _snap.TIntH_GetDat(self, *args)

    def GetKeyDat(self, *args):
        """
        GetKeyDat(TIntH self, int const & KeyId, TInt Key, TInt Dat)

        Parameters:
            KeyId: int const &
            Key: TInt &
            Dat: TInt &

        """
        return _snap.TIntH_GetKeyDat(self, *args)

    def IsKeyGetDat(self, *args):
        """
        IsKeyGetDat(TIntH self, TInt Key, TInt Dat) -> bool

        Parameters:
            Key: TInt const &
            Dat: TInt &

        """
        return _snap.TIntH_IsKeyGetDat(self, *args)

    def FFirstKeyId(self):
        """
        FFirstKeyId(TIntH self) -> int

        Parameters:
            self: THash< TInt,TInt > const *

        """
        return _snap.TIntH_FFirstKeyId(self)

    def FNextKeyId(self, *args):
        """
        FNextKeyId(TIntH self, int & KeyId) -> bool

        Parameters:
            KeyId: int &

        """
        return _snap.TIntH_FNextKeyId(self, *args)

    def GetKeyV(self, *args):
        """
        GetKeyV(TIntH self, TIntV KeyV)

        Parameters:
            KeyV: TVec< TInt > &

        """
        return _snap.TIntH_GetKeyV(self, *args)

    def GetDatV(self, *args):
        """
        GetDatV(TIntH self, TIntV DatV)

        Parameters:
            DatV: TVec< TInt > &

        """
        return _snap.TIntH_GetDatV(self, *args)

    def GetKeyDatPrV(self, *args):
        """
        GetKeyDatPrV(TIntH self, TIntPrV KeyDatPrV)

        Parameters:
            KeyDatPrV: TVec< TPair< TInt,TInt > > &

        """
        return _snap.TIntH_GetKeyDatPrV(self, *args)

    def GetDatKeyPrV(self, *args):
        """
        GetDatKeyPrV(TIntH self, TIntPrV DatKeyPrV)

        Parameters:
            DatKeyPrV: TVec< TPair< TInt,TInt > > &

        """
        return _snap.TIntH_GetDatKeyPrV(self, *args)

    def GetKeyDatKdV(self, *args):
        """
        GetKeyDatKdV(TIntH self, TVec< TKeyDat< TInt,TInt > > & KeyDatKdV)

        Parameters:
            KeyDatKdV: TVec< TKeyDat< TInt,TInt > > &

        """
        return _snap.TIntH_GetKeyDatKdV(self, *args)

    def GetDatKeyKdV(self, *args):
        """
        GetDatKeyKdV(TIntH self, TVec< TKeyDat< TInt,TInt > > & DatKeyKdV)

        Parameters:
            DatKeyKdV: TVec< TKeyDat< TInt,TInt > > &

        """
        return _snap.TIntH_GetDatKeyKdV(self, *args)

    def Swap(self, *args):
        """
        Swap(TIntH self, TIntH Hash)

        Parameters:
            Hash: THash< TInt,TInt > &

        """
        return _snap.TIntH_Swap(self, *args)

    def Defrag(self):
        """
        Defrag(TIntH self)

        Parameters:
            self: THash< TInt,TInt > *

        """
        return _snap.TIntH_Defrag(self)

    def Pack(self):
        """
        Pack(TIntH self)

        Parameters:
            self: THash< TInt,TInt > *

        """
        return _snap.TIntH_Pack(self)

    def Sort(self, *args):
        """
        Sort(TIntH self, bool const & CmpKey, bool const & Asc)

        Parameters:
            CmpKey: bool const &
            Asc: bool const &

        """
        return _snap.TIntH_Sort(self, *args)

    def SortByKey(self, Asc=True):
        """
        SortByKey(TIntH self, bool const & Asc=True)

        Parameters:
            Asc: bool const &

        SortByKey(TIntH self)

        Parameters:
            self: THash< TInt,TInt > *

        """
        return _snap.TIntH_SortByKey(self, Asc)

    def SortByDat(self, Asc=True):
        """
        SortByDat(TIntH self, bool const & Asc=True)

        Parameters:
            Asc: bool const &

        SortByDat(TIntH self)

        Parameters:
            self: THash< TInt,TInt > *

        """
        return _snap.TIntH_SortByDat(self, Asc)

    __swig_destroy__ = _snap.delete_TIntH
TIntH.Load = new_instancemethod(_snap.TIntH_Load,None,TIntH)
TIntH.Save = new_instancemethod(_snap.TIntH_Save,None,TIntH)
TIntH.__eq__ = new_instancemethod(_snap.TIntH___eq__,None,TIntH)
TIntH.__lt__ = new_instancemethod(_snap.TIntH___lt__,None,TIntH)
TIntH.__call__ = new_instancemethod(_snap.TIntH___call__,None,TIntH)
TIntH.GetMemUsed = new_instancemethod(_snap.TIntH_GetMemUsed,None,TIntH)
TIntH.BegI = new_instancemethod(_snap.TIntH_BegI,None,TIntH)
TIntH.EndI = new_instancemethod(_snap.TIntH_EndI,None,TIntH)
TIntH.GetI = new_instancemethod(_snap.TIntH_GetI,None,TIntH)
TIntH.Gen = new_instancemethod(_snap.TIntH_Gen,None,TIntH)
TIntH.Clr = new_instancemethod(_snap.TIntH_Clr,None,TIntH)
TIntH.Empty = new_instancemethod(_snap.TIntH_Empty,None,TIntH)
TIntH.Len = new_instancemethod(_snap.TIntH_Len,None,TIntH)
TIntH.GetPorts = new_instancemethod(_snap.TIntH_GetPorts,None,TIntH)
TIntH.IsAutoSize = new_instancemethod(_snap.TIntH_IsAutoSize,None,TIntH)
TIntH.GetMxKeyIds = new_instancemethod(_snap.TIntH_GetMxKeyIds,None,TIntH)
TIntH.GetReservedKeyIds = new_instancemethod(_snap.TIntH_GetReservedKeyIds,None,TIntH)
TIntH.IsKeyIdEqKeyN = new_instancemethod(_snap.TIntH_IsKeyIdEqKeyN,None,TIntH)
TIntH.AddKey = new_instancemethod(_snap.TIntH_AddKey,None,TIntH)
TIntH.AddDat = new_instancemethod(_snap.TIntH_AddDat,None,TIntH)
TIntH.DelKey = new_instancemethod(_snap.TIntH_DelKey,None,TIntH)
TIntH.DelIfKey = new_instancemethod(_snap.TIntH_DelIfKey,None,TIntH)
TIntH.DelKeyId = new_instancemethod(_snap.TIntH_DelKeyId,None,TIntH)
TIntH.DelKeyIdV = new_instancemethod(_snap.TIntH_DelKeyIdV,None,TIntH)
TIntH.GetKey = new_instancemethod(_snap.TIntH_GetKey,None,TIntH)
TIntH.GetKeyId = new_instancemethod(_snap.TIntH_GetKeyId,None,TIntH)
TIntH.GetRndKeyId = new_instancemethod(_snap.TIntH_GetRndKeyId,None,TIntH)
TIntH.IsKey = new_instancemethod(_snap.TIntH_IsKey,None,TIntH)
TIntH.IsKeyId = new_instancemethod(_snap.TIntH_IsKeyId,None,TIntH)
TIntH.GetDat = new_instancemethod(_snap.TIntH_GetDat,None,TIntH)
TIntH.GetKeyDat = new_instancemethod(_snap.TIntH_GetKeyDat,None,TIntH)
TIntH.IsKeyGetDat = new_instancemethod(_snap.TIntH_IsKeyGetDat,None,TIntH)
TIntH.FFirstKeyId = new_instancemethod(_snap.TIntH_FFirstKeyId,None,TIntH)
TIntH.FNextKeyId = new_instancemethod(_snap.TIntH_FNextKeyId,None,TIntH)
TIntH.GetKeyV = new_instancemethod(_snap.TIntH_GetKeyV,None,TIntH)
TIntH.GetDatV = new_instancemethod(_snap.TIntH_GetDatV,None,TIntH)
TIntH.GetKeyDatPrV = new_instancemethod(_snap.TIntH_GetKeyDatPrV,None,TIntH)
TIntH.GetDatKeyPrV = new_instancemethod(_snap.TIntH_GetDatKeyPrV,None,TIntH)
TIntH.GetKeyDatKdV = new_instancemethod(_snap.TIntH_GetKeyDatKdV,None,TIntH)
TIntH.GetDatKeyKdV = new_instancemethod(_snap.TIntH_GetDatKeyKdV,None,TIntH)
TIntH.Swap = new_instancemethod(_snap.TIntH_Swap,None,TIntH)
TIntH.Defrag = new_instancemethod(_snap.TIntH_Defrag,None,TIntH)
TIntH.Pack = new_instancemethod(_snap.TIntH_Pack,None,TIntH)
TIntH.Sort = new_instancemethod(_snap.TIntH_Sort,None,TIntH)
TIntH.SortByKey = new_instancemethod(_snap.TIntH_SortByKey,None,TIntH)
TIntH.SortByDat = new_instancemethod(_snap.TIntH_SortByDat,None,TIntH)
TIntH_swigregister = _snap.TIntH_swigregister
TIntH_swigregister(TIntH)

class TIntIntH(object):
    """Proxy of C++ THash<(TInt,TInt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TIntIntH_HashPrimes
    def __init__(self, *args): 
        """
        __init__(THash<(TInt,TInt)> self) -> TIntIntH
        __init__(THash<(TInt,TInt)> self, TIntH Hash) -> TIntIntH

        Parameters:
            Hash: THash< TInt,TInt > const &

        __init__(THash<(TInt,TInt)> self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntIntH

        Parameters:
            ExpectVals: int const &
            _AutoSizeP: bool const &

        __init__(THash<(TInt,TInt)> self, int const & ExpectVals) -> TIntIntH

        Parameters:
            ExpectVals: int const &

        __init__(THash<(TInt,TInt)> self, TSIn SIn) -> TIntIntH

        Parameters:
            SIn: TSIn &

        """
        _snap.TIntIntH_swiginit(self,_snap.new_TIntIntH(*args))
    def Load(self, *args):
        """
        Load(TIntIntH self, TSIn SIn)

        Parameters:
            SIn: TSIn &

        """
        return _snap.TIntIntH_Load(self, *args)

    def Save(self, *args):
        """
        Save(TIntIntH self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.TIntIntH_Save(self, *args)

    def __eq__(self, *args):
        """
        __eq__(TIntIntH self, TIntH Hash) -> bool

        Parameters:
            Hash: THash< TInt,TInt > const &

        """
        return _snap.TIntIntH___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TIntIntH self, TIntH Hash) -> bool

        Parameters:
            Hash: THash< TInt,TInt > const &

        """
        return _snap.TIntIntH___lt__(self, *args)

    def __call__(self, *args):
        """
        __call__(TIntIntH self, TInt Key) -> TInt

        Parameters:
            Key: TInt const &

        """
        return _snap.TIntIntH___call__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(TIntIntH self) -> ::TSize

        Parameters:
            self: THash< TInt,TInt > const *

        """
        return _snap.TIntIntH_GetMemUsed(self)

    def BegI(self):
        """
        BegI(TIntIntH self) -> TIntHI

        Parameters:
            self: THash< TInt,TInt > const *

        """
        return _snap.TIntIntH_BegI(self)

    def EndI(self):
        """
        EndI(TIntIntH self) -> TIntHI

        Parameters:
            self: THash< TInt,TInt > const *

        """
        return _snap.TIntIntH_EndI(self)

    def GetI(self, *args):
        """
        GetI(TIntIntH self, TInt Key) -> TIntHI

        Parameters:
            Key: TInt const &

        """
        return _snap.TIntIntH_GetI(self, *args)

    def Gen(self, *args):
        """
        Gen(TIntIntH self, int const & ExpectVals)

        Parameters:
            ExpectVals: int const &

        """
        return _snap.TIntIntH_Gen(self, *args)

    def Clr(self, *args):
        """
        Clr(TIntIntH self, bool const & DoDel=True, int const & NoDelLim=-1, bool const & ResetDat=True)

        Parameters:
            DoDel: bool const &
            NoDelLim: int const &
            ResetDat: bool const &

        Clr(TIntIntH self, bool const & DoDel=True, int const & NoDelLim=-1)

        Parameters:
            DoDel: bool const &
            NoDelLim: int const &

        Clr(TIntIntH self, bool const & DoDel=True)

        Parameters:
            DoDel: bool const &

        Clr(TIntIntH self)

        Parameters:
            self: THash< TInt,TInt > *

        """
        return _snap.TIntIntH_Clr(self, *args)

    def Empty(self):
        """
        Empty(TIntIntH self) -> bool

        Parameters:
            self: THash< TInt,TInt > const *

        """
        return _snap.TIntIntH_Empty(self)

    def Len(self):
        """
        Len(TIntIntH self) -> int

        Parameters:
            self: THash< TInt,TInt > const *

        """
        return _snap.TIntIntH_Len(self)

    def GetPorts(self):
        """
        GetPorts(TIntIntH self) -> int

        Parameters:
            self: THash< TInt,TInt > const *

        """
        return _snap.TIntIntH_GetPorts(self)

    def IsAutoSize(self):
        """
        IsAutoSize(TIntIntH self) -> bool

        Parameters:
            self: THash< TInt,TInt > const *

        """
        return _snap.TIntIntH_IsAutoSize(self)

    def GetMxKeyIds(self):
        """
        GetMxKeyIds(TIntIntH self) -> int

        Parameters:
            self: THash< TInt,TInt > const *

        """
        return _snap.TIntIntH_GetMxKeyIds(self)

    def GetReservedKeyIds(self):
        """
        GetReservedKeyIds(TIntIntH self) -> int

        Parameters:
            self: THash< TInt,TInt > const *

        """
        return _snap.TIntIntH_GetReservedKeyIds(self)

    def IsKeyIdEqKeyN(self):
        """
        IsKeyIdEqKeyN(TIntIntH self) -> bool

        Parameters:
            self: THash< TInt,TInt > const *

        """
        return _snap.TIntIntH_IsKeyIdEqKeyN(self)

    def AddKey(self, *args):
        """
        AddKey(TIntIntH self, TInt Key) -> int

        Parameters:
            Key: TInt const &

        """
        return _snap.TIntIntH_AddKey(self, *args)

    def AddDat(self, *args):
        """
        AddDat(TIntIntH self, TInt Key) -> TInt

        Parameters:
            Key: TInt const &

        AddDat(TIntIntH self, TInt Key, TInt Dat) -> TInt

        Parameters:
            Key: TInt const &
            Dat: TInt const &

        """
        return _snap.TIntIntH_AddDat(self, *args)

    def DelKey(self, *args):
        """
        DelKey(TIntIntH self, TInt Key)

        Parameters:
            Key: TInt const &

        """
        return _snap.TIntIntH_DelKey(self, *args)

    def DelIfKey(self, *args):
        """
        DelIfKey(TIntIntH self, TInt Key) -> bool

        Parameters:
            Key: TInt const &

        """
        return _snap.TIntIntH_DelIfKey(self, *args)

    def DelKeyId(self, *args):
        """
        DelKeyId(TIntIntH self, int const & KeyId)

        Parameters:
            KeyId: int const &

        """
        return _snap.TIntIntH_DelKeyId(self, *args)

    def DelKeyIdV(self, *args):
        """
        DelKeyIdV(TIntIntH self, TIntV KeyIdV)

        Parameters:
            KeyIdV: TIntV const &

        """
        return _snap.TIntIntH_DelKeyIdV(self, *args)

    def GetKey(self, *args):
        """
        GetKey(TIntIntH self, int const & KeyId) -> TInt

        Parameters:
            KeyId: int const &

        """
        return _snap.TIntIntH_GetKey(self, *args)

    def GetKeyId(self, *args):
        """
        GetKeyId(TIntIntH self, TInt Key) -> int

        Parameters:
            Key: TInt const &

        """
        return _snap.TIntIntH_GetKeyId(self, *args)

    def GetRndKeyId(self, *args):
        """
        GetRndKeyId(TIntIntH self, TRnd Rnd) -> int

        Parameters:
            Rnd: TRnd &

        GetRndKeyId(TIntIntH self, TRnd Rnd, double const & EmptyFrac) -> int

        Parameters:
            Rnd: TRnd &
            EmptyFrac: double const &

        """
        return _snap.TIntIntH_GetRndKeyId(self, *args)

    def IsKey(self, *args):
        """
        IsKey(TIntIntH self, TInt Key) -> bool

        Parameters:
            Key: TInt const &

        IsKey(TIntIntH self, TInt Key, int & KeyId) -> bool

        Parameters:
            Key: TInt const &
            KeyId: int &

        """
        return _snap.TIntIntH_IsKey(self, *args)

    def IsKeyId(self, *args):
        """
        IsKeyId(TIntIntH self, int const & KeyId) -> bool

        Parameters:
            KeyId: int const &

        """
        return _snap.TIntIntH_IsKeyId(self, *args)

    def GetDat(self, *args):
        """
        GetDat(TIntIntH self, TInt Key) -> TInt

        Parameters:
            Key: TInt const &

        GetDat(TIntIntH self, TInt Key) -> TInt

        Parameters:
            Key: TInt const &

        """
        return _snap.TIntIntH_GetDat(self, *args)

    def GetKeyDat(self, *args):
        """
        GetKeyDat(TIntIntH self, int const & KeyId, TInt Key, TInt Dat)

        Parameters:
            KeyId: int const &
            Key: TInt &
            Dat: TInt &

        """
        return _snap.TIntIntH_GetKeyDat(self, *args)

    def IsKeyGetDat(self, *args):
        """
        IsKeyGetDat(TIntIntH self, TInt Key, TInt Dat) -> bool

        Parameters:
            Key: TInt const &
            Dat: TInt &

        """
        return _snap.TIntIntH_IsKeyGetDat(self, *args)

    def FFirstKeyId(self):
        """
        FFirstKeyId(TIntIntH self) -> int

        Parameters:
            self: THash< TInt,TInt > const *

        """
        return _snap.TIntIntH_FFirstKeyId(self)

    def FNextKeyId(self, *args):
        """
        FNextKeyId(TIntIntH self, int & KeyId) -> bool

        Parameters:
            KeyId: int &

        """
        return _snap.TIntIntH_FNextKeyId(self, *args)

    def GetKeyV(self, *args):
        """
        GetKeyV(TIntIntH self, TIntV KeyV)

        Parameters:
            KeyV: TVec< TInt > &

        """
        return _snap.TIntIntH_GetKeyV(self, *args)

    def GetDatV(self, *args):
        """
        GetDatV(TIntIntH self, TIntV DatV)

        Parameters:
            DatV: TVec< TInt > &

        """
        return _snap.TIntIntH_GetDatV(self, *args)

    def GetKeyDatPrV(self, *args):
        """
        GetKeyDatPrV(TIntIntH self, TIntPrV KeyDatPrV)

        Parameters:
            KeyDatPrV: TVec< TPair< TInt,TInt > > &

        """
        return _snap.TIntIntH_GetKeyDatPrV(self, *args)

    def GetDatKeyPrV(self, *args):
        """
        GetDatKeyPrV(TIntIntH self, TIntPrV DatKeyPrV)

        Parameters:
            DatKeyPrV: TVec< TPair< TInt,TInt > > &

        """
        return _snap.TIntIntH_GetDatKeyPrV(self, *args)

    def GetKeyDatKdV(self, *args):
        """
        GetKeyDatKdV(TIntIntH self, TVec< TKeyDat< TInt,TInt > > & KeyDatKdV)

        Parameters:
            KeyDatKdV: TVec< TKeyDat< TInt,TInt > > &

        """
        return _snap.TIntIntH_GetKeyDatKdV(self, *args)

    def GetDatKeyKdV(self, *args):
        """
        GetDatKeyKdV(TIntIntH self, TVec< TKeyDat< TInt,TInt > > & DatKeyKdV)

        Parameters:
            DatKeyKdV: TVec< TKeyDat< TInt,TInt > > &

        """
        return _snap.TIntIntH_GetDatKeyKdV(self, *args)

    def Swap(self, *args):
        """
        Swap(TIntIntH self, TIntH Hash)

        Parameters:
            Hash: THash< TInt,TInt > &

        """
        return _snap.TIntIntH_Swap(self, *args)

    def Defrag(self):
        """
        Defrag(TIntIntH self)

        Parameters:
            self: THash< TInt,TInt > *

        """
        return _snap.TIntIntH_Defrag(self)

    def Pack(self):
        """
        Pack(TIntIntH self)

        Parameters:
            self: THash< TInt,TInt > *

        """
        return _snap.TIntIntH_Pack(self)

    def Sort(self, *args):
        """
        Sort(TIntIntH self, bool const & CmpKey, bool const & Asc)

        Parameters:
            CmpKey: bool const &
            Asc: bool const &

        """
        return _snap.TIntIntH_Sort(self, *args)

    def SortByKey(self, Asc=True):
        """
        SortByKey(TIntIntH self, bool const & Asc=True)

        Parameters:
            Asc: bool const &

        SortByKey(TIntIntH self)

        Parameters:
            self: THash< TInt,TInt > *

        """
        return _snap.TIntIntH_SortByKey(self, Asc)

    def SortByDat(self, Asc=True):
        """
        SortByDat(TIntIntH self, bool const & Asc=True)

        Parameters:
            Asc: bool const &

        SortByDat(TIntIntH self)

        Parameters:
            self: THash< TInt,TInt > *

        """
        return _snap.TIntIntH_SortByDat(self, Asc)

    __swig_destroy__ = _snap.delete_TIntIntH
TIntIntH.Load = new_instancemethod(_snap.TIntIntH_Load,None,TIntIntH)
TIntIntH.Save = new_instancemethod(_snap.TIntIntH_Save,None,TIntIntH)
TIntIntH.__eq__ = new_instancemethod(_snap.TIntIntH___eq__,None,TIntIntH)
TIntIntH.__lt__ = new_instancemethod(_snap.TIntIntH___lt__,None,TIntIntH)
TIntIntH.__call__ = new_instancemethod(_snap.TIntIntH___call__,None,TIntIntH)
TIntIntH.GetMemUsed = new_instancemethod(_snap.TIntIntH_GetMemUsed,None,TIntIntH)
TIntIntH.BegI = new_instancemethod(_snap.TIntIntH_BegI,None,TIntIntH)
TIntIntH.EndI = new_instancemethod(_snap.TIntIntH_EndI,None,TIntIntH)
TIntIntH.GetI = new_instancemethod(_snap.TIntIntH_GetI,None,TIntIntH)
TIntIntH.Gen = new_instancemethod(_snap.TIntIntH_Gen,None,TIntIntH)
TIntIntH.Clr = new_instancemethod(_snap.TIntIntH_Clr,None,TIntIntH)
TIntIntH.Empty = new_instancemethod(_snap.TIntIntH_Empty,None,TIntIntH)
TIntIntH.Len = new_instancemethod(_snap.TIntIntH_Len,None,TIntIntH)
TIntIntH.GetPorts = new_instancemethod(_snap.TIntIntH_GetPorts,None,TIntIntH)
TIntIntH.IsAutoSize = new_instancemethod(_snap.TIntIntH_IsAutoSize,None,TIntIntH)
TIntIntH.GetMxKeyIds = new_instancemethod(_snap.TIntIntH_GetMxKeyIds,None,TIntIntH)
TIntIntH.GetReservedKeyIds = new_instancemethod(_snap.TIntIntH_GetReservedKeyIds,None,TIntIntH)
TIntIntH.IsKeyIdEqKeyN = new_instancemethod(_snap.TIntIntH_IsKeyIdEqKeyN,None,TIntIntH)
TIntIntH.AddKey = new_instancemethod(_snap.TIntIntH_AddKey,None,TIntIntH)
TIntIntH.AddDat = new_instancemethod(_snap.TIntIntH_AddDat,None,TIntIntH)
TIntIntH.DelKey = new_instancemethod(_snap.TIntIntH_DelKey,None,TIntIntH)
TIntIntH.DelIfKey = new_instancemethod(_snap.TIntIntH_DelIfKey,None,TIntIntH)
TIntIntH.DelKeyId = new_instancemethod(_snap.TIntIntH_DelKeyId,None,TIntIntH)
TIntIntH.DelKeyIdV = new_instancemethod(_snap.TIntIntH_DelKeyIdV,None,TIntIntH)
TIntIntH.GetKey = new_instancemethod(_snap.TIntIntH_GetKey,None,TIntIntH)
TIntIntH.GetKeyId = new_instancemethod(_snap.TIntIntH_GetKeyId,None,TIntIntH)
TIntIntH.GetRndKeyId = new_instancemethod(_snap.TIntIntH_GetRndKeyId,None,TIntIntH)
TIntIntH.IsKey = new_instancemethod(_snap.TIntIntH_IsKey,None,TIntIntH)
TIntIntH.IsKeyId = new_instancemethod(_snap.TIntIntH_IsKeyId,None,TIntIntH)
TIntIntH.GetDat = new_instancemethod(_snap.TIntIntH_GetDat,None,TIntIntH)
TIntIntH.GetKeyDat = new_instancemethod(_snap.TIntIntH_GetKeyDat,None,TIntIntH)
TIntIntH.IsKeyGetDat = new_instancemethod(_snap.TIntIntH_IsKeyGetDat,None,TIntIntH)
TIntIntH.FFirstKeyId = new_instancemethod(_snap.TIntIntH_FFirstKeyId,None,TIntIntH)
TIntIntH.FNextKeyId = new_instancemethod(_snap.TIntIntH_FNextKeyId,None,TIntIntH)
TIntIntH.GetKeyV = new_instancemethod(_snap.TIntIntH_GetKeyV,None,TIntIntH)
TIntIntH.GetDatV = new_instancemethod(_snap.TIntIntH_GetDatV,None,TIntIntH)
TIntIntH.GetKeyDatPrV = new_instancemethod(_snap.TIntIntH_GetKeyDatPrV,None,TIntIntH)
TIntIntH.GetDatKeyPrV = new_instancemethod(_snap.TIntIntH_GetDatKeyPrV,None,TIntIntH)
TIntIntH.GetKeyDatKdV = new_instancemethod(_snap.TIntIntH_GetKeyDatKdV,None,TIntIntH)
TIntIntH.GetDatKeyKdV = new_instancemethod(_snap.TIntIntH_GetDatKeyKdV,None,TIntIntH)
TIntIntH.Swap = new_instancemethod(_snap.TIntIntH_Swap,None,TIntIntH)
TIntIntH.Defrag = new_instancemethod(_snap.TIntIntH_Defrag,None,TIntIntH)
TIntIntH.Pack = new_instancemethod(_snap.TIntIntH_Pack,None,TIntIntH)
TIntIntH.Sort = new_instancemethod(_snap.TIntIntH_Sort,None,TIntIntH)
TIntIntH.SortByKey = new_instancemethod(_snap.TIntIntH_SortByKey,None,TIntIntH)
TIntIntH.SortByDat = new_instancemethod(_snap.TIntIntH_SortByDat,None,TIntIntH)
TIntIntH_swigregister = _snap.TIntIntH_swigregister
TIntIntH_swigregister(TIntIntH)

class TIntFltH(object):
    """Proxy of C++ THash<(TInt,TFlt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TIntFltH_HashPrimes
    def __init__(self, *args): 
        """
        __init__(THash<(TInt,TFlt)> self) -> TIntFltH
        __init__(THash<(TInt,TFlt)> self, TIntFltH Hash) -> TIntFltH

        Parameters:
            Hash: THash< TInt,TFlt > const &

        __init__(THash<(TInt,TFlt)> self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntFltH

        Parameters:
            ExpectVals: int const &
            _AutoSizeP: bool const &

        __init__(THash<(TInt,TFlt)> self, int const & ExpectVals) -> TIntFltH

        Parameters:
            ExpectVals: int const &

        __init__(THash<(TInt,TFlt)> self, TSIn SIn) -> TIntFltH

        Parameters:
            SIn: TSIn &

        """
        _snap.TIntFltH_swiginit(self,_snap.new_TIntFltH(*args))
    def Load(self, *args):
        """
        Load(TIntFltH self, TSIn SIn)

        Parameters:
            SIn: TSIn &

        """
        return _snap.TIntFltH_Load(self, *args)

    def Save(self, *args):
        """
        Save(TIntFltH self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.TIntFltH_Save(self, *args)

    def __eq__(self, *args):
        """
        __eq__(TIntFltH self, TIntFltH Hash) -> bool

        Parameters:
            Hash: THash< TInt,TFlt > const &

        """
        return _snap.TIntFltH___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TIntFltH self, TIntFltH Hash) -> bool

        Parameters:
            Hash: THash< TInt,TFlt > const &

        """
        return _snap.TIntFltH___lt__(self, *args)

    def __call__(self, *args):
        """
        __call__(TIntFltH self, TInt Key) -> TFlt

        Parameters:
            Key: TInt const &

        """
        return _snap.TIntFltH___call__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(TIntFltH self) -> ::TSize

        Parameters:
            self: THash< TInt,TFlt > const *

        """
        return _snap.TIntFltH_GetMemUsed(self)

    def BegI(self):
        """
        BegI(TIntFltH self) -> TIntFltHI

        Parameters:
            self: THash< TInt,TFlt > const *

        """
        return _snap.TIntFltH_BegI(self)

    def EndI(self):
        """
        EndI(TIntFltH self) -> TIntFltHI

        Parameters:
            self: THash< TInt,TFlt > const *

        """
        return _snap.TIntFltH_EndI(self)

    def GetI(self, *args):
        """
        GetI(TIntFltH self, TInt Key) -> TIntFltHI

        Parameters:
            Key: TInt const &

        """
        return _snap.TIntFltH_GetI(self, *args)

    def Gen(self, *args):
        """
        Gen(TIntFltH self, int const & ExpectVals)

        Parameters:
            ExpectVals: int const &

        """
        return _snap.TIntFltH_Gen(self, *args)

    def Clr(self, *args):
        """
        Clr(TIntFltH self, bool const & DoDel=True, int const & NoDelLim=-1, bool const & ResetDat=True)

        Parameters:
            DoDel: bool const &
            NoDelLim: int const &
            ResetDat: bool const &

        Clr(TIntFltH self, bool const & DoDel=True, int const & NoDelLim=-1)

        Parameters:
            DoDel: bool const &
            NoDelLim: int const &

        Clr(TIntFltH self, bool const & DoDel=True)

        Parameters:
            DoDel: bool const &

        Clr(TIntFltH self)

        Parameters:
            self: THash< TInt,TFlt > *

        """
        return _snap.TIntFltH_Clr(self, *args)

    def Empty(self):
        """
        Empty(TIntFltH self) -> bool

        Parameters:
            self: THash< TInt,TFlt > const *

        """
        return _snap.TIntFltH_Empty(self)

    def Len(self):
        """
        Len(TIntFltH self) -> int

        Parameters:
            self: THash< TInt,TFlt > const *

        """
        return _snap.TIntFltH_Len(self)

    def GetPorts(self):
        """
        GetPorts(TIntFltH self) -> int

        Parameters:
            self: THash< TInt,TFlt > const *

        """
        return _snap.TIntFltH_GetPorts(self)

    def IsAutoSize(self):
        """
        IsAutoSize(TIntFltH self) -> bool

        Parameters:
            self: THash< TInt,TFlt > const *

        """
        return _snap.TIntFltH_IsAutoSize(self)

    def GetMxKeyIds(self):
        """
        GetMxKeyIds(TIntFltH self) -> int

        Parameters:
            self: THash< TInt,TFlt > const *

        """
        return _snap.TIntFltH_GetMxKeyIds(self)

    def GetReservedKeyIds(self):
        """
        GetReservedKeyIds(TIntFltH self) -> int

        Parameters:
            self: THash< TInt,TFlt > const *

        """
        return _snap.TIntFltH_GetReservedKeyIds(self)

    def IsKeyIdEqKeyN(self):
        """
        IsKeyIdEqKeyN(TIntFltH self) -> bool

        Parameters:
            self: THash< TInt,TFlt > const *

        """
        return _snap.TIntFltH_IsKeyIdEqKeyN(self)

    def AddKey(self, *args):
        """
        AddKey(TIntFltH self, TInt Key) -> int

        Parameters:
            Key: TInt const &

        """
        return _snap.TIntFltH_AddKey(self, *args)

    def AddDat(self, *args):
        """
        AddDat(TIntFltH self, TInt Key) -> TFlt

        Parameters:
            Key: TInt const &

        AddDat(TIntFltH self, TInt Key, TFlt Dat) -> TFlt

        Parameters:
            Key: TInt const &
            Dat: TFlt const &

        """
        return _snap.TIntFltH_AddDat(self, *args)

    def DelKey(self, *args):
        """
        DelKey(TIntFltH self, TInt Key)

        Parameters:
            Key: TInt const &

        """
        return _snap.TIntFltH_DelKey(self, *args)

    def DelIfKey(self, *args):
        """
        DelIfKey(TIntFltH self, TInt Key) -> bool

        Parameters:
            Key: TInt const &

        """
        return _snap.TIntFltH_DelIfKey(self, *args)

    def DelKeyId(self, *args):
        """
        DelKeyId(TIntFltH self, int const & KeyId)

        Parameters:
            KeyId: int const &

        """
        return _snap.TIntFltH_DelKeyId(self, *args)

    def DelKeyIdV(self, *args):
        """
        DelKeyIdV(TIntFltH self, TIntV KeyIdV)

        Parameters:
            KeyIdV: TIntV const &

        """
        return _snap.TIntFltH_DelKeyIdV(self, *args)

    def GetKey(self, *args):
        """
        GetKey(TIntFltH self, int const & KeyId) -> TInt

        Parameters:
            KeyId: int const &

        """
        return _snap.TIntFltH_GetKey(self, *args)

    def GetKeyId(self, *args):
        """
        GetKeyId(TIntFltH self, TInt Key) -> int

        Parameters:
            Key: TInt const &

        """
        return _snap.TIntFltH_GetKeyId(self, *args)

    def GetRndKeyId(self, *args):
        """
        GetRndKeyId(TIntFltH self, TRnd Rnd) -> int

        Parameters:
            Rnd: TRnd &

        GetRndKeyId(TIntFltH self, TRnd Rnd, double const & EmptyFrac) -> int

        Parameters:
            Rnd: TRnd &
            EmptyFrac: double const &

        """
        return _snap.TIntFltH_GetRndKeyId(self, *args)

    def IsKey(self, *args):
        """
        IsKey(TIntFltH self, TInt Key) -> bool

        Parameters:
            Key: TInt const &

        IsKey(TIntFltH self, TInt Key, int & KeyId) -> bool

        Parameters:
            Key: TInt const &
            KeyId: int &

        """
        return _snap.TIntFltH_IsKey(self, *args)

    def IsKeyId(self, *args):
        """
        IsKeyId(TIntFltH self, int const & KeyId) -> bool

        Parameters:
            KeyId: int const &

        """
        return _snap.TIntFltH_IsKeyId(self, *args)

    def GetDat(self, *args):
        """
        GetDat(TIntFltH self, TInt Key) -> TFlt

        Parameters:
            Key: TInt const &

        GetDat(TIntFltH self, TInt Key) -> TFlt

        Parameters:
            Key: TInt const &

        """
        return _snap.TIntFltH_GetDat(self, *args)

    def GetKeyDat(self, *args):
        """
        GetKeyDat(TIntFltH self, int const & KeyId, TInt Key, TFlt Dat)

        Parameters:
            KeyId: int const &
            Key: TInt &
            Dat: TFlt &

        """
        return _snap.TIntFltH_GetKeyDat(self, *args)

    def IsKeyGetDat(self, *args):
        """
        IsKeyGetDat(TIntFltH self, TInt Key, TFlt Dat) -> bool

        Parameters:
            Key: TInt const &
            Dat: TFlt &

        """
        return _snap.TIntFltH_IsKeyGetDat(self, *args)

    def FFirstKeyId(self):
        """
        FFirstKeyId(TIntFltH self) -> int

        Parameters:
            self: THash< TInt,TFlt > const *

        """
        return _snap.TIntFltH_FFirstKeyId(self)

    def FNextKeyId(self, *args):
        """
        FNextKeyId(TIntFltH self, int & KeyId) -> bool

        Parameters:
            KeyId: int &

        """
        return _snap.TIntFltH_FNextKeyId(self, *args)

    def GetKeyV(self, *args):
        """
        GetKeyV(TIntFltH self, TIntV KeyV)

        Parameters:
            KeyV: TVec< TInt > &

        """
        return _snap.TIntFltH_GetKeyV(self, *args)

    def GetDatV(self, *args):
        """
        GetDatV(TIntFltH self, TFltV DatV)

        Parameters:
            DatV: TVec< TFlt > &

        """
        return _snap.TIntFltH_GetDatV(self, *args)

    def GetKeyDatPrV(self, *args):
        """
        GetKeyDatPrV(TIntFltH self, TVec< TPair< TInt,TFlt > > & KeyDatPrV)

        Parameters:
            KeyDatPrV: TVec< TPair< TInt,TFlt > > &

        """
        return _snap.TIntFltH_GetKeyDatPrV(self, *args)

    def GetDatKeyPrV(self, *args):
        """
        GetDatKeyPrV(TIntFltH self, TVec< TPair< TFlt,TInt > > & DatKeyPrV)

        Parameters:
            DatKeyPrV: TVec< TPair< TFlt,TInt > > &

        """
        return _snap.TIntFltH_GetDatKeyPrV(self, *args)

    def GetKeyDatKdV(self, *args):
        """
        GetKeyDatKdV(TIntFltH self, TIntFltKdV KeyDatKdV)

        Parameters:
            KeyDatKdV: TVec< TKeyDat< TInt,TFlt > > &

        """
        return _snap.TIntFltH_GetKeyDatKdV(self, *args)

    def GetDatKeyKdV(self, *args):
        """
        GetDatKeyKdV(TIntFltH self, TVec< TKeyDat< TFlt,TInt > > & DatKeyKdV)

        Parameters:
            DatKeyKdV: TVec< TKeyDat< TFlt,TInt > > &

        """
        return _snap.TIntFltH_GetDatKeyKdV(self, *args)

    def Swap(self, *args):
        """
        Swap(TIntFltH self, TIntFltH Hash)

        Parameters:
            Hash: THash< TInt,TFlt > &

        """
        return _snap.TIntFltH_Swap(self, *args)

    def Defrag(self):
        """
        Defrag(TIntFltH self)

        Parameters:
            self: THash< TInt,TFlt > *

        """
        return _snap.TIntFltH_Defrag(self)

    def Pack(self):
        """
        Pack(TIntFltH self)

        Parameters:
            self: THash< TInt,TFlt > *

        """
        return _snap.TIntFltH_Pack(self)

    def Sort(self, *args):
        """
        Sort(TIntFltH self, bool const & CmpKey, bool const & Asc)

        Parameters:
            CmpKey: bool const &
            Asc: bool const &

        """
        return _snap.TIntFltH_Sort(self, *args)

    def SortByKey(self, Asc=True):
        """
        SortByKey(TIntFltH self, bool const & Asc=True)

        Parameters:
            Asc: bool const &

        SortByKey(TIntFltH self)

        Parameters:
            self: THash< TInt,TFlt > *

        """
        return _snap.TIntFltH_SortByKey(self, Asc)

    def SortByDat(self, Asc=True):
        """
        SortByDat(TIntFltH self, bool const & Asc=True)

        Parameters:
            Asc: bool const &

        SortByDat(TIntFltH self)

        Parameters:
            self: THash< TInt,TFlt > *

        """
        return _snap.TIntFltH_SortByDat(self, Asc)

    __swig_destroy__ = _snap.delete_TIntFltH
TIntFltH.Load = new_instancemethod(_snap.TIntFltH_Load,None,TIntFltH)
TIntFltH.Save = new_instancemethod(_snap.TIntFltH_Save,None,TIntFltH)
TIntFltH.__eq__ = new_instancemethod(_snap.TIntFltH___eq__,None,TIntFltH)
TIntFltH.__lt__ = new_instancemethod(_snap.TIntFltH___lt__,None,TIntFltH)
TIntFltH.__call__ = new_instancemethod(_snap.TIntFltH___call__,None,TIntFltH)
TIntFltH.GetMemUsed = new_instancemethod(_snap.TIntFltH_GetMemUsed,None,TIntFltH)
TIntFltH.BegI = new_instancemethod(_snap.TIntFltH_BegI,None,TIntFltH)
TIntFltH.EndI = new_instancemethod(_snap.TIntFltH_EndI,None,TIntFltH)
TIntFltH.GetI = new_instancemethod(_snap.TIntFltH_GetI,None,TIntFltH)
TIntFltH.Gen = new_instancemethod(_snap.TIntFltH_Gen,None,TIntFltH)
TIntFltH.Clr = new_instancemethod(_snap.TIntFltH_Clr,None,TIntFltH)
TIntFltH.Empty = new_instancemethod(_snap.TIntFltH_Empty,None,TIntFltH)
TIntFltH.Len = new_instancemethod(_snap.TIntFltH_Len,None,TIntFltH)
TIntFltH.GetPorts = new_instancemethod(_snap.TIntFltH_GetPorts,None,TIntFltH)
TIntFltH.IsAutoSize = new_instancemethod(_snap.TIntFltH_IsAutoSize,None,TIntFltH)
TIntFltH.GetMxKeyIds = new_instancemethod(_snap.TIntFltH_GetMxKeyIds,None,TIntFltH)
TIntFltH.GetReservedKeyIds = new_instancemethod(_snap.TIntFltH_GetReservedKeyIds,None,TIntFltH)
TIntFltH.IsKeyIdEqKeyN = new_instancemethod(_snap.TIntFltH_IsKeyIdEqKeyN,None,TIntFltH)
TIntFltH.AddKey = new_instancemethod(_snap.TIntFltH_AddKey,None,TIntFltH)
TIntFltH.AddDat = new_instancemethod(_snap.TIntFltH_AddDat,None,TIntFltH)
TIntFltH.DelKey = new_instancemethod(_snap.TIntFltH_DelKey,None,TIntFltH)
TIntFltH.DelIfKey = new_instancemethod(_snap.TIntFltH_DelIfKey,None,TIntFltH)
TIntFltH.DelKeyId = new_instancemethod(_snap.TIntFltH_DelKeyId,None,TIntFltH)
TIntFltH.DelKeyIdV = new_instancemethod(_snap.TIntFltH_DelKeyIdV,None,TIntFltH)
TIntFltH.GetKey = new_instancemethod(_snap.TIntFltH_GetKey,None,TIntFltH)
TIntFltH.GetKeyId = new_instancemethod(_snap.TIntFltH_GetKeyId,None,TIntFltH)
TIntFltH.GetRndKeyId = new_instancemethod(_snap.TIntFltH_GetRndKeyId,None,TIntFltH)
TIntFltH.IsKey = new_instancemethod(_snap.TIntFltH_IsKey,None,TIntFltH)
TIntFltH.IsKeyId = new_instancemethod(_snap.TIntFltH_IsKeyId,None,TIntFltH)
TIntFltH.GetDat = new_instancemethod(_snap.TIntFltH_GetDat,None,TIntFltH)
TIntFltH.GetKeyDat = new_instancemethod(_snap.TIntFltH_GetKeyDat,None,TIntFltH)
TIntFltH.IsKeyGetDat = new_instancemethod(_snap.TIntFltH_IsKeyGetDat,None,TIntFltH)
TIntFltH.FFirstKeyId = new_instancemethod(_snap.TIntFltH_FFirstKeyId,None,TIntFltH)
TIntFltH.FNextKeyId = new_instancemethod(_snap.TIntFltH_FNextKeyId,None,TIntFltH)
TIntFltH.GetKeyV = new_instancemethod(_snap.TIntFltH_GetKeyV,None,TIntFltH)
TIntFltH.GetDatV = new_instancemethod(_snap.TIntFltH_GetDatV,None,TIntFltH)
TIntFltH.GetKeyDatPrV = new_instancemethod(_snap.TIntFltH_GetKeyDatPrV,None,TIntFltH)
TIntFltH.GetDatKeyPrV = new_instancemethod(_snap.TIntFltH_GetDatKeyPrV,None,TIntFltH)
TIntFltH.GetKeyDatKdV = new_instancemethod(_snap.TIntFltH_GetKeyDatKdV,None,TIntFltH)
TIntFltH.GetDatKeyKdV = new_instancemethod(_snap.TIntFltH_GetDatKeyKdV,None,TIntFltH)
TIntFltH.Swap = new_instancemethod(_snap.TIntFltH_Swap,None,TIntFltH)
TIntFltH.Defrag = new_instancemethod(_snap.TIntFltH_Defrag,None,TIntFltH)
TIntFltH.Pack = new_instancemethod(_snap.TIntFltH_Pack,None,TIntFltH)
TIntFltH.Sort = new_instancemethod(_snap.TIntFltH_Sort,None,TIntFltH)
TIntFltH.SortByKey = new_instancemethod(_snap.TIntFltH_SortByKey,None,TIntFltH)
TIntFltH.SortByDat = new_instancemethod(_snap.TIntFltH_SortByDat,None,TIntFltH)
TIntFltH_swigregister = _snap.TIntFltH_swigregister
TIntFltH_swigregister(TIntFltH)

class TIntStrH(object):
    """Proxy of C++ THash<(TInt,TStr)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TIntStrH_HashPrimes
    def __init__(self, *args): 
        """
        __init__(THash<(TInt,TStr)> self) -> TIntStrH
        __init__(THash<(TInt,TStr)> self, TIntStrH Hash) -> TIntStrH

        Parameters:
            Hash: THash< TInt,TStr > const &

        __init__(THash<(TInt,TStr)> self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntStrH

        Parameters:
            ExpectVals: int const &
            _AutoSizeP: bool const &

        __init__(THash<(TInt,TStr)> self, int const & ExpectVals) -> TIntStrH

        Parameters:
            ExpectVals: int const &

        __init__(THash<(TInt,TStr)> self, TSIn SIn) -> TIntStrH

        Parameters:
            SIn: TSIn &

        """
        _snap.TIntStrH_swiginit(self,_snap.new_TIntStrH(*args))
    def Load(self, *args):
        """
        Load(TIntStrH self, TSIn SIn)

        Parameters:
            SIn: TSIn &

        """
        return _snap.TIntStrH_Load(self, *args)

    def Save(self, *args):
        """
        Save(TIntStrH self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.TIntStrH_Save(self, *args)

    def __eq__(self, *args):
        """
        __eq__(TIntStrH self, TIntStrH Hash) -> bool

        Parameters:
            Hash: THash< TInt,TStr > const &

        """
        return _snap.TIntStrH___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TIntStrH self, TIntStrH Hash) -> bool

        Parameters:
            Hash: THash< TInt,TStr > const &

        """
        return _snap.TIntStrH___lt__(self, *args)

    def __call__(self, *args):
        """
        __call__(TIntStrH self, TInt Key) -> TStr

        Parameters:
            Key: TInt const &

        """
        return _snap.TIntStrH___call__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(TIntStrH self) -> ::TSize

        Parameters:
            self: THash< TInt,TStr > const *

        """
        return _snap.TIntStrH_GetMemUsed(self)

    def BegI(self):
        """
        BegI(TIntStrH self) -> TIntStrHI

        Parameters:
            self: THash< TInt,TStr > const *

        """
        return _snap.TIntStrH_BegI(self)

    def EndI(self):
        """
        EndI(TIntStrH self) -> TIntStrHI

        Parameters:
            self: THash< TInt,TStr > const *

        """
        return _snap.TIntStrH_EndI(self)

    def GetI(self, *args):
        """
        GetI(TIntStrH self, TInt Key) -> TIntStrHI

        Parameters:
            Key: TInt const &

        """
        return _snap.TIntStrH_GetI(self, *args)

    def Gen(self, *args):
        """
        Gen(TIntStrH self, int const & ExpectVals)

        Parameters:
            ExpectVals: int const &

        """
        return _snap.TIntStrH_Gen(self, *args)

    def Clr(self, *args):
        """
        Clr(TIntStrH self, bool const & DoDel=True, int const & NoDelLim=-1, bool const & ResetDat=True)

        Parameters:
            DoDel: bool const &
            NoDelLim: int const &
            ResetDat: bool const &

        Clr(TIntStrH self, bool const & DoDel=True, int const & NoDelLim=-1)

        Parameters:
            DoDel: bool const &
            NoDelLim: int const &

        Clr(TIntStrH self, bool const & DoDel=True)

        Parameters:
            DoDel: bool const &

        Clr(TIntStrH self)

        Parameters:
            self: THash< TInt,TStr > *

        """
        return _snap.TIntStrH_Clr(self, *args)

    def Empty(self):
        """
        Empty(TIntStrH self) -> bool

        Parameters:
            self: THash< TInt,TStr > const *

        """
        return _snap.TIntStrH_Empty(self)

    def Len(self):
        """
        Len(TIntStrH self) -> int

        Parameters:
            self: THash< TInt,TStr > const *

        """
        return _snap.TIntStrH_Len(self)

    def GetPorts(self):
        """
        GetPorts(TIntStrH self) -> int

        Parameters:
            self: THash< TInt,TStr > const *

        """
        return _snap.TIntStrH_GetPorts(self)

    def IsAutoSize(self):
        """
        IsAutoSize(TIntStrH self) -> bool

        Parameters:
            self: THash< TInt,TStr > const *

        """
        return _snap.TIntStrH_IsAutoSize(self)

    def GetMxKeyIds(self):
        """
        GetMxKeyIds(TIntStrH self) -> int

        Parameters:
            self: THash< TInt,TStr > const *

        """
        return _snap.TIntStrH_GetMxKeyIds(self)

    def GetReservedKeyIds(self):
        """
        GetReservedKeyIds(TIntStrH self) -> int

        Parameters:
            self: THash< TInt,TStr > const *

        """
        return _snap.TIntStrH_GetReservedKeyIds(self)

    def IsKeyIdEqKeyN(self):
        """
        IsKeyIdEqKeyN(TIntStrH self) -> bool

        Parameters:
            self: THash< TInt,TStr > const *

        """
        return _snap.TIntStrH_IsKeyIdEqKeyN(self)

    def AddKey(self, *args):
        """
        AddKey(TIntStrH self, TInt Key) -> int

        Parameters:
            Key: TInt const &

        """
        return _snap.TIntStrH_AddKey(self, *args)

    def AddDat(self, *args):
        """
        AddDat(TIntStrH self, TInt Key) -> TStr

        Parameters:
            Key: TInt const &

        AddDat(TIntStrH self, TInt Key, TStr Dat) -> TStr

        Parameters:
            Key: TInt const &
            Dat: TStr const &

        """
        return _snap.TIntStrH_AddDat(self, *args)

    def DelKey(self, *args):
        """
        DelKey(TIntStrH self, TInt Key)

        Parameters:
            Key: TInt const &

        """
        return _snap.TIntStrH_DelKey(self, *args)

    def DelIfKey(self, *args):
        """
        DelIfKey(TIntStrH self, TInt Key) -> bool

        Parameters:
            Key: TInt const &

        """
        return _snap.TIntStrH_DelIfKey(self, *args)

    def DelKeyId(self, *args):
        """
        DelKeyId(TIntStrH self, int const & KeyId)

        Parameters:
            KeyId: int const &

        """
        return _snap.TIntStrH_DelKeyId(self, *args)

    def DelKeyIdV(self, *args):
        """
        DelKeyIdV(TIntStrH self, TIntV KeyIdV)

        Parameters:
            KeyIdV: TIntV const &

        """
        return _snap.TIntStrH_DelKeyIdV(self, *args)

    def GetKey(self, *args):
        """
        GetKey(TIntStrH self, int const & KeyId) -> TInt

        Parameters:
            KeyId: int const &

        """
        return _snap.TIntStrH_GetKey(self, *args)

    def GetKeyId(self, *args):
        """
        GetKeyId(TIntStrH self, TInt Key) -> int

        Parameters:
            Key: TInt const &

        """
        return _snap.TIntStrH_GetKeyId(self, *args)

    def GetRndKeyId(self, *args):
        """
        GetRndKeyId(TIntStrH self, TRnd Rnd) -> int

        Parameters:
            Rnd: TRnd &

        GetRndKeyId(TIntStrH self, TRnd Rnd, double const & EmptyFrac) -> int

        Parameters:
            Rnd: TRnd &
            EmptyFrac: double const &

        """
        return _snap.TIntStrH_GetRndKeyId(self, *args)

    def IsKey(self, *args):
        """
        IsKey(TIntStrH self, TInt Key) -> bool

        Parameters:
            Key: TInt const &

        IsKey(TIntStrH self, TInt Key, int & KeyId) -> bool

        Parameters:
            Key: TInt const &
            KeyId: int &

        """
        return _snap.TIntStrH_IsKey(self, *args)

    def IsKeyId(self, *args):
        """
        IsKeyId(TIntStrH self, int const & KeyId) -> bool

        Parameters:
            KeyId: int const &

        """
        return _snap.TIntStrH_IsKeyId(self, *args)

    def GetDat(self, *args):
        """
        GetDat(TIntStrH self, TInt Key) -> TStr

        Parameters:
            Key: TInt const &

        GetDat(TIntStrH self, TInt Key) -> TStr

        Parameters:
            Key: TInt const &

        """
        return _snap.TIntStrH_GetDat(self, *args)

    def GetKeyDat(self, *args):
        """
        GetKeyDat(TIntStrH self, int const & KeyId, TInt Key, TStr Dat)

        Parameters:
            KeyId: int const &
            Key: TInt &
            Dat: TStr &

        """
        return _snap.TIntStrH_GetKeyDat(self, *args)

    def IsKeyGetDat(self, *args):
        """
        IsKeyGetDat(TIntStrH self, TInt Key, TStr Dat) -> bool

        Parameters:
            Key: TInt const &
            Dat: TStr &

        """
        return _snap.TIntStrH_IsKeyGetDat(self, *args)

    def FFirstKeyId(self):
        """
        FFirstKeyId(TIntStrH self) -> int

        Parameters:
            self: THash< TInt,TStr > const *

        """
        return _snap.TIntStrH_FFirstKeyId(self)

    def FNextKeyId(self, *args):
        """
        FNextKeyId(TIntStrH self, int & KeyId) -> bool

        Parameters:
            KeyId: int &

        """
        return _snap.TIntStrH_FNextKeyId(self, *args)

    def GetKeyV(self, *args):
        """
        GetKeyV(TIntStrH self, TIntV KeyV)

        Parameters:
            KeyV: TVec< TInt > &

        """
        return _snap.TIntStrH_GetKeyV(self, *args)

    def GetDatV(self, *args):
        """
        GetDatV(TIntStrH self, TStrV DatV)

        Parameters:
            DatV: TVec< TStr > &

        """
        return _snap.TIntStrH_GetDatV(self, *args)

    def GetKeyDatPrV(self, *args):
        """
        GetKeyDatPrV(TIntStrH self, TVec< TPair< TInt,TStr > > & KeyDatPrV)

        Parameters:
            KeyDatPrV: TVec< TPair< TInt,TStr > > &

        """
        return _snap.TIntStrH_GetKeyDatPrV(self, *args)

    def GetDatKeyPrV(self, *args):
        """
        GetDatKeyPrV(TIntStrH self, TVec< TPair< TStr,TInt > > & DatKeyPrV)

        Parameters:
            DatKeyPrV: TVec< TPair< TStr,TInt > > &

        """
        return _snap.TIntStrH_GetDatKeyPrV(self, *args)

    def GetKeyDatKdV(self, *args):
        """
        GetKeyDatKdV(TIntStrH self, TVec< TKeyDat< TInt,TStr > > & KeyDatKdV)

        Parameters:
            KeyDatKdV: TVec< TKeyDat< TInt,TStr > > &

        """
        return _snap.TIntStrH_GetKeyDatKdV(self, *args)

    def GetDatKeyKdV(self, *args):
        """
        GetDatKeyKdV(TIntStrH self, TVec< TKeyDat< TStr,TInt > > & DatKeyKdV)

        Parameters:
            DatKeyKdV: TVec< TKeyDat< TStr,TInt > > &

        """
        return _snap.TIntStrH_GetDatKeyKdV(self, *args)

    def Swap(self, *args):
        """
        Swap(TIntStrH self, TIntStrH Hash)

        Parameters:
            Hash: THash< TInt,TStr > &

        """
        return _snap.TIntStrH_Swap(self, *args)

    def Defrag(self):
        """
        Defrag(TIntStrH self)

        Parameters:
            self: THash< TInt,TStr > *

        """
        return _snap.TIntStrH_Defrag(self)

    def Pack(self):
        """
        Pack(TIntStrH self)

        Parameters:
            self: THash< TInt,TStr > *

        """
        return _snap.TIntStrH_Pack(self)

    def Sort(self, *args):
        """
        Sort(TIntStrH self, bool const & CmpKey, bool const & Asc)

        Parameters:
            CmpKey: bool const &
            Asc: bool const &

        """
        return _snap.TIntStrH_Sort(self, *args)

    def SortByKey(self, Asc=True):
        """
        SortByKey(TIntStrH self, bool const & Asc=True)

        Parameters:
            Asc: bool const &

        SortByKey(TIntStrH self)

        Parameters:
            self: THash< TInt,TStr > *

        """
        return _snap.TIntStrH_SortByKey(self, Asc)

    def SortByDat(self, Asc=True):
        """
        SortByDat(TIntStrH self, bool const & Asc=True)

        Parameters:
            Asc: bool const &

        SortByDat(TIntStrH self)

        Parameters:
            self: THash< TInt,TStr > *

        """
        return _snap.TIntStrH_SortByDat(self, Asc)

    __swig_destroy__ = _snap.delete_TIntStrH
TIntStrH.Load = new_instancemethod(_snap.TIntStrH_Load,None,TIntStrH)
TIntStrH.Save = new_instancemethod(_snap.TIntStrH_Save,None,TIntStrH)
TIntStrH.__eq__ = new_instancemethod(_snap.TIntStrH___eq__,None,TIntStrH)
TIntStrH.__lt__ = new_instancemethod(_snap.TIntStrH___lt__,None,TIntStrH)
TIntStrH.__call__ = new_instancemethod(_snap.TIntStrH___call__,None,TIntStrH)
TIntStrH.GetMemUsed = new_instancemethod(_snap.TIntStrH_GetMemUsed,None,TIntStrH)
TIntStrH.BegI = new_instancemethod(_snap.TIntStrH_BegI,None,TIntStrH)
TIntStrH.EndI = new_instancemethod(_snap.TIntStrH_EndI,None,TIntStrH)
TIntStrH.GetI = new_instancemethod(_snap.TIntStrH_GetI,None,TIntStrH)
TIntStrH.Gen = new_instancemethod(_snap.TIntStrH_Gen,None,TIntStrH)
TIntStrH.Clr = new_instancemethod(_snap.TIntStrH_Clr,None,TIntStrH)
TIntStrH.Empty = new_instancemethod(_snap.TIntStrH_Empty,None,TIntStrH)
TIntStrH.Len = new_instancemethod(_snap.TIntStrH_Len,None,TIntStrH)
TIntStrH.GetPorts = new_instancemethod(_snap.TIntStrH_GetPorts,None,TIntStrH)
TIntStrH.IsAutoSize = new_instancemethod(_snap.TIntStrH_IsAutoSize,None,TIntStrH)
TIntStrH.GetMxKeyIds = new_instancemethod(_snap.TIntStrH_GetMxKeyIds,None,TIntStrH)
TIntStrH.GetReservedKeyIds = new_instancemethod(_snap.TIntStrH_GetReservedKeyIds,None,TIntStrH)
TIntStrH.IsKeyIdEqKeyN = new_instancemethod(_snap.TIntStrH_IsKeyIdEqKeyN,None,TIntStrH)
TIntStrH.AddKey = new_instancemethod(_snap.TIntStrH_AddKey,None,TIntStrH)
TIntStrH.AddDat = new_instancemethod(_snap.TIntStrH_AddDat,None,TIntStrH)
TIntStrH.DelKey = new_instancemethod(_snap.TIntStrH_DelKey,None,TIntStrH)
TIntStrH.DelIfKey = new_instancemethod(_snap.TIntStrH_DelIfKey,None,TIntStrH)
TIntStrH.DelKeyId = new_instancemethod(_snap.TIntStrH_DelKeyId,None,TIntStrH)
TIntStrH.DelKeyIdV = new_instancemethod(_snap.TIntStrH_DelKeyIdV,None,TIntStrH)
TIntStrH.GetKey = new_instancemethod(_snap.TIntStrH_GetKey,None,TIntStrH)
TIntStrH.GetKeyId = new_instancemethod(_snap.TIntStrH_GetKeyId,None,TIntStrH)
TIntStrH.GetRndKeyId = new_instancemethod(_snap.TIntStrH_GetRndKeyId,None,TIntStrH)
TIntStrH.IsKey = new_instancemethod(_snap.TIntStrH_IsKey,None,TIntStrH)
TIntStrH.IsKeyId = new_instancemethod(_snap.TIntStrH_IsKeyId,None,TIntStrH)
TIntStrH.GetDat = new_instancemethod(_snap.TIntStrH_GetDat,None,TIntStrH)
TIntStrH.GetKeyDat = new_instancemethod(_snap.TIntStrH_GetKeyDat,None,TIntStrH)
TIntStrH.IsKeyGetDat = new_instancemethod(_snap.TIntStrH_IsKeyGetDat,None,TIntStrH)
TIntStrH.FFirstKeyId = new_instancemethod(_snap.TIntStrH_FFirstKeyId,None,TIntStrH)
TIntStrH.FNextKeyId = new_instancemethod(_snap.TIntStrH_FNextKeyId,None,TIntStrH)
TIntStrH.GetKeyV = new_instancemethod(_snap.TIntStrH_GetKeyV,None,TIntStrH)
TIntStrH.GetDatV = new_instancemethod(_snap.TIntStrH_GetDatV,None,TIntStrH)
TIntStrH.GetKeyDatPrV = new_instancemethod(_snap.TIntStrH_GetKeyDatPrV,None,TIntStrH)
TIntStrH.GetDatKeyPrV = new_instancemethod(_snap.TIntStrH_GetDatKeyPrV,None,TIntStrH)
TIntStrH.GetKeyDatKdV = new_instancemethod(_snap.TIntStrH_GetKeyDatKdV,None,TIntStrH)
TIntStrH.GetDatKeyKdV = new_instancemethod(_snap.TIntStrH_GetDatKeyKdV,None,TIntStrH)
TIntStrH.Swap = new_instancemethod(_snap.TIntStrH_Swap,None,TIntStrH)
TIntStrH.Defrag = new_instancemethod(_snap.TIntStrH_Defrag,None,TIntStrH)
TIntStrH.Pack = new_instancemethod(_snap.TIntStrH_Pack,None,TIntStrH)
TIntStrH.Sort = new_instancemethod(_snap.TIntStrH_Sort,None,TIntStrH)
TIntStrH.SortByKey = new_instancemethod(_snap.TIntStrH_SortByKey,None,TIntStrH)
TIntStrH.SortByDat = new_instancemethod(_snap.TIntStrH_SortByDat,None,TIntStrH)
TIntStrH_swigregister = _snap.TIntStrH_swigregister
TIntStrH_swigregister(TIntStrH)

class TIntPrFltH(object):
    """Proxy of C++ THash<(TIntPr,TFlt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TIntPrFltH_HashPrimes
    def __init__(self, *args): 
        """
        __init__(THash<(TIntPr,TFlt)> self) -> TIntPrFltH
        __init__(THash<(TIntPr,TFlt)> self, TIntPrFltH Hash) -> TIntPrFltH

        Parameters:
            Hash: THash< TIntPr,TFlt > const &

        __init__(THash<(TIntPr,TFlt)> self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntPrFltH

        Parameters:
            ExpectVals: int const &
            _AutoSizeP: bool const &

        __init__(THash<(TIntPr,TFlt)> self, int const & ExpectVals) -> TIntPrFltH

        Parameters:
            ExpectVals: int const &

        __init__(THash<(TIntPr,TFlt)> self, TSIn SIn) -> TIntPrFltH

        Parameters:
            SIn: TSIn &

        """
        _snap.TIntPrFltH_swiginit(self,_snap.new_TIntPrFltH(*args))
    def Load(self, *args):
        """
        Load(TIntPrFltH self, TSIn SIn)

        Parameters:
            SIn: TSIn &

        """
        return _snap.TIntPrFltH_Load(self, *args)

    def Save(self, *args):
        """
        Save(TIntPrFltH self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.TIntPrFltH_Save(self, *args)

    def __eq__(self, *args):
        """
        __eq__(TIntPrFltH self, TIntPrFltH Hash) -> bool

        Parameters:
            Hash: THash< TIntPr,TFlt > const &

        """
        return _snap.TIntPrFltH___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TIntPrFltH self, TIntPrFltH Hash) -> bool

        Parameters:
            Hash: THash< TIntPr,TFlt > const &

        """
        return _snap.TIntPrFltH___lt__(self, *args)

    def __call__(self, *args):
        """
        __call__(TIntPrFltH self, TIntPr Key) -> TFlt

        Parameters:
            Key: TPair< TInt,TInt > const &

        """
        return _snap.TIntPrFltH___call__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(TIntPrFltH self) -> ::TSize

        Parameters:
            self: THash< TIntPr,TFlt > const *

        """
        return _snap.TIntPrFltH_GetMemUsed(self)

    def BegI(self):
        """
        BegI(TIntPrFltH self) -> TIntPrFltHI

        Parameters:
            self: THash< TIntPr,TFlt > const *

        """
        return _snap.TIntPrFltH_BegI(self)

    def EndI(self):
        """
        EndI(TIntPrFltH self) -> TIntPrFltHI

        Parameters:
            self: THash< TIntPr,TFlt > const *

        """
        return _snap.TIntPrFltH_EndI(self)

    def GetI(self, *args):
        """
        GetI(TIntPrFltH self, TIntPr Key) -> TIntPrFltHI

        Parameters:
            Key: TPair< TInt,TInt > const &

        """
        return _snap.TIntPrFltH_GetI(self, *args)

    def Gen(self, *args):
        """
        Gen(TIntPrFltH self, int const & ExpectVals)

        Parameters:
            ExpectVals: int const &

        """
        return _snap.TIntPrFltH_Gen(self, *args)

    def Clr(self, *args):
        """
        Clr(TIntPrFltH self, bool const & DoDel=True, int const & NoDelLim=-1, bool const & ResetDat=True)

        Parameters:
            DoDel: bool const &
            NoDelLim: int const &
            ResetDat: bool const &

        Clr(TIntPrFltH self, bool const & DoDel=True, int const & NoDelLim=-1)

        Parameters:
            DoDel: bool const &
            NoDelLim: int const &

        Clr(TIntPrFltH self, bool const & DoDel=True)

        Parameters:
            DoDel: bool const &

        Clr(TIntPrFltH self)

        Parameters:
            self: THash< TIntPr,TFlt > *

        """
        return _snap.TIntPrFltH_Clr(self, *args)

    def Empty(self):
        """
        Empty(TIntPrFltH self) -> bool

        Parameters:
            self: THash< TIntPr,TFlt > const *

        """
        return _snap.TIntPrFltH_Empty(self)

    def Len(self):
        """
        Len(TIntPrFltH self) -> int

        Parameters:
            self: THash< TIntPr,TFlt > const *

        """
        return _snap.TIntPrFltH_Len(self)

    def GetPorts(self):
        """
        GetPorts(TIntPrFltH self) -> int

        Parameters:
            self: THash< TIntPr,TFlt > const *

        """
        return _snap.TIntPrFltH_GetPorts(self)

    def IsAutoSize(self):
        """
        IsAutoSize(TIntPrFltH self) -> bool

        Parameters:
            self: THash< TIntPr,TFlt > const *

        """
        return _snap.TIntPrFltH_IsAutoSize(self)

    def GetMxKeyIds(self):
        """
        GetMxKeyIds(TIntPrFltH self) -> int

        Parameters:
            self: THash< TIntPr,TFlt > const *

        """
        return _snap.TIntPrFltH_GetMxKeyIds(self)

    def GetReservedKeyIds(self):
        """
        GetReservedKeyIds(TIntPrFltH self) -> int

        Parameters:
            self: THash< TIntPr,TFlt > const *

        """
        return _snap.TIntPrFltH_GetReservedKeyIds(self)

    def IsKeyIdEqKeyN(self):
        """
        IsKeyIdEqKeyN(TIntPrFltH self) -> bool

        Parameters:
            self: THash< TIntPr,TFlt > const *

        """
        return _snap.TIntPrFltH_IsKeyIdEqKeyN(self)

    def AddKey(self, *args):
        """
        AddKey(TIntPrFltH self, TIntPr Key) -> int

        Parameters:
            Key: TPair< TInt,TInt > const &

        """
        return _snap.TIntPrFltH_AddKey(self, *args)

    def AddDat(self, *args):
        """
        AddDat(TIntPrFltH self, TIntPr Key) -> TFlt

        Parameters:
            Key: TPair< TInt,TInt > const &

        AddDat(TIntPrFltH self, TIntPr Key, TFlt Dat) -> TFlt

        Parameters:
            Key: TPair< TInt,TInt > const &
            Dat: TFlt const &

        """
        return _snap.TIntPrFltH_AddDat(self, *args)

    def DelKey(self, *args):
        """
        DelKey(TIntPrFltH self, TIntPr Key)

        Parameters:
            Key: TPair< TInt,TInt > const &

        """
        return _snap.TIntPrFltH_DelKey(self, *args)

    def DelIfKey(self, *args):
        """
        DelIfKey(TIntPrFltH self, TIntPr Key) -> bool

        Parameters:
            Key: TPair< TInt,TInt > const &

        """
        return _snap.TIntPrFltH_DelIfKey(self, *args)

    def DelKeyId(self, *args):
        """
        DelKeyId(TIntPrFltH self, int const & KeyId)

        Parameters:
            KeyId: int const &

        """
        return _snap.TIntPrFltH_DelKeyId(self, *args)

    def DelKeyIdV(self, *args):
        """
        DelKeyIdV(TIntPrFltH self, TIntV KeyIdV)

        Parameters:
            KeyIdV: TIntV const &

        """
        return _snap.TIntPrFltH_DelKeyIdV(self, *args)

    def GetKey(self, *args):
        """
        GetKey(TIntPrFltH self, int const & KeyId) -> TIntPr

        Parameters:
            KeyId: int const &

        """
        return _snap.TIntPrFltH_GetKey(self, *args)

    def GetKeyId(self, *args):
        """
        GetKeyId(TIntPrFltH self, TIntPr Key) -> int

        Parameters:
            Key: TPair< TInt,TInt > const &

        """
        return _snap.TIntPrFltH_GetKeyId(self, *args)

    def GetRndKeyId(self, *args):
        """
        GetRndKeyId(TIntPrFltH self, TRnd Rnd) -> int

        Parameters:
            Rnd: TRnd &

        GetRndKeyId(TIntPrFltH self, TRnd Rnd, double const & EmptyFrac) -> int

        Parameters:
            Rnd: TRnd &
            EmptyFrac: double const &

        """
        return _snap.TIntPrFltH_GetRndKeyId(self, *args)

    def IsKey(self, *args):
        """
        IsKey(TIntPrFltH self, TIntPr Key) -> bool

        Parameters:
            Key: TPair< TInt,TInt > const &

        IsKey(TIntPrFltH self, TIntPr Key, int & KeyId) -> bool

        Parameters:
            Key: TPair< TInt,TInt > const &
            KeyId: int &

        """
        return _snap.TIntPrFltH_IsKey(self, *args)

    def IsKeyId(self, *args):
        """
        IsKeyId(TIntPrFltH self, int const & KeyId) -> bool

        Parameters:
            KeyId: int const &

        """
        return _snap.TIntPrFltH_IsKeyId(self, *args)

    def GetDat(self, *args):
        """
        GetDat(TIntPrFltH self, TIntPr Key) -> TFlt

        Parameters:
            Key: TPair< TInt,TInt > const &

        GetDat(TIntPrFltH self, TIntPr Key) -> TFlt

        Parameters:
            Key: TPair< TInt,TInt > const &

        """
        return _snap.TIntPrFltH_GetDat(self, *args)

    def GetKeyDat(self, *args):
        """
        GetKeyDat(TIntPrFltH self, int const & KeyId, TIntPr Key, TFlt Dat)

        Parameters:
            KeyId: int const &
            Key: TPair< TInt,TInt > &
            Dat: TFlt &

        """
        return _snap.TIntPrFltH_GetKeyDat(self, *args)

    def IsKeyGetDat(self, *args):
        """
        IsKeyGetDat(TIntPrFltH self, TIntPr Key, TFlt Dat) -> bool

        Parameters:
            Key: TPair< TInt,TInt > const &
            Dat: TFlt &

        """
        return _snap.TIntPrFltH_IsKeyGetDat(self, *args)

    def FFirstKeyId(self):
        """
        FFirstKeyId(TIntPrFltH self) -> int

        Parameters:
            self: THash< TIntPr,TFlt > const *

        """
        return _snap.TIntPrFltH_FFirstKeyId(self)

    def FNextKeyId(self, *args):
        """
        FNextKeyId(TIntPrFltH self, int & KeyId) -> bool

        Parameters:
            KeyId: int &

        """
        return _snap.TIntPrFltH_FNextKeyId(self, *args)

    def GetKeyV(self, *args):
        """
        GetKeyV(TIntPrFltH self, TIntPrV KeyV)

        Parameters:
            KeyV: TVec< TPair< TInt,TInt > > &

        """
        return _snap.TIntPrFltH_GetKeyV(self, *args)

    def GetDatV(self, *args):
        """
        GetDatV(TIntPrFltH self, TFltV DatV)

        Parameters:
            DatV: TVec< TFlt > &

        """
        return _snap.TIntPrFltH_GetDatV(self, *args)

    def GetKeyDatPrV(self, *args):
        """
        GetKeyDatPrV(TIntPrFltH self, TVec< TPair< TPair< TInt,TInt >,TFlt > > & KeyDatPrV)

        Parameters:
            KeyDatPrV: TVec< TPair< TPair< TInt,TInt >,TFlt > > &

        """
        return _snap.TIntPrFltH_GetKeyDatPrV(self, *args)

    def GetDatKeyPrV(self, *args):
        """
        GetDatKeyPrV(TIntPrFltH self, TVec< TPair< TFlt,TPair< TInt,TInt > > > & DatKeyPrV)

        Parameters:
            DatKeyPrV: TVec< TPair< TFlt,TPair< TInt,TInt > > > &

        """
        return _snap.TIntPrFltH_GetDatKeyPrV(self, *args)

    def GetKeyDatKdV(self, *args):
        """
        GetKeyDatKdV(TIntPrFltH self, TVec< TKeyDat< TPair< TInt,TInt >,TFlt > > & KeyDatKdV)

        Parameters:
            KeyDatKdV: TVec< TKeyDat< TPair< TInt,TInt >,TFlt > > &

        """
        return _snap.TIntPrFltH_GetKeyDatKdV(self, *args)

    def GetDatKeyKdV(self, *args):
        """
        GetDatKeyKdV(TIntPrFltH self, TVec< TKeyDat< TFlt,TPair< TInt,TInt > > > & DatKeyKdV)

        Parameters:
            DatKeyKdV: TVec< TKeyDat< TFlt,TPair< TInt,TInt > > > &

        """
        return _snap.TIntPrFltH_GetDatKeyKdV(self, *args)

    def Swap(self, *args):
        """
        Swap(TIntPrFltH self, TIntPrFltH Hash)

        Parameters:
            Hash: THash< TIntPr,TFlt > &

        """
        return _snap.TIntPrFltH_Swap(self, *args)

    def Defrag(self):
        """
        Defrag(TIntPrFltH self)

        Parameters:
            self: THash< TIntPr,TFlt > *

        """
        return _snap.TIntPrFltH_Defrag(self)

    def Pack(self):
        """
        Pack(TIntPrFltH self)

        Parameters:
            self: THash< TIntPr,TFlt > *

        """
        return _snap.TIntPrFltH_Pack(self)

    def Sort(self, *args):
        """
        Sort(TIntPrFltH self, bool const & CmpKey, bool const & Asc)

        Parameters:
            CmpKey: bool const &
            Asc: bool const &

        """
        return _snap.TIntPrFltH_Sort(self, *args)

    def SortByKey(self, Asc=True):
        """
        SortByKey(TIntPrFltH self, bool const & Asc=True)

        Parameters:
            Asc: bool const &

        SortByKey(TIntPrFltH self)

        Parameters:
            self: THash< TIntPr,TFlt > *

        """
        return _snap.TIntPrFltH_SortByKey(self, Asc)

    def SortByDat(self, Asc=True):
        """
        SortByDat(TIntPrFltH self, bool const & Asc=True)

        Parameters:
            Asc: bool const &

        SortByDat(TIntPrFltH self)

        Parameters:
            self: THash< TIntPr,TFlt > *

        """
        return _snap.TIntPrFltH_SortByDat(self, Asc)

    __swig_destroy__ = _snap.delete_TIntPrFltH
TIntPrFltH.Load = new_instancemethod(_snap.TIntPrFltH_Load,None,TIntPrFltH)
TIntPrFltH.Save = new_instancemethod(_snap.TIntPrFltH_Save,None,TIntPrFltH)
TIntPrFltH.__eq__ = new_instancemethod(_snap.TIntPrFltH___eq__,None,TIntPrFltH)
TIntPrFltH.__lt__ = new_instancemethod(_snap.TIntPrFltH___lt__,None,TIntPrFltH)
TIntPrFltH.__call__ = new_instancemethod(_snap.TIntPrFltH___call__,None,TIntPrFltH)
TIntPrFltH.GetMemUsed = new_instancemethod(_snap.TIntPrFltH_GetMemUsed,None,TIntPrFltH)
TIntPrFltH.BegI = new_instancemethod(_snap.TIntPrFltH_BegI,None,TIntPrFltH)
TIntPrFltH.EndI = new_instancemethod(_snap.TIntPrFltH_EndI,None,TIntPrFltH)
TIntPrFltH.GetI = new_instancemethod(_snap.TIntPrFltH_GetI,None,TIntPrFltH)
TIntPrFltH.Gen = new_instancemethod(_snap.TIntPrFltH_Gen,None,TIntPrFltH)
TIntPrFltH.Clr = new_instancemethod(_snap.TIntPrFltH_Clr,None,TIntPrFltH)
TIntPrFltH.Empty = new_instancemethod(_snap.TIntPrFltH_Empty,None,TIntPrFltH)
TIntPrFltH.Len = new_instancemethod(_snap.TIntPrFltH_Len,None,TIntPrFltH)
TIntPrFltH.GetPorts = new_instancemethod(_snap.TIntPrFltH_GetPorts,None,TIntPrFltH)
TIntPrFltH.IsAutoSize = new_instancemethod(_snap.TIntPrFltH_IsAutoSize,None,TIntPrFltH)
TIntPrFltH.GetMxKeyIds = new_instancemethod(_snap.TIntPrFltH_GetMxKeyIds,None,TIntPrFltH)
TIntPrFltH.GetReservedKeyIds = new_instancemethod(_snap.TIntPrFltH_GetReservedKeyIds,None,TIntPrFltH)
TIntPrFltH.IsKeyIdEqKeyN = new_instancemethod(_snap.TIntPrFltH_IsKeyIdEqKeyN,None,TIntPrFltH)
TIntPrFltH.AddKey = new_instancemethod(_snap.TIntPrFltH_AddKey,None,TIntPrFltH)
TIntPrFltH.AddDat = new_instancemethod(_snap.TIntPrFltH_AddDat,None,TIntPrFltH)
TIntPrFltH.DelKey = new_instancemethod(_snap.TIntPrFltH_DelKey,None,TIntPrFltH)
TIntPrFltH.DelIfKey = new_instancemethod(_snap.TIntPrFltH_DelIfKey,None,TIntPrFltH)
TIntPrFltH.DelKeyId = new_instancemethod(_snap.TIntPrFltH_DelKeyId,None,TIntPrFltH)
TIntPrFltH.DelKeyIdV = new_instancemethod(_snap.TIntPrFltH_DelKeyIdV,None,TIntPrFltH)
TIntPrFltH.GetKey = new_instancemethod(_snap.TIntPrFltH_GetKey,None,TIntPrFltH)
TIntPrFltH.GetKeyId = new_instancemethod(_snap.TIntPrFltH_GetKeyId,None,TIntPrFltH)
TIntPrFltH.GetRndKeyId = new_instancemethod(_snap.TIntPrFltH_GetRndKeyId,None,TIntPrFltH)
TIntPrFltH.IsKey = new_instancemethod(_snap.TIntPrFltH_IsKey,None,TIntPrFltH)
TIntPrFltH.IsKeyId = new_instancemethod(_snap.TIntPrFltH_IsKeyId,None,TIntPrFltH)
TIntPrFltH.GetDat = new_instancemethod(_snap.TIntPrFltH_GetDat,None,TIntPrFltH)
TIntPrFltH.GetKeyDat = new_instancemethod(_snap.TIntPrFltH_GetKeyDat,None,TIntPrFltH)
TIntPrFltH.IsKeyGetDat = new_instancemethod(_snap.TIntPrFltH_IsKeyGetDat,None,TIntPrFltH)
TIntPrFltH.FFirstKeyId = new_instancemethod(_snap.TIntPrFltH_FFirstKeyId,None,TIntPrFltH)
TIntPrFltH.FNextKeyId = new_instancemethod(_snap.TIntPrFltH_FNextKeyId,None,TIntPrFltH)
TIntPrFltH.GetKeyV = new_instancemethod(_snap.TIntPrFltH_GetKeyV,None,TIntPrFltH)
TIntPrFltH.GetDatV = new_instancemethod(_snap.TIntPrFltH_GetDatV,None,TIntPrFltH)
TIntPrFltH.GetKeyDatPrV = new_instancemethod(_snap.TIntPrFltH_GetKeyDatPrV,None,TIntPrFltH)
TIntPrFltH.GetDatKeyPrV = new_instancemethod(_snap.TIntPrFltH_GetDatKeyPrV,None,TIntPrFltH)
TIntPrFltH.GetKeyDatKdV = new_instancemethod(_snap.TIntPrFltH_GetKeyDatKdV,None,TIntPrFltH)
TIntPrFltH.GetDatKeyKdV = new_instancemethod(_snap.TIntPrFltH_GetDatKeyKdV,None,TIntPrFltH)
TIntPrFltH.Swap = new_instancemethod(_snap.TIntPrFltH_Swap,None,TIntPrFltH)
TIntPrFltH.Defrag = new_instancemethod(_snap.TIntPrFltH_Defrag,None,TIntPrFltH)
TIntPrFltH.Pack = new_instancemethod(_snap.TIntPrFltH_Pack,None,TIntPrFltH)
TIntPrFltH.Sort = new_instancemethod(_snap.TIntPrFltH_Sort,None,TIntPrFltH)
TIntPrFltH.SortByKey = new_instancemethod(_snap.TIntPrFltH_SortByKey,None,TIntPrFltH)
TIntPrFltH.SortByDat = new_instancemethod(_snap.TIntPrFltH_SortByDat,None,TIntPrFltH)
TIntPrFltH_swigregister = _snap.TIntPrFltH_swigregister
TIntPrFltH_swigregister(TIntPrFltH)

class TIntHI(object):
    """Proxy of C++ THashKeyDatI<(TInt,TInt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TInt,TInt)> self) -> TIntHI
        __init__(THashKeyDatI<(TInt,TInt)> self, TIntHI _HashKeyDatI) -> TIntHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TInt,TInt > const &

        __init__(THashKeyDatI<(TInt,TInt)> self, THashKeyDatI< TInt,TInt >::THKeyDat const * _KeyDatI, THashKeyDatI< TInt,TInt >::THKeyDat const * _EndI) -> TIntHI

        Parameters:
            _KeyDatI: THashKeyDatI< TInt,TInt >::THKeyDat const *
            _EndI: THashKeyDatI< TInt,TInt >::THKeyDat const *

        """
        _snap.TIntHI_swiginit(self,_snap.new_TIntHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TIntHI self, TIntHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TInt,TInt > const &

        """
        return _snap.TIntHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TIntHI self, TIntHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TInt,TInt > const &

        """
        return _snap.TIntHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TIntHI self) -> THashKeyDatI< TInt,TInt >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TInt,TInt > const *

        """
        return _snap.TIntHI___ref__(self)

    def __call__(self):
        """
        __call__(TIntHI self) -> THashKeyDatI< TInt,TInt >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TInt,TInt > const *

        """
        return _snap.TIntHI___call__(self)

    def __deref__(self):
        """
        __deref__(TIntHI self) -> THashKeyDatI< TInt,TInt >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TInt,TInt > const *

        """
        return _snap.TIntHI___deref__(self)

    def Next(self):
        """
        Next(TIntHI self) -> TIntHI

        Parameters:
            self: THashKeyDatI< TInt,TInt > *

        """
        return _snap.TIntHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TIntHI self) -> bool

        Parameters:
            self: THashKeyDatI< TInt,TInt > const *

        """
        return _snap.TIntHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TIntHI self) -> bool

        Parameters:
            self: THashKeyDatI< TInt,TInt > const *

        """
        return _snap.TIntHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TIntHI self) -> TInt

        Parameters:
            self: THashKeyDatI< TInt,TInt > const *

        """
        return _snap.TIntHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TIntHI self) -> TInt
        GetDat(TIntHI self) -> TInt

        Parameters:
            self: THashKeyDatI< TInt,TInt > *

        """
        return _snap.TIntHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntHI
TIntHI.__eq__ = new_instancemethod(_snap.TIntHI___eq__,None,TIntHI)
TIntHI.__lt__ = new_instancemethod(_snap.TIntHI___lt__,None,TIntHI)
TIntHI.__ref__ = new_instancemethod(_snap.TIntHI___ref__,None,TIntHI)
TIntHI.__call__ = new_instancemethod(_snap.TIntHI___call__,None,TIntHI)
TIntHI.__deref__ = new_instancemethod(_snap.TIntHI___deref__,None,TIntHI)
TIntHI.Next = new_instancemethod(_snap.TIntHI_Next,None,TIntHI)
TIntHI.IsEmpty = new_instancemethod(_snap.TIntHI_IsEmpty,None,TIntHI)
TIntHI.IsEnd = new_instancemethod(_snap.TIntHI_IsEnd,None,TIntHI)
TIntHI.GetKey = new_instancemethod(_snap.TIntHI_GetKey,None,TIntHI)
TIntHI.GetDat = new_instancemethod(_snap.TIntHI_GetDat,None,TIntHI)
TIntHI_swigregister = _snap.TIntHI_swigregister
TIntHI_swigregister(TIntHI)

class TIntIntHI(object):
    """Proxy of C++ THashKeyDatI<(TInt,TInt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TInt,TInt)> self) -> TIntIntHI
        __init__(THashKeyDatI<(TInt,TInt)> self, TIntHI _HashKeyDatI) -> TIntIntHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TInt,TInt > const &

        __init__(THashKeyDatI<(TInt,TInt)> self, THashKeyDatI< TInt,TInt >::THKeyDat const * _KeyDatI, THashKeyDatI< TInt,TInt >::THKeyDat const * _EndI) -> TIntIntHI

        Parameters:
            _KeyDatI: THashKeyDatI< TInt,TInt >::THKeyDat const *
            _EndI: THashKeyDatI< TInt,TInt >::THKeyDat const *

        """
        _snap.TIntIntHI_swiginit(self,_snap.new_TIntIntHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TIntIntHI self, TIntHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TInt,TInt > const &

        """
        return _snap.TIntIntHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TIntIntHI self, TIntHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TInt,TInt > const &

        """
        return _snap.TIntIntHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TIntIntHI self) -> THashKeyDatI< TInt,TInt >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TInt,TInt > const *

        """
        return _snap.TIntIntHI___ref__(self)

    def __call__(self):
        """
        __call__(TIntIntHI self) -> THashKeyDatI< TInt,TInt >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TInt,TInt > const *

        """
        return _snap.TIntIntHI___call__(self)

    def __deref__(self):
        """
        __deref__(TIntIntHI self) -> THashKeyDatI< TInt,TInt >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TInt,TInt > const *

        """
        return _snap.TIntIntHI___deref__(self)

    def Next(self):
        """
        Next(TIntIntHI self) -> TIntHI

        Parameters:
            self: THashKeyDatI< TInt,TInt > *

        """
        return _snap.TIntIntHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TIntIntHI self) -> bool

        Parameters:
            self: THashKeyDatI< TInt,TInt > const *

        """
        return _snap.TIntIntHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TIntIntHI self) -> bool

        Parameters:
            self: THashKeyDatI< TInt,TInt > const *

        """
        return _snap.TIntIntHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TIntIntHI self) -> TInt

        Parameters:
            self: THashKeyDatI< TInt,TInt > const *

        """
        return _snap.TIntIntHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TIntIntHI self) -> TInt
        GetDat(TIntIntHI self) -> TInt

        Parameters:
            self: THashKeyDatI< TInt,TInt > *

        """
        return _snap.TIntIntHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntIntHI
TIntIntHI.__eq__ = new_instancemethod(_snap.TIntIntHI___eq__,None,TIntIntHI)
TIntIntHI.__lt__ = new_instancemethod(_snap.TIntIntHI___lt__,None,TIntIntHI)
TIntIntHI.__ref__ = new_instancemethod(_snap.TIntIntHI___ref__,None,TIntIntHI)
TIntIntHI.__call__ = new_instancemethod(_snap.TIntIntHI___call__,None,TIntIntHI)
TIntIntHI.__deref__ = new_instancemethod(_snap.TIntIntHI___deref__,None,TIntIntHI)
TIntIntHI.Next = new_instancemethod(_snap.TIntIntHI_Next,None,TIntIntHI)
TIntIntHI.IsEmpty = new_instancemethod(_snap.TIntIntHI_IsEmpty,None,TIntIntHI)
TIntIntHI.IsEnd = new_instancemethod(_snap.TIntIntHI_IsEnd,None,TIntIntHI)
TIntIntHI.GetKey = new_instancemethod(_snap.TIntIntHI_GetKey,None,TIntIntHI)
TIntIntHI.GetDat = new_instancemethod(_snap.TIntIntHI_GetDat,None,TIntIntHI)
TIntIntHI_swigregister = _snap.TIntIntHI_swigregister
TIntIntHI_swigregister(TIntIntHI)

class TIntFltHI(object):
    """Proxy of C++ THashKeyDatI<(TInt,TFlt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TInt,TFlt)> self) -> TIntFltHI
        __init__(THashKeyDatI<(TInt,TFlt)> self, TIntFltHI _HashKeyDatI) -> TIntFltHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TInt,TFlt > const &

        __init__(THashKeyDatI<(TInt,TFlt)> self, THashKeyDatI< TInt,TFlt >::THKeyDat const * _KeyDatI, THashKeyDatI< TInt,TFlt >::THKeyDat const * _EndI) -> TIntFltHI

        Parameters:
            _KeyDatI: THashKeyDatI< TInt,TFlt >::THKeyDat const *
            _EndI: THashKeyDatI< TInt,TFlt >::THKeyDat const *

        """
        _snap.TIntFltHI_swiginit(self,_snap.new_TIntFltHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TIntFltHI self, TIntFltHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TInt,TFlt > const &

        """
        return _snap.TIntFltHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TIntFltHI self, TIntFltHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TInt,TFlt > const &

        """
        return _snap.TIntFltHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TIntFltHI self) -> THashKeyDatI< TInt,TFlt >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TInt,TFlt > const *

        """
        return _snap.TIntFltHI___ref__(self)

    def __call__(self):
        """
        __call__(TIntFltHI self) -> THashKeyDatI< TInt,TFlt >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TInt,TFlt > const *

        """
        return _snap.TIntFltHI___call__(self)

    def __deref__(self):
        """
        __deref__(TIntFltHI self) -> THashKeyDatI< TInt,TFlt >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TInt,TFlt > const *

        """
        return _snap.TIntFltHI___deref__(self)

    def Next(self):
        """
        Next(TIntFltHI self) -> TIntFltHI

        Parameters:
            self: THashKeyDatI< TInt,TFlt > *

        """
        return _snap.TIntFltHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TIntFltHI self) -> bool

        Parameters:
            self: THashKeyDatI< TInt,TFlt > const *

        """
        return _snap.TIntFltHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TIntFltHI self) -> bool

        Parameters:
            self: THashKeyDatI< TInt,TFlt > const *

        """
        return _snap.TIntFltHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TIntFltHI self) -> TInt

        Parameters:
            self: THashKeyDatI< TInt,TFlt > const *

        """
        return _snap.TIntFltHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TIntFltHI self) -> TFlt
        GetDat(TIntFltHI self) -> TFlt

        Parameters:
            self: THashKeyDatI< TInt,TFlt > *

        """
        return _snap.TIntFltHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntFltHI
TIntFltHI.__eq__ = new_instancemethod(_snap.TIntFltHI___eq__,None,TIntFltHI)
TIntFltHI.__lt__ = new_instancemethod(_snap.TIntFltHI___lt__,None,TIntFltHI)
TIntFltHI.__ref__ = new_instancemethod(_snap.TIntFltHI___ref__,None,TIntFltHI)
TIntFltHI.__call__ = new_instancemethod(_snap.TIntFltHI___call__,None,TIntFltHI)
TIntFltHI.__deref__ = new_instancemethod(_snap.TIntFltHI___deref__,None,TIntFltHI)
TIntFltHI.Next = new_instancemethod(_snap.TIntFltHI_Next,None,TIntFltHI)
TIntFltHI.IsEmpty = new_instancemethod(_snap.TIntFltHI_IsEmpty,None,TIntFltHI)
TIntFltHI.IsEnd = new_instancemethod(_snap.TIntFltHI_IsEnd,None,TIntFltHI)
TIntFltHI.GetKey = new_instancemethod(_snap.TIntFltHI_GetKey,None,TIntFltHI)
TIntFltHI.GetDat = new_instancemethod(_snap.TIntFltHI_GetDat,None,TIntFltHI)
TIntFltHI_swigregister = _snap.TIntFltHI_swigregister
TIntFltHI_swigregister(TIntFltHI)

class TIntStrHI(object):
    """Proxy of C++ THashKeyDatI<(TInt,TStr)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TInt,TStr)> self) -> TIntStrHI
        __init__(THashKeyDatI<(TInt,TStr)> self, TIntStrHI _HashKeyDatI) -> TIntStrHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TInt,TStr > const &

        __init__(THashKeyDatI<(TInt,TStr)> self, THashKeyDatI< TInt,TStr >::THKeyDat const * _KeyDatI, THashKeyDatI< TInt,TStr >::THKeyDat const * _EndI) -> TIntStrHI

        Parameters:
            _KeyDatI: THashKeyDatI< TInt,TStr >::THKeyDat const *
            _EndI: THashKeyDatI< TInt,TStr >::THKeyDat const *

        """
        _snap.TIntStrHI_swiginit(self,_snap.new_TIntStrHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TIntStrHI self, TIntStrHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TInt,TStr > const &

        """
        return _snap.TIntStrHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TIntStrHI self, TIntStrHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TInt,TStr > const &

        """
        return _snap.TIntStrHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TIntStrHI self) -> THashKeyDatI< TInt,TStr >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TInt,TStr > const *

        """
        return _snap.TIntStrHI___ref__(self)

    def __call__(self):
        """
        __call__(TIntStrHI self) -> THashKeyDatI< TInt,TStr >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TInt,TStr > const *

        """
        return _snap.TIntStrHI___call__(self)

    def __deref__(self):
        """
        __deref__(TIntStrHI self) -> THashKeyDatI< TInt,TStr >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TInt,TStr > const *

        """
        return _snap.TIntStrHI___deref__(self)

    def Next(self):
        """
        Next(TIntStrHI self) -> TIntStrHI

        Parameters:
            self: THashKeyDatI< TInt,TStr > *

        """
        return _snap.TIntStrHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TIntStrHI self) -> bool

        Parameters:
            self: THashKeyDatI< TInt,TStr > const *

        """
        return _snap.TIntStrHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TIntStrHI self) -> bool

        Parameters:
            self: THashKeyDatI< TInt,TStr > const *

        """
        return _snap.TIntStrHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TIntStrHI self) -> TInt

        Parameters:
            self: THashKeyDatI< TInt,TStr > const *

        """
        return _snap.TIntStrHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TIntStrHI self) -> TStr
        GetDat(TIntStrHI self) -> TStr

        Parameters:
            self: THashKeyDatI< TInt,TStr > *

        """
        return _snap.TIntStrHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntStrHI
TIntStrHI.__eq__ = new_instancemethod(_snap.TIntStrHI___eq__,None,TIntStrHI)
TIntStrHI.__lt__ = new_instancemethod(_snap.TIntStrHI___lt__,None,TIntStrHI)
TIntStrHI.__ref__ = new_instancemethod(_snap.TIntStrHI___ref__,None,TIntStrHI)
TIntStrHI.__call__ = new_instancemethod(_snap.TIntStrHI___call__,None,TIntStrHI)
TIntStrHI.__deref__ = new_instancemethod(_snap.TIntStrHI___deref__,None,TIntStrHI)
TIntStrHI.Next = new_instancemethod(_snap.TIntStrHI_Next,None,TIntStrHI)
TIntStrHI.IsEmpty = new_instancemethod(_snap.TIntStrHI_IsEmpty,None,TIntStrHI)
TIntStrHI.IsEnd = new_instancemethod(_snap.TIntStrHI_IsEnd,None,TIntStrHI)
TIntStrHI.GetKey = new_instancemethod(_snap.TIntStrHI_GetKey,None,TIntStrHI)
TIntStrHI.GetDat = new_instancemethod(_snap.TIntStrHI_GetDat,None,TIntStrHI)
TIntStrHI_swigregister = _snap.TIntStrHI_swigregister
TIntStrHI_swigregister(TIntStrHI)

class TIntPrFltHI(object):
    """Proxy of C++ THashKeyDatI<(TIntPr,TFlt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TIntPr,TFlt)> self) -> TIntPrFltHI
        __init__(THashKeyDatI<(TIntPr,TFlt)> self, TIntPrFltHI _HashKeyDatI) -> TIntPrFltHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TIntPr,TFlt > const &

        __init__(THashKeyDatI<(TIntPr,TFlt)> self, THashKeyDatI< TPair< TInt,TInt >,TFlt >::THKeyDat const * _KeyDatI, THashKeyDatI< TPair< TInt,TInt >,TFlt >::THKeyDat const * _EndI) -> TIntPrFltHI

        Parameters:
            _KeyDatI: THashKeyDatI< TPair< TInt,TInt >,TFlt >::THKeyDat const *
            _EndI: THashKeyDatI< TPair< TInt,TInt >,TFlt >::THKeyDat const *

        """
        _snap.TIntPrFltHI_swiginit(self,_snap.new_TIntPrFltHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TIntPrFltHI self, TIntPrFltHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TIntPr,TFlt > const &

        """
        return _snap.TIntPrFltHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TIntPrFltHI self, TIntPrFltHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TIntPr,TFlt > const &

        """
        return _snap.TIntPrFltHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TIntPrFltHI self) -> THashKeyDatI< TPair< TInt,TInt >,TFlt >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TIntPr,TFlt > const *

        """
        return _snap.TIntPrFltHI___ref__(self)

    def __call__(self):
        """
        __call__(TIntPrFltHI self) -> THashKeyDatI< TPair< TInt,TInt >,TFlt >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TIntPr,TFlt > const *

        """
        return _snap.TIntPrFltHI___call__(self)

    def __deref__(self):
        """
        __deref__(TIntPrFltHI self) -> THashKeyDatI< TPair< TInt,TInt >,TFlt >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TIntPr,TFlt > const *

        """
        return _snap.TIntPrFltHI___deref__(self)

    def Next(self):
        """
        Next(TIntPrFltHI self) -> TIntPrFltHI

        Parameters:
            self: THashKeyDatI< TIntPr,TFlt > *

        """
        return _snap.TIntPrFltHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TIntPrFltHI self) -> bool

        Parameters:
            self: THashKeyDatI< TIntPr,TFlt > const *

        """
        return _snap.TIntPrFltHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TIntPrFltHI self) -> bool

        Parameters:
            self: THashKeyDatI< TIntPr,TFlt > const *

        """
        return _snap.TIntPrFltHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TIntPrFltHI self) -> TIntPr

        Parameters:
            self: THashKeyDatI< TIntPr,TFlt > const *

        """
        return _snap.TIntPrFltHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TIntPrFltHI self) -> TFlt
        GetDat(TIntPrFltHI self) -> TFlt

        Parameters:
            self: THashKeyDatI< TIntPr,TFlt > *

        """
        return _snap.TIntPrFltHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntPrFltHI
TIntPrFltHI.__eq__ = new_instancemethod(_snap.TIntPrFltHI___eq__,None,TIntPrFltHI)
TIntPrFltHI.__lt__ = new_instancemethod(_snap.TIntPrFltHI___lt__,None,TIntPrFltHI)
TIntPrFltHI.__ref__ = new_instancemethod(_snap.TIntPrFltHI___ref__,None,TIntPrFltHI)
TIntPrFltHI.__call__ = new_instancemethod(_snap.TIntPrFltHI___call__,None,TIntPrFltHI)
TIntPrFltHI.__deref__ = new_instancemethod(_snap.TIntPrFltHI___deref__,None,TIntPrFltHI)
TIntPrFltHI.Next = new_instancemethod(_snap.TIntPrFltHI_Next,None,TIntPrFltHI)
TIntPrFltHI.IsEmpty = new_instancemethod(_snap.TIntPrFltHI_IsEmpty,None,TIntPrFltHI)
TIntPrFltHI.IsEnd = new_instancemethod(_snap.TIntPrFltHI_IsEnd,None,TIntPrFltHI)
TIntPrFltHI.GetKey = new_instancemethod(_snap.TIntPrFltHI_GetKey,None,TIntPrFltHI)
TIntPrFltHI.GetDat = new_instancemethod(_snap.TIntPrFltHI_GetDat,None,TIntPrFltHI)
TIntPrFltHI_swigregister = _snap.TIntPrFltHI_swigregister
TIntPrFltHI_swigregister(TIntPrFltHI)

class TUInt64HI(object):
    """Proxy of C++ THashKeyDatI<(TUInt64,TInt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TUInt64,TInt)> self) -> TUInt64HI
        __init__(THashKeyDatI<(TUInt64,TInt)> self, TUInt64HI _HashKeyDatI) -> TUInt64HI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TUInt64,TInt > const &

        __init__(THashKeyDatI<(TUInt64,TInt)> self, THashKeyDatI< TUInt64,TInt >::THKeyDat const * _KeyDatI, THashKeyDatI< TUInt64,TInt >::THKeyDat const * _EndI) -> TUInt64HI

        Parameters:
            _KeyDatI: THashKeyDatI< TUInt64,TInt >::THKeyDat const *
            _EndI: THashKeyDatI< TUInt64,TInt >::THKeyDat const *

        """
        _snap.TUInt64HI_swiginit(self,_snap.new_TUInt64HI(*args))
    def __eq__(self, *args):
        """
        __eq__(TUInt64HI self, TUInt64HI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TUInt64,TInt > const &

        """
        return _snap.TUInt64HI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TUInt64HI self, TUInt64HI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TUInt64,TInt > const &

        """
        return _snap.TUInt64HI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TUInt64HI self) -> THashKeyDatI< TUInt64,TInt >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TUInt64,TInt > const *

        """
        return _snap.TUInt64HI___ref__(self)

    def __call__(self):
        """
        __call__(TUInt64HI self) -> THashKeyDatI< TUInt64,TInt >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TUInt64,TInt > const *

        """
        return _snap.TUInt64HI___call__(self)

    def __deref__(self):
        """
        __deref__(TUInt64HI self) -> THashKeyDatI< TUInt64,TInt >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TUInt64,TInt > const *

        """
        return _snap.TUInt64HI___deref__(self)

    def Next(self):
        """
        Next(TUInt64HI self) -> TUInt64HI

        Parameters:
            self: THashKeyDatI< TUInt64,TInt > *

        """
        return _snap.TUInt64HI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TUInt64HI self) -> bool

        Parameters:
            self: THashKeyDatI< TUInt64,TInt > const *

        """
        return _snap.TUInt64HI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TUInt64HI self) -> bool

        Parameters:
            self: THashKeyDatI< TUInt64,TInt > const *

        """
        return _snap.TUInt64HI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TUInt64HI self) -> TUInt64

        Parameters:
            self: THashKeyDatI< TUInt64,TInt > const *

        """
        return _snap.TUInt64HI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TUInt64HI self) -> TInt
        GetDat(TUInt64HI self) -> TInt

        Parameters:
            self: THashKeyDatI< TUInt64,TInt > *

        """
        return _snap.TUInt64HI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TUInt64HI
TUInt64HI.__eq__ = new_instancemethod(_snap.TUInt64HI___eq__,None,TUInt64HI)
TUInt64HI.__lt__ = new_instancemethod(_snap.TUInt64HI___lt__,None,TUInt64HI)
TUInt64HI.__ref__ = new_instancemethod(_snap.TUInt64HI___ref__,None,TUInt64HI)
TUInt64HI.__call__ = new_instancemethod(_snap.TUInt64HI___call__,None,TUInt64HI)
TUInt64HI.__deref__ = new_instancemethod(_snap.TUInt64HI___deref__,None,TUInt64HI)
TUInt64HI.Next = new_instancemethod(_snap.TUInt64HI_Next,None,TUInt64HI)
TUInt64HI.IsEmpty = new_instancemethod(_snap.TUInt64HI_IsEmpty,None,TUInt64HI)
TUInt64HI.IsEnd = new_instancemethod(_snap.TUInt64HI_IsEnd,None,TUInt64HI)
TUInt64HI.GetKey = new_instancemethod(_snap.TUInt64HI_GetKey,None,TUInt64HI)
TUInt64HI.GetDat = new_instancemethod(_snap.TUInt64HI_GetDat,None,TUInt64HI)
TUInt64HI_swigregister = _snap.TUInt64HI_swigregister
TUInt64HI_swigregister(TUInt64HI)

class TIntBoolHI(object):
    """Proxy of C++ THashKeyDatI<(TInt,TBool)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TInt,TBool)> self) -> TIntBoolHI
        __init__(THashKeyDatI<(TInt,TBool)> self, TIntBoolHI _HashKeyDatI) -> TIntBoolHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TInt,TBool > const &

        __init__(THashKeyDatI<(TInt,TBool)> self, THashKeyDatI< TInt,TBool >::THKeyDat const * _KeyDatI, THashKeyDatI< TInt,TBool >::THKeyDat const * _EndI) -> TIntBoolHI

        Parameters:
            _KeyDatI: THashKeyDatI< TInt,TBool >::THKeyDat const *
            _EndI: THashKeyDatI< TInt,TBool >::THKeyDat const *

        """
        _snap.TIntBoolHI_swiginit(self,_snap.new_TIntBoolHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TIntBoolHI self, TIntBoolHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TInt,TBool > const &

        """
        return _snap.TIntBoolHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TIntBoolHI self, TIntBoolHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TInt,TBool > const &

        """
        return _snap.TIntBoolHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TIntBoolHI self) -> THashKeyDatI< TInt,TBool >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TInt,TBool > const *

        """
        return _snap.TIntBoolHI___ref__(self)

    def __call__(self):
        """
        __call__(TIntBoolHI self) -> THashKeyDatI< TInt,TBool >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TInt,TBool > const *

        """
        return _snap.TIntBoolHI___call__(self)

    def __deref__(self):
        """
        __deref__(TIntBoolHI self) -> THashKeyDatI< TInt,TBool >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TInt,TBool > const *

        """
        return _snap.TIntBoolHI___deref__(self)

    def Next(self):
        """
        Next(TIntBoolHI self) -> TIntBoolHI

        Parameters:
            self: THashKeyDatI< TInt,TBool > *

        """
        return _snap.TIntBoolHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TIntBoolHI self) -> bool

        Parameters:
            self: THashKeyDatI< TInt,TBool > const *

        """
        return _snap.TIntBoolHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TIntBoolHI self) -> bool

        Parameters:
            self: THashKeyDatI< TInt,TBool > const *

        """
        return _snap.TIntBoolHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TIntBoolHI self) -> TInt

        Parameters:
            self: THashKeyDatI< TInt,TBool > const *

        """
        return _snap.TIntBoolHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TIntBoolHI self) -> TBool
        GetDat(TIntBoolHI self) -> TBool

        Parameters:
            self: THashKeyDatI< TInt,TBool > *

        """
        return _snap.TIntBoolHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntBoolHI
TIntBoolHI.__eq__ = new_instancemethod(_snap.TIntBoolHI___eq__,None,TIntBoolHI)
TIntBoolHI.__lt__ = new_instancemethod(_snap.TIntBoolHI___lt__,None,TIntBoolHI)
TIntBoolHI.__ref__ = new_instancemethod(_snap.TIntBoolHI___ref__,None,TIntBoolHI)
TIntBoolHI.__call__ = new_instancemethod(_snap.TIntBoolHI___call__,None,TIntBoolHI)
TIntBoolHI.__deref__ = new_instancemethod(_snap.TIntBoolHI___deref__,None,TIntBoolHI)
TIntBoolHI.Next = new_instancemethod(_snap.TIntBoolHI_Next,None,TIntBoolHI)
TIntBoolHI.IsEmpty = new_instancemethod(_snap.TIntBoolHI_IsEmpty,None,TIntBoolHI)
TIntBoolHI.IsEnd = new_instancemethod(_snap.TIntBoolHI_IsEnd,None,TIntBoolHI)
TIntBoolHI.GetKey = new_instancemethod(_snap.TIntBoolHI_GetKey,None,TIntBoolHI)
TIntBoolHI.GetDat = new_instancemethod(_snap.TIntBoolHI_GetDat,None,TIntBoolHI)
TIntBoolHI_swigregister = _snap.TIntBoolHI_swigregister
TIntBoolHI_swigregister(TIntBoolHI)

class TIntUInt64HI(object):
    """Proxy of C++ THashKeyDatI<(TInt,TUInt64)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TInt,TUInt64)> self) -> TIntUInt64HI
        __init__(THashKeyDatI<(TInt,TUInt64)> self, TIntUInt64HI _HashKeyDatI) -> TIntUInt64HI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TInt,TUInt64 > const &

        __init__(THashKeyDatI<(TInt,TUInt64)> self, THashKeyDatI< TInt,TUInt64 >::THKeyDat const * _KeyDatI, THashKeyDatI< TInt,TUInt64 >::THKeyDat const * _EndI) -> TIntUInt64HI

        Parameters:
            _KeyDatI: THashKeyDatI< TInt,TUInt64 >::THKeyDat const *
            _EndI: THashKeyDatI< TInt,TUInt64 >::THKeyDat const *

        """
        _snap.TIntUInt64HI_swiginit(self,_snap.new_TIntUInt64HI(*args))
    def __eq__(self, *args):
        """
        __eq__(TIntUInt64HI self, TIntUInt64HI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TInt,TUInt64 > const &

        """
        return _snap.TIntUInt64HI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TIntUInt64HI self, TIntUInt64HI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TInt,TUInt64 > const &

        """
        return _snap.TIntUInt64HI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TIntUInt64HI self) -> THashKeyDatI< TInt,TUInt64 >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TInt,TUInt64 > const *

        """
        return _snap.TIntUInt64HI___ref__(self)

    def __call__(self):
        """
        __call__(TIntUInt64HI self) -> THashKeyDatI< TInt,TUInt64 >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TInt,TUInt64 > const *

        """
        return _snap.TIntUInt64HI___call__(self)

    def __deref__(self):
        """
        __deref__(TIntUInt64HI self) -> THashKeyDatI< TInt,TUInt64 >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TInt,TUInt64 > const *

        """
        return _snap.TIntUInt64HI___deref__(self)

    def Next(self):
        """
        Next(TIntUInt64HI self) -> TIntUInt64HI

        Parameters:
            self: THashKeyDatI< TInt,TUInt64 > *

        """
        return _snap.TIntUInt64HI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TIntUInt64HI self) -> bool

        Parameters:
            self: THashKeyDatI< TInt,TUInt64 > const *

        """
        return _snap.TIntUInt64HI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TIntUInt64HI self) -> bool

        Parameters:
            self: THashKeyDatI< TInt,TUInt64 > const *

        """
        return _snap.TIntUInt64HI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TIntUInt64HI self) -> TInt

        Parameters:
            self: THashKeyDatI< TInt,TUInt64 > const *

        """
        return _snap.TIntUInt64HI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TIntUInt64HI self) -> TUInt64
        GetDat(TIntUInt64HI self) -> TUInt64

        Parameters:
            self: THashKeyDatI< TInt,TUInt64 > *

        """
        return _snap.TIntUInt64HI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntUInt64HI
TIntUInt64HI.__eq__ = new_instancemethod(_snap.TIntUInt64HI___eq__,None,TIntUInt64HI)
TIntUInt64HI.__lt__ = new_instancemethod(_snap.TIntUInt64HI___lt__,None,TIntUInt64HI)
TIntUInt64HI.__ref__ = new_instancemethod(_snap.TIntUInt64HI___ref__,None,TIntUInt64HI)
TIntUInt64HI.__call__ = new_instancemethod(_snap.TIntUInt64HI___call__,None,TIntUInt64HI)
TIntUInt64HI.__deref__ = new_instancemethod(_snap.TIntUInt64HI___deref__,None,TIntUInt64HI)
TIntUInt64HI.Next = new_instancemethod(_snap.TIntUInt64HI_Next,None,TIntUInt64HI)
TIntUInt64HI.IsEmpty = new_instancemethod(_snap.TIntUInt64HI_IsEmpty,None,TIntUInt64HI)
TIntUInt64HI.IsEnd = new_instancemethod(_snap.TIntUInt64HI_IsEnd,None,TIntUInt64HI)
TIntUInt64HI.GetKey = new_instancemethod(_snap.TIntUInt64HI_GetKey,None,TIntUInt64HI)
TIntUInt64HI.GetDat = new_instancemethod(_snap.TIntUInt64HI_GetDat,None,TIntUInt64HI)
TIntUInt64HI_swigregister = _snap.TIntUInt64HI_swigregister
TIntUInt64HI_swigregister(TIntUInt64HI)

class TIntIntVHI(object):
    """Proxy of C++ THashKeyDatI<(TInt,TIntV)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TInt,TIntV)> self) -> TIntIntVHI
        __init__(THashKeyDatI<(TInt,TIntV)> self, TIntIntVHI _HashKeyDatI) -> TIntIntVHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TInt,TIntV > const &

        __init__(THashKeyDatI<(TInt,TIntV)> self, THashKeyDatI< TInt,TVec< TInt,int > >::THKeyDat const * _KeyDatI, THashKeyDatI< TInt,TVec< TInt,int > >::THKeyDat const * _EndI) -> TIntIntVHI

        Parameters:
            _KeyDatI: THashKeyDatI< TInt,TVec< TInt,int > >::THKeyDat const *
            _EndI: THashKeyDatI< TInt,TVec< TInt,int > >::THKeyDat const *

        """
        _snap.TIntIntVHI_swiginit(self,_snap.new_TIntIntVHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TIntIntVHI self, TIntIntVHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TInt,TIntV > const &

        """
        return _snap.TIntIntVHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TIntIntVHI self, TIntIntVHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TInt,TIntV > const &

        """
        return _snap.TIntIntVHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TIntIntVHI self) -> THashKeyDatI< TInt,TVec< TInt,int > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TInt,TIntV > const *

        """
        return _snap.TIntIntVHI___ref__(self)

    def __call__(self):
        """
        __call__(TIntIntVHI self) -> THashKeyDatI< TInt,TVec< TInt,int > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TInt,TIntV > const *

        """
        return _snap.TIntIntVHI___call__(self)

    def __deref__(self):
        """
        __deref__(TIntIntVHI self) -> THashKeyDatI< TInt,TVec< TInt,int > >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TInt,TIntV > const *

        """
        return _snap.TIntIntVHI___deref__(self)

    def Next(self):
        """
        Next(TIntIntVHI self) -> TIntIntVHI

        Parameters:
            self: THashKeyDatI< TInt,TIntV > *

        """
        return _snap.TIntIntVHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TIntIntVHI self) -> bool

        Parameters:
            self: THashKeyDatI< TInt,TIntV > const *

        """
        return _snap.TIntIntVHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TIntIntVHI self) -> bool

        Parameters:
            self: THashKeyDatI< TInt,TIntV > const *

        """
        return _snap.TIntIntVHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TIntIntVHI self) -> TInt

        Parameters:
            self: THashKeyDatI< TInt,TIntV > const *

        """
        return _snap.TIntIntVHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TIntIntVHI self) -> TIntV
        GetDat(TIntIntVHI self) -> TIntV

        Parameters:
            self: THashKeyDatI< TInt,TIntV > *

        """
        return _snap.TIntIntVHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntIntVHI
TIntIntVHI.__eq__ = new_instancemethod(_snap.TIntIntVHI___eq__,None,TIntIntVHI)
TIntIntVHI.__lt__ = new_instancemethod(_snap.TIntIntVHI___lt__,None,TIntIntVHI)
TIntIntVHI.__ref__ = new_instancemethod(_snap.TIntIntVHI___ref__,None,TIntIntVHI)
TIntIntVHI.__call__ = new_instancemethod(_snap.TIntIntVHI___call__,None,TIntIntVHI)
TIntIntVHI.__deref__ = new_instancemethod(_snap.TIntIntVHI___deref__,None,TIntIntVHI)
TIntIntVHI.Next = new_instancemethod(_snap.TIntIntVHI_Next,None,TIntIntVHI)
TIntIntVHI.IsEmpty = new_instancemethod(_snap.TIntIntVHI_IsEmpty,None,TIntIntVHI)
TIntIntVHI.IsEnd = new_instancemethod(_snap.TIntIntVHI_IsEnd,None,TIntIntVHI)
TIntIntVHI.GetKey = new_instancemethod(_snap.TIntIntVHI_GetKey,None,TIntIntVHI)
TIntIntVHI.GetDat = new_instancemethod(_snap.TIntIntVHI_GetDat,None,TIntIntVHI)
TIntIntVHI_swigregister = _snap.TIntIntVHI_swigregister
TIntIntVHI_swigregister(TIntIntVHI)

class TIntIntHHI(object):
    """Proxy of C++ THashKeyDatI<(TInt,TIntH)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TInt,TIntH)> self) -> TIntIntHHI
        __init__(THashKeyDatI<(TInt,TIntH)> self, TIntIntHHI _HashKeyDatI) -> TIntIntHHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TInt,TIntH > const &

        __init__(THashKeyDatI<(TInt,TIntH)> self, THashKeyDatI< TInt,THash< TInt,TInt,TDefaultHashFunc< TInt > > >::THKeyDat const * _KeyDatI, 
            THashKeyDatI< TInt,THash< TInt,TInt,TDefaultHashFunc< TInt > > >::THKeyDat const * _EndI) -> TIntIntHHI

        Parameters:
            _KeyDatI: THashKeyDatI< TInt,THash< TInt,TInt,TDefaultHashFunc< TInt > > >::THKeyDat const *
            _EndI: THashKeyDatI< TInt,THash< TInt,TInt,TDefaultHashFunc< TInt > > >::THKeyDat const *

        """
        _snap.TIntIntHHI_swiginit(self,_snap.new_TIntIntHHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TIntIntHHI self, TIntIntHHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TInt,TIntH > const &

        """
        return _snap.TIntIntHHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TIntIntHHI self, TIntIntHHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TInt,TIntH > const &

        """
        return _snap.TIntIntHHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TIntIntHHI self) -> THashKeyDatI< TInt,THash< TInt,TInt,TDefaultHashFunc< TInt > > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TInt,TIntH > const *

        """
        return _snap.TIntIntHHI___ref__(self)

    def __call__(self):
        """
        __call__(TIntIntHHI self) -> THashKeyDatI< TInt,THash< TInt,TInt,TDefaultHashFunc< TInt > > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TInt,TIntH > const *

        """
        return _snap.TIntIntHHI___call__(self)

    def __deref__(self):
        """
        __deref__(TIntIntHHI self) -> THashKeyDatI< TInt,THash< TInt,TInt,TDefaultHashFunc< TInt > > >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TInt,TIntH > const *

        """
        return _snap.TIntIntHHI___deref__(self)

    def Next(self):
        """
        Next(TIntIntHHI self) -> TIntIntHHI

        Parameters:
            self: THashKeyDatI< TInt,TIntH > *

        """
        return _snap.TIntIntHHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TIntIntHHI self) -> bool

        Parameters:
            self: THashKeyDatI< TInt,TIntH > const *

        """
        return _snap.TIntIntHHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TIntIntHHI self) -> bool

        Parameters:
            self: THashKeyDatI< TInt,TIntH > const *

        """
        return _snap.TIntIntHHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TIntIntHHI self) -> TInt

        Parameters:
            self: THashKeyDatI< TInt,TIntH > const *

        """
        return _snap.TIntIntHHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TIntIntHHI self) -> TIntH
        GetDat(TIntIntHHI self) -> TIntH

        Parameters:
            self: THashKeyDatI< TInt,TIntH > *

        """
        return _snap.TIntIntHHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntIntHHI
TIntIntHHI.__eq__ = new_instancemethod(_snap.TIntIntHHI___eq__,None,TIntIntHHI)
TIntIntHHI.__lt__ = new_instancemethod(_snap.TIntIntHHI___lt__,None,TIntIntHHI)
TIntIntHHI.__ref__ = new_instancemethod(_snap.TIntIntHHI___ref__,None,TIntIntHHI)
TIntIntHHI.__call__ = new_instancemethod(_snap.TIntIntHHI___call__,None,TIntIntHHI)
TIntIntHHI.__deref__ = new_instancemethod(_snap.TIntIntHHI___deref__,None,TIntIntHHI)
TIntIntHHI.Next = new_instancemethod(_snap.TIntIntHHI_Next,None,TIntIntHHI)
TIntIntHHI.IsEmpty = new_instancemethod(_snap.TIntIntHHI_IsEmpty,None,TIntIntHHI)
TIntIntHHI.IsEnd = new_instancemethod(_snap.TIntIntHHI_IsEnd,None,TIntIntHHI)
TIntIntHHI.GetKey = new_instancemethod(_snap.TIntIntHHI_GetKey,None,TIntIntHHI)
TIntIntHHI.GetDat = new_instancemethod(_snap.TIntIntHHI_GetDat,None,TIntIntHHI)
TIntIntHHI_swigregister = _snap.TIntIntHHI_swigregister
TIntIntHHI_swigregister(TIntIntHHI)

class TIntFltPrHI(object):
    """Proxy of C++ THashKeyDatI<(TInt,TFltPr)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TInt,TFltPr)> self) -> TIntFltPrHI
        __init__(THashKeyDatI<(TInt,TFltPr)> self, TIntFltPrHI _HashKeyDatI) -> TIntFltPrHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TInt,TFltPr > const &

        __init__(THashKeyDatI<(TInt,TFltPr)> self, THashKeyDatI< TInt,TPair< TFlt,TFlt > >::THKeyDat const * _KeyDatI, THashKeyDatI< TInt,TPair< TFlt,TFlt > >::THKeyDat const * _EndI) -> TIntFltPrHI

        Parameters:
            _KeyDatI: THashKeyDatI< TInt,TPair< TFlt,TFlt > >::THKeyDat const *
            _EndI: THashKeyDatI< TInt,TPair< TFlt,TFlt > >::THKeyDat const *

        """
        _snap.TIntFltPrHI_swiginit(self,_snap.new_TIntFltPrHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TIntFltPrHI self, TIntFltPrHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TInt,TFltPr > const &

        """
        return _snap.TIntFltPrHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TIntFltPrHI self, TIntFltPrHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TInt,TFltPr > const &

        """
        return _snap.TIntFltPrHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TIntFltPrHI self) -> THashKeyDatI< TInt,TPair< TFlt,TFlt > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TInt,TFltPr > const *

        """
        return _snap.TIntFltPrHI___ref__(self)

    def __call__(self):
        """
        __call__(TIntFltPrHI self) -> THashKeyDatI< TInt,TPair< TFlt,TFlt > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TInt,TFltPr > const *

        """
        return _snap.TIntFltPrHI___call__(self)

    def __deref__(self):
        """
        __deref__(TIntFltPrHI self) -> THashKeyDatI< TInt,TPair< TFlt,TFlt > >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TInt,TFltPr > const *

        """
        return _snap.TIntFltPrHI___deref__(self)

    def Next(self):
        """
        Next(TIntFltPrHI self) -> TIntFltPrHI

        Parameters:
            self: THashKeyDatI< TInt,TFltPr > *

        """
        return _snap.TIntFltPrHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TIntFltPrHI self) -> bool

        Parameters:
            self: THashKeyDatI< TInt,TFltPr > const *

        """
        return _snap.TIntFltPrHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TIntFltPrHI self) -> bool

        Parameters:
            self: THashKeyDatI< TInt,TFltPr > const *

        """
        return _snap.TIntFltPrHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TIntFltPrHI self) -> TInt

        Parameters:
            self: THashKeyDatI< TInt,TFltPr > const *

        """
        return _snap.TIntFltPrHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TIntFltPrHI self) -> TFltPr
        GetDat(TIntFltPrHI self) -> TFltPr

        Parameters:
            self: THashKeyDatI< TInt,TFltPr > *

        """
        return _snap.TIntFltPrHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntFltPrHI
TIntFltPrHI.__eq__ = new_instancemethod(_snap.TIntFltPrHI___eq__,None,TIntFltPrHI)
TIntFltPrHI.__lt__ = new_instancemethod(_snap.TIntFltPrHI___lt__,None,TIntFltPrHI)
TIntFltPrHI.__ref__ = new_instancemethod(_snap.TIntFltPrHI___ref__,None,TIntFltPrHI)
TIntFltPrHI.__call__ = new_instancemethod(_snap.TIntFltPrHI___call__,None,TIntFltPrHI)
TIntFltPrHI.__deref__ = new_instancemethod(_snap.TIntFltPrHI___deref__,None,TIntFltPrHI)
TIntFltPrHI.Next = new_instancemethod(_snap.TIntFltPrHI_Next,None,TIntFltPrHI)
TIntFltPrHI.IsEmpty = new_instancemethod(_snap.TIntFltPrHI_IsEmpty,None,TIntFltPrHI)
TIntFltPrHI.IsEnd = new_instancemethod(_snap.TIntFltPrHI_IsEnd,None,TIntFltPrHI)
TIntFltPrHI.GetKey = new_instancemethod(_snap.TIntFltPrHI_GetKey,None,TIntFltPrHI)
TIntFltPrHI.GetDat = new_instancemethod(_snap.TIntFltPrHI_GetDat,None,TIntFltPrHI)
TIntFltPrHI_swigregister = _snap.TIntFltPrHI_swigregister
TIntFltPrHI_swigregister(TIntFltPrHI)

class TIntFltTrHI(object):
    """Proxy of C++ THashKeyDatI<(TInt,TFltTr)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TInt,TFltTr)> self) -> TIntFltTrHI
        __init__(THashKeyDatI<(TInt,TFltTr)> self, TIntFltTrHI _HashKeyDatI) -> TIntFltTrHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TInt,TFltTr > const &

        __init__(THashKeyDatI<(TInt,TFltTr)> self, THashKeyDatI< TInt,TTriple< TFlt,TFlt,TFlt > >::THKeyDat const * _KeyDatI, THashKeyDatI< TInt,TTriple< TFlt,TFlt,TFlt > >::THKeyDat const * _EndI) -> TIntFltTrHI

        Parameters:
            _KeyDatI: THashKeyDatI< TInt,TTriple< TFlt,TFlt,TFlt > >::THKeyDat const *
            _EndI: THashKeyDatI< TInt,TTriple< TFlt,TFlt,TFlt > >::THKeyDat const *

        """
        _snap.TIntFltTrHI_swiginit(self,_snap.new_TIntFltTrHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TIntFltTrHI self, TIntFltTrHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TInt,TFltTr > const &

        """
        return _snap.TIntFltTrHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TIntFltTrHI self, TIntFltTrHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TInt,TFltTr > const &

        """
        return _snap.TIntFltTrHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TIntFltTrHI self) -> THashKeyDatI< TInt,TTriple< TFlt,TFlt,TFlt > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TInt,TFltTr > const *

        """
        return _snap.TIntFltTrHI___ref__(self)

    def __call__(self):
        """
        __call__(TIntFltTrHI self) -> THashKeyDatI< TInt,TTriple< TFlt,TFlt,TFlt > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TInt,TFltTr > const *

        """
        return _snap.TIntFltTrHI___call__(self)

    def __deref__(self):
        """
        __deref__(TIntFltTrHI self) -> THashKeyDatI< TInt,TTriple< TFlt,TFlt,TFlt > >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TInt,TFltTr > const *

        """
        return _snap.TIntFltTrHI___deref__(self)

    def Next(self):
        """
        Next(TIntFltTrHI self) -> TIntFltTrHI

        Parameters:
            self: THashKeyDatI< TInt,TFltTr > *

        """
        return _snap.TIntFltTrHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TIntFltTrHI self) -> bool

        Parameters:
            self: THashKeyDatI< TInt,TFltTr > const *

        """
        return _snap.TIntFltTrHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TIntFltTrHI self) -> bool

        Parameters:
            self: THashKeyDatI< TInt,TFltTr > const *

        """
        return _snap.TIntFltTrHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TIntFltTrHI self) -> TInt

        Parameters:
            self: THashKeyDatI< TInt,TFltTr > const *

        """
        return _snap.TIntFltTrHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TIntFltTrHI self) -> TTriple< TFlt,TFlt,TFlt > const
        GetDat(TIntFltTrHI self) -> TTriple< TFlt,TFlt,TFlt > &

        Parameters:
            self: THashKeyDatI< TInt,TFltTr > *

        """
        return _snap.TIntFltTrHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntFltTrHI
TIntFltTrHI.__eq__ = new_instancemethod(_snap.TIntFltTrHI___eq__,None,TIntFltTrHI)
TIntFltTrHI.__lt__ = new_instancemethod(_snap.TIntFltTrHI___lt__,None,TIntFltTrHI)
TIntFltTrHI.__ref__ = new_instancemethod(_snap.TIntFltTrHI___ref__,None,TIntFltTrHI)
TIntFltTrHI.__call__ = new_instancemethod(_snap.TIntFltTrHI___call__,None,TIntFltTrHI)
TIntFltTrHI.__deref__ = new_instancemethod(_snap.TIntFltTrHI___deref__,None,TIntFltTrHI)
TIntFltTrHI.Next = new_instancemethod(_snap.TIntFltTrHI_Next,None,TIntFltTrHI)
TIntFltTrHI.IsEmpty = new_instancemethod(_snap.TIntFltTrHI_IsEmpty,None,TIntFltTrHI)
TIntFltTrHI.IsEnd = new_instancemethod(_snap.TIntFltTrHI_IsEnd,None,TIntFltTrHI)
TIntFltTrHI.GetKey = new_instancemethod(_snap.TIntFltTrHI_GetKey,None,TIntFltTrHI)
TIntFltTrHI.GetDat = new_instancemethod(_snap.TIntFltTrHI_GetDat,None,TIntFltTrHI)
TIntFltTrHI_swigregister = _snap.TIntFltTrHI_swigregister
TIntFltTrHI_swigregister(TIntFltTrHI)

class TIntFltVHI(object):
    """Proxy of C++ THashKeyDatI<(TInt,TFltV)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TInt,TFltV)> self) -> TIntFltVHI
        __init__(THashKeyDatI<(TInt,TFltV)> self, TIntFltVHI _HashKeyDatI) -> TIntFltVHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TInt,TFltV > const &

        __init__(THashKeyDatI<(TInt,TFltV)> self, THashKeyDatI< TInt,TVec< TFlt,int > >::THKeyDat const * _KeyDatI, THashKeyDatI< TInt,TVec< TFlt,int > >::THKeyDat const * _EndI) -> TIntFltVHI

        Parameters:
            _KeyDatI: THashKeyDatI< TInt,TVec< TFlt,int > >::THKeyDat const *
            _EndI: THashKeyDatI< TInt,TVec< TFlt,int > >::THKeyDat const *

        """
        _snap.TIntFltVHI_swiginit(self,_snap.new_TIntFltVHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TIntFltVHI self, TIntFltVHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TInt,TFltV > const &

        """
        return _snap.TIntFltVHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TIntFltVHI self, TIntFltVHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TInt,TFltV > const &

        """
        return _snap.TIntFltVHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TIntFltVHI self) -> THashKeyDatI< TInt,TVec< TFlt,int > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TInt,TFltV > const *

        """
        return _snap.TIntFltVHI___ref__(self)

    def __call__(self):
        """
        __call__(TIntFltVHI self) -> THashKeyDatI< TInt,TVec< TFlt,int > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TInt,TFltV > const *

        """
        return _snap.TIntFltVHI___call__(self)

    def __deref__(self):
        """
        __deref__(TIntFltVHI self) -> THashKeyDatI< TInt,TVec< TFlt,int > >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TInt,TFltV > const *

        """
        return _snap.TIntFltVHI___deref__(self)

    def Next(self):
        """
        Next(TIntFltVHI self) -> TIntFltVHI

        Parameters:
            self: THashKeyDatI< TInt,TFltV > *

        """
        return _snap.TIntFltVHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TIntFltVHI self) -> bool

        Parameters:
            self: THashKeyDatI< TInt,TFltV > const *

        """
        return _snap.TIntFltVHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TIntFltVHI self) -> bool

        Parameters:
            self: THashKeyDatI< TInt,TFltV > const *

        """
        return _snap.TIntFltVHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TIntFltVHI self) -> TInt

        Parameters:
            self: THashKeyDatI< TInt,TFltV > const *

        """
        return _snap.TIntFltVHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TIntFltVHI self) -> TFltV
        GetDat(TIntFltVHI self) -> TFltV

        Parameters:
            self: THashKeyDatI< TInt,TFltV > *

        """
        return _snap.TIntFltVHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntFltVHI
TIntFltVHI.__eq__ = new_instancemethod(_snap.TIntFltVHI___eq__,None,TIntFltVHI)
TIntFltVHI.__lt__ = new_instancemethod(_snap.TIntFltVHI___lt__,None,TIntFltVHI)
TIntFltVHI.__ref__ = new_instancemethod(_snap.TIntFltVHI___ref__,None,TIntFltVHI)
TIntFltVHI.__call__ = new_instancemethod(_snap.TIntFltVHI___call__,None,TIntFltVHI)
TIntFltVHI.__deref__ = new_instancemethod(_snap.TIntFltVHI___deref__,None,TIntFltVHI)
TIntFltVHI.Next = new_instancemethod(_snap.TIntFltVHI_Next,None,TIntFltVHI)
TIntFltVHI.IsEmpty = new_instancemethod(_snap.TIntFltVHI_IsEmpty,None,TIntFltVHI)
TIntFltVHI.IsEnd = new_instancemethod(_snap.TIntFltVHI_IsEnd,None,TIntFltVHI)
TIntFltVHI.GetKey = new_instancemethod(_snap.TIntFltVHI_GetKey,None,TIntFltVHI)
TIntFltVHI.GetDat = new_instancemethod(_snap.TIntFltVHI_GetDat,None,TIntFltVHI)
TIntFltVHI_swigregister = _snap.TIntFltVHI_swigregister
TIntFltVHI_swigregister(TIntFltVHI)

class TIntStrVHI(object):
    """Proxy of C++ THashKeyDatI<(TInt,TStrV)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TInt,TStrV)> self) -> TIntStrVHI
        __init__(THashKeyDatI<(TInt,TStrV)> self, TIntStrVHI _HashKeyDatI) -> TIntStrVHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TInt,TStrV > const &

        __init__(THashKeyDatI<(TInt,TStrV)> self, THashKeyDatI< TInt,TVec< TStr,int > >::THKeyDat const * _KeyDatI, THashKeyDatI< TInt,TVec< TStr,int > >::THKeyDat const * _EndI) -> TIntStrVHI

        Parameters:
            _KeyDatI: THashKeyDatI< TInt,TVec< TStr,int > >::THKeyDat const *
            _EndI: THashKeyDatI< TInt,TVec< TStr,int > >::THKeyDat const *

        """
        _snap.TIntStrVHI_swiginit(self,_snap.new_TIntStrVHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TIntStrVHI self, TIntStrVHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TInt,TStrV > const &

        """
        return _snap.TIntStrVHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TIntStrVHI self, TIntStrVHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TInt,TStrV > const &

        """
        return _snap.TIntStrVHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TIntStrVHI self) -> THashKeyDatI< TInt,TVec< TStr,int > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TInt,TStrV > const *

        """
        return _snap.TIntStrVHI___ref__(self)

    def __call__(self):
        """
        __call__(TIntStrVHI self) -> THashKeyDatI< TInt,TVec< TStr,int > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TInt,TStrV > const *

        """
        return _snap.TIntStrVHI___call__(self)

    def __deref__(self):
        """
        __deref__(TIntStrVHI self) -> THashKeyDatI< TInt,TVec< TStr,int > >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TInt,TStrV > const *

        """
        return _snap.TIntStrVHI___deref__(self)

    def Next(self):
        """
        Next(TIntStrVHI self) -> TIntStrVHI

        Parameters:
            self: THashKeyDatI< TInt,TStrV > *

        """
        return _snap.TIntStrVHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TIntStrVHI self) -> bool

        Parameters:
            self: THashKeyDatI< TInt,TStrV > const *

        """
        return _snap.TIntStrVHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TIntStrVHI self) -> bool

        Parameters:
            self: THashKeyDatI< TInt,TStrV > const *

        """
        return _snap.TIntStrVHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TIntStrVHI self) -> TInt

        Parameters:
            self: THashKeyDatI< TInt,TStrV > const *

        """
        return _snap.TIntStrVHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TIntStrVHI self) -> TStrV
        GetDat(TIntStrVHI self) -> TStrV

        Parameters:
            self: THashKeyDatI< TInt,TStrV > *

        """
        return _snap.TIntStrVHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntStrVHI
TIntStrVHI.__eq__ = new_instancemethod(_snap.TIntStrVHI___eq__,None,TIntStrVHI)
TIntStrVHI.__lt__ = new_instancemethod(_snap.TIntStrVHI___lt__,None,TIntStrVHI)
TIntStrVHI.__ref__ = new_instancemethod(_snap.TIntStrVHI___ref__,None,TIntStrVHI)
TIntStrVHI.__call__ = new_instancemethod(_snap.TIntStrVHI___call__,None,TIntStrVHI)
TIntStrVHI.__deref__ = new_instancemethod(_snap.TIntStrVHI___deref__,None,TIntStrVHI)
TIntStrVHI.Next = new_instancemethod(_snap.TIntStrVHI_Next,None,TIntStrVHI)
TIntStrVHI.IsEmpty = new_instancemethod(_snap.TIntStrVHI_IsEmpty,None,TIntStrVHI)
TIntStrVHI.IsEnd = new_instancemethod(_snap.TIntStrVHI_IsEnd,None,TIntStrVHI)
TIntStrVHI.GetKey = new_instancemethod(_snap.TIntStrVHI_GetKey,None,TIntStrVHI)
TIntStrVHI.GetDat = new_instancemethod(_snap.TIntStrVHI_GetDat,None,TIntStrVHI)
TIntStrVHI_swigregister = _snap.TIntStrVHI_swigregister
TIntStrVHI_swigregister(TIntStrVHI)

class TIntIntPrHI(object):
    """Proxy of C++ THashKeyDatI<(TInt,TIntPr)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TInt,TIntPr)> self) -> TIntIntPrHI
        __init__(THashKeyDatI<(TInt,TIntPr)> self, TIntIntPrHI _HashKeyDatI) -> TIntIntPrHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TInt,TIntPr > const &

        __init__(THashKeyDatI<(TInt,TIntPr)> self, THashKeyDatI< TInt,TPair< TInt,TInt > >::THKeyDat const * _KeyDatI, THashKeyDatI< TInt,TPair< TInt,TInt > >::THKeyDat const * _EndI) -> TIntIntPrHI

        Parameters:
            _KeyDatI: THashKeyDatI< TInt,TPair< TInt,TInt > >::THKeyDat const *
            _EndI: THashKeyDatI< TInt,TPair< TInt,TInt > >::THKeyDat const *

        """
        _snap.TIntIntPrHI_swiginit(self,_snap.new_TIntIntPrHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TIntIntPrHI self, TIntIntPrHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TInt,TIntPr > const &

        """
        return _snap.TIntIntPrHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TIntIntPrHI self, TIntIntPrHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TInt,TIntPr > const &

        """
        return _snap.TIntIntPrHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TIntIntPrHI self) -> THashKeyDatI< TInt,TPair< TInt,TInt > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TInt,TIntPr > const *

        """
        return _snap.TIntIntPrHI___ref__(self)

    def __call__(self):
        """
        __call__(TIntIntPrHI self) -> THashKeyDatI< TInt,TPair< TInt,TInt > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TInt,TIntPr > const *

        """
        return _snap.TIntIntPrHI___call__(self)

    def __deref__(self):
        """
        __deref__(TIntIntPrHI self) -> THashKeyDatI< TInt,TPair< TInt,TInt > >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TInt,TIntPr > const *

        """
        return _snap.TIntIntPrHI___deref__(self)

    def Next(self):
        """
        Next(TIntIntPrHI self) -> TIntIntPrHI

        Parameters:
            self: THashKeyDatI< TInt,TIntPr > *

        """
        return _snap.TIntIntPrHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TIntIntPrHI self) -> bool

        Parameters:
            self: THashKeyDatI< TInt,TIntPr > const *

        """
        return _snap.TIntIntPrHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TIntIntPrHI self) -> bool

        Parameters:
            self: THashKeyDatI< TInt,TIntPr > const *

        """
        return _snap.TIntIntPrHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TIntIntPrHI self) -> TInt

        Parameters:
            self: THashKeyDatI< TInt,TIntPr > const *

        """
        return _snap.TIntIntPrHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TIntIntPrHI self) -> TIntPr
        GetDat(TIntIntPrHI self) -> TIntPr

        Parameters:
            self: THashKeyDatI< TInt,TIntPr > *

        """
        return _snap.TIntIntPrHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntIntPrHI
TIntIntPrHI.__eq__ = new_instancemethod(_snap.TIntIntPrHI___eq__,None,TIntIntPrHI)
TIntIntPrHI.__lt__ = new_instancemethod(_snap.TIntIntPrHI___lt__,None,TIntIntPrHI)
TIntIntPrHI.__ref__ = new_instancemethod(_snap.TIntIntPrHI___ref__,None,TIntIntPrHI)
TIntIntPrHI.__call__ = new_instancemethod(_snap.TIntIntPrHI___call__,None,TIntIntPrHI)
TIntIntPrHI.__deref__ = new_instancemethod(_snap.TIntIntPrHI___deref__,None,TIntIntPrHI)
TIntIntPrHI.Next = new_instancemethod(_snap.TIntIntPrHI_Next,None,TIntIntPrHI)
TIntIntPrHI.IsEmpty = new_instancemethod(_snap.TIntIntPrHI_IsEmpty,None,TIntIntPrHI)
TIntIntPrHI.IsEnd = new_instancemethod(_snap.TIntIntPrHI_IsEnd,None,TIntIntPrHI)
TIntIntPrHI.GetKey = new_instancemethod(_snap.TIntIntPrHI_GetKey,None,TIntIntPrHI)
TIntIntPrHI.GetDat = new_instancemethod(_snap.TIntIntPrHI_GetDat,None,TIntIntPrHI)
TIntIntPrHI_swigregister = _snap.TIntIntPrHI_swigregister
TIntIntPrHI_swigregister(TIntIntPrHI)

class TIntIntPrVHI(object):
    """Proxy of C++ THashKeyDatI<(TInt,TIntPrV)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TInt,TIntPrV)> self) -> TIntIntPrVHI
        __init__(THashKeyDatI<(TInt,TIntPrV)> self, TIntIntPrVHI _HashKeyDatI) -> TIntIntPrVHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TInt,TIntPrV > const &

        __init__(THashKeyDatI<(TInt,TIntPrV)> self, THashKeyDatI< TInt,TVec< TPair< TInt,TInt >,int > >::THKeyDat const * _KeyDatI, THashKeyDatI< TInt,TVec< TPair< TInt,TInt >,int > >::THKeyDat const * _EndI) -> TIntIntPrVHI

        Parameters:
            _KeyDatI: THashKeyDatI< TInt,TVec< TPair< TInt,TInt >,int > >::THKeyDat const *
            _EndI: THashKeyDatI< TInt,TVec< TPair< TInt,TInt >,int > >::THKeyDat const *

        """
        _snap.TIntIntPrVHI_swiginit(self,_snap.new_TIntIntPrVHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TIntIntPrVHI self, TIntIntPrVHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TInt,TIntPrV > const &

        """
        return _snap.TIntIntPrVHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TIntIntPrVHI self, TIntIntPrVHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TInt,TIntPrV > const &

        """
        return _snap.TIntIntPrVHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TIntIntPrVHI self) -> THashKeyDatI< TInt,TVec< TPair< TInt,TInt >,int > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TInt,TIntPrV > const *

        """
        return _snap.TIntIntPrVHI___ref__(self)

    def __call__(self):
        """
        __call__(TIntIntPrVHI self) -> THashKeyDatI< TInt,TVec< TPair< TInt,TInt >,int > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TInt,TIntPrV > const *

        """
        return _snap.TIntIntPrVHI___call__(self)

    def __deref__(self):
        """
        __deref__(TIntIntPrVHI self) -> THashKeyDatI< TInt,TVec< TPair< TInt,TInt >,int > >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TInt,TIntPrV > const *

        """
        return _snap.TIntIntPrVHI___deref__(self)

    def Next(self):
        """
        Next(TIntIntPrVHI self) -> TIntIntPrVHI

        Parameters:
            self: THashKeyDatI< TInt,TIntPrV > *

        """
        return _snap.TIntIntPrVHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TIntIntPrVHI self) -> bool

        Parameters:
            self: THashKeyDatI< TInt,TIntPrV > const *

        """
        return _snap.TIntIntPrVHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TIntIntPrVHI self) -> bool

        Parameters:
            self: THashKeyDatI< TInt,TIntPrV > const *

        """
        return _snap.TIntIntPrVHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TIntIntPrVHI self) -> TInt

        Parameters:
            self: THashKeyDatI< TInt,TIntPrV > const *

        """
        return _snap.TIntIntPrVHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TIntIntPrVHI self) -> TIntPrV
        GetDat(TIntIntPrVHI self) -> TIntPrV

        Parameters:
            self: THashKeyDatI< TInt,TIntPrV > *

        """
        return _snap.TIntIntPrVHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntIntPrVHI
TIntIntPrVHI.__eq__ = new_instancemethod(_snap.TIntIntPrVHI___eq__,None,TIntIntPrVHI)
TIntIntPrVHI.__lt__ = new_instancemethod(_snap.TIntIntPrVHI___lt__,None,TIntIntPrVHI)
TIntIntPrVHI.__ref__ = new_instancemethod(_snap.TIntIntPrVHI___ref__,None,TIntIntPrVHI)
TIntIntPrVHI.__call__ = new_instancemethod(_snap.TIntIntPrVHI___call__,None,TIntIntPrVHI)
TIntIntPrVHI.__deref__ = new_instancemethod(_snap.TIntIntPrVHI___deref__,None,TIntIntPrVHI)
TIntIntPrVHI.Next = new_instancemethod(_snap.TIntIntPrVHI_Next,None,TIntIntPrVHI)
TIntIntPrVHI.IsEmpty = new_instancemethod(_snap.TIntIntPrVHI_IsEmpty,None,TIntIntPrVHI)
TIntIntPrVHI.IsEnd = new_instancemethod(_snap.TIntIntPrVHI_IsEnd,None,TIntIntPrVHI)
TIntIntPrVHI.GetKey = new_instancemethod(_snap.TIntIntPrVHI_GetKey,None,TIntIntPrVHI)
TIntIntPrVHI.GetDat = new_instancemethod(_snap.TIntIntPrVHI_GetDat,None,TIntIntPrVHI)
TIntIntPrVHI_swigregister = _snap.TIntIntPrVHI_swigregister
TIntIntPrVHI_swigregister(TIntIntPrVHI)

class TUInt64StrVHI(object):
    """Proxy of C++ THashKeyDatI<(TUInt64,TStrV)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TUInt64,TStrV)> self) -> TUInt64StrVHI
        __init__(THashKeyDatI<(TUInt64,TStrV)> self, TUInt64StrVHI _HashKeyDatI) -> TUInt64StrVHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TUInt64,TStrV > const &

        __init__(THashKeyDatI<(TUInt64,TStrV)> self, THashKeyDatI< TUInt64,TVec< TStr,int > >::THKeyDat const * _KeyDatI, THashKeyDatI< TUInt64,TVec< TStr,int > >::THKeyDat const * _EndI) -> TUInt64StrVHI

        Parameters:
            _KeyDatI: THashKeyDatI< TUInt64,TVec< TStr,int > >::THKeyDat const *
            _EndI: THashKeyDatI< TUInt64,TVec< TStr,int > >::THKeyDat const *

        """
        _snap.TUInt64StrVHI_swiginit(self,_snap.new_TUInt64StrVHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TUInt64StrVHI self, TUInt64StrVHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TUInt64,TStrV > const &

        """
        return _snap.TUInt64StrVHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TUInt64StrVHI self, TUInt64StrVHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TUInt64,TStrV > const &

        """
        return _snap.TUInt64StrVHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TUInt64StrVHI self) -> THashKeyDatI< TUInt64,TVec< TStr,int > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TUInt64,TStrV > const *

        """
        return _snap.TUInt64StrVHI___ref__(self)

    def __call__(self):
        """
        __call__(TUInt64StrVHI self) -> THashKeyDatI< TUInt64,TVec< TStr,int > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TUInt64,TStrV > const *

        """
        return _snap.TUInt64StrVHI___call__(self)

    def __deref__(self):
        """
        __deref__(TUInt64StrVHI self) -> THashKeyDatI< TUInt64,TVec< TStr,int > >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TUInt64,TStrV > const *

        """
        return _snap.TUInt64StrVHI___deref__(self)

    def Next(self):
        """
        Next(TUInt64StrVHI self) -> TUInt64StrVHI

        Parameters:
            self: THashKeyDatI< TUInt64,TStrV > *

        """
        return _snap.TUInt64StrVHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TUInt64StrVHI self) -> bool

        Parameters:
            self: THashKeyDatI< TUInt64,TStrV > const *

        """
        return _snap.TUInt64StrVHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TUInt64StrVHI self) -> bool

        Parameters:
            self: THashKeyDatI< TUInt64,TStrV > const *

        """
        return _snap.TUInt64StrVHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TUInt64StrVHI self) -> TUInt64

        Parameters:
            self: THashKeyDatI< TUInt64,TStrV > const *

        """
        return _snap.TUInt64StrVHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TUInt64StrVHI self) -> TStrV
        GetDat(TUInt64StrVHI self) -> TStrV

        Parameters:
            self: THashKeyDatI< TUInt64,TStrV > *

        """
        return _snap.TUInt64StrVHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TUInt64StrVHI
TUInt64StrVHI.__eq__ = new_instancemethod(_snap.TUInt64StrVHI___eq__,None,TUInt64StrVHI)
TUInt64StrVHI.__lt__ = new_instancemethod(_snap.TUInt64StrVHI___lt__,None,TUInt64StrVHI)
TUInt64StrVHI.__ref__ = new_instancemethod(_snap.TUInt64StrVHI___ref__,None,TUInt64StrVHI)
TUInt64StrVHI.__call__ = new_instancemethod(_snap.TUInt64StrVHI___call__,None,TUInt64StrVHI)
TUInt64StrVHI.__deref__ = new_instancemethod(_snap.TUInt64StrVHI___deref__,None,TUInt64StrVHI)
TUInt64StrVHI.Next = new_instancemethod(_snap.TUInt64StrVHI_Next,None,TUInt64StrVHI)
TUInt64StrVHI.IsEmpty = new_instancemethod(_snap.TUInt64StrVHI_IsEmpty,None,TUInt64StrVHI)
TUInt64StrVHI.IsEnd = new_instancemethod(_snap.TUInt64StrVHI_IsEnd,None,TUInt64StrVHI)
TUInt64StrVHI.GetKey = new_instancemethod(_snap.TUInt64StrVHI_GetKey,None,TUInt64StrVHI)
TUInt64StrVHI.GetDat = new_instancemethod(_snap.TUInt64StrVHI_GetDat,None,TUInt64StrVHI)
TUInt64StrVHI_swigregister = _snap.TUInt64StrVHI_swigregister
TUInt64StrVHI_swigregister(TUInt64StrVHI)

class TIntPrIntHI(object):
    """Proxy of C++ THashKeyDatI<(TIntPr,TInt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TIntPr,TInt)> self) -> TIntPrIntHI
        __init__(THashKeyDatI<(TIntPr,TInt)> self, TIntPrIntHI _HashKeyDatI) -> TIntPrIntHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TIntPr,TInt > const &

        __init__(THashKeyDatI<(TIntPr,TInt)> self, THashKeyDatI< TPair< TInt,TInt >,TInt >::THKeyDat const * _KeyDatI, THashKeyDatI< TPair< TInt,TInt >,TInt >::THKeyDat const * _EndI) -> TIntPrIntHI

        Parameters:
            _KeyDatI: THashKeyDatI< TPair< TInt,TInt >,TInt >::THKeyDat const *
            _EndI: THashKeyDatI< TPair< TInt,TInt >,TInt >::THKeyDat const *

        """
        _snap.TIntPrIntHI_swiginit(self,_snap.new_TIntPrIntHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TIntPrIntHI self, TIntPrIntHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TIntPr,TInt > const &

        """
        return _snap.TIntPrIntHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TIntPrIntHI self, TIntPrIntHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TIntPr,TInt > const &

        """
        return _snap.TIntPrIntHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TIntPrIntHI self) -> THashKeyDatI< TPair< TInt,TInt >,TInt >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TIntPr,TInt > const *

        """
        return _snap.TIntPrIntHI___ref__(self)

    def __call__(self):
        """
        __call__(TIntPrIntHI self) -> THashKeyDatI< TPair< TInt,TInt >,TInt >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TIntPr,TInt > const *

        """
        return _snap.TIntPrIntHI___call__(self)

    def __deref__(self):
        """
        __deref__(TIntPrIntHI self) -> THashKeyDatI< TPair< TInt,TInt >,TInt >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TIntPr,TInt > const *

        """
        return _snap.TIntPrIntHI___deref__(self)

    def Next(self):
        """
        Next(TIntPrIntHI self) -> TIntPrIntHI

        Parameters:
            self: THashKeyDatI< TIntPr,TInt > *

        """
        return _snap.TIntPrIntHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TIntPrIntHI self) -> bool

        Parameters:
            self: THashKeyDatI< TIntPr,TInt > const *

        """
        return _snap.TIntPrIntHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TIntPrIntHI self) -> bool

        Parameters:
            self: THashKeyDatI< TIntPr,TInt > const *

        """
        return _snap.TIntPrIntHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TIntPrIntHI self) -> TIntPr

        Parameters:
            self: THashKeyDatI< TIntPr,TInt > const *

        """
        return _snap.TIntPrIntHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TIntPrIntHI self) -> TInt
        GetDat(TIntPrIntHI self) -> TInt

        Parameters:
            self: THashKeyDatI< TIntPr,TInt > *

        """
        return _snap.TIntPrIntHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntPrIntHI
TIntPrIntHI.__eq__ = new_instancemethod(_snap.TIntPrIntHI___eq__,None,TIntPrIntHI)
TIntPrIntHI.__lt__ = new_instancemethod(_snap.TIntPrIntHI___lt__,None,TIntPrIntHI)
TIntPrIntHI.__ref__ = new_instancemethod(_snap.TIntPrIntHI___ref__,None,TIntPrIntHI)
TIntPrIntHI.__call__ = new_instancemethod(_snap.TIntPrIntHI___call__,None,TIntPrIntHI)
TIntPrIntHI.__deref__ = new_instancemethod(_snap.TIntPrIntHI___deref__,None,TIntPrIntHI)
TIntPrIntHI.Next = new_instancemethod(_snap.TIntPrIntHI_Next,None,TIntPrIntHI)
TIntPrIntHI.IsEmpty = new_instancemethod(_snap.TIntPrIntHI_IsEmpty,None,TIntPrIntHI)
TIntPrIntHI.IsEnd = new_instancemethod(_snap.TIntPrIntHI_IsEnd,None,TIntPrIntHI)
TIntPrIntHI.GetKey = new_instancemethod(_snap.TIntPrIntHI_GetKey,None,TIntPrIntHI)
TIntPrIntHI.GetDat = new_instancemethod(_snap.TIntPrIntHI_GetDat,None,TIntPrIntHI)
TIntPrIntHI_swigregister = _snap.TIntPrIntHI_swigregister
TIntPrIntHI_swigregister(TIntPrIntHI)

class TIntPrIntVHI(object):
    """Proxy of C++ THashKeyDatI<(TIntPr,TIntV)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TIntPr,TIntV)> self) -> TIntPrIntVHI
        __init__(THashKeyDatI<(TIntPr,TIntV)> self, TIntPrIntVHI _HashKeyDatI) -> TIntPrIntVHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TIntPr,TIntV > const &

        __init__(THashKeyDatI<(TIntPr,TIntV)> self, THashKeyDatI< TPair< TInt,TInt >,TVec< TInt,int > >::THKeyDat const * _KeyDatI, THashKeyDatI< TPair< TInt,TInt >,TVec< TInt,int > >::THKeyDat const * _EndI) -> TIntPrIntVHI

        Parameters:
            _KeyDatI: THashKeyDatI< TPair< TInt,TInt >,TVec< TInt,int > >::THKeyDat const *
            _EndI: THashKeyDatI< TPair< TInt,TInt >,TVec< TInt,int > >::THKeyDat const *

        """
        _snap.TIntPrIntVHI_swiginit(self,_snap.new_TIntPrIntVHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TIntPrIntVHI self, TIntPrIntVHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TIntPr,TIntV > const &

        """
        return _snap.TIntPrIntVHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TIntPrIntVHI self, TIntPrIntVHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TIntPr,TIntV > const &

        """
        return _snap.TIntPrIntVHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TIntPrIntVHI self) -> THashKeyDatI< TPair< TInt,TInt >,TVec< TInt,int > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TIntPr,TIntV > const *

        """
        return _snap.TIntPrIntVHI___ref__(self)

    def __call__(self):
        """
        __call__(TIntPrIntVHI self) -> THashKeyDatI< TPair< TInt,TInt >,TVec< TInt,int > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TIntPr,TIntV > const *

        """
        return _snap.TIntPrIntVHI___call__(self)

    def __deref__(self):
        """
        __deref__(TIntPrIntVHI self) -> THashKeyDatI< TPair< TInt,TInt >,TVec< TInt,int > >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TIntPr,TIntV > const *

        """
        return _snap.TIntPrIntVHI___deref__(self)

    def Next(self):
        """
        Next(TIntPrIntVHI self) -> TIntPrIntVHI

        Parameters:
            self: THashKeyDatI< TIntPr,TIntV > *

        """
        return _snap.TIntPrIntVHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TIntPrIntVHI self) -> bool

        Parameters:
            self: THashKeyDatI< TIntPr,TIntV > const *

        """
        return _snap.TIntPrIntVHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TIntPrIntVHI self) -> bool

        Parameters:
            self: THashKeyDatI< TIntPr,TIntV > const *

        """
        return _snap.TIntPrIntVHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TIntPrIntVHI self) -> TIntPr

        Parameters:
            self: THashKeyDatI< TIntPr,TIntV > const *

        """
        return _snap.TIntPrIntVHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TIntPrIntVHI self) -> TIntV
        GetDat(TIntPrIntVHI self) -> TIntV

        Parameters:
            self: THashKeyDatI< TIntPr,TIntV > *

        """
        return _snap.TIntPrIntVHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntPrIntVHI
TIntPrIntVHI.__eq__ = new_instancemethod(_snap.TIntPrIntVHI___eq__,None,TIntPrIntVHI)
TIntPrIntVHI.__lt__ = new_instancemethod(_snap.TIntPrIntVHI___lt__,None,TIntPrIntVHI)
TIntPrIntVHI.__ref__ = new_instancemethod(_snap.TIntPrIntVHI___ref__,None,TIntPrIntVHI)
TIntPrIntVHI.__call__ = new_instancemethod(_snap.TIntPrIntVHI___call__,None,TIntPrIntVHI)
TIntPrIntVHI.__deref__ = new_instancemethod(_snap.TIntPrIntVHI___deref__,None,TIntPrIntVHI)
TIntPrIntVHI.Next = new_instancemethod(_snap.TIntPrIntVHI_Next,None,TIntPrIntVHI)
TIntPrIntVHI.IsEmpty = new_instancemethod(_snap.TIntPrIntVHI_IsEmpty,None,TIntPrIntVHI)
TIntPrIntVHI.IsEnd = new_instancemethod(_snap.TIntPrIntVHI_IsEnd,None,TIntPrIntVHI)
TIntPrIntVHI.GetKey = new_instancemethod(_snap.TIntPrIntVHI_GetKey,None,TIntPrIntVHI)
TIntPrIntVHI.GetDat = new_instancemethod(_snap.TIntPrIntVHI_GetDat,None,TIntPrIntVHI)
TIntPrIntVHI_swigregister = _snap.TIntPrIntVHI_swigregister
TIntPrIntVHI_swigregister(TIntPrIntVHI)

class TIntPrIntPrVHI(object):
    """Proxy of C++ THashKeyDatI<(TIntPr,TIntPrV)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TIntPr,TIntPrV)> self) -> TIntPrIntPrVHI
        __init__(THashKeyDatI<(TIntPr,TIntPrV)> self, TIntPrIntPrVHI _HashKeyDatI) -> TIntPrIntPrVHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TIntPr,TIntPrV > const &

        __init__(THashKeyDatI<(TIntPr,TIntPrV)> self, THashKeyDatI< TPair< TInt,TInt >,TVec< TPair< TInt,TInt >,int > >::THKeyDat const * _KeyDatI, 
            THashKeyDatI< TPair< TInt,TInt >,TVec< TPair< TInt,TInt >,int > >::THKeyDat const * _EndI) -> TIntPrIntPrVHI

        Parameters:
            _KeyDatI: THashKeyDatI< TPair< TInt,TInt >,TVec< TPair< TInt,TInt >,int > >::THKeyDat const *
            _EndI: THashKeyDatI< TPair< TInt,TInt >,TVec< TPair< TInt,TInt >,int > >::THKeyDat const *

        """
        _snap.TIntPrIntPrVHI_swiginit(self,_snap.new_TIntPrIntPrVHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TIntPrIntPrVHI self, TIntPrIntPrVHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TIntPr,TIntPrV > const &

        """
        return _snap.TIntPrIntPrVHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TIntPrIntPrVHI self, TIntPrIntPrVHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TIntPr,TIntPrV > const &

        """
        return _snap.TIntPrIntPrVHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TIntPrIntPrVHI self) -> THashKeyDatI< TPair< TInt,TInt >,TVec< TPair< TInt,TInt >,int > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TIntPr,TIntPrV > const *

        """
        return _snap.TIntPrIntPrVHI___ref__(self)

    def __call__(self):
        """
        __call__(TIntPrIntPrVHI self) -> THashKeyDatI< TPair< TInt,TInt >,TVec< TPair< TInt,TInt >,int > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TIntPr,TIntPrV > const *

        """
        return _snap.TIntPrIntPrVHI___call__(self)

    def __deref__(self):
        """
        __deref__(TIntPrIntPrVHI self) -> THashKeyDatI< TPair< TInt,TInt >,TVec< TPair< TInt,TInt >,int > >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TIntPr,TIntPrV > const *

        """
        return _snap.TIntPrIntPrVHI___deref__(self)

    def Next(self):
        """
        Next(TIntPrIntPrVHI self) -> TIntPrIntPrVHI

        Parameters:
            self: THashKeyDatI< TIntPr,TIntPrV > *

        """
        return _snap.TIntPrIntPrVHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TIntPrIntPrVHI self) -> bool

        Parameters:
            self: THashKeyDatI< TIntPr,TIntPrV > const *

        """
        return _snap.TIntPrIntPrVHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TIntPrIntPrVHI self) -> bool

        Parameters:
            self: THashKeyDatI< TIntPr,TIntPrV > const *

        """
        return _snap.TIntPrIntPrVHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TIntPrIntPrVHI self) -> TIntPr

        Parameters:
            self: THashKeyDatI< TIntPr,TIntPrV > const *

        """
        return _snap.TIntPrIntPrVHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TIntPrIntPrVHI self) -> TIntPrV
        GetDat(TIntPrIntPrVHI self) -> TIntPrV

        Parameters:
            self: THashKeyDatI< TIntPr,TIntPrV > *

        """
        return _snap.TIntPrIntPrVHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntPrIntPrVHI
TIntPrIntPrVHI.__eq__ = new_instancemethod(_snap.TIntPrIntPrVHI___eq__,None,TIntPrIntPrVHI)
TIntPrIntPrVHI.__lt__ = new_instancemethod(_snap.TIntPrIntPrVHI___lt__,None,TIntPrIntPrVHI)
TIntPrIntPrVHI.__ref__ = new_instancemethod(_snap.TIntPrIntPrVHI___ref__,None,TIntPrIntPrVHI)
TIntPrIntPrVHI.__call__ = new_instancemethod(_snap.TIntPrIntPrVHI___call__,None,TIntPrIntPrVHI)
TIntPrIntPrVHI.__deref__ = new_instancemethod(_snap.TIntPrIntPrVHI___deref__,None,TIntPrIntPrVHI)
TIntPrIntPrVHI.Next = new_instancemethod(_snap.TIntPrIntPrVHI_Next,None,TIntPrIntPrVHI)
TIntPrIntPrVHI.IsEmpty = new_instancemethod(_snap.TIntPrIntPrVHI_IsEmpty,None,TIntPrIntPrVHI)
TIntPrIntPrVHI.IsEnd = new_instancemethod(_snap.TIntPrIntPrVHI_IsEnd,None,TIntPrIntPrVHI)
TIntPrIntPrVHI.GetKey = new_instancemethod(_snap.TIntPrIntPrVHI_GetKey,None,TIntPrIntPrVHI)
TIntPrIntPrVHI.GetDat = new_instancemethod(_snap.TIntPrIntPrVHI_GetDat,None,TIntPrIntPrVHI)
TIntPrIntPrVHI_swigregister = _snap.TIntPrIntPrVHI_swigregister
TIntPrIntPrVHI_swigregister(TIntPrIntPrVHI)

class TIntTrIntHI(object):
    """Proxy of C++ THashKeyDatI<(TIntTr,TInt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TIntTr,TInt)> self) -> TIntTrIntHI
        __init__(THashKeyDatI<(TIntTr,TInt)> self, TIntTrIntHI _HashKeyDatI) -> TIntTrIntHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TIntTr,TInt > const &

        __init__(THashKeyDatI<(TIntTr,TInt)> self, THashKeyDatI< TTriple< TInt,TInt,TInt >,TInt >::THKeyDat const * _KeyDatI, THashKeyDatI< TTriple< TInt,TInt,TInt >,TInt >::THKeyDat const * _EndI) -> TIntTrIntHI

        Parameters:
            _KeyDatI: THashKeyDatI< TTriple< TInt,TInt,TInt >,TInt >::THKeyDat const *
            _EndI: THashKeyDatI< TTriple< TInt,TInt,TInt >,TInt >::THKeyDat const *

        """
        _snap.TIntTrIntHI_swiginit(self,_snap.new_TIntTrIntHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TIntTrIntHI self, TIntTrIntHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TIntTr,TInt > const &

        """
        return _snap.TIntTrIntHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TIntTrIntHI self, TIntTrIntHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TIntTr,TInt > const &

        """
        return _snap.TIntTrIntHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TIntTrIntHI self) -> THashKeyDatI< TTriple< TInt,TInt,TInt >,TInt >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TIntTr,TInt > const *

        """
        return _snap.TIntTrIntHI___ref__(self)

    def __call__(self):
        """
        __call__(TIntTrIntHI self) -> THashKeyDatI< TTriple< TInt,TInt,TInt >,TInt >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TIntTr,TInt > const *

        """
        return _snap.TIntTrIntHI___call__(self)

    def __deref__(self):
        """
        __deref__(TIntTrIntHI self) -> THashKeyDatI< TTriple< TInt,TInt,TInt >,TInt >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TIntTr,TInt > const *

        """
        return _snap.TIntTrIntHI___deref__(self)

    def Next(self):
        """
        Next(TIntTrIntHI self) -> TIntTrIntHI

        Parameters:
            self: THashKeyDatI< TIntTr,TInt > *

        """
        return _snap.TIntTrIntHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TIntTrIntHI self) -> bool

        Parameters:
            self: THashKeyDatI< TIntTr,TInt > const *

        """
        return _snap.TIntTrIntHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TIntTrIntHI self) -> bool

        Parameters:
            self: THashKeyDatI< TIntTr,TInt > const *

        """
        return _snap.TIntTrIntHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TIntTrIntHI self) -> TIntTr

        Parameters:
            self: THashKeyDatI< TIntTr,TInt > const *

        """
        return _snap.TIntTrIntHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TIntTrIntHI self) -> TInt
        GetDat(TIntTrIntHI self) -> TInt

        Parameters:
            self: THashKeyDatI< TIntTr,TInt > *

        """
        return _snap.TIntTrIntHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntTrIntHI
TIntTrIntHI.__eq__ = new_instancemethod(_snap.TIntTrIntHI___eq__,None,TIntTrIntHI)
TIntTrIntHI.__lt__ = new_instancemethod(_snap.TIntTrIntHI___lt__,None,TIntTrIntHI)
TIntTrIntHI.__ref__ = new_instancemethod(_snap.TIntTrIntHI___ref__,None,TIntTrIntHI)
TIntTrIntHI.__call__ = new_instancemethod(_snap.TIntTrIntHI___call__,None,TIntTrIntHI)
TIntTrIntHI.__deref__ = new_instancemethod(_snap.TIntTrIntHI___deref__,None,TIntTrIntHI)
TIntTrIntHI.Next = new_instancemethod(_snap.TIntTrIntHI_Next,None,TIntTrIntHI)
TIntTrIntHI.IsEmpty = new_instancemethod(_snap.TIntTrIntHI_IsEmpty,None,TIntTrIntHI)
TIntTrIntHI.IsEnd = new_instancemethod(_snap.TIntTrIntHI_IsEnd,None,TIntTrIntHI)
TIntTrIntHI.GetKey = new_instancemethod(_snap.TIntTrIntHI_GetKey,None,TIntTrIntHI)
TIntTrIntHI.GetDat = new_instancemethod(_snap.TIntTrIntHI_GetDat,None,TIntTrIntHI)
TIntTrIntHI_swigregister = _snap.TIntTrIntHI_swigregister
TIntTrIntHI_swigregister(TIntTrIntHI)

class TIntVIntHI(object):
    """Proxy of C++ THashKeyDatI<(TIntV,TInt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TIntV,TInt)> self) -> TIntVIntHI
        __init__(THashKeyDatI<(TIntV,TInt)> self, TIntVIntHI _HashKeyDatI) -> TIntVIntHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TIntV,TInt > const &

        __init__(THashKeyDatI<(TIntV,TInt)> self, THashKeyDatI< TVec< TInt,int >,TInt >::THKeyDat const * _KeyDatI, THashKeyDatI< TVec< TInt,int >,TInt >::THKeyDat const * _EndI) -> TIntVIntHI

        Parameters:
            _KeyDatI: THashKeyDatI< TVec< TInt,int >,TInt >::THKeyDat const *
            _EndI: THashKeyDatI< TVec< TInt,int >,TInt >::THKeyDat const *

        """
        _snap.TIntVIntHI_swiginit(self,_snap.new_TIntVIntHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TIntVIntHI self, TIntVIntHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TIntV,TInt > const &

        """
        return _snap.TIntVIntHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TIntVIntHI self, TIntVIntHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TIntV,TInt > const &

        """
        return _snap.TIntVIntHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TIntVIntHI self) -> THashKeyDatI< TVec< TInt,int >,TInt >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TIntV,TInt > const *

        """
        return _snap.TIntVIntHI___ref__(self)

    def __call__(self):
        """
        __call__(TIntVIntHI self) -> THashKeyDatI< TVec< TInt,int >,TInt >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TIntV,TInt > const *

        """
        return _snap.TIntVIntHI___call__(self)

    def __deref__(self):
        """
        __deref__(TIntVIntHI self) -> THashKeyDatI< TVec< TInt,int >,TInt >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TIntV,TInt > const *

        """
        return _snap.TIntVIntHI___deref__(self)

    def Next(self):
        """
        Next(TIntVIntHI self) -> TIntVIntHI

        Parameters:
            self: THashKeyDatI< TIntV,TInt > *

        """
        return _snap.TIntVIntHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TIntVIntHI self) -> bool

        Parameters:
            self: THashKeyDatI< TIntV,TInt > const *

        """
        return _snap.TIntVIntHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TIntVIntHI self) -> bool

        Parameters:
            self: THashKeyDatI< TIntV,TInt > const *

        """
        return _snap.TIntVIntHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TIntVIntHI self) -> TIntV

        Parameters:
            self: THashKeyDatI< TIntV,TInt > const *

        """
        return _snap.TIntVIntHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TIntVIntHI self) -> TInt
        GetDat(TIntVIntHI self) -> TInt

        Parameters:
            self: THashKeyDatI< TIntV,TInt > *

        """
        return _snap.TIntVIntHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntVIntHI
TIntVIntHI.__eq__ = new_instancemethod(_snap.TIntVIntHI___eq__,None,TIntVIntHI)
TIntVIntHI.__lt__ = new_instancemethod(_snap.TIntVIntHI___lt__,None,TIntVIntHI)
TIntVIntHI.__ref__ = new_instancemethod(_snap.TIntVIntHI___ref__,None,TIntVIntHI)
TIntVIntHI.__call__ = new_instancemethod(_snap.TIntVIntHI___call__,None,TIntVIntHI)
TIntVIntHI.__deref__ = new_instancemethod(_snap.TIntVIntHI___deref__,None,TIntVIntHI)
TIntVIntHI.Next = new_instancemethod(_snap.TIntVIntHI_Next,None,TIntVIntHI)
TIntVIntHI.IsEmpty = new_instancemethod(_snap.TIntVIntHI_IsEmpty,None,TIntVIntHI)
TIntVIntHI.IsEnd = new_instancemethod(_snap.TIntVIntHI_IsEnd,None,TIntVIntHI)
TIntVIntHI.GetKey = new_instancemethod(_snap.TIntVIntHI_GetKey,None,TIntVIntHI)
TIntVIntHI.GetDat = new_instancemethod(_snap.TIntVIntHI_GetDat,None,TIntVIntHI)
TIntVIntHI_swigregister = _snap.TIntVIntHI_swigregister
TIntVIntHI_swigregister(TIntVIntHI)

class TUIntHI(object):
    """Proxy of C++ THashKeyDatI<(TUInt,TUInt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TUInt,TUInt)> self) -> TUIntHI
        __init__(THashKeyDatI<(TUInt,TUInt)> self, TUIntHI _HashKeyDatI) -> TUIntHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TUInt,TUInt > const &

        __init__(THashKeyDatI<(TUInt,TUInt)> self, THashKeyDatI< TUInt,TUInt >::THKeyDat const * _KeyDatI, THashKeyDatI< TUInt,TUInt >::THKeyDat const * _EndI) -> TUIntHI

        Parameters:
            _KeyDatI: THashKeyDatI< TUInt,TUInt >::THKeyDat const *
            _EndI: THashKeyDatI< TUInt,TUInt >::THKeyDat const *

        """
        _snap.TUIntHI_swiginit(self,_snap.new_TUIntHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TUIntHI self, TUIntHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TUInt,TUInt > const &

        """
        return _snap.TUIntHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TUIntHI self, TUIntHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TUInt,TUInt > const &

        """
        return _snap.TUIntHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TUIntHI self) -> THashKeyDatI< TUInt,TUInt >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TUInt,TUInt > const *

        """
        return _snap.TUIntHI___ref__(self)

    def __call__(self):
        """
        __call__(TUIntHI self) -> THashKeyDatI< TUInt,TUInt >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TUInt,TUInt > const *

        """
        return _snap.TUIntHI___call__(self)

    def __deref__(self):
        """
        __deref__(TUIntHI self) -> THashKeyDatI< TUInt,TUInt >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TUInt,TUInt > const *

        """
        return _snap.TUIntHI___deref__(self)

    def Next(self):
        """
        Next(TUIntHI self) -> TUIntHI

        Parameters:
            self: THashKeyDatI< TUInt,TUInt > *

        """
        return _snap.TUIntHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TUIntHI self) -> bool

        Parameters:
            self: THashKeyDatI< TUInt,TUInt > const *

        """
        return _snap.TUIntHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TUIntHI self) -> bool

        Parameters:
            self: THashKeyDatI< TUInt,TUInt > const *

        """
        return _snap.TUIntHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TUIntHI self) -> TUInt

        Parameters:
            self: THashKeyDatI< TUInt,TUInt > const *

        """
        return _snap.TUIntHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TUIntHI self) -> TUInt
        GetDat(TUIntHI self) -> TUInt

        Parameters:
            self: THashKeyDatI< TUInt,TUInt > *

        """
        return _snap.TUIntHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TUIntHI
TUIntHI.__eq__ = new_instancemethod(_snap.TUIntHI___eq__,None,TUIntHI)
TUIntHI.__lt__ = new_instancemethod(_snap.TUIntHI___lt__,None,TUIntHI)
TUIntHI.__ref__ = new_instancemethod(_snap.TUIntHI___ref__,None,TUIntHI)
TUIntHI.__call__ = new_instancemethod(_snap.TUIntHI___call__,None,TUIntHI)
TUIntHI.__deref__ = new_instancemethod(_snap.TUIntHI___deref__,None,TUIntHI)
TUIntHI.Next = new_instancemethod(_snap.TUIntHI_Next,None,TUIntHI)
TUIntHI.IsEmpty = new_instancemethod(_snap.TUIntHI_IsEmpty,None,TUIntHI)
TUIntHI.IsEnd = new_instancemethod(_snap.TUIntHI_IsEnd,None,TUIntHI)
TUIntHI.GetKey = new_instancemethod(_snap.TUIntHI_GetKey,None,TUIntHI)
TUIntHI.GetDat = new_instancemethod(_snap.TUIntHI_GetDat,None,TUIntHI)
TUIntHI_swigregister = _snap.TUIntHI_swigregister
TUIntHI_swigregister(TUIntHI)

class TIntTrFltHI(object):
    """Proxy of C++ THashKeyDatI<(TIntTr,TFlt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TIntTr,TFlt)> self) -> TIntTrFltHI
        __init__(THashKeyDatI<(TIntTr,TFlt)> self, TIntTrFltHI _HashKeyDatI) -> TIntTrFltHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TIntTr,TFlt > const &

        __init__(THashKeyDatI<(TIntTr,TFlt)> self, THashKeyDatI< TTriple< TInt,TInt,TInt >,TFlt >::THKeyDat const * _KeyDatI, THashKeyDatI< TTriple< TInt,TInt,TInt >,TFlt >::THKeyDat const * _EndI) -> TIntTrFltHI

        Parameters:
            _KeyDatI: THashKeyDatI< TTriple< TInt,TInt,TInt >,TFlt >::THKeyDat const *
            _EndI: THashKeyDatI< TTriple< TInt,TInt,TInt >,TFlt >::THKeyDat const *

        """
        _snap.TIntTrFltHI_swiginit(self,_snap.new_TIntTrFltHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TIntTrFltHI self, TIntTrFltHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TIntTr,TFlt > const &

        """
        return _snap.TIntTrFltHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TIntTrFltHI self, TIntTrFltHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TIntTr,TFlt > const &

        """
        return _snap.TIntTrFltHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TIntTrFltHI self) -> THashKeyDatI< TTriple< TInt,TInt,TInt >,TFlt >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TIntTr,TFlt > const *

        """
        return _snap.TIntTrFltHI___ref__(self)

    def __call__(self):
        """
        __call__(TIntTrFltHI self) -> THashKeyDatI< TTriple< TInt,TInt,TInt >,TFlt >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TIntTr,TFlt > const *

        """
        return _snap.TIntTrFltHI___call__(self)

    def __deref__(self):
        """
        __deref__(TIntTrFltHI self) -> THashKeyDatI< TTriple< TInt,TInt,TInt >,TFlt >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TIntTr,TFlt > const *

        """
        return _snap.TIntTrFltHI___deref__(self)

    def Next(self):
        """
        Next(TIntTrFltHI self) -> TIntTrFltHI

        Parameters:
            self: THashKeyDatI< TIntTr,TFlt > *

        """
        return _snap.TIntTrFltHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TIntTrFltHI self) -> bool

        Parameters:
            self: THashKeyDatI< TIntTr,TFlt > const *

        """
        return _snap.TIntTrFltHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TIntTrFltHI self) -> bool

        Parameters:
            self: THashKeyDatI< TIntTr,TFlt > const *

        """
        return _snap.TIntTrFltHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TIntTrFltHI self) -> TIntTr

        Parameters:
            self: THashKeyDatI< TIntTr,TFlt > const *

        """
        return _snap.TIntTrFltHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TIntTrFltHI self) -> TFlt
        GetDat(TIntTrFltHI self) -> TFlt

        Parameters:
            self: THashKeyDatI< TIntTr,TFlt > *

        """
        return _snap.TIntTrFltHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntTrFltHI
TIntTrFltHI.__eq__ = new_instancemethod(_snap.TIntTrFltHI___eq__,None,TIntTrFltHI)
TIntTrFltHI.__lt__ = new_instancemethod(_snap.TIntTrFltHI___lt__,None,TIntTrFltHI)
TIntTrFltHI.__ref__ = new_instancemethod(_snap.TIntTrFltHI___ref__,None,TIntTrFltHI)
TIntTrFltHI.__call__ = new_instancemethod(_snap.TIntTrFltHI___call__,None,TIntTrFltHI)
TIntTrFltHI.__deref__ = new_instancemethod(_snap.TIntTrFltHI___deref__,None,TIntTrFltHI)
TIntTrFltHI.Next = new_instancemethod(_snap.TIntTrFltHI_Next,None,TIntTrFltHI)
TIntTrFltHI.IsEmpty = new_instancemethod(_snap.TIntTrFltHI_IsEmpty,None,TIntTrFltHI)
TIntTrFltHI.IsEnd = new_instancemethod(_snap.TIntTrFltHI_IsEnd,None,TIntTrFltHI)
TIntTrFltHI.GetKey = new_instancemethod(_snap.TIntTrFltHI_GetKey,None,TIntTrFltHI)
TIntTrFltHI.GetDat = new_instancemethod(_snap.TIntTrFltHI_GetDat,None,TIntTrFltHI)
TIntTrFltHI_swigregister = _snap.TIntTrFltHI_swigregister
TIntTrFltHI_swigregister(TIntTrFltHI)

class TIntPrStrHI(object):
    """Proxy of C++ THashKeyDatI<(TIntPr,TStr)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TIntPr,TStr)> self) -> TIntPrStrHI
        __init__(THashKeyDatI<(TIntPr,TStr)> self, TIntPrStrHI _HashKeyDatI) -> TIntPrStrHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TIntPr,TStr > const &

        __init__(THashKeyDatI<(TIntPr,TStr)> self, THashKeyDatI< TPair< TInt,TInt >,TStr >::THKeyDat const * _KeyDatI, THashKeyDatI< TPair< TInt,TInt >,TStr >::THKeyDat const * _EndI) -> TIntPrStrHI

        Parameters:
            _KeyDatI: THashKeyDatI< TPair< TInt,TInt >,TStr >::THKeyDat const *
            _EndI: THashKeyDatI< TPair< TInt,TInt >,TStr >::THKeyDat const *

        """
        _snap.TIntPrStrHI_swiginit(self,_snap.new_TIntPrStrHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TIntPrStrHI self, TIntPrStrHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TIntPr,TStr > const &

        """
        return _snap.TIntPrStrHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TIntPrStrHI self, TIntPrStrHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TIntPr,TStr > const &

        """
        return _snap.TIntPrStrHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TIntPrStrHI self) -> THashKeyDatI< TPair< TInt,TInt >,TStr >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TIntPr,TStr > const *

        """
        return _snap.TIntPrStrHI___ref__(self)

    def __call__(self):
        """
        __call__(TIntPrStrHI self) -> THashKeyDatI< TPair< TInt,TInt >,TStr >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TIntPr,TStr > const *

        """
        return _snap.TIntPrStrHI___call__(self)

    def __deref__(self):
        """
        __deref__(TIntPrStrHI self) -> THashKeyDatI< TPair< TInt,TInt >,TStr >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TIntPr,TStr > const *

        """
        return _snap.TIntPrStrHI___deref__(self)

    def Next(self):
        """
        Next(TIntPrStrHI self) -> TIntPrStrHI

        Parameters:
            self: THashKeyDatI< TIntPr,TStr > *

        """
        return _snap.TIntPrStrHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TIntPrStrHI self) -> bool

        Parameters:
            self: THashKeyDatI< TIntPr,TStr > const *

        """
        return _snap.TIntPrStrHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TIntPrStrHI self) -> bool

        Parameters:
            self: THashKeyDatI< TIntPr,TStr > const *

        """
        return _snap.TIntPrStrHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TIntPrStrHI self) -> TIntPr

        Parameters:
            self: THashKeyDatI< TIntPr,TStr > const *

        """
        return _snap.TIntPrStrHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TIntPrStrHI self) -> TStr
        GetDat(TIntPrStrHI self) -> TStr

        Parameters:
            self: THashKeyDatI< TIntPr,TStr > *

        """
        return _snap.TIntPrStrHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntPrStrHI
TIntPrStrHI.__eq__ = new_instancemethod(_snap.TIntPrStrHI___eq__,None,TIntPrStrHI)
TIntPrStrHI.__lt__ = new_instancemethod(_snap.TIntPrStrHI___lt__,None,TIntPrStrHI)
TIntPrStrHI.__ref__ = new_instancemethod(_snap.TIntPrStrHI___ref__,None,TIntPrStrHI)
TIntPrStrHI.__call__ = new_instancemethod(_snap.TIntPrStrHI___call__,None,TIntPrStrHI)
TIntPrStrHI.__deref__ = new_instancemethod(_snap.TIntPrStrHI___deref__,None,TIntPrStrHI)
TIntPrStrHI.Next = new_instancemethod(_snap.TIntPrStrHI_Next,None,TIntPrStrHI)
TIntPrStrHI.IsEmpty = new_instancemethod(_snap.TIntPrStrHI_IsEmpty,None,TIntPrStrHI)
TIntPrStrHI.IsEnd = new_instancemethod(_snap.TIntPrStrHI_IsEnd,None,TIntPrStrHI)
TIntPrStrHI.GetKey = new_instancemethod(_snap.TIntPrStrHI_GetKey,None,TIntPrStrHI)
TIntPrStrHI.GetDat = new_instancemethod(_snap.TIntPrStrHI_GetDat,None,TIntPrStrHI)
TIntPrStrHI_swigregister = _snap.TIntPrStrHI_swigregister
TIntPrStrHI_swigregister(TIntPrStrHI)

class TIntPrStrVHI(object):
    """Proxy of C++ THashKeyDatI<(TIntPr,TStrV)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TIntPr,TStrV)> self) -> TIntPrStrVHI
        __init__(THashKeyDatI<(TIntPr,TStrV)> self, TIntPrStrVHI _HashKeyDatI) -> TIntPrStrVHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TIntPr,TStrV > const &

        __init__(THashKeyDatI<(TIntPr,TStrV)> self, THashKeyDatI< TPair< TInt,TInt >,TVec< TStr,int > >::THKeyDat const * _KeyDatI, THashKeyDatI< TPair< TInt,TInt >,TVec< TStr,int > >::THKeyDat const * _EndI) -> TIntPrStrVHI

        Parameters:
            _KeyDatI: THashKeyDatI< TPair< TInt,TInt >,TVec< TStr,int > >::THKeyDat const *
            _EndI: THashKeyDatI< TPair< TInt,TInt >,TVec< TStr,int > >::THKeyDat const *

        """
        _snap.TIntPrStrVHI_swiginit(self,_snap.new_TIntPrStrVHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TIntPrStrVHI self, TIntPrStrVHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TIntPr,TStrV > const &

        """
        return _snap.TIntPrStrVHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TIntPrStrVHI self, TIntPrStrVHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TIntPr,TStrV > const &

        """
        return _snap.TIntPrStrVHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TIntPrStrVHI self) -> THashKeyDatI< TPair< TInt,TInt >,TVec< TStr,int > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TIntPr,TStrV > const *

        """
        return _snap.TIntPrStrVHI___ref__(self)

    def __call__(self):
        """
        __call__(TIntPrStrVHI self) -> THashKeyDatI< TPair< TInt,TInt >,TVec< TStr,int > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TIntPr,TStrV > const *

        """
        return _snap.TIntPrStrVHI___call__(self)

    def __deref__(self):
        """
        __deref__(TIntPrStrVHI self) -> THashKeyDatI< TPair< TInt,TInt >,TVec< TStr,int > >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TIntPr,TStrV > const *

        """
        return _snap.TIntPrStrVHI___deref__(self)

    def Next(self):
        """
        Next(TIntPrStrVHI self) -> TIntPrStrVHI

        Parameters:
            self: THashKeyDatI< TIntPr,TStrV > *

        """
        return _snap.TIntPrStrVHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TIntPrStrVHI self) -> bool

        Parameters:
            self: THashKeyDatI< TIntPr,TStrV > const *

        """
        return _snap.TIntPrStrVHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TIntPrStrVHI self) -> bool

        Parameters:
            self: THashKeyDatI< TIntPr,TStrV > const *

        """
        return _snap.TIntPrStrVHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TIntPrStrVHI self) -> TIntPr

        Parameters:
            self: THashKeyDatI< TIntPr,TStrV > const *

        """
        return _snap.TIntPrStrVHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TIntPrStrVHI self) -> TStrV
        GetDat(TIntPrStrVHI self) -> TStrV

        Parameters:
            self: THashKeyDatI< TIntPr,TStrV > *

        """
        return _snap.TIntPrStrVHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntPrStrVHI
TIntPrStrVHI.__eq__ = new_instancemethod(_snap.TIntPrStrVHI___eq__,None,TIntPrStrVHI)
TIntPrStrVHI.__lt__ = new_instancemethod(_snap.TIntPrStrVHI___lt__,None,TIntPrStrVHI)
TIntPrStrVHI.__ref__ = new_instancemethod(_snap.TIntPrStrVHI___ref__,None,TIntPrStrVHI)
TIntPrStrVHI.__call__ = new_instancemethod(_snap.TIntPrStrVHI___call__,None,TIntPrStrVHI)
TIntPrStrVHI.__deref__ = new_instancemethod(_snap.TIntPrStrVHI___deref__,None,TIntPrStrVHI)
TIntPrStrVHI.Next = new_instancemethod(_snap.TIntPrStrVHI_Next,None,TIntPrStrVHI)
TIntPrStrVHI.IsEmpty = new_instancemethod(_snap.TIntPrStrVHI_IsEmpty,None,TIntPrStrVHI)
TIntPrStrVHI.IsEnd = new_instancemethod(_snap.TIntPrStrVHI_IsEnd,None,TIntPrStrVHI)
TIntPrStrVHI.GetKey = new_instancemethod(_snap.TIntPrStrVHI_GetKey,None,TIntPrStrVHI)
TIntPrStrVHI.GetDat = new_instancemethod(_snap.TIntPrStrVHI_GetDat,None,TIntPrStrVHI)
TIntPrStrVHI_swigregister = _snap.TIntPrStrVHI_swigregister
TIntPrStrVHI_swigregister(TIntPrStrVHI)

class TIntStrPrIntHI(object):
    """Proxy of C++ THashKeyDatI<(TIntStrPr,TInt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TIntStrPr,TInt)> self) -> TIntStrPrIntHI
        __init__(THashKeyDatI<(TIntStrPr,TInt)> self, TIntStrPrIntHI _HashKeyDatI) -> TIntStrPrIntHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TIntStrPr,TInt > const &

        __init__(THashKeyDatI<(TIntStrPr,TInt)> self, THashKeyDatI< TPair< TInt,TStr >,TInt >::THKeyDat const * _KeyDatI, THashKeyDatI< TPair< TInt,TStr >,TInt >::THKeyDat const * _EndI) -> TIntStrPrIntHI

        Parameters:
            _KeyDatI: THashKeyDatI< TPair< TInt,TStr >,TInt >::THKeyDat const *
            _EndI: THashKeyDatI< TPair< TInt,TStr >,TInt >::THKeyDat const *

        """
        _snap.TIntStrPrIntHI_swiginit(self,_snap.new_TIntStrPrIntHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TIntStrPrIntHI self, TIntStrPrIntHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TIntStrPr,TInt > const &

        """
        return _snap.TIntStrPrIntHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TIntStrPrIntHI self, TIntStrPrIntHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TIntStrPr,TInt > const &

        """
        return _snap.TIntStrPrIntHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TIntStrPrIntHI self) -> THashKeyDatI< TPair< TInt,TStr >,TInt >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TIntStrPr,TInt > const *

        """
        return _snap.TIntStrPrIntHI___ref__(self)

    def __call__(self):
        """
        __call__(TIntStrPrIntHI self) -> THashKeyDatI< TPair< TInt,TStr >,TInt >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TIntStrPr,TInt > const *

        """
        return _snap.TIntStrPrIntHI___call__(self)

    def __deref__(self):
        """
        __deref__(TIntStrPrIntHI self) -> THashKeyDatI< TPair< TInt,TStr >,TInt >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TIntStrPr,TInt > const *

        """
        return _snap.TIntStrPrIntHI___deref__(self)

    def Next(self):
        """
        Next(TIntStrPrIntHI self) -> TIntStrPrIntHI

        Parameters:
            self: THashKeyDatI< TIntStrPr,TInt > *

        """
        return _snap.TIntStrPrIntHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TIntStrPrIntHI self) -> bool

        Parameters:
            self: THashKeyDatI< TIntStrPr,TInt > const *

        """
        return _snap.TIntStrPrIntHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TIntStrPrIntHI self) -> bool

        Parameters:
            self: THashKeyDatI< TIntStrPr,TInt > const *

        """
        return _snap.TIntStrPrIntHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TIntStrPrIntHI self) -> TIntStrPr

        Parameters:
            self: THashKeyDatI< TIntStrPr,TInt > const *

        """
        return _snap.TIntStrPrIntHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TIntStrPrIntHI self) -> TInt
        GetDat(TIntStrPrIntHI self) -> TInt

        Parameters:
            self: THashKeyDatI< TIntStrPr,TInt > *

        """
        return _snap.TIntStrPrIntHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntStrPrIntHI
TIntStrPrIntHI.__eq__ = new_instancemethod(_snap.TIntStrPrIntHI___eq__,None,TIntStrPrIntHI)
TIntStrPrIntHI.__lt__ = new_instancemethod(_snap.TIntStrPrIntHI___lt__,None,TIntStrPrIntHI)
TIntStrPrIntHI.__ref__ = new_instancemethod(_snap.TIntStrPrIntHI___ref__,None,TIntStrPrIntHI)
TIntStrPrIntHI.__call__ = new_instancemethod(_snap.TIntStrPrIntHI___call__,None,TIntStrPrIntHI)
TIntStrPrIntHI.__deref__ = new_instancemethod(_snap.TIntStrPrIntHI___deref__,None,TIntStrPrIntHI)
TIntStrPrIntHI.Next = new_instancemethod(_snap.TIntStrPrIntHI_Next,None,TIntStrPrIntHI)
TIntStrPrIntHI.IsEmpty = new_instancemethod(_snap.TIntStrPrIntHI_IsEmpty,None,TIntStrPrIntHI)
TIntStrPrIntHI.IsEnd = new_instancemethod(_snap.TIntStrPrIntHI_IsEnd,None,TIntStrPrIntHI)
TIntStrPrIntHI.GetKey = new_instancemethod(_snap.TIntStrPrIntHI_GetKey,None,TIntStrPrIntHI)
TIntStrPrIntHI.GetDat = new_instancemethod(_snap.TIntStrPrIntHI_GetDat,None,TIntStrPrIntHI)
TIntStrPrIntHI_swigregister = _snap.TIntStrPrIntHI_swigregister
TIntStrPrIntHI_swigregister(TIntStrPrIntHI)

class TFltFltHI(object):
    """Proxy of C++ THashKeyDatI<(TFlt,TFlt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TFlt,TFlt)> self) -> TFltFltHI
        __init__(THashKeyDatI<(TFlt,TFlt)> self, TFltFltHI _HashKeyDatI) -> TFltFltHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TFlt,TFlt > const &

        __init__(THashKeyDatI<(TFlt,TFlt)> self, THashKeyDatI< TFlt,TFlt >::THKeyDat const * _KeyDatI, THashKeyDatI< TFlt,TFlt >::THKeyDat const * _EndI) -> TFltFltHI

        Parameters:
            _KeyDatI: THashKeyDatI< TFlt,TFlt >::THKeyDat const *
            _EndI: THashKeyDatI< TFlt,TFlt >::THKeyDat const *

        """
        _snap.TFltFltHI_swiginit(self,_snap.new_TFltFltHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TFltFltHI self, TFltFltHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TFlt,TFlt > const &

        """
        return _snap.TFltFltHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TFltFltHI self, TFltFltHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TFlt,TFlt > const &

        """
        return _snap.TFltFltHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TFltFltHI self) -> THashKeyDatI< TFlt,TFlt >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TFlt,TFlt > const *

        """
        return _snap.TFltFltHI___ref__(self)

    def __call__(self):
        """
        __call__(TFltFltHI self) -> THashKeyDatI< TFlt,TFlt >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TFlt,TFlt > const *

        """
        return _snap.TFltFltHI___call__(self)

    def __deref__(self):
        """
        __deref__(TFltFltHI self) -> THashKeyDatI< TFlt,TFlt >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TFlt,TFlt > const *

        """
        return _snap.TFltFltHI___deref__(self)

    def Next(self):
        """
        Next(TFltFltHI self) -> TFltFltHI

        Parameters:
            self: THashKeyDatI< TFlt,TFlt > *

        """
        return _snap.TFltFltHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TFltFltHI self) -> bool

        Parameters:
            self: THashKeyDatI< TFlt,TFlt > const *

        """
        return _snap.TFltFltHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TFltFltHI self) -> bool

        Parameters:
            self: THashKeyDatI< TFlt,TFlt > const *

        """
        return _snap.TFltFltHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TFltFltHI self) -> TFlt

        Parameters:
            self: THashKeyDatI< TFlt,TFlt > const *

        """
        return _snap.TFltFltHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TFltFltHI self) -> TFlt
        GetDat(TFltFltHI self) -> TFlt

        Parameters:
            self: THashKeyDatI< TFlt,TFlt > *

        """
        return _snap.TFltFltHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TFltFltHI
TFltFltHI.__eq__ = new_instancemethod(_snap.TFltFltHI___eq__,None,TFltFltHI)
TFltFltHI.__lt__ = new_instancemethod(_snap.TFltFltHI___lt__,None,TFltFltHI)
TFltFltHI.__ref__ = new_instancemethod(_snap.TFltFltHI___ref__,None,TFltFltHI)
TFltFltHI.__call__ = new_instancemethod(_snap.TFltFltHI___call__,None,TFltFltHI)
TFltFltHI.__deref__ = new_instancemethod(_snap.TFltFltHI___deref__,None,TFltFltHI)
TFltFltHI.Next = new_instancemethod(_snap.TFltFltHI_Next,None,TFltFltHI)
TFltFltHI.IsEmpty = new_instancemethod(_snap.TFltFltHI_IsEmpty,None,TFltFltHI)
TFltFltHI.IsEnd = new_instancemethod(_snap.TFltFltHI_IsEnd,None,TFltFltHI)
TFltFltHI.GetKey = new_instancemethod(_snap.TFltFltHI_GetKey,None,TFltFltHI)
TFltFltHI.GetDat = new_instancemethod(_snap.TFltFltHI_GetDat,None,TFltFltHI)
TFltFltHI_swigregister = _snap.TFltFltHI_swigregister
TFltFltHI_swigregister(TFltFltHI)

class TStrHI(object):
    """Proxy of C++ THashKeyDatI<(TStr,TInt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TStr,TInt)> self) -> TStrHI
        __init__(THashKeyDatI<(TStr,TInt)> self, TStrHI _HashKeyDatI) -> TStrHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TStr,TInt > const &

        __init__(THashKeyDatI<(TStr,TInt)> self, THashKeyDatI< TStr,TInt >::THKeyDat const * _KeyDatI, THashKeyDatI< TStr,TInt >::THKeyDat const * _EndI) -> TStrHI

        Parameters:
            _KeyDatI: THashKeyDatI< TStr,TInt >::THKeyDat const *
            _EndI: THashKeyDatI< TStr,TInt >::THKeyDat const *

        """
        _snap.TStrHI_swiginit(self,_snap.new_TStrHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TStrHI self, TStrHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStr,TInt > const &

        """
        return _snap.TStrHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TStrHI self, TStrHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStr,TInt > const &

        """
        return _snap.TStrHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TStrHI self) -> THashKeyDatI< TStr,TInt >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStr,TInt > const *

        """
        return _snap.TStrHI___ref__(self)

    def __call__(self):
        """
        __call__(TStrHI self) -> THashKeyDatI< TStr,TInt >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStr,TInt > const *

        """
        return _snap.TStrHI___call__(self)

    def __deref__(self):
        """
        __deref__(TStrHI self) -> THashKeyDatI< TStr,TInt >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TStr,TInt > const *

        """
        return _snap.TStrHI___deref__(self)

    def Next(self):
        """
        Next(TStrHI self) -> TStrHI

        Parameters:
            self: THashKeyDatI< TStr,TInt > *

        """
        return _snap.TStrHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TStrHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStr,TInt > const *

        """
        return _snap.TStrHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TStrHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStr,TInt > const *

        """
        return _snap.TStrHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TStrHI self) -> TStr

        Parameters:
            self: THashKeyDatI< TStr,TInt > const *

        """
        return _snap.TStrHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TStrHI self) -> TInt
        GetDat(TStrHI self) -> TInt

        Parameters:
            self: THashKeyDatI< TStr,TInt > *

        """
        return _snap.TStrHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrHI
TStrHI.__eq__ = new_instancemethod(_snap.TStrHI___eq__,None,TStrHI)
TStrHI.__lt__ = new_instancemethod(_snap.TStrHI___lt__,None,TStrHI)
TStrHI.__ref__ = new_instancemethod(_snap.TStrHI___ref__,None,TStrHI)
TStrHI.__call__ = new_instancemethod(_snap.TStrHI___call__,None,TStrHI)
TStrHI.__deref__ = new_instancemethod(_snap.TStrHI___deref__,None,TStrHI)
TStrHI.Next = new_instancemethod(_snap.TStrHI_Next,None,TStrHI)
TStrHI.IsEmpty = new_instancemethod(_snap.TStrHI_IsEmpty,None,TStrHI)
TStrHI.IsEnd = new_instancemethod(_snap.TStrHI_IsEnd,None,TStrHI)
TStrHI.GetKey = new_instancemethod(_snap.TStrHI_GetKey,None,TStrHI)
TStrHI.GetDat = new_instancemethod(_snap.TStrHI_GetDat,None,TStrHI)
TStrHI_swigregister = _snap.TStrHI_swigregister
TStrHI_swigregister(TStrHI)

class TStrBoolHI(object):
    """Proxy of C++ THashKeyDatI<(TStr,TBool)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TStr,TBool)> self) -> TStrBoolHI
        __init__(THashKeyDatI<(TStr,TBool)> self, TStrBoolHI _HashKeyDatI) -> TStrBoolHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TStr,TBool > const &

        __init__(THashKeyDatI<(TStr,TBool)> self, THashKeyDatI< TStr,TBool >::THKeyDat const * _KeyDatI, THashKeyDatI< TStr,TBool >::THKeyDat const * _EndI) -> TStrBoolHI

        Parameters:
            _KeyDatI: THashKeyDatI< TStr,TBool >::THKeyDat const *
            _EndI: THashKeyDatI< TStr,TBool >::THKeyDat const *

        """
        _snap.TStrBoolHI_swiginit(self,_snap.new_TStrBoolHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TStrBoolHI self, TStrBoolHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStr,TBool > const &

        """
        return _snap.TStrBoolHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TStrBoolHI self, TStrBoolHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStr,TBool > const &

        """
        return _snap.TStrBoolHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TStrBoolHI self) -> THashKeyDatI< TStr,TBool >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStr,TBool > const *

        """
        return _snap.TStrBoolHI___ref__(self)

    def __call__(self):
        """
        __call__(TStrBoolHI self) -> THashKeyDatI< TStr,TBool >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStr,TBool > const *

        """
        return _snap.TStrBoolHI___call__(self)

    def __deref__(self):
        """
        __deref__(TStrBoolHI self) -> THashKeyDatI< TStr,TBool >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TStr,TBool > const *

        """
        return _snap.TStrBoolHI___deref__(self)

    def Next(self):
        """
        Next(TStrBoolHI self) -> TStrBoolHI

        Parameters:
            self: THashKeyDatI< TStr,TBool > *

        """
        return _snap.TStrBoolHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TStrBoolHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStr,TBool > const *

        """
        return _snap.TStrBoolHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TStrBoolHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStr,TBool > const *

        """
        return _snap.TStrBoolHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TStrBoolHI self) -> TStr

        Parameters:
            self: THashKeyDatI< TStr,TBool > const *

        """
        return _snap.TStrBoolHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TStrBoolHI self) -> TBool
        GetDat(TStrBoolHI self) -> TBool

        Parameters:
            self: THashKeyDatI< TStr,TBool > *

        """
        return _snap.TStrBoolHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrBoolHI
TStrBoolHI.__eq__ = new_instancemethod(_snap.TStrBoolHI___eq__,None,TStrBoolHI)
TStrBoolHI.__lt__ = new_instancemethod(_snap.TStrBoolHI___lt__,None,TStrBoolHI)
TStrBoolHI.__ref__ = new_instancemethod(_snap.TStrBoolHI___ref__,None,TStrBoolHI)
TStrBoolHI.__call__ = new_instancemethod(_snap.TStrBoolHI___call__,None,TStrBoolHI)
TStrBoolHI.__deref__ = new_instancemethod(_snap.TStrBoolHI___deref__,None,TStrBoolHI)
TStrBoolHI.Next = new_instancemethod(_snap.TStrBoolHI_Next,None,TStrBoolHI)
TStrBoolHI.IsEmpty = new_instancemethod(_snap.TStrBoolHI_IsEmpty,None,TStrBoolHI)
TStrBoolHI.IsEnd = new_instancemethod(_snap.TStrBoolHI_IsEnd,None,TStrBoolHI)
TStrBoolHI.GetKey = new_instancemethod(_snap.TStrBoolHI_GetKey,None,TStrBoolHI)
TStrBoolHI.GetDat = new_instancemethod(_snap.TStrBoolHI_GetDat,None,TStrBoolHI)
TStrBoolHI_swigregister = _snap.TStrBoolHI_swigregister
TStrBoolHI_swigregister(TStrBoolHI)

class TStrIntHI(object):
    """Proxy of C++ THashKeyDatI<(TStr,TInt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TStr,TInt)> self) -> TStrIntHI
        __init__(THashKeyDatI<(TStr,TInt)> self, TStrHI _HashKeyDatI) -> TStrIntHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TStr,TInt > const &

        __init__(THashKeyDatI<(TStr,TInt)> self, THashKeyDatI< TStr,TInt >::THKeyDat const * _KeyDatI, THashKeyDatI< TStr,TInt >::THKeyDat const * _EndI) -> TStrIntHI

        Parameters:
            _KeyDatI: THashKeyDatI< TStr,TInt >::THKeyDat const *
            _EndI: THashKeyDatI< TStr,TInt >::THKeyDat const *

        """
        _snap.TStrIntHI_swiginit(self,_snap.new_TStrIntHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TStrIntHI self, TStrHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStr,TInt > const &

        """
        return _snap.TStrIntHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TStrIntHI self, TStrHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStr,TInt > const &

        """
        return _snap.TStrIntHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TStrIntHI self) -> THashKeyDatI< TStr,TInt >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStr,TInt > const *

        """
        return _snap.TStrIntHI___ref__(self)

    def __call__(self):
        """
        __call__(TStrIntHI self) -> THashKeyDatI< TStr,TInt >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStr,TInt > const *

        """
        return _snap.TStrIntHI___call__(self)

    def __deref__(self):
        """
        __deref__(TStrIntHI self) -> THashKeyDatI< TStr,TInt >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TStr,TInt > const *

        """
        return _snap.TStrIntHI___deref__(self)

    def Next(self):
        """
        Next(TStrIntHI self) -> TStrHI

        Parameters:
            self: THashKeyDatI< TStr,TInt > *

        """
        return _snap.TStrIntHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TStrIntHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStr,TInt > const *

        """
        return _snap.TStrIntHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TStrIntHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStr,TInt > const *

        """
        return _snap.TStrIntHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TStrIntHI self) -> TStr

        Parameters:
            self: THashKeyDatI< TStr,TInt > const *

        """
        return _snap.TStrIntHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TStrIntHI self) -> TInt
        GetDat(TStrIntHI self) -> TInt

        Parameters:
            self: THashKeyDatI< TStr,TInt > *

        """
        return _snap.TStrIntHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrIntHI
TStrIntHI.__eq__ = new_instancemethod(_snap.TStrIntHI___eq__,None,TStrIntHI)
TStrIntHI.__lt__ = new_instancemethod(_snap.TStrIntHI___lt__,None,TStrIntHI)
TStrIntHI.__ref__ = new_instancemethod(_snap.TStrIntHI___ref__,None,TStrIntHI)
TStrIntHI.__call__ = new_instancemethod(_snap.TStrIntHI___call__,None,TStrIntHI)
TStrIntHI.__deref__ = new_instancemethod(_snap.TStrIntHI___deref__,None,TStrIntHI)
TStrIntHI.Next = new_instancemethod(_snap.TStrIntHI_Next,None,TStrIntHI)
TStrIntHI.IsEmpty = new_instancemethod(_snap.TStrIntHI_IsEmpty,None,TStrIntHI)
TStrIntHI.IsEnd = new_instancemethod(_snap.TStrIntHI_IsEnd,None,TStrIntHI)
TStrIntHI.GetKey = new_instancemethod(_snap.TStrIntHI_GetKey,None,TStrIntHI)
TStrIntHI.GetDat = new_instancemethod(_snap.TStrIntHI_GetDat,None,TStrIntHI)
TStrIntHI_swigregister = _snap.TStrIntHI_swigregister
TStrIntHI_swigregister(TStrIntHI)

class TStrIntPrHI(object):
    """Proxy of C++ THashKeyDatI<(TStr,TIntPr)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TStr,TIntPr)> self) -> TStrIntPrHI
        __init__(THashKeyDatI<(TStr,TIntPr)> self, TStrIntPrHI _HashKeyDatI) -> TStrIntPrHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TStr,TIntPr > const &

        __init__(THashKeyDatI<(TStr,TIntPr)> self, THashKeyDatI< TStr,TPair< TInt,TInt > >::THKeyDat const * _KeyDatI, THashKeyDatI< TStr,TPair< TInt,TInt > >::THKeyDat const * _EndI) -> TStrIntPrHI

        Parameters:
            _KeyDatI: THashKeyDatI< TStr,TPair< TInt,TInt > >::THKeyDat const *
            _EndI: THashKeyDatI< TStr,TPair< TInt,TInt > >::THKeyDat const *

        """
        _snap.TStrIntPrHI_swiginit(self,_snap.new_TStrIntPrHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TStrIntPrHI self, TStrIntPrHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStr,TIntPr > const &

        """
        return _snap.TStrIntPrHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TStrIntPrHI self, TStrIntPrHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStr,TIntPr > const &

        """
        return _snap.TStrIntPrHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TStrIntPrHI self) -> THashKeyDatI< TStr,TPair< TInt,TInt > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStr,TIntPr > const *

        """
        return _snap.TStrIntPrHI___ref__(self)

    def __call__(self):
        """
        __call__(TStrIntPrHI self) -> THashKeyDatI< TStr,TPair< TInt,TInt > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStr,TIntPr > const *

        """
        return _snap.TStrIntPrHI___call__(self)

    def __deref__(self):
        """
        __deref__(TStrIntPrHI self) -> THashKeyDatI< TStr,TPair< TInt,TInt > >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TStr,TIntPr > const *

        """
        return _snap.TStrIntPrHI___deref__(self)

    def Next(self):
        """
        Next(TStrIntPrHI self) -> TStrIntPrHI

        Parameters:
            self: THashKeyDatI< TStr,TIntPr > *

        """
        return _snap.TStrIntPrHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TStrIntPrHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStr,TIntPr > const *

        """
        return _snap.TStrIntPrHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TStrIntPrHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStr,TIntPr > const *

        """
        return _snap.TStrIntPrHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TStrIntPrHI self) -> TStr

        Parameters:
            self: THashKeyDatI< TStr,TIntPr > const *

        """
        return _snap.TStrIntPrHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TStrIntPrHI self) -> TIntPr
        GetDat(TStrIntPrHI self) -> TIntPr

        Parameters:
            self: THashKeyDatI< TStr,TIntPr > *

        """
        return _snap.TStrIntPrHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrIntPrHI
TStrIntPrHI.__eq__ = new_instancemethod(_snap.TStrIntPrHI___eq__,None,TStrIntPrHI)
TStrIntPrHI.__lt__ = new_instancemethod(_snap.TStrIntPrHI___lt__,None,TStrIntPrHI)
TStrIntPrHI.__ref__ = new_instancemethod(_snap.TStrIntPrHI___ref__,None,TStrIntPrHI)
TStrIntPrHI.__call__ = new_instancemethod(_snap.TStrIntPrHI___call__,None,TStrIntPrHI)
TStrIntPrHI.__deref__ = new_instancemethod(_snap.TStrIntPrHI___deref__,None,TStrIntPrHI)
TStrIntPrHI.Next = new_instancemethod(_snap.TStrIntPrHI_Next,None,TStrIntPrHI)
TStrIntPrHI.IsEmpty = new_instancemethod(_snap.TStrIntPrHI_IsEmpty,None,TStrIntPrHI)
TStrIntPrHI.IsEnd = new_instancemethod(_snap.TStrIntPrHI_IsEnd,None,TStrIntPrHI)
TStrIntPrHI.GetKey = new_instancemethod(_snap.TStrIntPrHI_GetKey,None,TStrIntPrHI)
TStrIntPrHI.GetDat = new_instancemethod(_snap.TStrIntPrHI_GetDat,None,TStrIntPrHI)
TStrIntPrHI_swigregister = _snap.TStrIntPrHI_swigregister
TStrIntPrHI_swigregister(TStrIntPrHI)

class TStrIntVHI(object):
    """Proxy of C++ THashKeyDatI<(TStr,TIntV)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TStr,TIntV)> self) -> TStrIntVHI
        __init__(THashKeyDatI<(TStr,TIntV)> self, TStrIntVHI _HashKeyDatI) -> TStrIntVHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TStr,TIntV > const &

        __init__(THashKeyDatI<(TStr,TIntV)> self, THashKeyDatI< TStr,TVec< TInt,int > >::THKeyDat const * _KeyDatI, THashKeyDatI< TStr,TVec< TInt,int > >::THKeyDat const * _EndI) -> TStrIntVHI

        Parameters:
            _KeyDatI: THashKeyDatI< TStr,TVec< TInt,int > >::THKeyDat const *
            _EndI: THashKeyDatI< TStr,TVec< TInt,int > >::THKeyDat const *

        """
        _snap.TStrIntVHI_swiginit(self,_snap.new_TStrIntVHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TStrIntVHI self, TStrIntVHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStr,TIntV > const &

        """
        return _snap.TStrIntVHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TStrIntVHI self, TStrIntVHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStr,TIntV > const &

        """
        return _snap.TStrIntVHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TStrIntVHI self) -> THashKeyDatI< TStr,TVec< TInt,int > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStr,TIntV > const *

        """
        return _snap.TStrIntVHI___ref__(self)

    def __call__(self):
        """
        __call__(TStrIntVHI self) -> THashKeyDatI< TStr,TVec< TInt,int > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStr,TIntV > const *

        """
        return _snap.TStrIntVHI___call__(self)

    def __deref__(self):
        """
        __deref__(TStrIntVHI self) -> THashKeyDatI< TStr,TVec< TInt,int > >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TStr,TIntV > const *

        """
        return _snap.TStrIntVHI___deref__(self)

    def Next(self):
        """
        Next(TStrIntVHI self) -> TStrIntVHI

        Parameters:
            self: THashKeyDatI< TStr,TIntV > *

        """
        return _snap.TStrIntVHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TStrIntVHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStr,TIntV > const *

        """
        return _snap.TStrIntVHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TStrIntVHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStr,TIntV > const *

        """
        return _snap.TStrIntVHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TStrIntVHI self) -> TStr

        Parameters:
            self: THashKeyDatI< TStr,TIntV > const *

        """
        return _snap.TStrIntVHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TStrIntVHI self) -> TIntV
        GetDat(TStrIntVHI self) -> TIntV

        Parameters:
            self: THashKeyDatI< TStr,TIntV > *

        """
        return _snap.TStrIntVHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrIntVHI
TStrIntVHI.__eq__ = new_instancemethod(_snap.TStrIntVHI___eq__,None,TStrIntVHI)
TStrIntVHI.__lt__ = new_instancemethod(_snap.TStrIntVHI___lt__,None,TStrIntVHI)
TStrIntVHI.__ref__ = new_instancemethod(_snap.TStrIntVHI___ref__,None,TStrIntVHI)
TStrIntVHI.__call__ = new_instancemethod(_snap.TStrIntVHI___call__,None,TStrIntVHI)
TStrIntVHI.__deref__ = new_instancemethod(_snap.TStrIntVHI___deref__,None,TStrIntVHI)
TStrIntVHI.Next = new_instancemethod(_snap.TStrIntVHI_Next,None,TStrIntVHI)
TStrIntVHI.IsEmpty = new_instancemethod(_snap.TStrIntVHI_IsEmpty,None,TStrIntVHI)
TStrIntVHI.IsEnd = new_instancemethod(_snap.TStrIntVHI_IsEnd,None,TStrIntVHI)
TStrIntVHI.GetKey = new_instancemethod(_snap.TStrIntVHI_GetKey,None,TStrIntVHI)
TStrIntVHI.GetDat = new_instancemethod(_snap.TStrIntVHI_GetDat,None,TStrIntVHI)
TStrIntVHI_swigregister = _snap.TStrIntVHI_swigregister
TStrIntVHI_swigregister(TStrIntVHI)

class TStrUInt64HI(object):
    """Proxy of C++ THashKeyDatI<(TStr,TUInt64)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TStr,TUInt64)> self) -> TStrUInt64HI
        __init__(THashKeyDatI<(TStr,TUInt64)> self, TStrUInt64HI _HashKeyDatI) -> TStrUInt64HI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TStr,TUInt64 > const &

        __init__(THashKeyDatI<(TStr,TUInt64)> self, THashKeyDatI< TStr,TUInt64 >::THKeyDat const * _KeyDatI, THashKeyDatI< TStr,TUInt64 >::THKeyDat const * _EndI) -> TStrUInt64HI

        Parameters:
            _KeyDatI: THashKeyDatI< TStr,TUInt64 >::THKeyDat const *
            _EndI: THashKeyDatI< TStr,TUInt64 >::THKeyDat const *

        """
        _snap.TStrUInt64HI_swiginit(self,_snap.new_TStrUInt64HI(*args))
    def __eq__(self, *args):
        """
        __eq__(TStrUInt64HI self, TStrUInt64HI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStr,TUInt64 > const &

        """
        return _snap.TStrUInt64HI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TStrUInt64HI self, TStrUInt64HI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStr,TUInt64 > const &

        """
        return _snap.TStrUInt64HI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TStrUInt64HI self) -> THashKeyDatI< TStr,TUInt64 >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStr,TUInt64 > const *

        """
        return _snap.TStrUInt64HI___ref__(self)

    def __call__(self):
        """
        __call__(TStrUInt64HI self) -> THashKeyDatI< TStr,TUInt64 >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStr,TUInt64 > const *

        """
        return _snap.TStrUInt64HI___call__(self)

    def __deref__(self):
        """
        __deref__(TStrUInt64HI self) -> THashKeyDatI< TStr,TUInt64 >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TStr,TUInt64 > const *

        """
        return _snap.TStrUInt64HI___deref__(self)

    def Next(self):
        """
        Next(TStrUInt64HI self) -> TStrUInt64HI

        Parameters:
            self: THashKeyDatI< TStr,TUInt64 > *

        """
        return _snap.TStrUInt64HI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TStrUInt64HI self) -> bool

        Parameters:
            self: THashKeyDatI< TStr,TUInt64 > const *

        """
        return _snap.TStrUInt64HI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TStrUInt64HI self) -> bool

        Parameters:
            self: THashKeyDatI< TStr,TUInt64 > const *

        """
        return _snap.TStrUInt64HI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TStrUInt64HI self) -> TStr

        Parameters:
            self: THashKeyDatI< TStr,TUInt64 > const *

        """
        return _snap.TStrUInt64HI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TStrUInt64HI self) -> TUInt64
        GetDat(TStrUInt64HI self) -> TUInt64

        Parameters:
            self: THashKeyDatI< TStr,TUInt64 > *

        """
        return _snap.TStrUInt64HI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrUInt64HI
TStrUInt64HI.__eq__ = new_instancemethod(_snap.TStrUInt64HI___eq__,None,TStrUInt64HI)
TStrUInt64HI.__lt__ = new_instancemethod(_snap.TStrUInt64HI___lt__,None,TStrUInt64HI)
TStrUInt64HI.__ref__ = new_instancemethod(_snap.TStrUInt64HI___ref__,None,TStrUInt64HI)
TStrUInt64HI.__call__ = new_instancemethod(_snap.TStrUInt64HI___call__,None,TStrUInt64HI)
TStrUInt64HI.__deref__ = new_instancemethod(_snap.TStrUInt64HI___deref__,None,TStrUInt64HI)
TStrUInt64HI.Next = new_instancemethod(_snap.TStrUInt64HI_Next,None,TStrUInt64HI)
TStrUInt64HI.IsEmpty = new_instancemethod(_snap.TStrUInt64HI_IsEmpty,None,TStrUInt64HI)
TStrUInt64HI.IsEnd = new_instancemethod(_snap.TStrUInt64HI_IsEnd,None,TStrUInt64HI)
TStrUInt64HI.GetKey = new_instancemethod(_snap.TStrUInt64HI_GetKey,None,TStrUInt64HI)
TStrUInt64HI.GetDat = new_instancemethod(_snap.TStrUInt64HI_GetDat,None,TStrUInt64HI)
TStrUInt64HI_swigregister = _snap.TStrUInt64HI_swigregister
TStrUInt64HI_swigregister(TStrUInt64HI)

class TStrUInt64VHI(object):
    """Proxy of C++ THashKeyDatI<(TStr,TUInt64V)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TStr,TUInt64V)> self) -> TStrUInt64VHI
        __init__(THashKeyDatI<(TStr,TUInt64V)> self, TStrUInt64VHI _HashKeyDatI) -> TStrUInt64VHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TStr,TUInt64V > const &

        __init__(THashKeyDatI<(TStr,TUInt64V)> self, THashKeyDatI< TStr,TVec< TUInt64,int > >::THKeyDat const * _KeyDatI, THashKeyDatI< TStr,TVec< TUInt64,int > >::THKeyDat const * _EndI) -> TStrUInt64VHI

        Parameters:
            _KeyDatI: THashKeyDatI< TStr,TVec< TUInt64,int > >::THKeyDat const *
            _EndI: THashKeyDatI< TStr,TVec< TUInt64,int > >::THKeyDat const *

        """
        _snap.TStrUInt64VHI_swiginit(self,_snap.new_TStrUInt64VHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TStrUInt64VHI self, TStrUInt64VHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStr,TUInt64V > const &

        """
        return _snap.TStrUInt64VHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TStrUInt64VHI self, TStrUInt64VHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStr,TUInt64V > const &

        """
        return _snap.TStrUInt64VHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TStrUInt64VHI self) -> THashKeyDatI< TStr,TVec< TUInt64,int > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStr,TUInt64V > const *

        """
        return _snap.TStrUInt64VHI___ref__(self)

    def __call__(self):
        """
        __call__(TStrUInt64VHI self) -> THashKeyDatI< TStr,TVec< TUInt64,int > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStr,TUInt64V > const *

        """
        return _snap.TStrUInt64VHI___call__(self)

    def __deref__(self):
        """
        __deref__(TStrUInt64VHI self) -> THashKeyDatI< TStr,TVec< TUInt64,int > >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TStr,TUInt64V > const *

        """
        return _snap.TStrUInt64VHI___deref__(self)

    def Next(self):
        """
        Next(TStrUInt64VHI self) -> TStrUInt64VHI

        Parameters:
            self: THashKeyDatI< TStr,TUInt64V > *

        """
        return _snap.TStrUInt64VHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TStrUInt64VHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStr,TUInt64V > const *

        """
        return _snap.TStrUInt64VHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TStrUInt64VHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStr,TUInt64V > const *

        """
        return _snap.TStrUInt64VHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TStrUInt64VHI self) -> TStr

        Parameters:
            self: THashKeyDatI< TStr,TUInt64V > const *

        """
        return _snap.TStrUInt64VHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TStrUInt64VHI self) -> TVec< TUInt64,int > const
        GetDat(TStrUInt64VHI self) -> TVec< TUInt64,int > &

        Parameters:
            self: THashKeyDatI< TStr,TUInt64V > *

        """
        return _snap.TStrUInt64VHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrUInt64VHI
TStrUInt64VHI.__eq__ = new_instancemethod(_snap.TStrUInt64VHI___eq__,None,TStrUInt64VHI)
TStrUInt64VHI.__lt__ = new_instancemethod(_snap.TStrUInt64VHI___lt__,None,TStrUInt64VHI)
TStrUInt64VHI.__ref__ = new_instancemethod(_snap.TStrUInt64VHI___ref__,None,TStrUInt64VHI)
TStrUInt64VHI.__call__ = new_instancemethod(_snap.TStrUInt64VHI___call__,None,TStrUInt64VHI)
TStrUInt64VHI.__deref__ = new_instancemethod(_snap.TStrUInt64VHI___deref__,None,TStrUInt64VHI)
TStrUInt64VHI.Next = new_instancemethod(_snap.TStrUInt64VHI_Next,None,TStrUInt64VHI)
TStrUInt64VHI.IsEmpty = new_instancemethod(_snap.TStrUInt64VHI_IsEmpty,None,TStrUInt64VHI)
TStrUInt64VHI.IsEnd = new_instancemethod(_snap.TStrUInt64VHI_IsEnd,None,TStrUInt64VHI)
TStrUInt64VHI.GetKey = new_instancemethod(_snap.TStrUInt64VHI_GetKey,None,TStrUInt64VHI)
TStrUInt64VHI.GetDat = new_instancemethod(_snap.TStrUInt64VHI_GetDat,None,TStrUInt64VHI)
TStrUInt64VHI_swigregister = _snap.TStrUInt64VHI_swigregister
TStrUInt64VHI_swigregister(TStrUInt64VHI)

class TStrIntPrVHI(object):
    """Proxy of C++ THashKeyDatI<(TStr,TIntPrV)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TStr,TIntPrV)> self) -> TStrIntPrVHI
        __init__(THashKeyDatI<(TStr,TIntPrV)> self, TStrIntPrVHI _HashKeyDatI) -> TStrIntPrVHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TStr,TIntPrV > const &

        __init__(THashKeyDatI<(TStr,TIntPrV)> self, THashKeyDatI< TStr,TVec< TPair< TInt,TInt >,int > >::THKeyDat const * _KeyDatI, THashKeyDatI< TStr,TVec< TPair< TInt,TInt >,int > >::THKeyDat const * _EndI) -> TStrIntPrVHI

        Parameters:
            _KeyDatI: THashKeyDatI< TStr,TVec< TPair< TInt,TInt >,int > >::THKeyDat const *
            _EndI: THashKeyDatI< TStr,TVec< TPair< TInt,TInt >,int > >::THKeyDat const *

        """
        _snap.TStrIntPrVHI_swiginit(self,_snap.new_TStrIntPrVHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TStrIntPrVHI self, TStrIntPrVHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStr,TIntPrV > const &

        """
        return _snap.TStrIntPrVHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TStrIntPrVHI self, TStrIntPrVHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStr,TIntPrV > const &

        """
        return _snap.TStrIntPrVHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TStrIntPrVHI self) -> THashKeyDatI< TStr,TVec< TPair< TInt,TInt >,int > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStr,TIntPrV > const *

        """
        return _snap.TStrIntPrVHI___ref__(self)

    def __call__(self):
        """
        __call__(TStrIntPrVHI self) -> THashKeyDatI< TStr,TVec< TPair< TInt,TInt >,int > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStr,TIntPrV > const *

        """
        return _snap.TStrIntPrVHI___call__(self)

    def __deref__(self):
        """
        __deref__(TStrIntPrVHI self) -> THashKeyDatI< TStr,TVec< TPair< TInt,TInt >,int > >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TStr,TIntPrV > const *

        """
        return _snap.TStrIntPrVHI___deref__(self)

    def Next(self):
        """
        Next(TStrIntPrVHI self) -> TStrIntPrVHI

        Parameters:
            self: THashKeyDatI< TStr,TIntPrV > *

        """
        return _snap.TStrIntPrVHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TStrIntPrVHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStr,TIntPrV > const *

        """
        return _snap.TStrIntPrVHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TStrIntPrVHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStr,TIntPrV > const *

        """
        return _snap.TStrIntPrVHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TStrIntPrVHI self) -> TStr

        Parameters:
            self: THashKeyDatI< TStr,TIntPrV > const *

        """
        return _snap.TStrIntPrVHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TStrIntPrVHI self) -> TIntPrV
        GetDat(TStrIntPrVHI self) -> TIntPrV

        Parameters:
            self: THashKeyDatI< TStr,TIntPrV > *

        """
        return _snap.TStrIntPrVHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrIntPrVHI
TStrIntPrVHI.__eq__ = new_instancemethod(_snap.TStrIntPrVHI___eq__,None,TStrIntPrVHI)
TStrIntPrVHI.__lt__ = new_instancemethod(_snap.TStrIntPrVHI___lt__,None,TStrIntPrVHI)
TStrIntPrVHI.__ref__ = new_instancemethod(_snap.TStrIntPrVHI___ref__,None,TStrIntPrVHI)
TStrIntPrVHI.__call__ = new_instancemethod(_snap.TStrIntPrVHI___call__,None,TStrIntPrVHI)
TStrIntPrVHI.__deref__ = new_instancemethod(_snap.TStrIntPrVHI___deref__,None,TStrIntPrVHI)
TStrIntPrVHI.Next = new_instancemethod(_snap.TStrIntPrVHI_Next,None,TStrIntPrVHI)
TStrIntPrVHI.IsEmpty = new_instancemethod(_snap.TStrIntPrVHI_IsEmpty,None,TStrIntPrVHI)
TStrIntPrVHI.IsEnd = new_instancemethod(_snap.TStrIntPrVHI_IsEnd,None,TStrIntPrVHI)
TStrIntPrVHI.GetKey = new_instancemethod(_snap.TStrIntPrVHI_GetKey,None,TStrIntPrVHI)
TStrIntPrVHI.GetDat = new_instancemethod(_snap.TStrIntPrVHI_GetDat,None,TStrIntPrVHI)
TStrIntPrVHI_swigregister = _snap.TStrIntPrVHI_swigregister
TStrIntPrVHI_swigregister(TStrIntPrVHI)

class TStrFltHI(object):
    """Proxy of C++ THashKeyDatI<(TStr,TFlt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TStr,TFlt)> self) -> TStrFltHI
        __init__(THashKeyDatI<(TStr,TFlt)> self, TStrFltHI _HashKeyDatI) -> TStrFltHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TStr,TFlt > const &

        __init__(THashKeyDatI<(TStr,TFlt)> self, THashKeyDatI< TStr,TFlt >::THKeyDat const * _KeyDatI, THashKeyDatI< TStr,TFlt >::THKeyDat const * _EndI) -> TStrFltHI

        Parameters:
            _KeyDatI: THashKeyDatI< TStr,TFlt >::THKeyDat const *
            _EndI: THashKeyDatI< TStr,TFlt >::THKeyDat const *

        """
        _snap.TStrFltHI_swiginit(self,_snap.new_TStrFltHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TStrFltHI self, TStrFltHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStr,TFlt > const &

        """
        return _snap.TStrFltHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TStrFltHI self, TStrFltHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStr,TFlt > const &

        """
        return _snap.TStrFltHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TStrFltHI self) -> THashKeyDatI< TStr,TFlt >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStr,TFlt > const *

        """
        return _snap.TStrFltHI___ref__(self)

    def __call__(self):
        """
        __call__(TStrFltHI self) -> THashKeyDatI< TStr,TFlt >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStr,TFlt > const *

        """
        return _snap.TStrFltHI___call__(self)

    def __deref__(self):
        """
        __deref__(TStrFltHI self) -> THashKeyDatI< TStr,TFlt >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TStr,TFlt > const *

        """
        return _snap.TStrFltHI___deref__(self)

    def Next(self):
        """
        Next(TStrFltHI self) -> TStrFltHI

        Parameters:
            self: THashKeyDatI< TStr,TFlt > *

        """
        return _snap.TStrFltHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TStrFltHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStr,TFlt > const *

        """
        return _snap.TStrFltHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TStrFltHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStr,TFlt > const *

        """
        return _snap.TStrFltHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TStrFltHI self) -> TStr

        Parameters:
            self: THashKeyDatI< TStr,TFlt > const *

        """
        return _snap.TStrFltHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TStrFltHI self) -> TFlt
        GetDat(TStrFltHI self) -> TFlt

        Parameters:
            self: THashKeyDatI< TStr,TFlt > *

        """
        return _snap.TStrFltHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrFltHI
TStrFltHI.__eq__ = new_instancemethod(_snap.TStrFltHI___eq__,None,TStrFltHI)
TStrFltHI.__lt__ = new_instancemethod(_snap.TStrFltHI___lt__,None,TStrFltHI)
TStrFltHI.__ref__ = new_instancemethod(_snap.TStrFltHI___ref__,None,TStrFltHI)
TStrFltHI.__call__ = new_instancemethod(_snap.TStrFltHI___call__,None,TStrFltHI)
TStrFltHI.__deref__ = new_instancemethod(_snap.TStrFltHI___deref__,None,TStrFltHI)
TStrFltHI.Next = new_instancemethod(_snap.TStrFltHI_Next,None,TStrFltHI)
TStrFltHI.IsEmpty = new_instancemethod(_snap.TStrFltHI_IsEmpty,None,TStrFltHI)
TStrFltHI.IsEnd = new_instancemethod(_snap.TStrFltHI_IsEnd,None,TStrFltHI)
TStrFltHI.GetKey = new_instancemethod(_snap.TStrFltHI_GetKey,None,TStrFltHI)
TStrFltHI.GetDat = new_instancemethod(_snap.TStrFltHI_GetDat,None,TStrFltHI)
TStrFltHI_swigregister = _snap.TStrFltHI_swigregister
TStrFltHI_swigregister(TStrFltHI)

class TStrFltVHI(object):
    """Proxy of C++ THashKeyDatI<(TStr,TFltV)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TStr,TFltV)> self) -> TStrFltVHI
        __init__(THashKeyDatI<(TStr,TFltV)> self, TStrFltVHI _HashKeyDatI) -> TStrFltVHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TStr,TFltV > const &

        __init__(THashKeyDatI<(TStr,TFltV)> self, THashKeyDatI< TStr,TVec< TFlt,int > >::THKeyDat const * _KeyDatI, THashKeyDatI< TStr,TVec< TFlt,int > >::THKeyDat const * _EndI) -> TStrFltVHI

        Parameters:
            _KeyDatI: THashKeyDatI< TStr,TVec< TFlt,int > >::THKeyDat const *
            _EndI: THashKeyDatI< TStr,TVec< TFlt,int > >::THKeyDat const *

        """
        _snap.TStrFltVHI_swiginit(self,_snap.new_TStrFltVHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TStrFltVHI self, TStrFltVHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStr,TFltV > const &

        """
        return _snap.TStrFltVHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TStrFltVHI self, TStrFltVHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStr,TFltV > const &

        """
        return _snap.TStrFltVHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TStrFltVHI self) -> THashKeyDatI< TStr,TVec< TFlt,int > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStr,TFltV > const *

        """
        return _snap.TStrFltVHI___ref__(self)

    def __call__(self):
        """
        __call__(TStrFltVHI self) -> THashKeyDatI< TStr,TVec< TFlt,int > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStr,TFltV > const *

        """
        return _snap.TStrFltVHI___call__(self)

    def __deref__(self):
        """
        __deref__(TStrFltVHI self) -> THashKeyDatI< TStr,TVec< TFlt,int > >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TStr,TFltV > const *

        """
        return _snap.TStrFltVHI___deref__(self)

    def Next(self):
        """
        Next(TStrFltVHI self) -> TStrFltVHI

        Parameters:
            self: THashKeyDatI< TStr,TFltV > *

        """
        return _snap.TStrFltVHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TStrFltVHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStr,TFltV > const *

        """
        return _snap.TStrFltVHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TStrFltVHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStr,TFltV > const *

        """
        return _snap.TStrFltVHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TStrFltVHI self) -> TStr

        Parameters:
            self: THashKeyDatI< TStr,TFltV > const *

        """
        return _snap.TStrFltVHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TStrFltVHI self) -> TFltV
        GetDat(TStrFltVHI self) -> TFltV

        Parameters:
            self: THashKeyDatI< TStr,TFltV > *

        """
        return _snap.TStrFltVHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrFltVHI
TStrFltVHI.__eq__ = new_instancemethod(_snap.TStrFltVHI___eq__,None,TStrFltVHI)
TStrFltVHI.__lt__ = new_instancemethod(_snap.TStrFltVHI___lt__,None,TStrFltVHI)
TStrFltVHI.__ref__ = new_instancemethod(_snap.TStrFltVHI___ref__,None,TStrFltVHI)
TStrFltVHI.__call__ = new_instancemethod(_snap.TStrFltVHI___call__,None,TStrFltVHI)
TStrFltVHI.__deref__ = new_instancemethod(_snap.TStrFltVHI___deref__,None,TStrFltVHI)
TStrFltVHI.Next = new_instancemethod(_snap.TStrFltVHI_Next,None,TStrFltVHI)
TStrFltVHI.IsEmpty = new_instancemethod(_snap.TStrFltVHI_IsEmpty,None,TStrFltVHI)
TStrFltVHI.IsEnd = new_instancemethod(_snap.TStrFltVHI_IsEnd,None,TStrFltVHI)
TStrFltVHI.GetKey = new_instancemethod(_snap.TStrFltVHI_GetKey,None,TStrFltVHI)
TStrFltVHI.GetDat = new_instancemethod(_snap.TStrFltVHI_GetDat,None,TStrFltVHI)
TStrFltVHI_swigregister = _snap.TStrFltVHI_swigregister
TStrFltVHI_swigregister(TStrFltVHI)

class TStrStrHI(object):
    """Proxy of C++ THashKeyDatI<(TStr,TStr)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TStr,TStr)> self) -> TStrStrHI
        __init__(THashKeyDatI<(TStr,TStr)> self, TStrStrHI _HashKeyDatI) -> TStrStrHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TStr,TStr > const &

        __init__(THashKeyDatI<(TStr,TStr)> self, THashKeyDatI< TStr,TStr >::THKeyDat const * _KeyDatI, THashKeyDatI< TStr,TStr >::THKeyDat const * _EndI) -> TStrStrHI

        Parameters:
            _KeyDatI: THashKeyDatI< TStr,TStr >::THKeyDat const *
            _EndI: THashKeyDatI< TStr,TStr >::THKeyDat const *

        """
        _snap.TStrStrHI_swiginit(self,_snap.new_TStrStrHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TStrStrHI self, TStrStrHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStr,TStr > const &

        """
        return _snap.TStrStrHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TStrStrHI self, TStrStrHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStr,TStr > const &

        """
        return _snap.TStrStrHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TStrStrHI self) -> THashKeyDatI< TStr,TStr >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStr,TStr > const *

        """
        return _snap.TStrStrHI___ref__(self)

    def __call__(self):
        """
        __call__(TStrStrHI self) -> THashKeyDatI< TStr,TStr >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStr,TStr > const *

        """
        return _snap.TStrStrHI___call__(self)

    def __deref__(self):
        """
        __deref__(TStrStrHI self) -> THashKeyDatI< TStr,TStr >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TStr,TStr > const *

        """
        return _snap.TStrStrHI___deref__(self)

    def Next(self):
        """
        Next(TStrStrHI self) -> TStrStrHI

        Parameters:
            self: THashKeyDatI< TStr,TStr > *

        """
        return _snap.TStrStrHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TStrStrHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStr,TStr > const *

        """
        return _snap.TStrStrHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TStrStrHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStr,TStr > const *

        """
        return _snap.TStrStrHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TStrStrHI self) -> TStr

        Parameters:
            self: THashKeyDatI< TStr,TStr > const *

        """
        return _snap.TStrStrHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TStrStrHI self) -> TStr
        GetDat(TStrStrHI self) -> TStr

        Parameters:
            self: THashKeyDatI< TStr,TStr > *

        """
        return _snap.TStrStrHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrStrHI
TStrStrHI.__eq__ = new_instancemethod(_snap.TStrStrHI___eq__,None,TStrStrHI)
TStrStrHI.__lt__ = new_instancemethod(_snap.TStrStrHI___lt__,None,TStrStrHI)
TStrStrHI.__ref__ = new_instancemethod(_snap.TStrStrHI___ref__,None,TStrStrHI)
TStrStrHI.__call__ = new_instancemethod(_snap.TStrStrHI___call__,None,TStrStrHI)
TStrStrHI.__deref__ = new_instancemethod(_snap.TStrStrHI___deref__,None,TStrStrHI)
TStrStrHI.Next = new_instancemethod(_snap.TStrStrHI_Next,None,TStrStrHI)
TStrStrHI.IsEmpty = new_instancemethod(_snap.TStrStrHI_IsEmpty,None,TStrStrHI)
TStrStrHI.IsEnd = new_instancemethod(_snap.TStrStrHI_IsEnd,None,TStrStrHI)
TStrStrHI.GetKey = new_instancemethod(_snap.TStrStrHI_GetKey,None,TStrStrHI)
TStrStrHI.GetDat = new_instancemethod(_snap.TStrStrHI_GetDat,None,TStrStrHI)
TStrStrHI_swigregister = _snap.TStrStrHI_swigregister
TStrStrHI_swigregister(TStrStrHI)

class TStrStrPrHI(object):
    """Proxy of C++ THashKeyDatI<(TStr,TStrPr)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TStr,TStrPr)> self) -> TStrStrPrHI
        __init__(THashKeyDatI<(TStr,TStrPr)> self, TStrStrPrHI _HashKeyDatI) -> TStrStrPrHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TStr,TStrPr > const &

        __init__(THashKeyDatI<(TStr,TStrPr)> self, THashKeyDatI< TStr,TPair< TStr,TStr > >::THKeyDat const * _KeyDatI, THashKeyDatI< TStr,TPair< TStr,TStr > >::THKeyDat const * _EndI) -> TStrStrPrHI

        Parameters:
            _KeyDatI: THashKeyDatI< TStr,TPair< TStr,TStr > >::THKeyDat const *
            _EndI: THashKeyDatI< TStr,TPair< TStr,TStr > >::THKeyDat const *

        """
        _snap.TStrStrPrHI_swiginit(self,_snap.new_TStrStrPrHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TStrStrPrHI self, TStrStrPrHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStr,TStrPr > const &

        """
        return _snap.TStrStrPrHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TStrStrPrHI self, TStrStrPrHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStr,TStrPr > const &

        """
        return _snap.TStrStrPrHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TStrStrPrHI self) -> THashKeyDatI< TStr,TPair< TStr,TStr > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStr,TStrPr > const *

        """
        return _snap.TStrStrPrHI___ref__(self)

    def __call__(self):
        """
        __call__(TStrStrPrHI self) -> THashKeyDatI< TStr,TPair< TStr,TStr > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStr,TStrPr > const *

        """
        return _snap.TStrStrPrHI___call__(self)

    def __deref__(self):
        """
        __deref__(TStrStrPrHI self) -> THashKeyDatI< TStr,TPair< TStr,TStr > >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TStr,TStrPr > const *

        """
        return _snap.TStrStrPrHI___deref__(self)

    def Next(self):
        """
        Next(TStrStrPrHI self) -> TStrStrPrHI

        Parameters:
            self: THashKeyDatI< TStr,TStrPr > *

        """
        return _snap.TStrStrPrHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TStrStrPrHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStr,TStrPr > const *

        """
        return _snap.TStrStrPrHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TStrStrPrHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStr,TStrPr > const *

        """
        return _snap.TStrStrPrHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TStrStrPrHI self) -> TStr

        Parameters:
            self: THashKeyDatI< TStr,TStrPr > const *

        """
        return _snap.TStrStrPrHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TStrStrPrHI self) -> TPair< TStr,TStr > const
        GetDat(TStrStrPrHI self) -> TPair< TStr,TStr > &

        Parameters:
            self: THashKeyDatI< TStr,TStrPr > *

        """
        return _snap.TStrStrPrHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrStrPrHI
TStrStrPrHI.__eq__ = new_instancemethod(_snap.TStrStrPrHI___eq__,None,TStrStrPrHI)
TStrStrPrHI.__lt__ = new_instancemethod(_snap.TStrStrPrHI___lt__,None,TStrStrPrHI)
TStrStrPrHI.__ref__ = new_instancemethod(_snap.TStrStrPrHI___ref__,None,TStrStrPrHI)
TStrStrPrHI.__call__ = new_instancemethod(_snap.TStrStrPrHI___call__,None,TStrStrPrHI)
TStrStrPrHI.__deref__ = new_instancemethod(_snap.TStrStrPrHI___deref__,None,TStrStrPrHI)
TStrStrPrHI.Next = new_instancemethod(_snap.TStrStrPrHI_Next,None,TStrStrPrHI)
TStrStrPrHI.IsEmpty = new_instancemethod(_snap.TStrStrPrHI_IsEmpty,None,TStrStrPrHI)
TStrStrPrHI.IsEnd = new_instancemethod(_snap.TStrStrPrHI_IsEnd,None,TStrStrPrHI)
TStrStrPrHI.GetKey = new_instancemethod(_snap.TStrStrPrHI_GetKey,None,TStrStrPrHI)
TStrStrPrHI.GetDat = new_instancemethod(_snap.TStrStrPrHI_GetDat,None,TStrStrPrHI)
TStrStrPrHI_swigregister = _snap.TStrStrPrHI_swigregister
TStrStrPrHI_swigregister(TStrStrPrHI)

class TStrStrVHI(object):
    """Proxy of C++ THashKeyDatI<(TStr,TStrV)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TStr,TStrV)> self) -> TStrStrVHI
        __init__(THashKeyDatI<(TStr,TStrV)> self, TStrStrVHI _HashKeyDatI) -> TStrStrVHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TStr,TStrV > const &

        __init__(THashKeyDatI<(TStr,TStrV)> self, THashKeyDatI< TStr,TVec< TStr,int > >::THKeyDat const * _KeyDatI, THashKeyDatI< TStr,TVec< TStr,int > >::THKeyDat const * _EndI) -> TStrStrVHI

        Parameters:
            _KeyDatI: THashKeyDatI< TStr,TVec< TStr,int > >::THKeyDat const *
            _EndI: THashKeyDatI< TStr,TVec< TStr,int > >::THKeyDat const *

        """
        _snap.TStrStrVHI_swiginit(self,_snap.new_TStrStrVHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TStrStrVHI self, TStrStrVHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStr,TStrV > const &

        """
        return _snap.TStrStrVHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TStrStrVHI self, TStrStrVHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStr,TStrV > const &

        """
        return _snap.TStrStrVHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TStrStrVHI self) -> THashKeyDatI< TStr,TVec< TStr,int > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStr,TStrV > const *

        """
        return _snap.TStrStrVHI___ref__(self)

    def __call__(self):
        """
        __call__(TStrStrVHI self) -> THashKeyDatI< TStr,TVec< TStr,int > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStr,TStrV > const *

        """
        return _snap.TStrStrVHI___call__(self)

    def __deref__(self):
        """
        __deref__(TStrStrVHI self) -> THashKeyDatI< TStr,TVec< TStr,int > >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TStr,TStrV > const *

        """
        return _snap.TStrStrVHI___deref__(self)

    def Next(self):
        """
        Next(TStrStrVHI self) -> TStrStrVHI

        Parameters:
            self: THashKeyDatI< TStr,TStrV > *

        """
        return _snap.TStrStrVHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TStrStrVHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStr,TStrV > const *

        """
        return _snap.TStrStrVHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TStrStrVHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStr,TStrV > const *

        """
        return _snap.TStrStrVHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TStrStrVHI self) -> TStr

        Parameters:
            self: THashKeyDatI< TStr,TStrV > const *

        """
        return _snap.TStrStrVHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TStrStrVHI self) -> TStrV
        GetDat(TStrStrVHI self) -> TStrV

        Parameters:
            self: THashKeyDatI< TStr,TStrV > *

        """
        return _snap.TStrStrVHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrStrVHI
TStrStrVHI.__eq__ = new_instancemethod(_snap.TStrStrVHI___eq__,None,TStrStrVHI)
TStrStrVHI.__lt__ = new_instancemethod(_snap.TStrStrVHI___lt__,None,TStrStrVHI)
TStrStrVHI.__ref__ = new_instancemethod(_snap.TStrStrVHI___ref__,None,TStrStrVHI)
TStrStrVHI.__call__ = new_instancemethod(_snap.TStrStrVHI___call__,None,TStrStrVHI)
TStrStrVHI.__deref__ = new_instancemethod(_snap.TStrStrVHI___deref__,None,TStrStrVHI)
TStrStrVHI.Next = new_instancemethod(_snap.TStrStrVHI_Next,None,TStrStrVHI)
TStrStrVHI.IsEmpty = new_instancemethod(_snap.TStrStrVHI_IsEmpty,None,TStrStrVHI)
TStrStrVHI.IsEnd = new_instancemethod(_snap.TStrStrVHI_IsEnd,None,TStrStrVHI)
TStrStrVHI.GetKey = new_instancemethod(_snap.TStrStrVHI_GetKey,None,TStrStrVHI)
TStrStrVHI.GetDat = new_instancemethod(_snap.TStrStrVHI_GetDat,None,TStrStrVHI)
TStrStrVHI_swigregister = _snap.TStrStrVHI_swigregister
TStrStrVHI_swigregister(TStrStrVHI)

class TStrStrPrVHI(object):
    """Proxy of C++ THashKeyDatI<(TStr,TStrPrV)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TStr,TStrPrV)> self) -> TStrStrPrVHI
        __init__(THashKeyDatI<(TStr,TStrPrV)> self, TStrStrPrVHI _HashKeyDatI) -> TStrStrPrVHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TStr,TStrPrV > const &

        __init__(THashKeyDatI<(TStr,TStrPrV)> self, THashKeyDatI< TStr,TVec< TPair< TStr,TStr >,int > >::THKeyDat const * _KeyDatI, THashKeyDatI< TStr,TVec< TPair< TStr,TStr >,int > >::THKeyDat const * _EndI) -> TStrStrPrVHI

        Parameters:
            _KeyDatI: THashKeyDatI< TStr,TVec< TPair< TStr,TStr >,int > >::THKeyDat const *
            _EndI: THashKeyDatI< TStr,TVec< TPair< TStr,TStr >,int > >::THKeyDat const *

        """
        _snap.TStrStrPrVHI_swiginit(self,_snap.new_TStrStrPrVHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TStrStrPrVHI self, TStrStrPrVHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStr,TStrPrV > const &

        """
        return _snap.TStrStrPrVHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TStrStrPrVHI self, TStrStrPrVHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStr,TStrPrV > const &

        """
        return _snap.TStrStrPrVHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TStrStrPrVHI self) -> THashKeyDatI< TStr,TVec< TPair< TStr,TStr >,int > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStr,TStrPrV > const *

        """
        return _snap.TStrStrPrVHI___ref__(self)

    def __call__(self):
        """
        __call__(TStrStrPrVHI self) -> THashKeyDatI< TStr,TVec< TPair< TStr,TStr >,int > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStr,TStrPrV > const *

        """
        return _snap.TStrStrPrVHI___call__(self)

    def __deref__(self):
        """
        __deref__(TStrStrPrVHI self) -> THashKeyDatI< TStr,TVec< TPair< TStr,TStr >,int > >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TStr,TStrPrV > const *

        """
        return _snap.TStrStrPrVHI___deref__(self)

    def Next(self):
        """
        Next(TStrStrPrVHI self) -> TStrStrPrVHI

        Parameters:
            self: THashKeyDatI< TStr,TStrPrV > *

        """
        return _snap.TStrStrPrVHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TStrStrPrVHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStr,TStrPrV > const *

        """
        return _snap.TStrStrPrVHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TStrStrPrVHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStr,TStrPrV > const *

        """
        return _snap.TStrStrPrVHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TStrStrPrVHI self) -> TStr

        Parameters:
            self: THashKeyDatI< TStr,TStrPrV > const *

        """
        return _snap.TStrStrPrVHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TStrStrPrVHI self) -> TVec< TPair< TStr,TStr >,int > const
        GetDat(TStrStrPrVHI self) -> TVec< TPair< TStr,TStr >,int > &

        Parameters:
            self: THashKeyDatI< TStr,TStrPrV > *

        """
        return _snap.TStrStrPrVHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrStrPrVHI
TStrStrPrVHI.__eq__ = new_instancemethod(_snap.TStrStrPrVHI___eq__,None,TStrStrPrVHI)
TStrStrPrVHI.__lt__ = new_instancemethod(_snap.TStrStrPrVHI___lt__,None,TStrStrPrVHI)
TStrStrPrVHI.__ref__ = new_instancemethod(_snap.TStrStrPrVHI___ref__,None,TStrStrPrVHI)
TStrStrPrVHI.__call__ = new_instancemethod(_snap.TStrStrPrVHI___call__,None,TStrStrPrVHI)
TStrStrPrVHI.__deref__ = new_instancemethod(_snap.TStrStrPrVHI___deref__,None,TStrStrPrVHI)
TStrStrPrVHI.Next = new_instancemethod(_snap.TStrStrPrVHI_Next,None,TStrStrPrVHI)
TStrStrPrVHI.IsEmpty = new_instancemethod(_snap.TStrStrPrVHI_IsEmpty,None,TStrStrPrVHI)
TStrStrPrVHI.IsEnd = new_instancemethod(_snap.TStrStrPrVHI_IsEnd,None,TStrStrPrVHI)
TStrStrPrVHI.GetKey = new_instancemethod(_snap.TStrStrPrVHI_GetKey,None,TStrStrPrVHI)
TStrStrPrVHI.GetDat = new_instancemethod(_snap.TStrStrPrVHI_GetDat,None,TStrStrPrVHI)
TStrStrPrVHI_swigregister = _snap.TStrStrPrVHI_swigregister
TStrStrPrVHI_swigregister(TStrStrPrVHI)

class TStrStrKdVHI(object):
    """Proxy of C++ THashKeyDatI<(TStr,TStrKdV)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TStr,TStrKdV)> self) -> TStrStrKdVHI
        __init__(THashKeyDatI<(TStr,TStrKdV)> self, TStrStrKdVHI _HashKeyDatI) -> TStrStrKdVHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TStr,TStrKdV > const &

        __init__(THashKeyDatI<(TStr,TStrKdV)> self, THashKeyDatI< TStr,TVec< TKeyDat< TStr,TStr >,int > >::THKeyDat const * _KeyDatI, 
            THashKeyDatI< TStr,TVec< TKeyDat< TStr,TStr >,int > >::THKeyDat const * _EndI) -> TStrStrKdVHI

        Parameters:
            _KeyDatI: THashKeyDatI< TStr,TVec< TKeyDat< TStr,TStr >,int > >::THKeyDat const *
            _EndI: THashKeyDatI< TStr,TVec< TKeyDat< TStr,TStr >,int > >::THKeyDat const *

        """
        _snap.TStrStrKdVHI_swiginit(self,_snap.new_TStrStrKdVHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TStrStrKdVHI self, TStrStrKdVHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStr,TStrKdV > const &

        """
        return _snap.TStrStrKdVHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TStrStrKdVHI self, TStrStrKdVHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStr,TStrKdV > const &

        """
        return _snap.TStrStrKdVHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TStrStrKdVHI self) -> THashKeyDatI< TStr,TVec< TKeyDat< TStr,TStr >,int > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStr,TStrKdV > const *

        """
        return _snap.TStrStrKdVHI___ref__(self)

    def __call__(self):
        """
        __call__(TStrStrKdVHI self) -> THashKeyDatI< TStr,TVec< TKeyDat< TStr,TStr >,int > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStr,TStrKdV > const *

        """
        return _snap.TStrStrKdVHI___call__(self)

    def __deref__(self):
        """
        __deref__(TStrStrKdVHI self) -> THashKeyDatI< TStr,TVec< TKeyDat< TStr,TStr >,int > >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TStr,TStrKdV > const *

        """
        return _snap.TStrStrKdVHI___deref__(self)

    def Next(self):
        """
        Next(TStrStrKdVHI self) -> TStrStrKdVHI

        Parameters:
            self: THashKeyDatI< TStr,TStrKdV > *

        """
        return _snap.TStrStrKdVHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TStrStrKdVHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStr,TStrKdV > const *

        """
        return _snap.TStrStrKdVHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TStrStrKdVHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStr,TStrKdV > const *

        """
        return _snap.TStrStrKdVHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TStrStrKdVHI self) -> TStr

        Parameters:
            self: THashKeyDatI< TStr,TStrKdV > const *

        """
        return _snap.TStrStrKdVHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TStrStrKdVHI self) -> TVec< TKeyDat< TStr,TStr >,int > const
        GetDat(TStrStrKdVHI self) -> TVec< TKeyDat< TStr,TStr >,int > &

        Parameters:
            self: THashKeyDatI< TStr,TStrKdV > *

        """
        return _snap.TStrStrKdVHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrStrKdVHI
TStrStrKdVHI.__eq__ = new_instancemethod(_snap.TStrStrKdVHI___eq__,None,TStrStrKdVHI)
TStrStrKdVHI.__lt__ = new_instancemethod(_snap.TStrStrKdVHI___lt__,None,TStrStrKdVHI)
TStrStrKdVHI.__ref__ = new_instancemethod(_snap.TStrStrKdVHI___ref__,None,TStrStrKdVHI)
TStrStrKdVHI.__call__ = new_instancemethod(_snap.TStrStrKdVHI___call__,None,TStrStrKdVHI)
TStrStrKdVHI.__deref__ = new_instancemethod(_snap.TStrStrKdVHI___deref__,None,TStrStrKdVHI)
TStrStrKdVHI.Next = new_instancemethod(_snap.TStrStrKdVHI_Next,None,TStrStrKdVHI)
TStrStrKdVHI.IsEmpty = new_instancemethod(_snap.TStrStrKdVHI_IsEmpty,None,TStrStrKdVHI)
TStrStrKdVHI.IsEnd = new_instancemethod(_snap.TStrStrKdVHI_IsEnd,None,TStrStrKdVHI)
TStrStrKdVHI.GetKey = new_instancemethod(_snap.TStrStrKdVHI_GetKey,None,TStrStrKdVHI)
TStrStrKdVHI.GetDat = new_instancemethod(_snap.TStrStrKdVHI_GetDat,None,TStrStrKdVHI)
TStrStrKdVHI_swigregister = _snap.TStrStrKdVHI_swigregister
TStrStrKdVHI_swigregister(TStrStrKdVHI)

class TStrIntFltPrHI(object):
    """Proxy of C++ THashKeyDatI<(TStr,TIntFltPr)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TStr,TIntFltPr)> self) -> TStrIntFltPrHI
        __init__(THashKeyDatI<(TStr,TIntFltPr)> self, TStrIntFltPrHI _HashKeyDatI) -> TStrIntFltPrHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TStr,TIntFltPr > const &

        __init__(THashKeyDatI<(TStr,TIntFltPr)> self, THashKeyDatI< TStr,TPair< TInt,TFlt > >::THKeyDat const * _KeyDatI, THashKeyDatI< TStr,TPair< TInt,TFlt > >::THKeyDat const * _EndI) -> TStrIntFltPrHI

        Parameters:
            _KeyDatI: THashKeyDatI< TStr,TPair< TInt,TFlt > >::THKeyDat const *
            _EndI: THashKeyDatI< TStr,TPair< TInt,TFlt > >::THKeyDat const *

        """
        _snap.TStrIntFltPrHI_swiginit(self,_snap.new_TStrIntFltPrHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TStrIntFltPrHI self, TStrIntFltPrHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStr,TIntFltPr > const &

        """
        return _snap.TStrIntFltPrHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TStrIntFltPrHI self, TStrIntFltPrHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStr,TIntFltPr > const &

        """
        return _snap.TStrIntFltPrHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TStrIntFltPrHI self) -> THashKeyDatI< TStr,TPair< TInt,TFlt > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStr,TIntFltPr > const *

        """
        return _snap.TStrIntFltPrHI___ref__(self)

    def __call__(self):
        """
        __call__(TStrIntFltPrHI self) -> THashKeyDatI< TStr,TPair< TInt,TFlt > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStr,TIntFltPr > const *

        """
        return _snap.TStrIntFltPrHI___call__(self)

    def __deref__(self):
        """
        __deref__(TStrIntFltPrHI self) -> THashKeyDatI< TStr,TPair< TInt,TFlt > >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TStr,TIntFltPr > const *

        """
        return _snap.TStrIntFltPrHI___deref__(self)

    def Next(self):
        """
        Next(TStrIntFltPrHI self) -> TStrIntFltPrHI

        Parameters:
            self: THashKeyDatI< TStr,TIntFltPr > *

        """
        return _snap.TStrIntFltPrHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TStrIntFltPrHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStr,TIntFltPr > const *

        """
        return _snap.TStrIntFltPrHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TStrIntFltPrHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStr,TIntFltPr > const *

        """
        return _snap.TStrIntFltPrHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TStrIntFltPrHI self) -> TStr

        Parameters:
            self: THashKeyDatI< TStr,TIntFltPr > const *

        """
        return _snap.TStrIntFltPrHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TStrIntFltPrHI self) -> TPair< TInt,TFlt > const
        GetDat(TStrIntFltPrHI self) -> TPair< TInt,TFlt > &

        Parameters:
            self: THashKeyDatI< TStr,TIntFltPr > *

        """
        return _snap.TStrIntFltPrHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrIntFltPrHI
TStrIntFltPrHI.__eq__ = new_instancemethod(_snap.TStrIntFltPrHI___eq__,None,TStrIntFltPrHI)
TStrIntFltPrHI.__lt__ = new_instancemethod(_snap.TStrIntFltPrHI___lt__,None,TStrIntFltPrHI)
TStrIntFltPrHI.__ref__ = new_instancemethod(_snap.TStrIntFltPrHI___ref__,None,TStrIntFltPrHI)
TStrIntFltPrHI.__call__ = new_instancemethod(_snap.TStrIntFltPrHI___call__,None,TStrIntFltPrHI)
TStrIntFltPrHI.__deref__ = new_instancemethod(_snap.TStrIntFltPrHI___deref__,None,TStrIntFltPrHI)
TStrIntFltPrHI.Next = new_instancemethod(_snap.TStrIntFltPrHI_Next,None,TStrIntFltPrHI)
TStrIntFltPrHI.IsEmpty = new_instancemethod(_snap.TStrIntFltPrHI_IsEmpty,None,TStrIntFltPrHI)
TStrIntFltPrHI.IsEnd = new_instancemethod(_snap.TStrIntFltPrHI_IsEnd,None,TStrIntFltPrHI)
TStrIntFltPrHI.GetKey = new_instancemethod(_snap.TStrIntFltPrHI_GetKey,None,TStrIntFltPrHI)
TStrIntFltPrHI.GetDat = new_instancemethod(_snap.TStrIntFltPrHI_GetDat,None,TStrIntFltPrHI)
TStrIntFltPrHI_swigregister = _snap.TStrIntFltPrHI_swigregister
TStrIntFltPrHI_swigregister(TStrIntFltPrHI)

class TStrStrIntPrVHI(object):
    """Proxy of C++ THashKeyDatI<(TStr,TStrIntPrV)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TStr,TStrIntPrV)> self) -> TStrStrIntPrVHI
        __init__(THashKeyDatI<(TStr,TStrIntPrV)> self, TStrStrIntPrVHI _HashKeyDatI) -> TStrStrIntPrVHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TStr,TStrIntPrV > const &

        __init__(THashKeyDatI<(TStr,TStrIntPrV)> self, THashKeyDatI< TStr,TVec< TPair< TStr,TInt >,int > >::THKeyDat const * _KeyDatI, THashKeyDatI< TStr,TVec< TPair< TStr,TInt >,int > >::THKeyDat const * _EndI) -> TStrStrIntPrVHI

        Parameters:
            _KeyDatI: THashKeyDatI< TStr,TVec< TPair< TStr,TInt >,int > >::THKeyDat const *
            _EndI: THashKeyDatI< TStr,TVec< TPair< TStr,TInt >,int > >::THKeyDat const *

        """
        _snap.TStrStrIntPrVHI_swiginit(self,_snap.new_TStrStrIntPrVHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TStrStrIntPrVHI self, TStrStrIntPrVHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStr,TStrIntPrV > const &

        """
        return _snap.TStrStrIntPrVHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TStrStrIntPrVHI self, TStrStrIntPrVHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStr,TStrIntPrV > const &

        """
        return _snap.TStrStrIntPrVHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TStrStrIntPrVHI self) -> THashKeyDatI< TStr,TVec< TPair< TStr,TInt >,int > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStr,TStrIntPrV > const *

        """
        return _snap.TStrStrIntPrVHI___ref__(self)

    def __call__(self):
        """
        __call__(TStrStrIntPrVHI self) -> THashKeyDatI< TStr,TVec< TPair< TStr,TInt >,int > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStr,TStrIntPrV > const *

        """
        return _snap.TStrStrIntPrVHI___call__(self)

    def __deref__(self):
        """
        __deref__(TStrStrIntPrVHI self) -> THashKeyDatI< TStr,TVec< TPair< TStr,TInt >,int > >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TStr,TStrIntPrV > const *

        """
        return _snap.TStrStrIntPrVHI___deref__(self)

    def Next(self):
        """
        Next(TStrStrIntPrVHI self) -> TStrStrIntPrVHI

        Parameters:
            self: THashKeyDatI< TStr,TStrIntPrV > *

        """
        return _snap.TStrStrIntPrVHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TStrStrIntPrVHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStr,TStrIntPrV > const *

        """
        return _snap.TStrStrIntPrVHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TStrStrIntPrVHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStr,TStrIntPrV > const *

        """
        return _snap.TStrStrIntPrVHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TStrStrIntPrVHI self) -> TStr

        Parameters:
            self: THashKeyDatI< TStr,TStrIntPrV > const *

        """
        return _snap.TStrStrIntPrVHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TStrStrIntPrVHI self) -> TVec< TPair< TStr,TInt >,int > const
        GetDat(TStrStrIntPrVHI self) -> TVec< TPair< TStr,TInt >,int > &

        Parameters:
            self: THashKeyDatI< TStr,TStrIntPrV > *

        """
        return _snap.TStrStrIntPrVHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrStrIntPrVHI
TStrStrIntPrVHI.__eq__ = new_instancemethod(_snap.TStrStrIntPrVHI___eq__,None,TStrStrIntPrVHI)
TStrStrIntPrVHI.__lt__ = new_instancemethod(_snap.TStrStrIntPrVHI___lt__,None,TStrStrIntPrVHI)
TStrStrIntPrVHI.__ref__ = new_instancemethod(_snap.TStrStrIntPrVHI___ref__,None,TStrStrIntPrVHI)
TStrStrIntPrVHI.__call__ = new_instancemethod(_snap.TStrStrIntPrVHI___call__,None,TStrStrIntPrVHI)
TStrStrIntPrVHI.__deref__ = new_instancemethod(_snap.TStrStrIntPrVHI___deref__,None,TStrStrIntPrVHI)
TStrStrIntPrVHI.Next = new_instancemethod(_snap.TStrStrIntPrVHI_Next,None,TStrStrIntPrVHI)
TStrStrIntPrVHI.IsEmpty = new_instancemethod(_snap.TStrStrIntPrVHI_IsEmpty,None,TStrStrIntPrVHI)
TStrStrIntPrVHI.IsEnd = new_instancemethod(_snap.TStrStrIntPrVHI_IsEnd,None,TStrStrIntPrVHI)
TStrStrIntPrVHI.GetKey = new_instancemethod(_snap.TStrStrIntPrVHI_GetKey,None,TStrStrIntPrVHI)
TStrStrIntPrVHI.GetDat = new_instancemethod(_snap.TStrStrIntPrVHI_GetDat,None,TStrStrIntPrVHI)
TStrStrIntPrVHI_swigregister = _snap.TStrStrIntPrVHI_swigregister
TStrStrIntPrVHI_swigregister(TStrStrIntPrVHI)

class TStrStrIntKdVHI(object):
    """Proxy of C++ THashKeyDatI<(TStr,TStrIntKdV)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TStr,TStrIntKdV)> self) -> TStrStrIntKdVHI
        __init__(THashKeyDatI<(TStr,TStrIntKdV)> self, TStrStrIntKdVHI _HashKeyDatI) -> TStrStrIntKdVHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TStr,TStrIntKdV > const &

        __init__(THashKeyDatI<(TStr,TStrIntKdV)> self, THashKeyDatI< TStr,TVec< TKeyDat< TStr,TInt >,int > >::THKeyDat const * _KeyDatI, 
            THashKeyDatI< TStr,TVec< TKeyDat< TStr,TInt >,int > >::THKeyDat const * _EndI) -> TStrStrIntKdVHI

        Parameters:
            _KeyDatI: THashKeyDatI< TStr,TVec< TKeyDat< TStr,TInt >,int > >::THKeyDat const *
            _EndI: THashKeyDatI< TStr,TVec< TKeyDat< TStr,TInt >,int > >::THKeyDat const *

        """
        _snap.TStrStrIntKdVHI_swiginit(self,_snap.new_TStrStrIntKdVHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TStrStrIntKdVHI self, TStrStrIntKdVHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStr,TStrIntKdV > const &

        """
        return _snap.TStrStrIntKdVHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TStrStrIntKdVHI self, TStrStrIntKdVHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStr,TStrIntKdV > const &

        """
        return _snap.TStrStrIntKdVHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TStrStrIntKdVHI self) -> THashKeyDatI< TStr,TVec< TKeyDat< TStr,TInt >,int > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStr,TStrIntKdV > const *

        """
        return _snap.TStrStrIntKdVHI___ref__(self)

    def __call__(self):
        """
        __call__(TStrStrIntKdVHI self) -> THashKeyDatI< TStr,TVec< TKeyDat< TStr,TInt >,int > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStr,TStrIntKdV > const *

        """
        return _snap.TStrStrIntKdVHI___call__(self)

    def __deref__(self):
        """
        __deref__(TStrStrIntKdVHI self) -> THashKeyDatI< TStr,TVec< TKeyDat< TStr,TInt >,int > >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TStr,TStrIntKdV > const *

        """
        return _snap.TStrStrIntKdVHI___deref__(self)

    def Next(self):
        """
        Next(TStrStrIntKdVHI self) -> TStrStrIntKdVHI

        Parameters:
            self: THashKeyDatI< TStr,TStrIntKdV > *

        """
        return _snap.TStrStrIntKdVHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TStrStrIntKdVHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStr,TStrIntKdV > const *

        """
        return _snap.TStrStrIntKdVHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TStrStrIntKdVHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStr,TStrIntKdV > const *

        """
        return _snap.TStrStrIntKdVHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TStrStrIntKdVHI self) -> TStr

        Parameters:
            self: THashKeyDatI< TStr,TStrIntKdV > const *

        """
        return _snap.TStrStrIntKdVHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TStrStrIntKdVHI self) -> TVec< TKeyDat< TStr,TInt >,int > const
        GetDat(TStrStrIntKdVHI self) -> TVec< TKeyDat< TStr,TInt >,int > &

        Parameters:
            self: THashKeyDatI< TStr,TStrIntKdV > *

        """
        return _snap.TStrStrIntKdVHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrStrIntKdVHI
TStrStrIntKdVHI.__eq__ = new_instancemethod(_snap.TStrStrIntKdVHI___eq__,None,TStrStrIntKdVHI)
TStrStrIntKdVHI.__lt__ = new_instancemethod(_snap.TStrStrIntKdVHI___lt__,None,TStrStrIntKdVHI)
TStrStrIntKdVHI.__ref__ = new_instancemethod(_snap.TStrStrIntKdVHI___ref__,None,TStrStrIntKdVHI)
TStrStrIntKdVHI.__call__ = new_instancemethod(_snap.TStrStrIntKdVHI___call__,None,TStrStrIntKdVHI)
TStrStrIntKdVHI.__deref__ = new_instancemethod(_snap.TStrStrIntKdVHI___deref__,None,TStrStrIntKdVHI)
TStrStrIntKdVHI.Next = new_instancemethod(_snap.TStrStrIntKdVHI_Next,None,TStrStrIntKdVHI)
TStrStrIntKdVHI.IsEmpty = new_instancemethod(_snap.TStrStrIntKdVHI_IsEmpty,None,TStrStrIntKdVHI)
TStrStrIntKdVHI.IsEnd = new_instancemethod(_snap.TStrStrIntKdVHI_IsEnd,None,TStrStrIntKdVHI)
TStrStrIntKdVHI.GetKey = new_instancemethod(_snap.TStrStrIntKdVHI_GetKey,None,TStrStrIntKdVHI)
TStrStrIntKdVHI.GetDat = new_instancemethod(_snap.TStrStrIntKdVHI_GetDat,None,TStrStrIntKdVHI)
TStrStrIntKdVHI_swigregister = _snap.TStrStrIntKdVHI_swigregister
TStrStrIntKdVHI_swigregister(TStrStrIntKdVHI)

class TStrPrBoolHI(object):
    """Proxy of C++ THashKeyDatI<(TStrPr,TBool)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TStrPr,TBool)> self) -> TStrPrBoolHI
        __init__(THashKeyDatI<(TStrPr,TBool)> self, TStrPrBoolHI _HashKeyDatI) -> TStrPrBoolHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TStrPr,TBool > const &

        __init__(THashKeyDatI<(TStrPr,TBool)> self, THashKeyDatI< TPair< TStr,TStr >,TBool >::THKeyDat const * _KeyDatI, THashKeyDatI< TPair< TStr,TStr >,TBool >::THKeyDat const * _EndI) -> TStrPrBoolHI

        Parameters:
            _KeyDatI: THashKeyDatI< TPair< TStr,TStr >,TBool >::THKeyDat const *
            _EndI: THashKeyDatI< TPair< TStr,TStr >,TBool >::THKeyDat const *

        """
        _snap.TStrPrBoolHI_swiginit(self,_snap.new_TStrPrBoolHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TStrPrBoolHI self, TStrPrBoolHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStrPr,TBool > const &

        """
        return _snap.TStrPrBoolHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TStrPrBoolHI self, TStrPrBoolHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStrPr,TBool > const &

        """
        return _snap.TStrPrBoolHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TStrPrBoolHI self) -> THashKeyDatI< TPair< TStr,TStr >,TBool >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStrPr,TBool > const *

        """
        return _snap.TStrPrBoolHI___ref__(self)

    def __call__(self):
        """
        __call__(TStrPrBoolHI self) -> THashKeyDatI< TPair< TStr,TStr >,TBool >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStrPr,TBool > const *

        """
        return _snap.TStrPrBoolHI___call__(self)

    def __deref__(self):
        """
        __deref__(TStrPrBoolHI self) -> THashKeyDatI< TPair< TStr,TStr >,TBool >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TStrPr,TBool > const *

        """
        return _snap.TStrPrBoolHI___deref__(self)

    def Next(self):
        """
        Next(TStrPrBoolHI self) -> TStrPrBoolHI

        Parameters:
            self: THashKeyDatI< TStrPr,TBool > *

        """
        return _snap.TStrPrBoolHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TStrPrBoolHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStrPr,TBool > const *

        """
        return _snap.TStrPrBoolHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TStrPrBoolHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStrPr,TBool > const *

        """
        return _snap.TStrPrBoolHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TStrPrBoolHI self) -> TPair< TStr,TStr > const &

        Parameters:
            self: THashKeyDatI< TStrPr,TBool > const *

        """
        return _snap.TStrPrBoolHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TStrPrBoolHI self) -> TBool
        GetDat(TStrPrBoolHI self) -> TBool

        Parameters:
            self: THashKeyDatI< TStrPr,TBool > *

        """
        return _snap.TStrPrBoolHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrPrBoolHI
TStrPrBoolHI.__eq__ = new_instancemethod(_snap.TStrPrBoolHI___eq__,None,TStrPrBoolHI)
TStrPrBoolHI.__lt__ = new_instancemethod(_snap.TStrPrBoolHI___lt__,None,TStrPrBoolHI)
TStrPrBoolHI.__ref__ = new_instancemethod(_snap.TStrPrBoolHI___ref__,None,TStrPrBoolHI)
TStrPrBoolHI.__call__ = new_instancemethod(_snap.TStrPrBoolHI___call__,None,TStrPrBoolHI)
TStrPrBoolHI.__deref__ = new_instancemethod(_snap.TStrPrBoolHI___deref__,None,TStrPrBoolHI)
TStrPrBoolHI.Next = new_instancemethod(_snap.TStrPrBoolHI_Next,None,TStrPrBoolHI)
TStrPrBoolHI.IsEmpty = new_instancemethod(_snap.TStrPrBoolHI_IsEmpty,None,TStrPrBoolHI)
TStrPrBoolHI.IsEnd = new_instancemethod(_snap.TStrPrBoolHI_IsEnd,None,TStrPrBoolHI)
TStrPrBoolHI.GetKey = new_instancemethod(_snap.TStrPrBoolHI_GetKey,None,TStrPrBoolHI)
TStrPrBoolHI.GetDat = new_instancemethod(_snap.TStrPrBoolHI_GetDat,None,TStrPrBoolHI)
TStrPrBoolHI_swigregister = _snap.TStrPrBoolHI_swigregister
TStrPrBoolHI_swigregister(TStrPrBoolHI)

class TStrPrIntHI(object):
    """Proxy of C++ THashKeyDatI<(TStrPr,TInt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TStrPr,TInt)> self) -> TStrPrIntHI
        __init__(THashKeyDatI<(TStrPr,TInt)> self, TStrPrIntHI _HashKeyDatI) -> TStrPrIntHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TStrPr,TInt > const &

        __init__(THashKeyDatI<(TStrPr,TInt)> self, THashKeyDatI< TPair< TStr,TStr >,TInt >::THKeyDat const * _KeyDatI, THashKeyDatI< TPair< TStr,TStr >,TInt >::THKeyDat const * _EndI) -> TStrPrIntHI

        Parameters:
            _KeyDatI: THashKeyDatI< TPair< TStr,TStr >,TInt >::THKeyDat const *
            _EndI: THashKeyDatI< TPair< TStr,TStr >,TInt >::THKeyDat const *

        """
        _snap.TStrPrIntHI_swiginit(self,_snap.new_TStrPrIntHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TStrPrIntHI self, TStrPrIntHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStrPr,TInt > const &

        """
        return _snap.TStrPrIntHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TStrPrIntHI self, TStrPrIntHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStrPr,TInt > const &

        """
        return _snap.TStrPrIntHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TStrPrIntHI self) -> THashKeyDatI< TPair< TStr,TStr >,TInt >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStrPr,TInt > const *

        """
        return _snap.TStrPrIntHI___ref__(self)

    def __call__(self):
        """
        __call__(TStrPrIntHI self) -> THashKeyDatI< TPair< TStr,TStr >,TInt >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStrPr,TInt > const *

        """
        return _snap.TStrPrIntHI___call__(self)

    def __deref__(self):
        """
        __deref__(TStrPrIntHI self) -> THashKeyDatI< TPair< TStr,TStr >,TInt >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TStrPr,TInt > const *

        """
        return _snap.TStrPrIntHI___deref__(self)

    def Next(self):
        """
        Next(TStrPrIntHI self) -> TStrPrIntHI

        Parameters:
            self: THashKeyDatI< TStrPr,TInt > *

        """
        return _snap.TStrPrIntHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TStrPrIntHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStrPr,TInt > const *

        """
        return _snap.TStrPrIntHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TStrPrIntHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStrPr,TInt > const *

        """
        return _snap.TStrPrIntHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TStrPrIntHI self) -> TPair< TStr,TStr > const &

        Parameters:
            self: THashKeyDatI< TStrPr,TInt > const *

        """
        return _snap.TStrPrIntHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TStrPrIntHI self) -> TInt
        GetDat(TStrPrIntHI self) -> TInt

        Parameters:
            self: THashKeyDatI< TStrPr,TInt > *

        """
        return _snap.TStrPrIntHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrPrIntHI
TStrPrIntHI.__eq__ = new_instancemethod(_snap.TStrPrIntHI___eq__,None,TStrPrIntHI)
TStrPrIntHI.__lt__ = new_instancemethod(_snap.TStrPrIntHI___lt__,None,TStrPrIntHI)
TStrPrIntHI.__ref__ = new_instancemethod(_snap.TStrPrIntHI___ref__,None,TStrPrIntHI)
TStrPrIntHI.__call__ = new_instancemethod(_snap.TStrPrIntHI___call__,None,TStrPrIntHI)
TStrPrIntHI.__deref__ = new_instancemethod(_snap.TStrPrIntHI___deref__,None,TStrPrIntHI)
TStrPrIntHI.Next = new_instancemethod(_snap.TStrPrIntHI_Next,None,TStrPrIntHI)
TStrPrIntHI.IsEmpty = new_instancemethod(_snap.TStrPrIntHI_IsEmpty,None,TStrPrIntHI)
TStrPrIntHI.IsEnd = new_instancemethod(_snap.TStrPrIntHI_IsEnd,None,TStrPrIntHI)
TStrPrIntHI.GetKey = new_instancemethod(_snap.TStrPrIntHI_GetKey,None,TStrPrIntHI)
TStrPrIntHI.GetDat = new_instancemethod(_snap.TStrPrIntHI_GetDat,None,TStrPrIntHI)
TStrPrIntHI_swigregister = _snap.TStrPrIntHI_swigregister
TStrPrIntHI_swigregister(TStrPrIntHI)

class TStrPrFltHI(object):
    """Proxy of C++ THashKeyDatI<(TStrPr,TFlt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TStrPr,TFlt)> self) -> TStrPrFltHI
        __init__(THashKeyDatI<(TStrPr,TFlt)> self, TStrPrFltHI _HashKeyDatI) -> TStrPrFltHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TStrPr,TFlt > const &

        __init__(THashKeyDatI<(TStrPr,TFlt)> self, THashKeyDatI< TPair< TStr,TStr >,TFlt >::THKeyDat const * _KeyDatI, THashKeyDatI< TPair< TStr,TStr >,TFlt >::THKeyDat const * _EndI) -> TStrPrFltHI

        Parameters:
            _KeyDatI: THashKeyDatI< TPair< TStr,TStr >,TFlt >::THKeyDat const *
            _EndI: THashKeyDatI< TPair< TStr,TStr >,TFlt >::THKeyDat const *

        """
        _snap.TStrPrFltHI_swiginit(self,_snap.new_TStrPrFltHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TStrPrFltHI self, TStrPrFltHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStrPr,TFlt > const &

        """
        return _snap.TStrPrFltHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TStrPrFltHI self, TStrPrFltHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStrPr,TFlt > const &

        """
        return _snap.TStrPrFltHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TStrPrFltHI self) -> THashKeyDatI< TPair< TStr,TStr >,TFlt >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStrPr,TFlt > const *

        """
        return _snap.TStrPrFltHI___ref__(self)

    def __call__(self):
        """
        __call__(TStrPrFltHI self) -> THashKeyDatI< TPair< TStr,TStr >,TFlt >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStrPr,TFlt > const *

        """
        return _snap.TStrPrFltHI___call__(self)

    def __deref__(self):
        """
        __deref__(TStrPrFltHI self) -> THashKeyDatI< TPair< TStr,TStr >,TFlt >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TStrPr,TFlt > const *

        """
        return _snap.TStrPrFltHI___deref__(self)

    def Next(self):
        """
        Next(TStrPrFltHI self) -> TStrPrFltHI

        Parameters:
            self: THashKeyDatI< TStrPr,TFlt > *

        """
        return _snap.TStrPrFltHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TStrPrFltHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStrPr,TFlt > const *

        """
        return _snap.TStrPrFltHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TStrPrFltHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStrPr,TFlt > const *

        """
        return _snap.TStrPrFltHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TStrPrFltHI self) -> TPair< TStr,TStr > const &

        Parameters:
            self: THashKeyDatI< TStrPr,TFlt > const *

        """
        return _snap.TStrPrFltHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TStrPrFltHI self) -> TFlt
        GetDat(TStrPrFltHI self) -> TFlt

        Parameters:
            self: THashKeyDatI< TStrPr,TFlt > *

        """
        return _snap.TStrPrFltHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrPrFltHI
TStrPrFltHI.__eq__ = new_instancemethod(_snap.TStrPrFltHI___eq__,None,TStrPrFltHI)
TStrPrFltHI.__lt__ = new_instancemethod(_snap.TStrPrFltHI___lt__,None,TStrPrFltHI)
TStrPrFltHI.__ref__ = new_instancemethod(_snap.TStrPrFltHI___ref__,None,TStrPrFltHI)
TStrPrFltHI.__call__ = new_instancemethod(_snap.TStrPrFltHI___call__,None,TStrPrFltHI)
TStrPrFltHI.__deref__ = new_instancemethod(_snap.TStrPrFltHI___deref__,None,TStrPrFltHI)
TStrPrFltHI.Next = new_instancemethod(_snap.TStrPrFltHI_Next,None,TStrPrFltHI)
TStrPrFltHI.IsEmpty = new_instancemethod(_snap.TStrPrFltHI_IsEmpty,None,TStrPrFltHI)
TStrPrFltHI.IsEnd = new_instancemethod(_snap.TStrPrFltHI_IsEnd,None,TStrPrFltHI)
TStrPrFltHI.GetKey = new_instancemethod(_snap.TStrPrFltHI_GetKey,None,TStrPrFltHI)
TStrPrFltHI.GetDat = new_instancemethod(_snap.TStrPrFltHI_GetDat,None,TStrPrFltHI)
TStrPrFltHI_swigregister = _snap.TStrPrFltHI_swigregister
TStrPrFltHI_swigregister(TStrPrFltHI)

class TStrPrStrHI(object):
    """Proxy of C++ THashKeyDatI<(TStrPr,TStr)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TStrPr,TStr)> self) -> TStrPrStrHI
        __init__(THashKeyDatI<(TStrPr,TStr)> self, TStrPrStrHI _HashKeyDatI) -> TStrPrStrHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TStrPr,TStr > const &

        __init__(THashKeyDatI<(TStrPr,TStr)> self, THashKeyDatI< TPair< TStr,TStr >,TStr >::THKeyDat const * _KeyDatI, THashKeyDatI< TPair< TStr,TStr >,TStr >::THKeyDat const * _EndI) -> TStrPrStrHI

        Parameters:
            _KeyDatI: THashKeyDatI< TPair< TStr,TStr >,TStr >::THKeyDat const *
            _EndI: THashKeyDatI< TPair< TStr,TStr >,TStr >::THKeyDat const *

        """
        _snap.TStrPrStrHI_swiginit(self,_snap.new_TStrPrStrHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TStrPrStrHI self, TStrPrStrHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStrPr,TStr > const &

        """
        return _snap.TStrPrStrHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TStrPrStrHI self, TStrPrStrHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStrPr,TStr > const &

        """
        return _snap.TStrPrStrHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TStrPrStrHI self) -> THashKeyDatI< TPair< TStr,TStr >,TStr >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStrPr,TStr > const *

        """
        return _snap.TStrPrStrHI___ref__(self)

    def __call__(self):
        """
        __call__(TStrPrStrHI self) -> THashKeyDatI< TPair< TStr,TStr >,TStr >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStrPr,TStr > const *

        """
        return _snap.TStrPrStrHI___call__(self)

    def __deref__(self):
        """
        __deref__(TStrPrStrHI self) -> THashKeyDatI< TPair< TStr,TStr >,TStr >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TStrPr,TStr > const *

        """
        return _snap.TStrPrStrHI___deref__(self)

    def Next(self):
        """
        Next(TStrPrStrHI self) -> TStrPrStrHI

        Parameters:
            self: THashKeyDatI< TStrPr,TStr > *

        """
        return _snap.TStrPrStrHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TStrPrStrHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStrPr,TStr > const *

        """
        return _snap.TStrPrStrHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TStrPrStrHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStrPr,TStr > const *

        """
        return _snap.TStrPrStrHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TStrPrStrHI self) -> TPair< TStr,TStr > const &

        Parameters:
            self: THashKeyDatI< TStrPr,TStr > const *

        """
        return _snap.TStrPrStrHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TStrPrStrHI self) -> TStr
        GetDat(TStrPrStrHI self) -> TStr

        Parameters:
            self: THashKeyDatI< TStrPr,TStr > *

        """
        return _snap.TStrPrStrHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrPrStrHI
TStrPrStrHI.__eq__ = new_instancemethod(_snap.TStrPrStrHI___eq__,None,TStrPrStrHI)
TStrPrStrHI.__lt__ = new_instancemethod(_snap.TStrPrStrHI___lt__,None,TStrPrStrHI)
TStrPrStrHI.__ref__ = new_instancemethod(_snap.TStrPrStrHI___ref__,None,TStrPrStrHI)
TStrPrStrHI.__call__ = new_instancemethod(_snap.TStrPrStrHI___call__,None,TStrPrStrHI)
TStrPrStrHI.__deref__ = new_instancemethod(_snap.TStrPrStrHI___deref__,None,TStrPrStrHI)
TStrPrStrHI.Next = new_instancemethod(_snap.TStrPrStrHI_Next,None,TStrPrStrHI)
TStrPrStrHI.IsEmpty = new_instancemethod(_snap.TStrPrStrHI_IsEmpty,None,TStrPrStrHI)
TStrPrStrHI.IsEnd = new_instancemethod(_snap.TStrPrStrHI_IsEnd,None,TStrPrStrHI)
TStrPrStrHI.GetKey = new_instancemethod(_snap.TStrPrStrHI_GetKey,None,TStrPrStrHI)
TStrPrStrHI.GetDat = new_instancemethod(_snap.TStrPrStrHI_GetDat,None,TStrPrStrHI)
TStrPrStrHI_swigregister = _snap.TStrPrStrHI_swigregister
TStrPrStrHI_swigregister(TStrPrStrHI)

class TStrPrStrVHI(object):
    """Proxy of C++ THashKeyDatI<(TStrPr,TStrV)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TStrPr,TStrV)> self) -> TStrPrStrVHI
        __init__(THashKeyDatI<(TStrPr,TStrV)> self, TStrPrStrVHI _HashKeyDatI) -> TStrPrStrVHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TStrPr,TStrV > const &

        __init__(THashKeyDatI<(TStrPr,TStrV)> self, THashKeyDatI< TPair< TStr,TStr >,TVec< TStr,int > >::THKeyDat const * _KeyDatI, THashKeyDatI< TPair< TStr,TStr >,TVec< TStr,int > >::THKeyDat const * _EndI) -> TStrPrStrVHI

        Parameters:
            _KeyDatI: THashKeyDatI< TPair< TStr,TStr >,TVec< TStr,int > >::THKeyDat const *
            _EndI: THashKeyDatI< TPair< TStr,TStr >,TVec< TStr,int > >::THKeyDat const *

        """
        _snap.TStrPrStrVHI_swiginit(self,_snap.new_TStrPrStrVHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TStrPrStrVHI self, TStrPrStrVHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStrPr,TStrV > const &

        """
        return _snap.TStrPrStrVHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TStrPrStrVHI self, TStrPrStrVHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStrPr,TStrV > const &

        """
        return _snap.TStrPrStrVHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TStrPrStrVHI self) -> THashKeyDatI< TPair< TStr,TStr >,TVec< TStr,int > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStrPr,TStrV > const *

        """
        return _snap.TStrPrStrVHI___ref__(self)

    def __call__(self):
        """
        __call__(TStrPrStrVHI self) -> THashKeyDatI< TPair< TStr,TStr >,TVec< TStr,int > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStrPr,TStrV > const *

        """
        return _snap.TStrPrStrVHI___call__(self)

    def __deref__(self):
        """
        __deref__(TStrPrStrVHI self) -> THashKeyDatI< TPair< TStr,TStr >,TVec< TStr,int > >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TStrPr,TStrV > const *

        """
        return _snap.TStrPrStrVHI___deref__(self)

    def Next(self):
        """
        Next(TStrPrStrVHI self) -> TStrPrStrVHI

        Parameters:
            self: THashKeyDatI< TStrPr,TStrV > *

        """
        return _snap.TStrPrStrVHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TStrPrStrVHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStrPr,TStrV > const *

        """
        return _snap.TStrPrStrVHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TStrPrStrVHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStrPr,TStrV > const *

        """
        return _snap.TStrPrStrVHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TStrPrStrVHI self) -> TPair< TStr,TStr > const &

        Parameters:
            self: THashKeyDatI< TStrPr,TStrV > const *

        """
        return _snap.TStrPrStrVHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TStrPrStrVHI self) -> TStrV
        GetDat(TStrPrStrVHI self) -> TStrV

        Parameters:
            self: THashKeyDatI< TStrPr,TStrV > *

        """
        return _snap.TStrPrStrVHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrPrStrVHI
TStrPrStrVHI.__eq__ = new_instancemethod(_snap.TStrPrStrVHI___eq__,None,TStrPrStrVHI)
TStrPrStrVHI.__lt__ = new_instancemethod(_snap.TStrPrStrVHI___lt__,None,TStrPrStrVHI)
TStrPrStrVHI.__ref__ = new_instancemethod(_snap.TStrPrStrVHI___ref__,None,TStrPrStrVHI)
TStrPrStrVHI.__call__ = new_instancemethod(_snap.TStrPrStrVHI___call__,None,TStrPrStrVHI)
TStrPrStrVHI.__deref__ = new_instancemethod(_snap.TStrPrStrVHI___deref__,None,TStrPrStrVHI)
TStrPrStrVHI.Next = new_instancemethod(_snap.TStrPrStrVHI_Next,None,TStrPrStrVHI)
TStrPrStrVHI.IsEmpty = new_instancemethod(_snap.TStrPrStrVHI_IsEmpty,None,TStrPrStrVHI)
TStrPrStrVHI.IsEnd = new_instancemethod(_snap.TStrPrStrVHI_IsEnd,None,TStrPrStrVHI)
TStrPrStrVHI.GetKey = new_instancemethod(_snap.TStrPrStrVHI_GetKey,None,TStrPrStrVHI)
TStrPrStrVHI.GetDat = new_instancemethod(_snap.TStrPrStrVHI_GetDat,None,TStrPrStrVHI)
TStrPrStrVHI_swigregister = _snap.TStrPrStrVHI_swigregister
TStrPrStrVHI_swigregister(TStrPrStrVHI)

class TStrTrIntHI(object):
    """Proxy of C++ THashKeyDatI<(TStrTr,TInt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TStrTr,TInt)> self) -> TStrTrIntHI
        __init__(THashKeyDatI<(TStrTr,TInt)> self, TStrTrIntHI _HashKeyDatI) -> TStrTrIntHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TStrTr,TInt > const &

        __init__(THashKeyDatI<(TStrTr,TInt)> self, THashKeyDatI< TTriple< TStr,TStr,TStr >,TInt >::THKeyDat const * _KeyDatI, THashKeyDatI< TTriple< TStr,TStr,TStr >,TInt >::THKeyDat const * _EndI) -> TStrTrIntHI

        Parameters:
            _KeyDatI: THashKeyDatI< TTriple< TStr,TStr,TStr >,TInt >::THKeyDat const *
            _EndI: THashKeyDatI< TTriple< TStr,TStr,TStr >,TInt >::THKeyDat const *

        """
        _snap.TStrTrIntHI_swiginit(self,_snap.new_TStrTrIntHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TStrTrIntHI self, TStrTrIntHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStrTr,TInt > const &

        """
        return _snap.TStrTrIntHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TStrTrIntHI self, TStrTrIntHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStrTr,TInt > const &

        """
        return _snap.TStrTrIntHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TStrTrIntHI self) -> THashKeyDatI< TTriple< TStr,TStr,TStr >,TInt >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStrTr,TInt > const *

        """
        return _snap.TStrTrIntHI___ref__(self)

    def __call__(self):
        """
        __call__(TStrTrIntHI self) -> THashKeyDatI< TTriple< TStr,TStr,TStr >,TInt >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStrTr,TInt > const *

        """
        return _snap.TStrTrIntHI___call__(self)

    def __deref__(self):
        """
        __deref__(TStrTrIntHI self) -> THashKeyDatI< TTriple< TStr,TStr,TStr >,TInt >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TStrTr,TInt > const *

        """
        return _snap.TStrTrIntHI___deref__(self)

    def Next(self):
        """
        Next(TStrTrIntHI self) -> TStrTrIntHI

        Parameters:
            self: THashKeyDatI< TStrTr,TInt > *

        """
        return _snap.TStrTrIntHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TStrTrIntHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStrTr,TInt > const *

        """
        return _snap.TStrTrIntHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TStrTrIntHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStrTr,TInt > const *

        """
        return _snap.TStrTrIntHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TStrTrIntHI self) -> TTriple< TStr,TStr,TStr > const &

        Parameters:
            self: THashKeyDatI< TStrTr,TInt > const *

        """
        return _snap.TStrTrIntHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TStrTrIntHI self) -> TInt
        GetDat(TStrTrIntHI self) -> TInt

        Parameters:
            self: THashKeyDatI< TStrTr,TInt > *

        """
        return _snap.TStrTrIntHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrTrIntHI
TStrTrIntHI.__eq__ = new_instancemethod(_snap.TStrTrIntHI___eq__,None,TStrTrIntHI)
TStrTrIntHI.__lt__ = new_instancemethod(_snap.TStrTrIntHI___lt__,None,TStrTrIntHI)
TStrTrIntHI.__ref__ = new_instancemethod(_snap.TStrTrIntHI___ref__,None,TStrTrIntHI)
TStrTrIntHI.__call__ = new_instancemethod(_snap.TStrTrIntHI___call__,None,TStrTrIntHI)
TStrTrIntHI.__deref__ = new_instancemethod(_snap.TStrTrIntHI___deref__,None,TStrTrIntHI)
TStrTrIntHI.Next = new_instancemethod(_snap.TStrTrIntHI_Next,None,TStrTrIntHI)
TStrTrIntHI.IsEmpty = new_instancemethod(_snap.TStrTrIntHI_IsEmpty,None,TStrTrIntHI)
TStrTrIntHI.IsEnd = new_instancemethod(_snap.TStrTrIntHI_IsEnd,None,TStrTrIntHI)
TStrTrIntHI.GetKey = new_instancemethod(_snap.TStrTrIntHI_GetKey,None,TStrTrIntHI)
TStrTrIntHI.GetDat = new_instancemethod(_snap.TStrTrIntHI_GetDat,None,TStrTrIntHI)
TStrTrIntHI_swigregister = _snap.TStrTrIntHI_swigregister
TStrTrIntHI_swigregister(TStrTrIntHI)

class TStrIntPrIntHI(object):
    """Proxy of C++ THashKeyDatI<(TStrIntPr,TInt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TStrIntPr,TInt)> self) -> TStrIntPrIntHI
        __init__(THashKeyDatI<(TStrIntPr,TInt)> self, TStrIntPrIntHI _HashKeyDatI) -> TStrIntPrIntHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TStrIntPr,TInt > const &

        __init__(THashKeyDatI<(TStrIntPr,TInt)> self, THashKeyDatI< TPair< TStr,TInt >,TInt >::THKeyDat const * _KeyDatI, THashKeyDatI< TPair< TStr,TInt >,TInt >::THKeyDat const * _EndI) -> TStrIntPrIntHI

        Parameters:
            _KeyDatI: THashKeyDatI< TPair< TStr,TInt >,TInt >::THKeyDat const *
            _EndI: THashKeyDatI< TPair< TStr,TInt >,TInt >::THKeyDat const *

        """
        _snap.TStrIntPrIntHI_swiginit(self,_snap.new_TStrIntPrIntHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TStrIntPrIntHI self, TStrIntPrIntHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStrIntPr,TInt > const &

        """
        return _snap.TStrIntPrIntHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TStrIntPrIntHI self, TStrIntPrIntHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStrIntPr,TInt > const &

        """
        return _snap.TStrIntPrIntHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TStrIntPrIntHI self) -> THashKeyDatI< TPair< TStr,TInt >,TInt >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStrIntPr,TInt > const *

        """
        return _snap.TStrIntPrIntHI___ref__(self)

    def __call__(self):
        """
        __call__(TStrIntPrIntHI self) -> THashKeyDatI< TPair< TStr,TInt >,TInt >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStrIntPr,TInt > const *

        """
        return _snap.TStrIntPrIntHI___call__(self)

    def __deref__(self):
        """
        __deref__(TStrIntPrIntHI self) -> THashKeyDatI< TPair< TStr,TInt >,TInt >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TStrIntPr,TInt > const *

        """
        return _snap.TStrIntPrIntHI___deref__(self)

    def Next(self):
        """
        Next(TStrIntPrIntHI self) -> TStrIntPrIntHI

        Parameters:
            self: THashKeyDatI< TStrIntPr,TInt > *

        """
        return _snap.TStrIntPrIntHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TStrIntPrIntHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStrIntPr,TInt > const *

        """
        return _snap.TStrIntPrIntHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TStrIntPrIntHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStrIntPr,TInt > const *

        """
        return _snap.TStrIntPrIntHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TStrIntPrIntHI self) -> TPair< TStr,TInt > const &

        Parameters:
            self: THashKeyDatI< TStrIntPr,TInt > const *

        """
        return _snap.TStrIntPrIntHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TStrIntPrIntHI self) -> TInt
        GetDat(TStrIntPrIntHI self) -> TInt

        Parameters:
            self: THashKeyDatI< TStrIntPr,TInt > *

        """
        return _snap.TStrIntPrIntHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrIntPrIntHI
TStrIntPrIntHI.__eq__ = new_instancemethod(_snap.TStrIntPrIntHI___eq__,None,TStrIntPrIntHI)
TStrIntPrIntHI.__lt__ = new_instancemethod(_snap.TStrIntPrIntHI___lt__,None,TStrIntPrIntHI)
TStrIntPrIntHI.__ref__ = new_instancemethod(_snap.TStrIntPrIntHI___ref__,None,TStrIntPrIntHI)
TStrIntPrIntHI.__call__ = new_instancemethod(_snap.TStrIntPrIntHI___call__,None,TStrIntPrIntHI)
TStrIntPrIntHI.__deref__ = new_instancemethod(_snap.TStrIntPrIntHI___deref__,None,TStrIntPrIntHI)
TStrIntPrIntHI.Next = new_instancemethod(_snap.TStrIntPrIntHI_Next,None,TStrIntPrIntHI)
TStrIntPrIntHI.IsEmpty = new_instancemethod(_snap.TStrIntPrIntHI_IsEmpty,None,TStrIntPrIntHI)
TStrIntPrIntHI.IsEnd = new_instancemethod(_snap.TStrIntPrIntHI_IsEnd,None,TStrIntPrIntHI)
TStrIntPrIntHI.GetKey = new_instancemethod(_snap.TStrIntPrIntHI_GetKey,None,TStrIntPrIntHI)
TStrIntPrIntHI.GetDat = new_instancemethod(_snap.TStrIntPrIntHI_GetDat,None,TStrIntPrIntHI)
TStrIntPrIntHI_swigregister = _snap.TStrIntPrIntHI_swigregister
TStrIntPrIntHI_swigregister(TStrIntPrIntHI)

class TStrVHI(object):
    """Proxy of C++ THashKeyDatI<(TStrV,TInt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TStrV,TInt)> self) -> TStrVHI
        __init__(THashKeyDatI<(TStrV,TInt)> self, TStrVHI _HashKeyDatI) -> TStrVHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TStrV,TInt > const &

        __init__(THashKeyDatI<(TStrV,TInt)> self, THashKeyDatI< TVec< TStr,int >,TInt >::THKeyDat const * _KeyDatI, THashKeyDatI< TVec< TStr,int >,TInt >::THKeyDat const * _EndI) -> TStrVHI

        Parameters:
            _KeyDatI: THashKeyDatI< TVec< TStr,int >,TInt >::THKeyDat const *
            _EndI: THashKeyDatI< TVec< TStr,int >,TInt >::THKeyDat const *

        """
        _snap.TStrVHI_swiginit(self,_snap.new_TStrVHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TStrVHI self, TStrVHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStrV,TInt > const &

        """
        return _snap.TStrVHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TStrVHI self, TStrVHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStrV,TInt > const &

        """
        return _snap.TStrVHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TStrVHI self) -> THashKeyDatI< TVec< TStr,int >,TInt >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStrV,TInt > const *

        """
        return _snap.TStrVHI___ref__(self)

    def __call__(self):
        """
        __call__(TStrVHI self) -> THashKeyDatI< TVec< TStr,int >,TInt >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStrV,TInt > const *

        """
        return _snap.TStrVHI___call__(self)

    def __deref__(self):
        """
        __deref__(TStrVHI self) -> THashKeyDatI< TVec< TStr,int >,TInt >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TStrV,TInt > const *

        """
        return _snap.TStrVHI___deref__(self)

    def Next(self):
        """
        Next(TStrVHI self) -> TStrVHI

        Parameters:
            self: THashKeyDatI< TStrV,TInt > *

        """
        return _snap.TStrVHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TStrVHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStrV,TInt > const *

        """
        return _snap.TStrVHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TStrVHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStrV,TInt > const *

        """
        return _snap.TStrVHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TStrVHI self) -> TStrV

        Parameters:
            self: THashKeyDatI< TStrV,TInt > const *

        """
        return _snap.TStrVHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TStrVHI self) -> TInt
        GetDat(TStrVHI self) -> TInt

        Parameters:
            self: THashKeyDatI< TStrV,TInt > *

        """
        return _snap.TStrVHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrVHI
TStrVHI.__eq__ = new_instancemethod(_snap.TStrVHI___eq__,None,TStrVHI)
TStrVHI.__lt__ = new_instancemethod(_snap.TStrVHI___lt__,None,TStrVHI)
TStrVHI.__ref__ = new_instancemethod(_snap.TStrVHI___ref__,None,TStrVHI)
TStrVHI.__call__ = new_instancemethod(_snap.TStrVHI___call__,None,TStrVHI)
TStrVHI.__deref__ = new_instancemethod(_snap.TStrVHI___deref__,None,TStrVHI)
TStrVHI.Next = new_instancemethod(_snap.TStrVHI_Next,None,TStrVHI)
TStrVHI.IsEmpty = new_instancemethod(_snap.TStrVHI_IsEmpty,None,TStrVHI)
TStrVHI.IsEnd = new_instancemethod(_snap.TStrVHI_IsEnd,None,TStrVHI)
TStrVHI.GetKey = new_instancemethod(_snap.TStrVHI_GetKey,None,TStrVHI)
TStrVHI.GetDat = new_instancemethod(_snap.TStrVHI_GetDat,None,TStrVHI)
TStrVHI_swigregister = _snap.TStrVHI_swigregister
TStrVHI_swigregister(TStrVHI)

class TStrVIntVHI(object):
    """Proxy of C++ THashKeyDatI<(TStrV,TIntV)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TStrV,TIntV)> self) -> TStrVIntVHI
        __init__(THashKeyDatI<(TStrV,TIntV)> self, TStrVIntVHI _HashKeyDatI) -> TStrVIntVHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TStrV,TIntV > const &

        __init__(THashKeyDatI<(TStrV,TIntV)> self, THashKeyDatI< TVec< TStr,int >,TVec< TInt,int > >::THKeyDat const * _KeyDatI, THashKeyDatI< TVec< TStr,int >,TVec< TInt,int > >::THKeyDat const * _EndI) -> TStrVIntVHI

        Parameters:
            _KeyDatI: THashKeyDatI< TVec< TStr,int >,TVec< TInt,int > >::THKeyDat const *
            _EndI: THashKeyDatI< TVec< TStr,int >,TVec< TInt,int > >::THKeyDat const *

        """
        _snap.TStrVIntVHI_swiginit(self,_snap.new_TStrVIntVHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TStrVIntVHI self, TStrVIntVHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStrV,TIntV > const &

        """
        return _snap.TStrVIntVHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TStrVIntVHI self, TStrVIntVHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStrV,TIntV > const &

        """
        return _snap.TStrVIntVHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TStrVIntVHI self) -> THashKeyDatI< TVec< TStr,int >,TVec< TInt,int > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStrV,TIntV > const *

        """
        return _snap.TStrVIntVHI___ref__(self)

    def __call__(self):
        """
        __call__(TStrVIntVHI self) -> THashKeyDatI< TVec< TStr,int >,TVec< TInt,int > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStrV,TIntV > const *

        """
        return _snap.TStrVIntVHI___call__(self)

    def __deref__(self):
        """
        __deref__(TStrVIntVHI self) -> THashKeyDatI< TVec< TStr,int >,TVec< TInt,int > >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TStrV,TIntV > const *

        """
        return _snap.TStrVIntVHI___deref__(self)

    def Next(self):
        """
        Next(TStrVIntVHI self) -> TStrVIntVHI

        Parameters:
            self: THashKeyDatI< TStrV,TIntV > *

        """
        return _snap.TStrVIntVHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TStrVIntVHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStrV,TIntV > const *

        """
        return _snap.TStrVIntVHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TStrVIntVHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStrV,TIntV > const *

        """
        return _snap.TStrVIntVHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TStrVIntVHI self) -> TStrV

        Parameters:
            self: THashKeyDatI< TStrV,TIntV > const *

        """
        return _snap.TStrVIntVHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TStrVIntVHI self) -> TIntV
        GetDat(TStrVIntVHI self) -> TIntV

        Parameters:
            self: THashKeyDatI< TStrV,TIntV > *

        """
        return _snap.TStrVIntVHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrVIntVHI
TStrVIntVHI.__eq__ = new_instancemethod(_snap.TStrVIntVHI___eq__,None,TStrVIntVHI)
TStrVIntVHI.__lt__ = new_instancemethod(_snap.TStrVIntVHI___lt__,None,TStrVIntVHI)
TStrVIntVHI.__ref__ = new_instancemethod(_snap.TStrVIntVHI___ref__,None,TStrVIntVHI)
TStrVIntVHI.__call__ = new_instancemethod(_snap.TStrVIntVHI___call__,None,TStrVIntVHI)
TStrVIntVHI.__deref__ = new_instancemethod(_snap.TStrVIntVHI___deref__,None,TStrVIntVHI)
TStrVIntVHI.Next = new_instancemethod(_snap.TStrVIntVHI_Next,None,TStrVIntVHI)
TStrVIntVHI.IsEmpty = new_instancemethod(_snap.TStrVIntVHI_IsEmpty,None,TStrVIntVHI)
TStrVIntVHI.IsEnd = new_instancemethod(_snap.TStrVIntVHI_IsEnd,None,TStrVIntVHI)
TStrVIntVHI.GetKey = new_instancemethod(_snap.TStrVIntVHI_GetKey,None,TStrVIntVHI)
TStrVIntVHI.GetDat = new_instancemethod(_snap.TStrVIntVHI_GetDat,None,TStrVIntVHI)
TStrVIntVHI_swigregister = _snap.TStrVIntVHI_swigregister
TStrVIntVHI_swigregister(TStrVIntVHI)

class TStrVStrHI(object):
    """Proxy of C++ THashKeyDatI<(TStrV,TStr)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TStrV,TStr)> self) -> TStrVStrHI
        __init__(THashKeyDatI<(TStrV,TStr)> self, TStrVStrHI _HashKeyDatI) -> TStrVStrHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TStrV,TStr > const &

        __init__(THashKeyDatI<(TStrV,TStr)> self, THashKeyDatI< TVec< TStr,int >,TStr >::THKeyDat const * _KeyDatI, THashKeyDatI< TVec< TStr,int >,TStr >::THKeyDat const * _EndI) -> TStrVStrHI

        Parameters:
            _KeyDatI: THashKeyDatI< TVec< TStr,int >,TStr >::THKeyDat const *
            _EndI: THashKeyDatI< TVec< TStr,int >,TStr >::THKeyDat const *

        """
        _snap.TStrVStrHI_swiginit(self,_snap.new_TStrVStrHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TStrVStrHI self, TStrVStrHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStrV,TStr > const &

        """
        return _snap.TStrVStrHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TStrVStrHI self, TStrVStrHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStrV,TStr > const &

        """
        return _snap.TStrVStrHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TStrVStrHI self) -> THashKeyDatI< TVec< TStr,int >,TStr >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStrV,TStr > const *

        """
        return _snap.TStrVStrHI___ref__(self)

    def __call__(self):
        """
        __call__(TStrVStrHI self) -> THashKeyDatI< TVec< TStr,int >,TStr >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStrV,TStr > const *

        """
        return _snap.TStrVStrHI___call__(self)

    def __deref__(self):
        """
        __deref__(TStrVStrHI self) -> THashKeyDatI< TVec< TStr,int >,TStr >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TStrV,TStr > const *

        """
        return _snap.TStrVStrHI___deref__(self)

    def Next(self):
        """
        Next(TStrVStrHI self) -> TStrVStrHI

        Parameters:
            self: THashKeyDatI< TStrV,TStr > *

        """
        return _snap.TStrVStrHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TStrVStrHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStrV,TStr > const *

        """
        return _snap.TStrVStrHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TStrVStrHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStrV,TStr > const *

        """
        return _snap.TStrVStrHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TStrVStrHI self) -> TStrV

        Parameters:
            self: THashKeyDatI< TStrV,TStr > const *

        """
        return _snap.TStrVStrHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TStrVStrHI self) -> TStr
        GetDat(TStrVStrHI self) -> TStr

        Parameters:
            self: THashKeyDatI< TStrV,TStr > *

        """
        return _snap.TStrVStrHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrVStrHI
TStrVStrHI.__eq__ = new_instancemethod(_snap.TStrVStrHI___eq__,None,TStrVStrHI)
TStrVStrHI.__lt__ = new_instancemethod(_snap.TStrVStrHI___lt__,None,TStrVStrHI)
TStrVStrHI.__ref__ = new_instancemethod(_snap.TStrVStrHI___ref__,None,TStrVStrHI)
TStrVStrHI.__call__ = new_instancemethod(_snap.TStrVStrHI___call__,None,TStrVStrHI)
TStrVStrHI.__deref__ = new_instancemethod(_snap.TStrVStrHI___deref__,None,TStrVStrHI)
TStrVStrHI.Next = new_instancemethod(_snap.TStrVStrHI_Next,None,TStrVStrHI)
TStrVStrHI.IsEmpty = new_instancemethod(_snap.TStrVStrHI_IsEmpty,None,TStrVStrHI)
TStrVStrHI.IsEnd = new_instancemethod(_snap.TStrVStrHI_IsEnd,None,TStrVStrHI)
TStrVStrHI.GetKey = new_instancemethod(_snap.TStrVStrHI_GetKey,None,TStrVStrHI)
TStrVStrHI.GetDat = new_instancemethod(_snap.TStrVStrHI_GetDat,None,TStrVStrHI)
TStrVStrHI_swigregister = _snap.TStrVStrHI_swigregister
TStrVStrHI_swigregister(TStrVStrHI)

class TStrVStrVHI(object):
    """Proxy of C++ THashKeyDatI<(TStrV,TStrV)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashKeyDatI<(TStrV,TStrV)> self) -> TStrVStrVHI
        __init__(THashKeyDatI<(TStrV,TStrV)> self, TStrVStrVHI _HashKeyDatI) -> TStrVStrVHI

        Parameters:
            _HashKeyDatI: THashKeyDatI< TStrV,TStrV > const &

        __init__(THashKeyDatI<(TStrV,TStrV)> self, THashKeyDatI< TVec< TStr,int >,TVec< TStr,int > >::THKeyDat const * _KeyDatI, THashKeyDatI< TVec< TStr,int >,TVec< TStr,int > >::THKeyDat const * _EndI) -> TStrVStrVHI

        Parameters:
            _KeyDatI: THashKeyDatI< TVec< TStr,int >,TVec< TStr,int > >::THKeyDat const *
            _EndI: THashKeyDatI< TVec< TStr,int >,TVec< TStr,int > >::THKeyDat const *

        """
        _snap.TStrVStrVHI_swiginit(self,_snap.new_TStrVStrVHI(*args))
    def __eq__(self, *args):
        """
        __eq__(TStrVStrVHI self, TStrVStrVHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStrV,TStrV > const &

        """
        return _snap.TStrVStrVHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TStrVStrVHI self, TStrVStrVHI HashKeyDatI) -> bool

        Parameters:
            HashKeyDatI: THashKeyDatI< TStrV,TStrV > const &

        """
        return _snap.TStrVStrVHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TStrVStrVHI self) -> THashKeyDatI< TVec< TStr,int >,TVec< TStr,int > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStrV,TStrV > const *

        """
        return _snap.TStrVStrVHI___ref__(self)

    def __call__(self):
        """
        __call__(TStrVStrVHI self) -> THashKeyDatI< TVec< TStr,int >,TVec< TStr,int > >::THKeyDat &

        Parameters:
            self: THashKeyDatI< TStrV,TStrV > const *

        """
        return _snap.TStrVStrVHI___call__(self)

    def __deref__(self):
        """
        __deref__(TStrVStrVHI self) -> THashKeyDatI< TVec< TStr,int >,TVec< TStr,int > >::THKeyDat *

        Parameters:
            self: THashKeyDatI< TStrV,TStrV > const *

        """
        return _snap.TStrVStrVHI___deref__(self)

    def Next(self):
        """
        Next(TStrVStrVHI self) -> TStrVStrVHI

        Parameters:
            self: THashKeyDatI< TStrV,TStrV > *

        """
        return _snap.TStrVStrVHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(TStrVStrVHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStrV,TStrV > const *

        """
        return _snap.TStrVStrVHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(TStrVStrVHI self) -> bool

        Parameters:
            self: THashKeyDatI< TStrV,TStrV > const *

        """
        return _snap.TStrVStrVHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(TStrVStrVHI self) -> TStrV

        Parameters:
            self: THashKeyDatI< TStrV,TStrV > const *

        """
        return _snap.TStrVStrVHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(TStrVStrVHI self) -> TStrV
        GetDat(TStrVStrVHI self) -> TStrV

        Parameters:
            self: THashKeyDatI< TStrV,TStrV > *

        """
        return _snap.TStrVStrVHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrVStrVHI
TStrVStrVHI.__eq__ = new_instancemethod(_snap.TStrVStrVHI___eq__,None,TStrVStrVHI)
TStrVStrVHI.__lt__ = new_instancemethod(_snap.TStrVStrVHI___lt__,None,TStrVStrVHI)
TStrVStrVHI.__ref__ = new_instancemethod(_snap.TStrVStrVHI___ref__,None,TStrVStrVHI)
TStrVStrVHI.__call__ = new_instancemethod(_snap.TStrVStrVHI___call__,None,TStrVStrVHI)
TStrVStrVHI.__deref__ = new_instancemethod(_snap.TStrVStrVHI___deref__,None,TStrVStrVHI)
TStrVStrVHI.Next = new_instancemethod(_snap.TStrVStrVHI_Next,None,TStrVStrVHI)
TStrVStrVHI.IsEmpty = new_instancemethod(_snap.TStrVStrVHI_IsEmpty,None,TStrVStrVHI)
TStrVStrVHI.IsEnd = new_instancemethod(_snap.TStrVStrVHI_IsEnd,None,TStrVStrVHI)
TStrVStrVHI.GetKey = new_instancemethod(_snap.TStrVStrVHI_GetKey,None,TStrVStrVHI)
TStrVStrVHI.GetDat = new_instancemethod(_snap.TStrVStrVHI_GetDat,None,TStrVStrVHI)
TStrVStrVHI_swigregister = _snap.TStrVStrVHI_swigregister
TStrVStrVHI_swigregister(TStrVStrVHI)

class TStrV(object):
    """Proxy of C++ TVec<(TStr,int)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TStrV
    def __init__(self, *args): 
        """
        __init__(TVec<(TStr,int)> self) -> TStrV
        __init__(TVec<(TStr,int)> self, TStrV Vec) -> TStrV

        Parameters:
            Vec: TVec< TStr,int > const &

        __init__(TVec<(TStr,int)> self, int const & _Vals) -> TStrV

        Parameters:
            _Vals: int const &

        __init__(TVec<(TStr,int)> self, int const & _MxVals, int const & _Vals) -> TStrV

        Parameters:
            _MxVals: int const &
            _Vals: int const &

        __init__(TVec<(TStr,int)> self, TStr _ValT, int const & _Vals) -> TStrV

        Parameters:
            _ValT: TStr *
            _Vals: int const &

        __init__(TVec<(TStr,int)> self, TSIn SIn) -> TStrV

        Parameters:
            SIn: TSIn &

        """
        _snap.TStrV_swiginit(self,_snap.new_TStrV(*args))
    def Load(self, *args):
        """
        Load(TStrV self, TSIn SIn)

        Parameters:
            SIn: TSIn &

        """
        return _snap.TStrV_Load(self, *args)

    def Save(self, *args):
        """
        Save(TStrV self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.TStrV_Save(self, *args)

    def __add__(self, *args):
        """
        __add__(TStrV self, TStr Val) -> TStrV

        Parameters:
            Val: TStr const &

        """
        return _snap.TStrV___add__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(TStrV self, TStrV Vec) -> bool

        Parameters:
            Vec: TVec< TStr,int > const &

        """
        return _snap.TStrV___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TStrV self, TStrV Vec) -> bool

        Parameters:
            Vec: TVec< TStr,int > const &

        """
        return _snap.TStrV___lt__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(TStrV self) -> int

        Parameters:
            self: TVec< TStr,int > const *

        """
        return _snap.TStrV_GetMemUsed(self)

    def GetMemSize(self):
        """
        GetMemSize(TStrV self) -> int

        Parameters:
            self: TVec< TStr,int > const *

        """
        return _snap.TStrV_GetMemSize(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TStrV self) -> int

        Parameters:
            self: TVec< TStr,int > const *

        """
        return _snap.TStrV_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(TStrV self) -> int

        Parameters:
            self: TVec< TStr,int > const *

        """
        return _snap.TStrV_GetSecHashCd(self)

    def Gen(self, *args):
        """
        Gen(TStrV self, int const & _Vals)

        Parameters:
            _Vals: int const &

        Gen(TStrV self, int const & _MxVals, int const & _Vals)

        Parameters:
            _MxVals: int const &
            _Vals: int const &

        """
        return _snap.TStrV_Gen(self, *args)

    def GenExt(self, *args):
        """
        GenExt(TStrV self, TStr _ValT, int const & _Vals)

        Parameters:
            _ValT: TStr *
            _Vals: int const &

        """
        return _snap.TStrV_GenExt(self, *args)

    def IsExt(self):
        """
        IsExt(TStrV self) -> bool

        Parameters:
            self: TVec< TStr,int > const *

        """
        return _snap.TStrV_IsExt(self)

    def Reserve(self, *args):
        """
        Reserve(TStrV self, int const & _MxVals)

        Parameters:
            _MxVals: int const &

        Reserve(TStrV self, int const & _MxVals, int const & _Vals)

        Parameters:
            _MxVals: int const &
            _Vals: int const &

        """
        return _snap.TStrV_Reserve(self, *args)

    def Clr(self, *args):
        """
        Clr(TStrV self, bool const & DoDel=True, int const & NoDelLim=-1)

        Parameters:
            DoDel: bool const &
            NoDelLim: int const &

        Clr(TStrV self, bool const & DoDel=True)

        Parameters:
            DoDel: bool const &

        Clr(TStrV self)

        Parameters:
            self: TVec< TStr,int > *

        """
        return _snap.TStrV_Clr(self, *args)

    def Trunc(self, *args):
        """
        Trunc(TStrV self, int const & _Vals=-1)

        Parameters:
            _Vals: int const &

        Trunc(TStrV self)

        Parameters:
            self: TVec< TStr,int > *

        """
        return _snap.TStrV_Trunc(self, *args)

    def Pack(self):
        """
        Pack(TStrV self)

        Parameters:
            self: TVec< TStr,int > *

        """
        return _snap.TStrV_Pack(self)

    def MoveFrom(self, *args):
        """
        MoveFrom(TStrV self, TStrV Vec)

        Parameters:
            Vec: TVec< TStr,int > &

        """
        return _snap.TStrV_MoveFrom(self, *args)

    def Empty(self):
        """
        Empty(TStrV self) -> bool

        Parameters:
            self: TVec< TStr,int > const *

        """
        return _snap.TStrV_Empty(self)

    def Len(self):
        """
        Len(TStrV self) -> int

        Parameters:
            self: TVec< TStr,int > const *

        """
        return _snap.TStrV_Len(self)

    def Reserved(self):
        """
        Reserved(TStrV self) -> int

        Parameters:
            self: TVec< TStr,int > const *

        """
        return _snap.TStrV_Reserved(self)

    def Last(self, *args):
        """
        Last(TStrV self) -> TStr
        Last(TStrV self) -> TStr

        Parameters:
            self: TVec< TStr,int > *

        """
        return _snap.TStrV_Last(self, *args)

    def LastValN(self):
        """
        LastValN(TStrV self) -> int

        Parameters:
            self: TVec< TStr,int > const *

        """
        return _snap.TStrV_LastValN(self)

    def LastLast(self, *args):
        """
        LastLast(TStrV self) -> TStr
        LastLast(TStrV self) -> TStr

        Parameters:
            self: TVec< TStr,int > *

        """
        return _snap.TStrV_LastLast(self, *args)

    def BegI(self):
        """
        BegI(TStrV self) -> TStr

        Parameters:
            self: TVec< TStr,int > const *

        """
        return _snap.TStrV_BegI(self)

    def EndI(self):
        """
        EndI(TStrV self) -> TStr

        Parameters:
            self: TVec< TStr,int > const *

        """
        return _snap.TStrV_EndI(self)

    def GetI(self, *args):
        """
        GetI(TStrV self, int const & ValN) -> TStr

        Parameters:
            ValN: int const &

        """
        return _snap.TStrV_GetI(self, *args)

    def AddV(self, *args):
        """
        AddV(TStrV self, TStrV ValV) -> int

        Parameters:
            ValV: TVec< TStr,int > const &

        """
        return _snap.TStrV_AddV(self, *args)

    def AddSorted(self, *args):
        """
        AddSorted(TStrV self, TStr Val, bool const & Asc=True, int const & _MxVals=-1) -> int

        Parameters:
            Val: TStr const &
            Asc: bool const &
            _MxVals: int const &

        AddSorted(TStrV self, TStr Val, bool const & Asc=True) -> int

        Parameters:
            Val: TStr const &
            Asc: bool const &

        AddSorted(TStrV self, TStr Val) -> int

        Parameters:
            Val: TStr const &

        """
        return _snap.TStrV_AddSorted(self, *args)

    def AddBackSorted(self, *args):
        """
        AddBackSorted(TStrV self, TStr Val, bool const & Asc) -> int

        Parameters:
            Val: TStr const &
            Asc: bool const &

        """
        return _snap.TStrV_AddBackSorted(self, *args)

    def AddVMerged(self, *args):
        """
        AddVMerged(TStrV self, TStrV ValV) -> int

        Parameters:
            ValV: TVec< TStr,int > const &

        """
        return _snap.TStrV_AddVMerged(self, *args)

    def AddUnique(self, *args):
        """
        AddUnique(TStrV self, TStr Val) -> int

        Parameters:
            Val: TStr const &

        """
        return _snap.TStrV_AddUnique(self, *args)

    def GetVal(self, *args):
        """
        GetVal(TStrV self, int const & ValN) -> TStr

        Parameters:
            ValN: int const &

        GetVal(TStrV self, int const & ValN) -> TStr

        Parameters:
            ValN: int const &

        """
        return _snap.TStrV_GetVal(self, *args)

    def SetVal(self, *args):
        """
        SetVal(TStrV self, int const & ValN, TStr Val)

        Parameters:
            ValN: int const &
            Val: TStr const &

        """
        return _snap.TStrV_SetVal(self, *args)

    def GetSubValV(self, *args):
        """
        GetSubValV(TStrV self, int const & BValN, int const & EValN, TStrV ValV)

        Parameters:
            BValN: int const &
            EValN: int const &
            ValV: TVec< TStr,int > &

        """
        return _snap.TStrV_GetSubValV(self, *args)

    def Ins(self, *args):
        """
        Ins(TStrV self, int const & ValN, TStr Val)

        Parameters:
            ValN: int const &
            Val: TStr const &

        """
        return _snap.TStrV_Ins(self, *args)

    def Del(self, *args):
        """
        Del(TStrV self, int const & ValN)

        Parameters:
            ValN: int const &

        Del(TStrV self, int const & MnValN, int const & MxValN)

        Parameters:
            MnValN: int const &
            MxValN: int const &

        """
        return _snap.TStrV_Del(self, *args)

    def DelLast(self):
        """
        DelLast(TStrV self)

        Parameters:
            self: TVec< TStr,int > *

        """
        return _snap.TStrV_DelLast(self)

    def DelIfIn(self, *args):
        """
        DelIfIn(TStrV self, TStr Val) -> bool

        Parameters:
            Val: TStr const &

        """
        return _snap.TStrV_DelIfIn(self, *args)

    def DelAll(self, *args):
        """
        DelAll(TStrV self, TStr Val)

        Parameters:
            Val: TStr const &

        """
        return _snap.TStrV_DelAll(self, *args)

    def PutAll(self, *args):
        """
        PutAll(TStrV self, TStr Val)

        Parameters:
            Val: TStr const &

        """
        return _snap.TStrV_PutAll(self, *args)

    def Swap(self, *args):
        """
        Swap(TStrV self, TStrV Vec)

        Parameters:
            Vec: TVec< TStr,int > &

        Swap(TStrV self, int const & ValN1, int const & ValN2)

        Parameters:
            ValN1: int const &
            ValN2: int const &

        """
        return _snap.TStrV_Swap(self, *args)

    def SwapI(*args):
        """
        SwapI(TStr LVal, TStr RVal)

        Parameters:
            LVal: TVec< TStr,int >::TIter
            RVal: TVec< TStr,int >::TIter

        """
        return _snap.TStrV_SwapI(*args)

    SwapI = staticmethod(SwapI)
    def NextPerm(self):
        """
        NextPerm(TStrV self) -> bool

        Parameters:
            self: TVec< TStr,int > *

        """
        return _snap.TStrV_NextPerm(self)

    def PrevPerm(self):
        """
        PrevPerm(TStrV self) -> bool

        Parameters:
            self: TVec< TStr,int > *

        """
        return _snap.TStrV_PrevPerm(self)

    def GetPivotValN(self, *args):
        """
        GetPivotValN(TStrV self, int const & LValN, int const & RValN) -> int

        Parameters:
            LValN: int const &
            RValN: int const &

        """
        return _snap.TStrV_GetPivotValN(self, *args)

    def BSort(self, *args):
        """
        BSort(TStrV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters:
            MnLValN: int const &
            MxRValN: int const &
            Asc: bool const &

        """
        return _snap.TStrV_BSort(self, *args)

    def ISort(self, *args):
        """
        ISort(TStrV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters:
            MnLValN: int const &
            MxRValN: int const &
            Asc: bool const &

        """
        return _snap.TStrV_ISort(self, *args)

    def Partition(self, *args):
        """
        Partition(TStrV self, int const & MnLValN, int const & MxRValN, bool const & Asc) -> int

        Parameters:
            MnLValN: int const &
            MxRValN: int const &
            Asc: bool const &

        """
        return _snap.TStrV_Partition(self, *args)

    def QSort(self, *args):
        """
        QSort(TStrV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters:
            MnLValN: int const &
            MxRValN: int const &
            Asc: bool const &

        """
        return _snap.TStrV_QSort(self, *args)

    def Sort(self, Asc=True):
        """
        Sort(TStrV self, bool const & Asc=True)

        Parameters:
            Asc: bool const &

        Sort(TStrV self)

        Parameters:
            self: TVec< TStr,int > *

        """
        return _snap.TStrV_Sort(self, Asc)

    def IsSorted(self, Asc=True):
        """
        IsSorted(TStrV self, bool const & Asc=True) -> bool

        Parameters:
            Asc: bool const &

        IsSorted(TStrV self) -> bool

        Parameters:
            self: TVec< TStr,int > const *

        """
        return _snap.TStrV_IsSorted(self, Asc)

    def Shuffle(self, *args):
        """
        Shuffle(TStrV self, TRnd Rnd)

        Parameters:
            Rnd: TRnd &

        """
        return _snap.TStrV_Shuffle(self, *args)

    def Reverse(self, *args):
        """
        Reverse(TStrV self)
        Reverse(TStrV self, int LValN, int RValN)

        Parameters:
            LValN: int
            RValN: int

        """
        return _snap.TStrV_Reverse(self, *args)

    def Merge(self):
        """
        Merge(TStrV self)

        Parameters:
            self: TVec< TStr,int > *

        """
        return _snap.TStrV_Merge(self)

    def Intrs(self, *args):
        """
        Intrs(TStrV self, TStrV ValV)

        Parameters:
            ValV: TVec< TStr,int > const &

        Intrs(TStrV self, TStrV ValV, TStrV DstValV)

        Parameters:
            ValV: TVec< TStr,int > const &
            DstValV: TVec< TStr,int > &

        """
        return _snap.TStrV_Intrs(self, *args)

    def Union(self, *args):
        """
        Union(TStrV self, TStrV ValV)

        Parameters:
            ValV: TVec< TStr,int > const &

        Union(TStrV self, TStrV ValV, TStrV DstValV)

        Parameters:
            ValV: TVec< TStr,int > const &
            DstValV: TVec< TStr,int > &

        """
        return _snap.TStrV_Union(self, *args)

    def Diff(self, *args):
        """
        Diff(TStrV self, TStrV ValV)

        Parameters:
            ValV: TVec< TStr,int > const &

        Diff(TStrV self, TStrV ValV, TStrV DstValV)

        Parameters:
            ValV: TVec< TStr,int > const &
            DstValV: TVec< TStr,int > &

        """
        return _snap.TStrV_Diff(self, *args)

    def IntrsLen(self, *args):
        """
        IntrsLen(TStrV self, TStrV ValV) -> int

        Parameters:
            ValV: TVec< TStr,int > const &

        """
        return _snap.TStrV_IntrsLen(self, *args)

    def UnionLen(self, *args):
        """
        UnionLen(TStrV self, TStrV ValV) -> int

        Parameters:
            ValV: TVec< TStr,int > const &

        """
        return _snap.TStrV_UnionLen(self, *args)

    def Count(self, *args):
        """
        Count(TStrV self, TStr Val) -> int

        Parameters:
            Val: TStr const &

        """
        return _snap.TStrV_Count(self, *args)

    def SearchBin(self, *args):
        """
        SearchBin(TStrV self, TStr Val) -> int

        Parameters:
            Val: TStr const &

        SearchBin(TStrV self, TStr Val, int & InsValN) -> int

        Parameters:
            Val: TStr const &
            InsValN: int &

        """
        return _snap.TStrV_SearchBin(self, *args)

    def SearchForw(self, *args):
        """
        SearchForw(TStrV self, TStr Val, int const & BValN=0) -> int

        Parameters:
            Val: TStr const &
            BValN: int const &

        SearchForw(TStrV self, TStr Val) -> int

        Parameters:
            Val: TStr const &

        """
        return _snap.TStrV_SearchForw(self, *args)

    def SearchBack(self, *args):
        """
        SearchBack(TStrV self, TStr Val) -> int

        Parameters:
            Val: TStr const &

        """
        return _snap.TStrV_SearchBack(self, *args)

    def SearchVForw(self, *args):
        """
        SearchVForw(TStrV self, TStrV ValV, int const & BValN=0) -> int

        Parameters:
            ValV: TVec< TStr,int > const &
            BValN: int const &

        SearchVForw(TStrV self, TStrV ValV) -> int

        Parameters:
            ValV: TVec< TStr,int > const &

        """
        return _snap.TStrV_SearchVForw(self, *args)

    def IsIn(self, *args):
        """
        IsIn(TStrV self, TStr Val) -> bool

        Parameters:
            Val: TStr const &

        IsIn(TStrV self, TStr Val, int & ValN) -> bool

        Parameters:
            Val: TStr const &
            ValN: int &

        """
        return _snap.TStrV_IsIn(self, *args)

    def IsInBin(self, *args):
        """
        IsInBin(TStrV self, TStr Val) -> bool

        Parameters:
            Val: TStr const &

        """
        return _snap.TStrV_IsInBin(self, *args)

    def GetDat(self, *args):
        """
        GetDat(TStrV self, TStr Val) -> TStr

        Parameters:
            Val: TStr const &

        """
        return _snap.TStrV_GetDat(self, *args)

    def GetAddDat(self, *args):
        """
        GetAddDat(TStrV self, TStr Val) -> TStr

        Parameters:
            Val: TStr const &

        """
        return _snap.TStrV_GetAddDat(self, *args)

    def GetMxValN(self):
        """
        GetMxValN(TStrV self) -> int

        Parameters:
            self: TVec< TStr,int > const *

        """
        return _snap.TStrV_GetMxValN(self)

    def GetV(*args):
        """
        GetV(TStr Val1) -> TStrV

        Parameters:
            Val1: TStr const &

        GetV(TStr Val1, TStr Val2) -> TStrV

        Parameters:
            Val1: TStr const &
            Val2: TStr const &

        GetV(TStr Val1, TStr Val2, TStr Val3) -> TStrV

        Parameters:
            Val1: TStr const &
            Val2: TStr const &
            Val3: TStr const &

        GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4) -> TStrV

        Parameters:
            Val1: TStr const &
            Val2: TStr const &
            Val3: TStr const &
            Val4: TStr const &

        GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4, TStr Val5) -> TStrV

        Parameters:
            Val1: TStr const &
            Val2: TStr const &
            Val3: TStr const &
            Val4: TStr const &
            Val5: TStr const &

        GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4, TStr Val5, TStr Val6) -> TStrV

        Parameters:
            Val1: TStr const &
            Val2: TStr const &
            Val3: TStr const &
            Val4: TStr const &
            Val5: TStr const &
            Val6: TStr const &

        GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4, TStr Val5, TStr Val6, TStr Val7) -> TStrV

        Parameters:
            Val1: TStr const &
            Val2: TStr const &
            Val3: TStr const &
            Val4: TStr const &
            Val5: TStr const &
            Val6: TStr const &
            Val7: TStr const &

        GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4, TStr Val5, TStr Val6, TStr Val7, TStr Val8) -> TStrV

        Parameters:
            Val1: TStr const &
            Val2: TStr const &
            Val3: TStr const &
            Val4: TStr const &
            Val5: TStr const &
            Val6: TStr const &
            Val7: TStr const &
            Val8: TStr const &

        GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4, TStr Val5, TStr Val6, TStr Val7, TStr Val8, 
            TStr Val9) -> TStrV

        Parameters:
            Val1: TStr const &
            Val2: TStr const &
            Val3: TStr const &
            Val4: TStr const &
            Val5: TStr const &
            Val6: TStr const &
            Val7: TStr const &
            Val8: TStr const &
            Val9: TStr const &

        """
        return _snap.TStrV_GetV(*args)

    GetV = staticmethod(GetV)
TStrV.Load = new_instancemethod(_snap.TStrV_Load,None,TStrV)
TStrV.Save = new_instancemethod(_snap.TStrV_Save,None,TStrV)
TStrV.__add__ = new_instancemethod(_snap.TStrV___add__,None,TStrV)
TStrV.__eq__ = new_instancemethod(_snap.TStrV___eq__,None,TStrV)
TStrV.__lt__ = new_instancemethod(_snap.TStrV___lt__,None,TStrV)
TStrV.GetMemUsed = new_instancemethod(_snap.TStrV_GetMemUsed,None,TStrV)
TStrV.GetMemSize = new_instancemethod(_snap.TStrV_GetMemSize,None,TStrV)
TStrV.GetPrimHashCd = new_instancemethod(_snap.TStrV_GetPrimHashCd,None,TStrV)
TStrV.GetSecHashCd = new_instancemethod(_snap.TStrV_GetSecHashCd,None,TStrV)
TStrV.Gen = new_instancemethod(_snap.TStrV_Gen,None,TStrV)
TStrV.GenExt = new_instancemethod(_snap.TStrV_GenExt,None,TStrV)
TStrV.IsExt = new_instancemethod(_snap.TStrV_IsExt,None,TStrV)
TStrV.Reserve = new_instancemethod(_snap.TStrV_Reserve,None,TStrV)
TStrV.Clr = new_instancemethod(_snap.TStrV_Clr,None,TStrV)
TStrV.Trunc = new_instancemethod(_snap.TStrV_Trunc,None,TStrV)
TStrV.Pack = new_instancemethod(_snap.TStrV_Pack,None,TStrV)
TStrV.MoveFrom = new_instancemethod(_snap.TStrV_MoveFrom,None,TStrV)
TStrV.Empty = new_instancemethod(_snap.TStrV_Empty,None,TStrV)
TStrV.Len = new_instancemethod(_snap.TStrV_Len,None,TStrV)
TStrV.Reserved = new_instancemethod(_snap.TStrV_Reserved,None,TStrV)
TStrV.Last = new_instancemethod(_snap.TStrV_Last,None,TStrV)
TStrV.LastValN = new_instancemethod(_snap.TStrV_LastValN,None,TStrV)
TStrV.LastLast = new_instancemethod(_snap.TStrV_LastLast,None,TStrV)
TStrV.BegI = new_instancemethod(_snap.TStrV_BegI,None,TStrV)
TStrV.EndI = new_instancemethod(_snap.TStrV_EndI,None,TStrV)
TStrV.GetI = new_instancemethod(_snap.TStrV_GetI,None,TStrV)
TStrV.AddV = new_instancemethod(_snap.TStrV_AddV,None,TStrV)
TStrV.AddSorted = new_instancemethod(_snap.TStrV_AddSorted,None,TStrV)
TStrV.AddBackSorted = new_instancemethod(_snap.TStrV_AddBackSorted,None,TStrV)
TStrV.AddVMerged = new_instancemethod(_snap.TStrV_AddVMerged,None,TStrV)
TStrV.AddUnique = new_instancemethod(_snap.TStrV_AddUnique,None,TStrV)
TStrV.GetVal = new_instancemethod(_snap.TStrV_GetVal,None,TStrV)
TStrV.SetVal = new_instancemethod(_snap.TStrV_SetVal,None,TStrV)
TStrV.GetSubValV = new_instancemethod(_snap.TStrV_GetSubValV,None,TStrV)
TStrV.Ins = new_instancemethod(_snap.TStrV_Ins,None,TStrV)
TStrV.Del = new_instancemethod(_snap.TStrV_Del,None,TStrV)
TStrV.DelLast = new_instancemethod(_snap.TStrV_DelLast,None,TStrV)
TStrV.DelIfIn = new_instancemethod(_snap.TStrV_DelIfIn,None,TStrV)
TStrV.DelAll = new_instancemethod(_snap.TStrV_DelAll,None,TStrV)
TStrV.PutAll = new_instancemethod(_snap.TStrV_PutAll,None,TStrV)
TStrV.Swap = new_instancemethod(_snap.TStrV_Swap,None,TStrV)
TStrV.NextPerm = new_instancemethod(_snap.TStrV_NextPerm,None,TStrV)
TStrV.PrevPerm = new_instancemethod(_snap.TStrV_PrevPerm,None,TStrV)
TStrV.GetPivotValN = new_instancemethod(_snap.TStrV_GetPivotValN,None,TStrV)
TStrV.BSort = new_instancemethod(_snap.TStrV_BSort,None,TStrV)
TStrV.ISort = new_instancemethod(_snap.TStrV_ISort,None,TStrV)
TStrV.Partition = new_instancemethod(_snap.TStrV_Partition,None,TStrV)
TStrV.QSort = new_instancemethod(_snap.TStrV_QSort,None,TStrV)
TStrV.Sort = new_instancemethod(_snap.TStrV_Sort,None,TStrV)
TStrV.IsSorted = new_instancemethod(_snap.TStrV_IsSorted,None,TStrV)
TStrV.Shuffle = new_instancemethod(_snap.TStrV_Shuffle,None,TStrV)
TStrV.Reverse = new_instancemethod(_snap.TStrV_Reverse,None,TStrV)
TStrV.Merge = new_instancemethod(_snap.TStrV_Merge,None,TStrV)
TStrV.Intrs = new_instancemethod(_snap.TStrV_Intrs,None,TStrV)
TStrV.Union = new_instancemethod(_snap.TStrV_Union,None,TStrV)
TStrV.Diff = new_instancemethod(_snap.TStrV_Diff,None,TStrV)
TStrV.IntrsLen = new_instancemethod(_snap.TStrV_IntrsLen,None,TStrV)
TStrV.UnionLen = new_instancemethod(_snap.TStrV_UnionLen,None,TStrV)
TStrV.Count = new_instancemethod(_snap.TStrV_Count,None,TStrV)
TStrV.SearchBin = new_instancemethod(_snap.TStrV_SearchBin,None,TStrV)
TStrV.SearchForw = new_instancemethod(_snap.TStrV_SearchForw,None,TStrV)
TStrV.SearchBack = new_instancemethod(_snap.TStrV_SearchBack,None,TStrV)
TStrV.SearchVForw = new_instancemethod(_snap.TStrV_SearchVForw,None,TStrV)
TStrV.IsIn = new_instancemethod(_snap.TStrV_IsIn,None,TStrV)
TStrV.IsInBin = new_instancemethod(_snap.TStrV_IsInBin,None,TStrV)
TStrV.GetDat = new_instancemethod(_snap.TStrV_GetDat,None,TStrV)
TStrV.GetAddDat = new_instancemethod(_snap.TStrV_GetAddDat,None,TStrV)
TStrV.GetMxValN = new_instancemethod(_snap.TStrV_GetMxValN,None,TStrV)
TStrV_swigregister = _snap.TStrV_swigregister
TStrV_swigregister(TStrV)

def TStrV_SwapI(*args):
  """
    TStrV_SwapI(TStr LVal, TStr RVal)

    Parameters:
        LVal: TVec< TStr,int >::TIter
        RVal: TVec< TStr,int >::TIter

    """
  return _snap.TStrV_SwapI(*args)

def TStrV_GetV(*args):
  """
    GetV(TStr Val1) -> TStrV

    Parameters:
        Val1: TStr const &

    GetV(TStr Val1, TStr Val2) -> TStrV

    Parameters:
        Val1: TStr const &
        Val2: TStr const &

    GetV(TStr Val1, TStr Val2, TStr Val3) -> TStrV

    Parameters:
        Val1: TStr const &
        Val2: TStr const &
        Val3: TStr const &

    GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4) -> TStrV

    Parameters:
        Val1: TStr const &
        Val2: TStr const &
        Val3: TStr const &
        Val4: TStr const &

    GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4, TStr Val5) -> TStrV

    Parameters:
        Val1: TStr const &
        Val2: TStr const &
        Val3: TStr const &
        Val4: TStr const &
        Val5: TStr const &

    GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4, TStr Val5, TStr Val6) -> TStrV

    Parameters:
        Val1: TStr const &
        Val2: TStr const &
        Val3: TStr const &
        Val4: TStr const &
        Val5: TStr const &
        Val6: TStr const &

    GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4, TStr Val5, TStr Val6, TStr Val7) -> TStrV

    Parameters:
        Val1: TStr const &
        Val2: TStr const &
        Val3: TStr const &
        Val4: TStr const &
        Val5: TStr const &
        Val6: TStr const &
        Val7: TStr const &

    GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4, TStr Val5, TStr Val6, TStr Val7, TStr Val8) -> TStrV

    Parameters:
        Val1: TStr const &
        Val2: TStr const &
        Val3: TStr const &
        Val4: TStr const &
        Val5: TStr const &
        Val6: TStr const &
        Val7: TStr const &
        Val8: TStr const &

    TStrV_GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4, TStr Val5, TStr Val6, TStr Val7, TStr Val8, 
        TStr Val9) -> TStrV

    Parameters:
        Val1: TStr const &
        Val2: TStr const &
        Val3: TStr const &
        Val4: TStr const &
        Val5: TStr const &
        Val6: TStr const &
        Val7: TStr const &
        Val8: TStr const &
        Val9: TStr const &

    """
  return _snap.TStrV_GetV(*args)

class TCnComV(object):
    """Proxy of C++ TVec<(TCnCom)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TCnComV
    def __init__(self, *args): 
        """
        __init__(TVec<(TCnCom)> self) -> TCnComV
        __init__(TVec<(TCnCom)> self, TCnComV Vec) -> TCnComV

        Parameters:
            Vec: TVec< TCnCom,int > const &

        __init__(TVec<(TCnCom)> self, int const & _Vals) -> TCnComV

        Parameters:
            _Vals: int const &

        __init__(TVec<(TCnCom)> self, int const & _MxVals, int const & _Vals) -> TCnComV

        Parameters:
            _MxVals: int const &
            _Vals: int const &

        __init__(TVec<(TCnCom)> self, TCnCom _ValT, int const & _Vals) -> TCnComV

        Parameters:
            _ValT: TCnCom *
            _Vals: int const &

        __init__(TVec<(TCnCom)> self, TSIn SIn) -> TCnComV

        Parameters:
            SIn: TSIn &

        """
        _snap.TCnComV_swiginit(self,_snap.new_TCnComV(*args))
    def Load(self, *args):
        """
        Load(TCnComV self, TSIn SIn)

        Parameters:
            SIn: TSIn &

        """
        return _snap.TCnComV_Load(self, *args)

    def Save(self, *args):
        """
        Save(TCnComV self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.TCnComV_Save(self, *args)

    def __add__(self, *args):
        """
        __add__(TCnComV self, TCnCom Val) -> TCnComV

        Parameters:
            Val: TCnCom const &

        """
        return _snap.TCnComV___add__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(TCnComV self, TCnComV Vec) -> bool

        Parameters:
            Vec: TVec< TCnCom,int > const &

        """
        return _snap.TCnComV___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TCnComV self, TCnComV Vec) -> bool

        Parameters:
            Vec: TVec< TCnCom,int > const &

        """
        return _snap.TCnComV___lt__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(TCnComV self) -> int

        Parameters:
            self: TVec< TCnCom > const *

        """
        return _snap.TCnComV_GetMemUsed(self)

    def GetMemSize(self):
        """
        GetMemSize(TCnComV self) -> int

        Parameters:
            self: TVec< TCnCom > const *

        """
        return _snap.TCnComV_GetMemSize(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TCnComV self) -> int

        Parameters:
            self: TVec< TCnCom > const *

        """
        return _snap.TCnComV_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(TCnComV self) -> int

        Parameters:
            self: TVec< TCnCom > const *

        """
        return _snap.TCnComV_GetSecHashCd(self)

    def Gen(self, *args):
        """
        Gen(TCnComV self, int const & _Vals)

        Parameters:
            _Vals: int const &

        Gen(TCnComV self, int const & _MxVals, int const & _Vals)

        Parameters:
            _MxVals: int const &
            _Vals: int const &

        """
        return _snap.TCnComV_Gen(self, *args)

    def GenExt(self, *args):
        """
        GenExt(TCnComV self, TCnCom _ValT, int const & _Vals)

        Parameters:
            _ValT: TCnCom *
            _Vals: int const &

        """
        return _snap.TCnComV_GenExt(self, *args)

    def IsExt(self):
        """
        IsExt(TCnComV self) -> bool

        Parameters:
            self: TVec< TCnCom > const *

        """
        return _snap.TCnComV_IsExt(self)

    def Reserve(self, *args):
        """
        Reserve(TCnComV self, int const & _MxVals)

        Parameters:
            _MxVals: int const &

        Reserve(TCnComV self, int const & _MxVals, int const & _Vals)

        Parameters:
            _MxVals: int const &
            _Vals: int const &

        """
        return _snap.TCnComV_Reserve(self, *args)

    def Clr(self, *args):
        """
        Clr(TCnComV self, bool const & DoDel=True, int const & NoDelLim=-1)

        Parameters:
            DoDel: bool const &
            NoDelLim: int const &

        Clr(TCnComV self, bool const & DoDel=True)

        Parameters:
            DoDel: bool const &

        Clr(TCnComV self)

        Parameters:
            self: TVec< TCnCom > *

        """
        return _snap.TCnComV_Clr(self, *args)

    def Trunc(self, *args):
        """
        Trunc(TCnComV self, int const & _Vals=-1)

        Parameters:
            _Vals: int const &

        Trunc(TCnComV self)

        Parameters:
            self: TVec< TCnCom > *

        """
        return _snap.TCnComV_Trunc(self, *args)

    def Pack(self):
        """
        Pack(TCnComV self)

        Parameters:
            self: TVec< TCnCom > *

        """
        return _snap.TCnComV_Pack(self)

    def MoveFrom(self, *args):
        """
        MoveFrom(TCnComV self, TCnComV Vec)

        Parameters:
            Vec: TVec< TCnCom,int > &

        """
        return _snap.TCnComV_MoveFrom(self, *args)

    def Empty(self):
        """
        Empty(TCnComV self) -> bool

        Parameters:
            self: TVec< TCnCom > const *

        """
        return _snap.TCnComV_Empty(self)

    def Len(self):
        """
        Len(TCnComV self) -> int

        Parameters:
            self: TVec< TCnCom > const *

        """
        return _snap.TCnComV_Len(self)

    def Reserved(self):
        """
        Reserved(TCnComV self) -> int

        Parameters:
            self: TVec< TCnCom > const *

        """
        return _snap.TCnComV_Reserved(self)

    def Last(self, *args):
        """
        Last(TCnComV self) -> TCnCom
        Last(TCnComV self) -> TCnCom

        Parameters:
            self: TVec< TCnCom > *

        """
        return _snap.TCnComV_Last(self, *args)

    def LastValN(self):
        """
        LastValN(TCnComV self) -> int

        Parameters:
            self: TVec< TCnCom > const *

        """
        return _snap.TCnComV_LastValN(self)

    def LastLast(self, *args):
        """
        LastLast(TCnComV self) -> TCnCom
        LastLast(TCnComV self) -> TCnCom

        Parameters:
            self: TVec< TCnCom > *

        """
        return _snap.TCnComV_LastLast(self, *args)

    def BegI(self):
        """
        BegI(TCnComV self) -> TCnCom

        Parameters:
            self: TVec< TCnCom > const *

        """
        return _snap.TCnComV_BegI(self)

    def EndI(self):
        """
        EndI(TCnComV self) -> TCnCom

        Parameters:
            self: TVec< TCnCom > const *

        """
        return _snap.TCnComV_EndI(self)

    def GetI(self, *args):
        """
        GetI(TCnComV self, int const & ValN) -> TCnCom

        Parameters:
            ValN: int const &

        """
        return _snap.TCnComV_GetI(self, *args)

    def Add(self, *args):
        """
        Add(TCnComV self) -> int
        Add(TCnComV self, TCnCom Val) -> int

        Parameters:
            Val: TCnCom const &

        Add(TCnComV self, TCnCom Val) -> int

        Parameters:
            Val: TCnCom &

        Add(TCnComV self, TCnCom Val, int const & ResizeLen) -> int

        Parameters:
            Val: TCnCom const &
            ResizeLen: int const &

        """
        return _snap.TCnComV_Add(self, *args)

    def AddV(self, *args):
        """
        AddV(TCnComV self, TCnComV ValV) -> int

        Parameters:
            ValV: TVec< TCnCom,int > const &

        """
        return _snap.TCnComV_AddV(self, *args)

    def AddSorted(self, *args):
        """
        AddSorted(TCnComV self, TCnCom Val, bool const & Asc=True, int const & _MxVals=-1) -> int

        Parameters:
            Val: TCnCom const &
            Asc: bool const &
            _MxVals: int const &

        AddSorted(TCnComV self, TCnCom Val, bool const & Asc=True) -> int

        Parameters:
            Val: TCnCom const &
            Asc: bool const &

        AddSorted(TCnComV self, TCnCom Val) -> int

        Parameters:
            Val: TCnCom const &

        """
        return _snap.TCnComV_AddSorted(self, *args)

    def AddBackSorted(self, *args):
        """
        AddBackSorted(TCnComV self, TCnCom Val, bool const & Asc) -> int

        Parameters:
            Val: TCnCom const &
            Asc: bool const &

        """
        return _snap.TCnComV_AddBackSorted(self, *args)

    def AddMerged(self, *args):
        """
        AddMerged(TCnComV self, TCnCom Val) -> int

        Parameters:
            Val: TCnCom const &

        """
        return _snap.TCnComV_AddMerged(self, *args)

    def AddVMerged(self, *args):
        """
        AddVMerged(TCnComV self, TCnComV ValV) -> int

        Parameters:
            ValV: TVec< TCnCom,int > const &

        """
        return _snap.TCnComV_AddVMerged(self, *args)

    def AddUnique(self, *args):
        """
        AddUnique(TCnComV self, TCnCom Val) -> int

        Parameters:
            Val: TCnCom const &

        """
        return _snap.TCnComV_AddUnique(self, *args)

    def GetVal(self, *args):
        """
        GetVal(TCnComV self, int const & ValN) -> TCnCom

        Parameters:
            ValN: int const &

        GetVal(TCnComV self, int const & ValN) -> TCnCom

        Parameters:
            ValN: int const &

        """
        return _snap.TCnComV_GetVal(self, *args)

    def SetVal(self, *args):
        """
        SetVal(TCnComV self, int const & ValN, TCnCom Val)

        Parameters:
            ValN: int const &
            Val: TCnCom const &

        """
        return _snap.TCnComV_SetVal(self, *args)

    def GetSubValV(self, *args):
        """
        GetSubValV(TCnComV self, int const & BValN, int const & EValN, TCnComV ValV)

        Parameters:
            BValN: int const &
            EValN: int const &
            ValV: TVec< TCnCom,int > &

        """
        return _snap.TCnComV_GetSubValV(self, *args)

    def Ins(self, *args):
        """
        Ins(TCnComV self, int const & ValN, TCnCom Val)

        Parameters:
            ValN: int const &
            Val: TCnCom const &

        """
        return _snap.TCnComV_Ins(self, *args)

    def Del(self, *args):
        """
        Del(TCnComV self, int const & ValN)

        Parameters:
            ValN: int const &

        Del(TCnComV self, int const & MnValN, int const & MxValN)

        Parameters:
            MnValN: int const &
            MxValN: int const &

        """
        return _snap.TCnComV_Del(self, *args)

    def DelLast(self):
        """
        DelLast(TCnComV self)

        Parameters:
            self: TVec< TCnCom > *

        """
        return _snap.TCnComV_DelLast(self)

    def DelIfIn(self, *args):
        """
        DelIfIn(TCnComV self, TCnCom Val) -> bool

        Parameters:
            Val: TCnCom const &

        """
        return _snap.TCnComV_DelIfIn(self, *args)

    def DelAll(self, *args):
        """
        DelAll(TCnComV self, TCnCom Val)

        Parameters:
            Val: TCnCom const &

        """
        return _snap.TCnComV_DelAll(self, *args)

    def PutAll(self, *args):
        """
        PutAll(TCnComV self, TCnCom Val)

        Parameters:
            Val: TCnCom const &

        """
        return _snap.TCnComV_PutAll(self, *args)

    def Swap(self, *args):
        """
        Swap(TCnComV self, TCnComV Vec)

        Parameters:
            Vec: TVec< TCnCom,int > &

        Swap(TCnComV self, int const & ValN1, int const & ValN2)

        Parameters:
            ValN1: int const &
            ValN2: int const &

        """
        return _snap.TCnComV_Swap(self, *args)

    def SwapI(*args):
        """
        SwapI(TCnCom LVal, TCnCom RVal)

        Parameters:
            LVal: TVec< TCnCom >::TIter
            RVal: TVec< TCnCom >::TIter

        """
        return _snap.TCnComV_SwapI(*args)

    SwapI = staticmethod(SwapI)
    def NextPerm(self):
        """
        NextPerm(TCnComV self) -> bool

        Parameters:
            self: TVec< TCnCom > *

        """
        return _snap.TCnComV_NextPerm(self)

    def PrevPerm(self):
        """
        PrevPerm(TCnComV self) -> bool

        Parameters:
            self: TVec< TCnCom > *

        """
        return _snap.TCnComV_PrevPerm(self)

    def GetPivotValN(self, *args):
        """
        GetPivotValN(TCnComV self, int const & LValN, int const & RValN) -> int

        Parameters:
            LValN: int const &
            RValN: int const &

        """
        return _snap.TCnComV_GetPivotValN(self, *args)

    def BSort(self, *args):
        """
        BSort(TCnComV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters:
            MnLValN: int const &
            MxRValN: int const &
            Asc: bool const &

        """
        return _snap.TCnComV_BSort(self, *args)

    def ISort(self, *args):
        """
        ISort(TCnComV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters:
            MnLValN: int const &
            MxRValN: int const &
            Asc: bool const &

        """
        return _snap.TCnComV_ISort(self, *args)

    def Partition(self, *args):
        """
        Partition(TCnComV self, int const & MnLValN, int const & MxRValN, bool const & Asc) -> int

        Parameters:
            MnLValN: int const &
            MxRValN: int const &
            Asc: bool const &

        """
        return _snap.TCnComV_Partition(self, *args)

    def QSort(self, *args):
        """
        QSort(TCnComV self, int const & MnLValN, int const & MxRValN, bool const & Asc)

        Parameters:
            MnLValN: int const &
            MxRValN: int const &
            Asc: bool const &

        """
        return _snap.TCnComV_QSort(self, *args)

    def Sort(self, Asc=True):
        """
        Sort(TCnComV self, bool const & Asc=True)

        Parameters:
            Asc: bool const &

        Sort(TCnComV self)

        Parameters:
            self: TVec< TCnCom > *

        """
        return _snap.TCnComV_Sort(self, Asc)

    def IsSorted(self, Asc=True):
        """
        IsSorted(TCnComV self, bool const & Asc=True) -> bool

        Parameters:
            Asc: bool const &

        IsSorted(TCnComV self) -> bool

        Parameters:
            self: TVec< TCnCom > const *

        """
        return _snap.TCnComV_IsSorted(self, Asc)

    def Shuffle(self, *args):
        """
        Shuffle(TCnComV self, TRnd Rnd)

        Parameters:
            Rnd: TRnd &

        """
        return _snap.TCnComV_Shuffle(self, *args)

    def Reverse(self, *args):
        """
        Reverse(TCnComV self)
        Reverse(TCnComV self, int LValN, int RValN)

        Parameters:
            LValN: int
            RValN: int

        """
        return _snap.TCnComV_Reverse(self, *args)

    def Merge(self):
        """
        Merge(TCnComV self)

        Parameters:
            self: TVec< TCnCom > *

        """
        return _snap.TCnComV_Merge(self)

    def Intrs(self, *args):
        """
        Intrs(TCnComV self, TCnComV ValV)

        Parameters:
            ValV: TVec< TCnCom,int > const &

        Intrs(TCnComV self, TCnComV ValV, TCnComV DstValV)

        Parameters:
            ValV: TVec< TCnCom,int > const &
            DstValV: TVec< TCnCom,int > &

        """
        return _snap.TCnComV_Intrs(self, *args)

    def Union(self, *args):
        """
        Union(TCnComV self, TCnComV ValV)

        Parameters:
            ValV: TVec< TCnCom,int > const &

        Union(TCnComV self, TCnComV ValV, TCnComV DstValV)

        Parameters:
            ValV: TVec< TCnCom,int > const &
            DstValV: TVec< TCnCom,int > &

        """
        return _snap.TCnComV_Union(self, *args)

    def Diff(self, *args):
        """
        Diff(TCnComV self, TCnComV ValV)

        Parameters:
            ValV: TVec< TCnCom,int > const &

        Diff(TCnComV self, TCnComV ValV, TCnComV DstValV)

        Parameters:
            ValV: TVec< TCnCom,int > const &
            DstValV: TVec< TCnCom,int > &

        """
        return _snap.TCnComV_Diff(self, *args)

    def IntrsLen(self, *args):
        """
        IntrsLen(TCnComV self, TCnComV ValV) -> int

        Parameters:
            ValV: TVec< TCnCom,int > const &

        """
        return _snap.TCnComV_IntrsLen(self, *args)

    def UnionLen(self, *args):
        """
        UnionLen(TCnComV self, TCnComV ValV) -> int

        Parameters:
            ValV: TVec< TCnCom,int > const &

        """
        return _snap.TCnComV_UnionLen(self, *args)

    def Count(self, *args):
        """
        Count(TCnComV self, TCnCom Val) -> int

        Parameters:
            Val: TCnCom const &

        """
        return _snap.TCnComV_Count(self, *args)

    def SearchBin(self, *args):
        """
        SearchBin(TCnComV self, TCnCom Val) -> int

        Parameters:
            Val: TCnCom const &

        SearchBin(TCnComV self, TCnCom Val, int & InsValN) -> int

        Parameters:
            Val: TCnCom const &
            InsValN: int &

        """
        return _snap.TCnComV_SearchBin(self, *args)

    def SearchForw(self, *args):
        """
        SearchForw(TCnComV self, TCnCom Val, int const & BValN=0) -> int

        Parameters:
            Val: TCnCom const &
            BValN: int const &

        SearchForw(TCnComV self, TCnCom Val) -> int

        Parameters:
            Val: TCnCom const &

        """
        return _snap.TCnComV_SearchForw(self, *args)

    def SearchBack(self, *args):
        """
        SearchBack(TCnComV self, TCnCom Val) -> int

        Parameters:
            Val: TCnCom const &

        """
        return _snap.TCnComV_SearchBack(self, *args)

    def SearchVForw(self, *args):
        """
        SearchVForw(TCnComV self, TCnComV ValV, int const & BValN=0) -> int

        Parameters:
            ValV: TVec< TCnCom,int > const &
            BValN: int const &

        SearchVForw(TCnComV self, TCnComV ValV) -> int

        Parameters:
            ValV: TVec< TCnCom,int > const &

        """
        return _snap.TCnComV_SearchVForw(self, *args)

    def IsIn(self, *args):
        """
        IsIn(TCnComV self, TCnCom Val) -> bool

        Parameters:
            Val: TCnCom const &

        IsIn(TCnComV self, TCnCom Val, int & ValN) -> bool

        Parameters:
            Val: TCnCom const &
            ValN: int &

        """
        return _snap.TCnComV_IsIn(self, *args)

    def IsInBin(self, *args):
        """
        IsInBin(TCnComV self, TCnCom Val) -> bool

        Parameters:
            Val: TCnCom const &

        """
        return _snap.TCnComV_IsInBin(self, *args)

    def GetDat(self, *args):
        """
        GetDat(TCnComV self, TCnCom Val) -> TCnCom

        Parameters:
            Val: TCnCom const &

        """
        return _snap.TCnComV_GetDat(self, *args)

    def GetAddDat(self, *args):
        """
        GetAddDat(TCnComV self, TCnCom Val) -> TCnCom

        Parameters:
            Val: TCnCom const &

        """
        return _snap.TCnComV_GetAddDat(self, *args)

    def GetMxValN(self):
        """
        GetMxValN(TCnComV self) -> int

        Parameters:
            self: TVec< TCnCom > const *

        """
        return _snap.TCnComV_GetMxValN(self)

    def GetV(*args):
        """
        GetV(TCnCom Val1) -> TCnComV

        Parameters:
            Val1: TCnCom const &

        GetV(TCnCom Val1, TCnCom Val2) -> TCnComV

        Parameters:
            Val1: TCnCom const &
            Val2: TCnCom const &

        GetV(TCnCom Val1, TCnCom Val2, TCnCom Val3) -> TCnComV

        Parameters:
            Val1: TCnCom const &
            Val2: TCnCom const &
            Val3: TCnCom const &

        GetV(TCnCom Val1, TCnCom Val2, TCnCom Val3, TCnCom Val4) -> TCnComV

        Parameters:
            Val1: TCnCom const &
            Val2: TCnCom const &
            Val3: TCnCom const &
            Val4: TCnCom const &

        GetV(TCnCom Val1, TCnCom Val2, TCnCom Val3, TCnCom Val4, TCnCom Val5) -> TCnComV

        Parameters:
            Val1: TCnCom const &
            Val2: TCnCom const &
            Val3: TCnCom const &
            Val4: TCnCom const &
            Val5: TCnCom const &

        GetV(TCnCom Val1, TCnCom Val2, TCnCom Val3, TCnCom Val4, TCnCom Val5, TCnCom Val6) -> TCnComV

        Parameters:
            Val1: TCnCom const &
            Val2: TCnCom const &
            Val3: TCnCom const &
            Val4: TCnCom const &
            Val5: TCnCom const &
            Val6: TCnCom const &

        GetV(TCnCom Val1, TCnCom Val2, TCnCom Val3, TCnCom Val4, TCnCom Val5, TCnCom Val6, TCnCom Val7) -> TCnComV

        Parameters:
            Val1: TCnCom const &
            Val2: TCnCom const &
            Val3: TCnCom const &
            Val4: TCnCom const &
            Val5: TCnCom const &
            Val6: TCnCom const &
            Val7: TCnCom const &

        GetV(TCnCom Val1, TCnCom Val2, TCnCom Val3, TCnCom Val4, TCnCom Val5, TCnCom Val6, TCnCom Val7, 
            TCnCom Val8) -> TCnComV

        Parameters:
            Val1: TCnCom const &
            Val2: TCnCom const &
            Val3: TCnCom const &
            Val4: TCnCom const &
            Val5: TCnCom const &
            Val6: TCnCom const &
            Val7: TCnCom const &
            Val8: TCnCom const &

        GetV(TCnCom Val1, TCnCom Val2, TCnCom Val3, TCnCom Val4, TCnCom Val5, TCnCom Val6, TCnCom Val7, 
            TCnCom Val8, TCnCom Val9) -> TCnComV

        Parameters:
            Val1: TCnCom const &
            Val2: TCnCom const &
            Val3: TCnCom const &
            Val4: TCnCom const &
            Val5: TCnCom const &
            Val6: TCnCom const &
            Val7: TCnCom const &
            Val8: TCnCom const &
            Val9: TCnCom const &

        """
        return _snap.TCnComV_GetV(*args)

    GetV = staticmethod(GetV)
TCnComV.Load = new_instancemethod(_snap.TCnComV_Load,None,TCnComV)
TCnComV.Save = new_instancemethod(_snap.TCnComV_Save,None,TCnComV)
TCnComV.__add__ = new_instancemethod(_snap.TCnComV___add__,None,TCnComV)
TCnComV.__eq__ = new_instancemethod(_snap.TCnComV___eq__,None,TCnComV)
TCnComV.__lt__ = new_instancemethod(_snap.TCnComV___lt__,None,TCnComV)
TCnComV.GetMemUsed = new_instancemethod(_snap.TCnComV_GetMemUsed,None,TCnComV)
TCnComV.GetMemSize = new_instancemethod(_snap.TCnComV_GetMemSize,None,TCnComV)
TCnComV.GetPrimHashCd = new_instancemethod(_snap.TCnComV_GetPrimHashCd,None,TCnComV)
TCnComV.GetSecHashCd = new_instancemethod(_snap.TCnComV_GetSecHashCd,None,TCnComV)
TCnComV.Gen = new_instancemethod(_snap.TCnComV_Gen,None,TCnComV)
TCnComV.GenExt = new_instancemethod(_snap.TCnComV_GenExt,None,TCnComV)
TCnComV.IsExt = new_instancemethod(_snap.TCnComV_IsExt,None,TCnComV)
TCnComV.Reserve = new_instancemethod(_snap.TCnComV_Reserve,None,TCnComV)
TCnComV.Clr = new_instancemethod(_snap.TCnComV_Clr,None,TCnComV)
TCnComV.Trunc = new_instancemethod(_snap.TCnComV_Trunc,None,TCnComV)
TCnComV.Pack = new_instancemethod(_snap.TCnComV_Pack,None,TCnComV)
TCnComV.MoveFrom = new_instancemethod(_snap.TCnComV_MoveFrom,None,TCnComV)
TCnComV.Empty = new_instancemethod(_snap.TCnComV_Empty,None,TCnComV)
TCnComV.Len = new_instancemethod(_snap.TCnComV_Len,None,TCnComV)
TCnComV.Reserved = new_instancemethod(_snap.TCnComV_Reserved,None,TCnComV)
TCnComV.Last = new_instancemethod(_snap.TCnComV_Last,None,TCnComV)
TCnComV.LastValN = new_instancemethod(_snap.TCnComV_LastValN,None,TCnComV)
TCnComV.LastLast = new_instancemethod(_snap.TCnComV_LastLast,None,TCnComV)
TCnComV.BegI = new_instancemethod(_snap.TCnComV_BegI,None,TCnComV)
TCnComV.EndI = new_instancemethod(_snap.TCnComV_EndI,None,TCnComV)
TCnComV.GetI = new_instancemethod(_snap.TCnComV_GetI,None,TCnComV)
TCnComV.Add = new_instancemethod(_snap.TCnComV_Add,None,TCnComV)
TCnComV.AddV = new_instancemethod(_snap.TCnComV_AddV,None,TCnComV)
TCnComV.AddSorted = new_instancemethod(_snap.TCnComV_AddSorted,None,TCnComV)
TCnComV.AddBackSorted = new_instancemethod(_snap.TCnComV_AddBackSorted,None,TCnComV)
TCnComV.AddMerged = new_instancemethod(_snap.TCnComV_AddMerged,None,TCnComV)
TCnComV.AddVMerged = new_instancemethod(_snap.TCnComV_AddVMerged,None,TCnComV)
TCnComV.AddUnique = new_instancemethod(_snap.TCnComV_AddUnique,None,TCnComV)
TCnComV.GetVal = new_instancemethod(_snap.TCnComV_GetVal,None,TCnComV)
TCnComV.SetVal = new_instancemethod(_snap.TCnComV_SetVal,None,TCnComV)
TCnComV.GetSubValV = new_instancemethod(_snap.TCnComV_GetSubValV,None,TCnComV)
TCnComV.Ins = new_instancemethod(_snap.TCnComV_Ins,None,TCnComV)
TCnComV.Del = new_instancemethod(_snap.TCnComV_Del,None,TCnComV)
TCnComV.DelLast = new_instancemethod(_snap.TCnComV_DelLast,None,TCnComV)
TCnComV.DelIfIn = new_instancemethod(_snap.TCnComV_DelIfIn,None,TCnComV)
TCnComV.DelAll = new_instancemethod(_snap.TCnComV_DelAll,None,TCnComV)
TCnComV.PutAll = new_instancemethod(_snap.TCnComV_PutAll,None,TCnComV)
TCnComV.Swap = new_instancemethod(_snap.TCnComV_Swap,None,TCnComV)
TCnComV.NextPerm = new_instancemethod(_snap.TCnComV_NextPerm,None,TCnComV)
TCnComV.PrevPerm = new_instancemethod(_snap.TCnComV_PrevPerm,None,TCnComV)
TCnComV.GetPivotValN = new_instancemethod(_snap.TCnComV_GetPivotValN,None,TCnComV)
TCnComV.BSort = new_instancemethod(_snap.TCnComV_BSort,None,TCnComV)
TCnComV.ISort = new_instancemethod(_snap.TCnComV_ISort,None,TCnComV)
TCnComV.Partition = new_instancemethod(_snap.TCnComV_Partition,None,TCnComV)
TCnComV.QSort = new_instancemethod(_snap.TCnComV_QSort,None,TCnComV)
TCnComV.Sort = new_instancemethod(_snap.TCnComV_Sort,None,TCnComV)
TCnComV.IsSorted = new_instancemethod(_snap.TCnComV_IsSorted,None,TCnComV)
TCnComV.Shuffle = new_instancemethod(_snap.TCnComV_Shuffle,None,TCnComV)
TCnComV.Reverse = new_instancemethod(_snap.TCnComV_Reverse,None,TCnComV)
TCnComV.Merge = new_instancemethod(_snap.TCnComV_Merge,None,TCnComV)
TCnComV.Intrs = new_instancemethod(_snap.TCnComV_Intrs,None,TCnComV)
TCnComV.Union = new_instancemethod(_snap.TCnComV_Union,None,TCnComV)
TCnComV.Diff = new_instancemethod(_snap.TCnComV_Diff,None,TCnComV)
TCnComV.IntrsLen = new_instancemethod(_snap.TCnComV_IntrsLen,None,TCnComV)
TCnComV.UnionLen = new_instancemethod(_snap.TCnComV_UnionLen,None,TCnComV)
TCnComV.Count = new_instancemethod(_snap.TCnComV_Count,None,TCnComV)
TCnComV.SearchBin = new_instancemethod(_snap.TCnComV_SearchBin,None,TCnComV)
TCnComV.SearchForw = new_instancemethod(_snap.TCnComV_SearchForw,None,TCnComV)
TCnComV.SearchBack = new_instancemethod(_snap.TCnComV_SearchBack,None,TCnComV)
TCnComV.SearchVForw = new_instancemethod(_snap.TCnComV_SearchVForw,None,TCnComV)
TCnComV.IsIn = new_instancemethod(_snap.TCnComV_IsIn,None,TCnComV)
TCnComV.IsInBin = new_instancemethod(_snap.TCnComV_IsInBin,None,TCnComV)
TCnComV.GetDat = new_instancemethod(_snap.TCnComV_GetDat,None,TCnComV)
TCnComV.GetAddDat = new_instancemethod(_snap.TCnComV_GetAddDat,None,TCnComV)
TCnComV.GetMxValN = new_instancemethod(_snap.TCnComV_GetMxValN,None,TCnComV)
TCnComV_swigregister = _snap.TCnComV_swigregister
TCnComV_swigregister(TCnComV)

def TCnComV_SwapI(*args):
  """
    TCnComV_SwapI(TCnCom LVal, TCnCom RVal)

    Parameters:
        LVal: TVec< TCnCom >::TIter
        RVal: TVec< TCnCom >::TIter

    """
  return _snap.TCnComV_SwapI(*args)

def TCnComV_GetV(*args):
  """
    GetV(TCnCom Val1) -> TCnComV

    Parameters:
        Val1: TCnCom const &

    GetV(TCnCom Val1, TCnCom Val2) -> TCnComV

    Parameters:
        Val1: TCnCom const &
        Val2: TCnCom const &

    GetV(TCnCom Val1, TCnCom Val2, TCnCom Val3) -> TCnComV

    Parameters:
        Val1: TCnCom const &
        Val2: TCnCom const &
        Val3: TCnCom const &

    GetV(TCnCom Val1, TCnCom Val2, TCnCom Val3, TCnCom Val4) -> TCnComV

    Parameters:
        Val1: TCnCom const &
        Val2: TCnCom const &
        Val3: TCnCom const &
        Val4: TCnCom const &

    GetV(TCnCom Val1, TCnCom Val2, TCnCom Val3, TCnCom Val4, TCnCom Val5) -> TCnComV

    Parameters:
        Val1: TCnCom const &
        Val2: TCnCom const &
        Val3: TCnCom const &
        Val4: TCnCom const &
        Val5: TCnCom const &

    GetV(TCnCom Val1, TCnCom Val2, TCnCom Val3, TCnCom Val4, TCnCom Val5, TCnCom Val6) -> TCnComV

    Parameters:
        Val1: TCnCom const &
        Val2: TCnCom const &
        Val3: TCnCom const &
        Val4: TCnCom const &
        Val5: TCnCom const &
        Val6: TCnCom const &

    GetV(TCnCom Val1, TCnCom Val2, TCnCom Val3, TCnCom Val4, TCnCom Val5, TCnCom Val6, TCnCom Val7) -> TCnComV

    Parameters:
        Val1: TCnCom const &
        Val2: TCnCom const &
        Val3: TCnCom const &
        Val4: TCnCom const &
        Val5: TCnCom const &
        Val6: TCnCom const &
        Val7: TCnCom const &

    GetV(TCnCom Val1, TCnCom Val2, TCnCom Val3, TCnCom Val4, TCnCom Val5, TCnCom Val6, TCnCom Val7, 
        TCnCom Val8) -> TCnComV

    Parameters:
        Val1: TCnCom const &
        Val2: TCnCom const &
        Val3: TCnCom const &
        Val4: TCnCom const &
        Val5: TCnCom const &
        Val6: TCnCom const &
        Val7: TCnCom const &
        Val8: TCnCom const &

    TCnComV_GetV(TCnCom Val1, TCnCom Val2, TCnCom Val3, TCnCom Val4, TCnCom Val5, TCnCom Val6, TCnCom Val7, 
        TCnCom Val8, TCnCom Val9) -> TCnComV

    Parameters:
        Val1: TCnCom const &
        Val2: TCnCom const &
        Val3: TCnCom const &
        Val4: TCnCom const &
        Val5: TCnCom const &
        Val6: TCnCom const &
        Val7: TCnCom const &
        Val8: TCnCom const &
        Val9: TCnCom const &

    """
  return _snap.TCnComV_GetV(*args)

class TIntSet(object):
    """Proxy of C++ THashSet<(TInt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashSet<(TInt)> self) -> TIntSet
        __init__(THashSet<(TInt)> self, TIntSet Set) -> TIntSet

        Parameters:
            Set: THashSet< TInt > const &

        __init__(THashSet<(TInt)> self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntSet

        Parameters:
            ExpectVals: int const &
            _AutoSizeP: bool const &

        __init__(THashSet<(TInt)> self, int const & ExpectVals) -> TIntSet

        Parameters:
            ExpectVals: int const &

        __init__(THashSet<(TInt)> self, TIntV KeyV) -> TIntSet

        Parameters:
            KeyV: TVec< TInt > const &

        __init__(THashSet<(TInt)> self, TSIn SIn) -> TIntSet

        Parameters:
            SIn: TSIn &

        """
        _snap.TIntSet_swiginit(self,_snap.new_TIntSet(*args))
    def Load(self, *args):
        """
        Load(TIntSet self, TSIn SIn)

        Parameters:
            SIn: TSIn &

        """
        return _snap.TIntSet_Load(self, *args)

    def Save(self, *args):
        """
        Save(TIntSet self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.TIntSet_Save(self, *args)

    def __eq__(self, *args):
        """
        __eq__(TIntSet self, TIntSet Set) -> bool

        Parameters:
            Set: THashSet< TInt > const &

        """
        return _snap.TIntSet___eq__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(TIntSet self) -> ::TSize

        Parameters:
            self: THashSet< TInt > const *

        """
        return _snap.TIntSet_GetMemUsed(self)

    def BegI(self):
        """
        BegI(TIntSet self) -> TIntHSI

        Parameters:
            self: THashSet< TInt > const *

        """
        return _snap.TIntSet_BegI(self)

    def EndI(self):
        """
        EndI(TIntSet self) -> TIntHSI

        Parameters:
            self: THashSet< TInt > const *

        """
        return _snap.TIntSet_EndI(self)

    def GetI(self, *args):
        """
        GetI(TIntSet self, TInt Key) -> TIntHSI

        Parameters:
            Key: TInt const &

        """
        return _snap.TIntSet_GetI(self, *args)

    def Gen(self, *args):
        """
        Gen(TIntSet self, int const & ExpectVals)

        Parameters:
            ExpectVals: int const &

        """
        return _snap.TIntSet_Gen(self, *args)

    def Clr(self, *args):
        """
        Clr(TIntSet self, bool const & DoDel=True, int const & NoDelLim=-1)

        Parameters:
            DoDel: bool const &
            NoDelLim: int const &

        Clr(TIntSet self, bool const & DoDel=True)

        Parameters:
            DoDel: bool const &

        Clr(TIntSet self)

        Parameters:
            self: THashSet< TInt > *

        """
        return _snap.TIntSet_Clr(self, *args)

    def Empty(self):
        """
        Empty(TIntSet self) -> bool

        Parameters:
            self: THashSet< TInt > const *

        """
        return _snap.TIntSet_Empty(self)

    def Len(self):
        """
        Len(TIntSet self) -> int

        Parameters:
            self: THashSet< TInt > const *

        """
        return _snap.TIntSet_Len(self)

    def GetPorts(self):
        """
        GetPorts(TIntSet self) -> int

        Parameters:
            self: THashSet< TInt > const *

        """
        return _snap.TIntSet_GetPorts(self)

    def IsAutoSize(self):
        """
        IsAutoSize(TIntSet self) -> bool

        Parameters:
            self: THashSet< TInt > const *

        """
        return _snap.TIntSet_IsAutoSize(self)

    def GetMxKeyIds(self):
        """
        GetMxKeyIds(TIntSet self) -> int

        Parameters:
            self: THashSet< TInt > const *

        """
        return _snap.TIntSet_GetMxKeyIds(self)

    def GetReservedKeyIds(self):
        """
        GetReservedKeyIds(TIntSet self) -> int

        Parameters:
            self: THashSet< TInt > const *

        """
        return _snap.TIntSet_GetReservedKeyIds(self)

    def IsKeyIdEqKeyN(self):
        """
        IsKeyIdEqKeyN(TIntSet self) -> bool

        Parameters:
            self: THashSet< TInt > const *

        """
        return _snap.TIntSet_IsKeyIdEqKeyN(self)

    def AddKey(self, *args):
        """
        AddKey(TIntSet self, TInt Key) -> int

        Parameters:
            Key: TInt const &

        """
        return _snap.TIntSet_AddKey(self, *args)

    def AddKeyV(self, *args):
        """
        AddKeyV(TIntSet self, TIntV KeyV)

        Parameters:
            KeyV: TVec< TInt > const &

        """
        return _snap.TIntSet_AddKeyV(self, *args)

    def DelKey(self, *args):
        """
        DelKey(TIntSet self, TInt Key)

        Parameters:
            Key: TInt const &

        """
        return _snap.TIntSet_DelKey(self, *args)

    def DelIfKey(self, *args):
        """
        DelIfKey(TIntSet self, TInt Key) -> bool

        Parameters:
            Key: TInt const &

        """
        return _snap.TIntSet_DelIfKey(self, *args)

    def DelKeyId(self, *args):
        """
        DelKeyId(TIntSet self, int const & KeyId)

        Parameters:
            KeyId: int const &

        """
        return _snap.TIntSet_DelKeyId(self, *args)

    def DelKeyIdV(self, *args):
        """
        DelKeyIdV(TIntSet self, TIntV KeyIdV)

        Parameters:
            KeyIdV: TIntV const &

        """
        return _snap.TIntSet_DelKeyIdV(self, *args)

    def MarkDelKey(self, *args):
        """
        MarkDelKey(TIntSet self, TInt Key)

        Parameters:
            Key: TInt const &

        """
        return _snap.TIntSet_MarkDelKey(self, *args)

    def MarkDelKeyId(self, *args):
        """
        MarkDelKeyId(TIntSet self, int const & KeyId)

        Parameters:
            KeyId: int const &

        """
        return _snap.TIntSet_MarkDelKeyId(self, *args)

    def GetKey(self, *args):
        """
        GetKey(TIntSet self, int const & KeyId) -> TInt

        Parameters:
            KeyId: int const &

        """
        return _snap.TIntSet_GetKey(self, *args)

    def GetKeyId(self, *args):
        """
        GetKeyId(TIntSet self, TInt Key) -> int

        Parameters:
            Key: TInt const &

        """
        return _snap.TIntSet_GetKeyId(self, *args)

    def GetRndKeyId(self, *args):
        """
        GetRndKeyId(TIntSet self, TRnd Rnd) -> int

        Parameters:
            Rnd: TRnd &

        """
        return _snap.TIntSet_GetRndKeyId(self, *args)

    def IsKey(self, *args):
        """
        IsKey(TIntSet self, TInt Key) -> bool

        Parameters:
            Key: TInt const &

        IsKey(TIntSet self, TInt Key, int & KeyId) -> bool

        Parameters:
            Key: TInt const &
            KeyId: int &

        """
        return _snap.TIntSet_IsKey(self, *args)

    def IsKeyId(self, *args):
        """
        IsKeyId(TIntSet self, int const & KeyId) -> bool

        Parameters:
            KeyId: int const &

        """
        return _snap.TIntSet_IsKeyId(self, *args)

    def FFirstKeyId(self):
        """
        FFirstKeyId(TIntSet self) -> int

        Parameters:
            self: THashSet< TInt > const *

        """
        return _snap.TIntSet_FFirstKeyId(self)

    def FNextKeyId(self, *args):
        """
        FNextKeyId(TIntSet self, int & KeyId) -> bool

        Parameters:
            KeyId: int &

        """
        return _snap.TIntSet_FNextKeyId(self, *args)

    def GetKeyV(self, *args):
        """
        GetKeyV(TIntSet self, TIntV KeyV)

        Parameters:
            KeyV: TVec< TInt > &

        """
        return _snap.TIntSet_GetKeyV(self, *args)

    def Swap(self, *args):
        """
        Swap(TIntSet self, TIntSet Set)

        Parameters:
            Set: THashSet< TInt > &

        """
        return _snap.TIntSet_Swap(self, *args)

    def Defrag(self):
        """
        Defrag(TIntSet self)

        Parameters:
            self: THashSet< TInt > *

        """
        return _snap.TIntSet_Defrag(self)

    def Pack(self):
        """
        Pack(TIntSet self)

        Parameters:
            self: THashSet< TInt > *

        """
        return _snap.TIntSet_Pack(self)

    def GetSet(*args):
        """
        GetSet(TInt Key1) -> TIntSet

        Parameters:
            Key1: TInt const &

        GetSet(TInt Key1, TInt Key2) -> TIntSet

        Parameters:
            Key1: TInt const &
            Key2: TInt const &

        GetSet(TInt Key1, TInt Key2, TInt Key3) -> TIntSet

        Parameters:
            Key1: TInt const &
            Key2: TInt const &
            Key3: TInt const &

        GetSet(TInt Key1, TInt Key2, TInt Key3, TInt Key4) -> TIntSet

        Parameters:
            Key1: TInt const &
            Key2: TInt const &
            Key3: TInt const &
            Key4: TInt const &

        GetSet(TInt Key1, TInt Key2, TInt Key3, TInt Key4, TInt Key5) -> TIntSet

        Parameters:
            Key1: TInt const &
            Key2: TInt const &
            Key3: TInt const &
            Key4: TInt const &
            Key5: TInt const &

        GetSet(TInt Key1, TInt Key2, TInt Key3, TInt Key4, TInt Key5, TInt Key6) -> TIntSet

        Parameters:
            Key1: TInt const &
            Key2: TInt const &
            Key3: TInt const &
            Key4: TInt const &
            Key5: TInt const &
            Key6: TInt const &

        GetSet(TInt Key1, TInt Key2, TInt Key3, TInt Key4, TInt Key5, TInt Key6, TInt Key7) -> TIntSet

        Parameters:
            Key1: TInt const &
            Key2: TInt const &
            Key3: TInt const &
            Key4: TInt const &
            Key5: TInt const &
            Key6: TInt const &
            Key7: TInt const &

        GetSet(TInt Key1, TInt Key2, TInt Key3, TInt Key4, TInt Key5, TInt Key6, TInt Key7, TInt Key8) -> TIntSet

        Parameters:
            Key1: TInt const &
            Key2: TInt const &
            Key3: TInt const &
            Key4: TInt const &
            Key5: TInt const &
            Key6: TInt const &
            Key7: TInt const &
            Key8: TInt const &

        GetSet(TInt Key1, TInt Key2, TInt Key3, TInt Key4, TInt Key5, TInt Key6, TInt Key7, TInt Key8, 
            TInt Key9) -> TIntSet

        Parameters:
            Key1: TInt const &
            Key2: TInt const &
            Key3: TInt const &
            Key4: TInt const &
            Key5: TInt const &
            Key6: TInt const &
            Key7: TInt const &
            Key8: TInt const &
            Key9: TInt const &

        """
        return _snap.TIntSet_GetSet(*args)

    GetSet = staticmethod(GetSet)
    __swig_destroy__ = _snap.delete_TIntSet
TIntSet.Load = new_instancemethod(_snap.TIntSet_Load,None,TIntSet)
TIntSet.Save = new_instancemethod(_snap.TIntSet_Save,None,TIntSet)
TIntSet.__eq__ = new_instancemethod(_snap.TIntSet___eq__,None,TIntSet)
TIntSet.GetMemUsed = new_instancemethod(_snap.TIntSet_GetMemUsed,None,TIntSet)
TIntSet.BegI = new_instancemethod(_snap.TIntSet_BegI,None,TIntSet)
TIntSet.EndI = new_instancemethod(_snap.TIntSet_EndI,None,TIntSet)
TIntSet.GetI = new_instancemethod(_snap.TIntSet_GetI,None,TIntSet)
TIntSet.Gen = new_instancemethod(_snap.TIntSet_Gen,None,TIntSet)
TIntSet.Clr = new_instancemethod(_snap.TIntSet_Clr,None,TIntSet)
TIntSet.Empty = new_instancemethod(_snap.TIntSet_Empty,None,TIntSet)
TIntSet.Len = new_instancemethod(_snap.TIntSet_Len,None,TIntSet)
TIntSet.GetPorts = new_instancemethod(_snap.TIntSet_GetPorts,None,TIntSet)
TIntSet.IsAutoSize = new_instancemethod(_snap.TIntSet_IsAutoSize,None,TIntSet)
TIntSet.GetMxKeyIds = new_instancemethod(_snap.TIntSet_GetMxKeyIds,None,TIntSet)
TIntSet.GetReservedKeyIds = new_instancemethod(_snap.TIntSet_GetReservedKeyIds,None,TIntSet)
TIntSet.IsKeyIdEqKeyN = new_instancemethod(_snap.TIntSet_IsKeyIdEqKeyN,None,TIntSet)
TIntSet.AddKey = new_instancemethod(_snap.TIntSet_AddKey,None,TIntSet)
TIntSet.AddKeyV = new_instancemethod(_snap.TIntSet_AddKeyV,None,TIntSet)
TIntSet.DelKey = new_instancemethod(_snap.TIntSet_DelKey,None,TIntSet)
TIntSet.DelIfKey = new_instancemethod(_snap.TIntSet_DelIfKey,None,TIntSet)
TIntSet.DelKeyId = new_instancemethod(_snap.TIntSet_DelKeyId,None,TIntSet)
TIntSet.DelKeyIdV = new_instancemethod(_snap.TIntSet_DelKeyIdV,None,TIntSet)
TIntSet.MarkDelKey = new_instancemethod(_snap.TIntSet_MarkDelKey,None,TIntSet)
TIntSet.MarkDelKeyId = new_instancemethod(_snap.TIntSet_MarkDelKeyId,None,TIntSet)
TIntSet.GetKey = new_instancemethod(_snap.TIntSet_GetKey,None,TIntSet)
TIntSet.GetKeyId = new_instancemethod(_snap.TIntSet_GetKeyId,None,TIntSet)
TIntSet.GetRndKeyId = new_instancemethod(_snap.TIntSet_GetRndKeyId,None,TIntSet)
TIntSet.IsKey = new_instancemethod(_snap.TIntSet_IsKey,None,TIntSet)
TIntSet.IsKeyId = new_instancemethod(_snap.TIntSet_IsKeyId,None,TIntSet)
TIntSet.FFirstKeyId = new_instancemethod(_snap.TIntSet_FFirstKeyId,None,TIntSet)
TIntSet.FNextKeyId = new_instancemethod(_snap.TIntSet_FNextKeyId,None,TIntSet)
TIntSet.GetKeyV = new_instancemethod(_snap.TIntSet_GetKeyV,None,TIntSet)
TIntSet.Swap = new_instancemethod(_snap.TIntSet_Swap,None,TIntSet)
TIntSet.Defrag = new_instancemethod(_snap.TIntSet_Defrag,None,TIntSet)
TIntSet.Pack = new_instancemethod(_snap.TIntSet_Pack,None,TIntSet)
TIntSet_swigregister = _snap.TIntSet_swigregister
TIntSet_swigregister(TIntSet)

def TIntSet_GetSet(*args):
  """
    GetSet(TInt Key1) -> TIntSet

    Parameters:
        Key1: TInt const &

    GetSet(TInt Key1, TInt Key2) -> TIntSet

    Parameters:
        Key1: TInt const &
        Key2: TInt const &

    GetSet(TInt Key1, TInt Key2, TInt Key3) -> TIntSet

    Parameters:
        Key1: TInt const &
        Key2: TInt const &
        Key3: TInt const &

    GetSet(TInt Key1, TInt Key2, TInt Key3, TInt Key4) -> TIntSet

    Parameters:
        Key1: TInt const &
        Key2: TInt const &
        Key3: TInt const &
        Key4: TInt const &

    GetSet(TInt Key1, TInt Key2, TInt Key3, TInt Key4, TInt Key5) -> TIntSet

    Parameters:
        Key1: TInt const &
        Key2: TInt const &
        Key3: TInt const &
        Key4: TInt const &
        Key5: TInt const &

    GetSet(TInt Key1, TInt Key2, TInt Key3, TInt Key4, TInt Key5, TInt Key6) -> TIntSet

    Parameters:
        Key1: TInt const &
        Key2: TInt const &
        Key3: TInt const &
        Key4: TInt const &
        Key5: TInt const &
        Key6: TInt const &

    GetSet(TInt Key1, TInt Key2, TInt Key3, TInt Key4, TInt Key5, TInt Key6, TInt Key7) -> TIntSet

    Parameters:
        Key1: TInt const &
        Key2: TInt const &
        Key3: TInt const &
        Key4: TInt const &
        Key5: TInt const &
        Key6: TInt const &
        Key7: TInt const &

    GetSet(TInt Key1, TInt Key2, TInt Key3, TInt Key4, TInt Key5, TInt Key6, TInt Key7, TInt Key8) -> TIntSet

    Parameters:
        Key1: TInt const &
        Key2: TInt const &
        Key3: TInt const &
        Key4: TInt const &
        Key5: TInt const &
        Key6: TInt const &
        Key7: TInt const &
        Key8: TInt const &

    TIntSet_GetSet(TInt Key1, TInt Key2, TInt Key3, TInt Key4, TInt Key5, TInt Key6, TInt Key7, TInt Key8, 
        TInt Key9) -> TIntSet

    Parameters:
        Key1: TInt const &
        Key2: TInt const &
        Key3: TInt const &
        Key4: TInt const &
        Key5: TInt const &
        Key6: TInt const &
        Key7: TInt const &
        Key8: TInt const &
        Key9: TInt const &

    """
  return _snap.TIntSet_GetSet(*args)

class TIntHSI(object):
    """Proxy of C++ THashSetKeyI<(TInt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(THashSetKeyI<(TInt)> self) -> TIntHSI
        __init__(THashSetKeyI<(TInt)> self, TIntHSI _SetKeyI) -> TIntHSI

        Parameters:
            _SetKeyI: THashSetKeyI< TInt > const &

        __init__(THashSetKeyI<(TInt)> self, THashSetKeyI< TInt >::TSetKey const * _KeyI, THashSetKeyI< TInt >::TSetKey const * _EndI) -> TIntHSI

        Parameters:
            _KeyI: THashSetKeyI< TInt >::TSetKey const *
            _EndI: THashSetKeyI< TInt >::TSetKey const *

        """
        _snap.TIntHSI_swiginit(self,_snap.new_TIntHSI(*args))
    def __eq__(self, *args):
        """
        __eq__(TIntHSI self, TIntHSI SetKeyI) -> bool

        Parameters:
            SetKeyI: THashSetKeyI< TInt > const &

        """
        return _snap.TIntHSI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(TIntHSI self, TIntHSI SetKeyI) -> bool

        Parameters:
            SetKeyI: THashSetKeyI< TInt > const &

        """
        return _snap.TIntHSI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(TIntHSI self) -> TInt

        Parameters:
            self: THashSetKeyI< TInt > const *

        """
        return _snap.TIntHSI___ref__(self)

    def __call__(self):
        """
        __call__(TIntHSI self) -> TInt

        Parameters:
            self: THashSetKeyI< TInt > const *

        """
        return _snap.TIntHSI___call__(self)

    def __deref__(self):
        """
        __deref__(TIntHSI self) -> TInt

        Parameters:
            self: THashSetKeyI< TInt > const *

        """
        return _snap.TIntHSI___deref__(self)

    def GetKey(self):
        """
        GetKey(TIntHSI self) -> TInt

        Parameters:
            self: THashSetKeyI< TInt > const *

        """
        return _snap.TIntHSI_GetKey(self)

    __swig_destroy__ = _snap.delete_TIntHSI
    Val = _swig_property(_snap.TIntHSI_Val_get)
    Mn = _swig_property(_snap.TIntHSI_Mn_get)
    Mx = _swig_property(_snap.TIntHSI_Mx_get)
    Kilo = _swig_property(_snap.TIntHSI_Kilo_get)
    Mega = _swig_property(_snap.TIntHSI_Mega_get)
    Giga = _swig_property(_snap.TIntHSI_Giga_get)
    Rnd = _swig_property(_snap.TIntHSI_Rnd_get)
    def Save(self, *args):
        """
        Save(TIntHSI self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.TIntHSI_Save(self, *args)

    def __ne__(self, *args):
        """
        __ne__(TIntHSI self, int const & Int) -> bool

        Parameters:
            Int: int const &

        """
        return _snap.TIntHSI___ne__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(TIntHSI self) -> int

        Parameters:
            self: THashSetKeyI< TInt > const *

        """
        return _snap.TIntHSI_GetMemUsed(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(TIntHSI self) -> int

        Parameters:
            self: THashSetKeyI< TInt > const *

        """
        return _snap.TIntHSI_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(TIntHSI self) -> int

        Parameters:
            self: THashSetKeyI< TInt > const *

        """
        return _snap.TIntHSI_GetSecHashCd(self)

TIntHSI.__eq__ = new_instancemethod(_snap.TIntHSI___eq__,None,TIntHSI)
TIntHSI.__lt__ = new_instancemethod(_snap.TIntHSI___lt__,None,TIntHSI)
TIntHSI.__ref__ = new_instancemethod(_snap.TIntHSI___ref__,None,TIntHSI)
TIntHSI.__call__ = new_instancemethod(_snap.TIntHSI___call__,None,TIntHSI)
TIntHSI.__deref__ = new_instancemethod(_snap.TIntHSI___deref__,None,TIntHSI)
TIntHSI.GetKey = new_instancemethod(_snap.TIntHSI_GetKey,None,TIntHSI)
TIntHSI.Save = new_instancemethod(_snap.TIntHSI_Save,None,TIntHSI)
TIntHSI.__ne__ = new_instancemethod(_snap.TIntHSI___ne__,None,TIntHSI)
TIntHSI.GetMemUsed = new_instancemethod(_snap.TIntHSI_GetMemUsed,None,TIntHSI)
TIntHSI.GetPrimHashCd = new_instancemethod(_snap.TIntHSI_GetPrimHashCd,None,TIntHSI)
TIntHSI.GetSecHashCd = new_instancemethod(_snap.TIntHSI_GetSecHashCd,None,TIntHSI)
TIntHSI_swigregister = _snap.TIntHSI_swigregister
TIntHSI_swigregister(TIntHSI)

class TNGraphNodeI(object):
    """Proxy of C++ TNGraphNodeI class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TNGraphNodeI self) -> TNGraphNodeI
        __init__(TNGraphNodeI self, TNGraph::TNodeI const & NodeI) -> TNGraphNodeI

        Parameters:
            NodeI: TNGraph::TNodeI const &

        """
        _snap.TNGraphNodeI_swiginit(self,_snap.new_TNGraphNodeI(*args))
    def Next(self):
        """
        Next(TNGraphNodeI self) -> TNGraphNodeI

        Parameters:
            self: TNGraphNodeI *

        """
        return _snap.TNGraphNodeI_Next(self)

    def __lt__(self, *args):
        """
        __lt__(TNGraphNodeI self, TNGraphNodeI NodeI) -> bool

        Parameters:
            NodeI: TNGraphNodeI const &

        """
        return _snap.TNGraphNodeI___lt__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(TNGraphNodeI self, TNGraphNodeI NodeI) -> bool

        Parameters:
            NodeI: TNGraphNodeI const &

        """
        return _snap.TNGraphNodeI___eq__(self, *args)

    def GetId(self):
        """
        GetId(TNGraphNodeI self) -> int

        Parameters:
            self: TNGraphNodeI const *

        """
        return _snap.TNGraphNodeI_GetId(self)

    def GetDeg(self):
        """
        GetDeg(TNGraphNodeI self) -> int

        Parameters:
            self: TNGraphNodeI const *

        """
        return _snap.TNGraphNodeI_GetDeg(self)

    def GetInDeg(self):
        """
        GetInDeg(TNGraphNodeI self) -> int

        Parameters:
            self: TNGraphNodeI const *

        """
        return _snap.TNGraphNodeI_GetInDeg(self)

    def GetOutDeg(self):
        """
        GetOutDeg(TNGraphNodeI self) -> int

        Parameters:
            self: TNGraphNodeI const *

        """
        return _snap.TNGraphNodeI_GetOutDeg(self)

    def GetInNId(self, *args):
        """
        GetInNId(TNGraphNodeI self, int const & NodeN) -> int

        Parameters:
            NodeN: int const &

        """
        return _snap.TNGraphNodeI_GetInNId(self, *args)

    def GetOutNId(self, *args):
        """
        GetOutNId(TNGraphNodeI self, int const & NodeN) -> int

        Parameters:
            NodeN: int const &

        """
        return _snap.TNGraphNodeI_GetOutNId(self, *args)

    def GetNbrNId(self, *args):
        """
        GetNbrNId(TNGraphNodeI self, int const & NodeN) -> int

        Parameters:
            NodeN: int const &

        """
        return _snap.TNGraphNodeI_GetNbrNId(self, *args)

    def IsInNId(self, *args):
        """
        IsInNId(TNGraphNodeI self, int const & NId) -> bool

        Parameters:
            NId: int const &

        """
        return _snap.TNGraphNodeI_IsInNId(self, *args)

    def IsOutNId(self, *args):
        """
        IsOutNId(TNGraphNodeI self, int const & NId) -> bool

        Parameters:
            NId: int const &

        """
        return _snap.TNGraphNodeI_IsOutNId(self, *args)

    def IsNbrNId(self, *args):
        """
        IsNbrNId(TNGraphNodeI self, int const & NId) -> bool

        Parameters:
            NId: int const &

        """
        return _snap.TNGraphNodeI_IsNbrNId(self, *args)

    __swig_destroy__ = _snap.delete_TNGraphNodeI
TNGraphNodeI.Next = new_instancemethod(_snap.TNGraphNodeI_Next,None,TNGraphNodeI)
TNGraphNodeI.__lt__ = new_instancemethod(_snap.TNGraphNodeI___lt__,None,TNGraphNodeI)
TNGraphNodeI.__eq__ = new_instancemethod(_snap.TNGraphNodeI___eq__,None,TNGraphNodeI)
TNGraphNodeI.GetId = new_instancemethod(_snap.TNGraphNodeI_GetId,None,TNGraphNodeI)
TNGraphNodeI.GetDeg = new_instancemethod(_snap.TNGraphNodeI_GetDeg,None,TNGraphNodeI)
TNGraphNodeI.GetInDeg = new_instancemethod(_snap.TNGraphNodeI_GetInDeg,None,TNGraphNodeI)
TNGraphNodeI.GetOutDeg = new_instancemethod(_snap.TNGraphNodeI_GetOutDeg,None,TNGraphNodeI)
TNGraphNodeI.GetInNId = new_instancemethod(_snap.TNGraphNodeI_GetInNId,None,TNGraphNodeI)
TNGraphNodeI.GetOutNId = new_instancemethod(_snap.TNGraphNodeI_GetOutNId,None,TNGraphNodeI)
TNGraphNodeI.GetNbrNId = new_instancemethod(_snap.TNGraphNodeI_GetNbrNId,None,TNGraphNodeI)
TNGraphNodeI.IsInNId = new_instancemethod(_snap.TNGraphNodeI_IsInNId,None,TNGraphNodeI)
TNGraphNodeI.IsOutNId = new_instancemethod(_snap.TNGraphNodeI_IsOutNId,None,TNGraphNodeI)
TNGraphNodeI.IsNbrNId = new_instancemethod(_snap.TNGraphNodeI_IsNbrNId,None,TNGraphNodeI)
TNGraphNodeI_swigregister = _snap.TNGraphNodeI_swigregister
TNGraphNodeI_swigregister(TNGraphNodeI)

class TNGraphEdgeI(object):
    """Proxy of C++ TNGraphEdgeI class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TNGraphEdgeI self) -> TNGraphEdgeI
        __init__(TNGraphEdgeI self, TNGraph::TEdgeI const & EdgeI) -> TNGraphEdgeI

        Parameters:
            EdgeI: TNGraph::TEdgeI const &

        """
        _snap.TNGraphEdgeI_swiginit(self,_snap.new_TNGraphEdgeI(*args))
    def Next(self):
        """
        Next(TNGraphEdgeI self) -> TNGraphEdgeI

        Parameters:
            self: TNGraphEdgeI *

        """
        return _snap.TNGraphEdgeI_Next(self)

    def __lt__(self, *args):
        """
        __lt__(TNGraphEdgeI self, TNGraphEdgeI EdgeI) -> bool

        Parameters:
            EdgeI: TNGraphEdgeI const &

        """
        return _snap.TNGraphEdgeI___lt__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(TNGraphEdgeI self, TNGraphEdgeI EdgeI) -> bool

        Parameters:
            EdgeI: TNGraphEdgeI const &

        """
        return _snap.TNGraphEdgeI___eq__(self, *args)

    def GetId(self):
        """
        GetId(TNGraphEdgeI self) -> int

        Parameters:
            self: TNGraphEdgeI const *

        """
        return _snap.TNGraphEdgeI_GetId(self)

    def GetSrcNId(self):
        """
        GetSrcNId(TNGraphEdgeI self) -> int

        Parameters:
            self: TNGraphEdgeI const *

        """
        return _snap.TNGraphEdgeI_GetSrcNId(self)

    def GetDstNId(self):
        """
        GetDstNId(TNGraphEdgeI self) -> int

        Parameters:
            self: TNGraphEdgeI const *

        """
        return _snap.TNGraphEdgeI_GetDstNId(self)

    __swig_destroy__ = _snap.delete_TNGraphEdgeI
TNGraphEdgeI.Next = new_instancemethod(_snap.TNGraphEdgeI_Next,None,TNGraphEdgeI)
TNGraphEdgeI.__lt__ = new_instancemethod(_snap.TNGraphEdgeI___lt__,None,TNGraphEdgeI)
TNGraphEdgeI.__eq__ = new_instancemethod(_snap.TNGraphEdgeI___eq__,None,TNGraphEdgeI)
TNGraphEdgeI.GetId = new_instancemethod(_snap.TNGraphEdgeI_GetId,None,TNGraphEdgeI)
TNGraphEdgeI.GetSrcNId = new_instancemethod(_snap.TNGraphEdgeI_GetSrcNId,None,TNGraphEdgeI)
TNGraphEdgeI.GetDstNId = new_instancemethod(_snap.TNGraphEdgeI_GetDstNId,None,TNGraphEdgeI)
TNGraphEdgeI_swigregister = _snap.TNGraphEdgeI_swigregister
TNGraphEdgeI_swigregister(TNGraphEdgeI)

class TUNGraphNodeI(object):
    """Proxy of C++ TUNGraphNodeI class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TUNGraphNodeI self) -> TUNGraphNodeI
        __init__(TUNGraphNodeI self, TUNGraph::TNodeI const & NodeI) -> TUNGraphNodeI

        Parameters:
            NodeI: TUNGraph::TNodeI const &

        """
        _snap.TUNGraphNodeI_swiginit(self,_snap.new_TUNGraphNodeI(*args))
    def Next(self):
        """
        Next(TUNGraphNodeI self) -> TUNGraphNodeI

        Parameters:
            self: TUNGraphNodeI *

        """
        return _snap.TUNGraphNodeI_Next(self)

    def __lt__(self, *args):
        """
        __lt__(TUNGraphNodeI self, TUNGraphNodeI NodeI) -> bool

        Parameters:
            NodeI: TUNGraphNodeI const &

        """
        return _snap.TUNGraphNodeI___lt__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(TUNGraphNodeI self, TUNGraphNodeI NodeI) -> bool

        Parameters:
            NodeI: TUNGraphNodeI const &

        """
        return _snap.TUNGraphNodeI___eq__(self, *args)

    def GetId(self):
        """
        GetId(TUNGraphNodeI self) -> int

        Parameters:
            self: TUNGraphNodeI const *

        """
        return _snap.TUNGraphNodeI_GetId(self)

    def GetDeg(self):
        """
        GetDeg(TUNGraphNodeI self) -> int

        Parameters:
            self: TUNGraphNodeI const *

        """
        return _snap.TUNGraphNodeI_GetDeg(self)

    def GetInDeg(self):
        """
        GetInDeg(TUNGraphNodeI self) -> int

        Parameters:
            self: TUNGraphNodeI const *

        """
        return _snap.TUNGraphNodeI_GetInDeg(self)

    def GetOutDeg(self):
        """
        GetOutDeg(TUNGraphNodeI self) -> int

        Parameters:
            self: TUNGraphNodeI const *

        """
        return _snap.TUNGraphNodeI_GetOutDeg(self)

    def GetInNId(self, *args):
        """
        GetInNId(TUNGraphNodeI self, int const & NodeN) -> int

        Parameters:
            NodeN: int const &

        """
        return _snap.TUNGraphNodeI_GetInNId(self, *args)

    def GetOutNId(self, *args):
        """
        GetOutNId(TUNGraphNodeI self, int const & NodeN) -> int

        Parameters:
            NodeN: int const &

        """
        return _snap.TUNGraphNodeI_GetOutNId(self, *args)

    def GetNbrNId(self, *args):
        """
        GetNbrNId(TUNGraphNodeI self, int const & NodeN) -> int

        Parameters:
            NodeN: int const &

        """
        return _snap.TUNGraphNodeI_GetNbrNId(self, *args)

    def IsInNId(self, *args):
        """
        IsInNId(TUNGraphNodeI self, int const & NId) -> bool

        Parameters:
            NId: int const &

        """
        return _snap.TUNGraphNodeI_IsInNId(self, *args)

    def IsOutNId(self, *args):
        """
        IsOutNId(TUNGraphNodeI self, int const & NId) -> bool

        Parameters:
            NId: int const &

        """
        return _snap.TUNGraphNodeI_IsOutNId(self, *args)

    def IsNbrNId(self, *args):
        """
        IsNbrNId(TUNGraphNodeI self, int const & NId) -> bool

        Parameters:
            NId: int const &

        """
        return _snap.TUNGraphNodeI_IsNbrNId(self, *args)

    __swig_destroy__ = _snap.delete_TUNGraphNodeI
TUNGraphNodeI.Next = new_instancemethod(_snap.TUNGraphNodeI_Next,None,TUNGraphNodeI)
TUNGraphNodeI.__lt__ = new_instancemethod(_snap.TUNGraphNodeI___lt__,None,TUNGraphNodeI)
TUNGraphNodeI.__eq__ = new_instancemethod(_snap.TUNGraphNodeI___eq__,None,TUNGraphNodeI)
TUNGraphNodeI.GetId = new_instancemethod(_snap.TUNGraphNodeI_GetId,None,TUNGraphNodeI)
TUNGraphNodeI.GetDeg = new_instancemethod(_snap.TUNGraphNodeI_GetDeg,None,TUNGraphNodeI)
TUNGraphNodeI.GetInDeg = new_instancemethod(_snap.TUNGraphNodeI_GetInDeg,None,TUNGraphNodeI)
TUNGraphNodeI.GetOutDeg = new_instancemethod(_snap.TUNGraphNodeI_GetOutDeg,None,TUNGraphNodeI)
TUNGraphNodeI.GetInNId = new_instancemethod(_snap.TUNGraphNodeI_GetInNId,None,TUNGraphNodeI)
TUNGraphNodeI.GetOutNId = new_instancemethod(_snap.TUNGraphNodeI_GetOutNId,None,TUNGraphNodeI)
TUNGraphNodeI.GetNbrNId = new_instancemethod(_snap.TUNGraphNodeI_GetNbrNId,None,TUNGraphNodeI)
TUNGraphNodeI.IsInNId = new_instancemethod(_snap.TUNGraphNodeI_IsInNId,None,TUNGraphNodeI)
TUNGraphNodeI.IsOutNId = new_instancemethod(_snap.TUNGraphNodeI_IsOutNId,None,TUNGraphNodeI)
TUNGraphNodeI.IsNbrNId = new_instancemethod(_snap.TUNGraphNodeI_IsNbrNId,None,TUNGraphNodeI)
TUNGraphNodeI_swigregister = _snap.TUNGraphNodeI_swigregister
TUNGraphNodeI_swigregister(TUNGraphNodeI)

class TUNGraphEdgeI(object):
    """Proxy of C++ TUNGraphEdgeI class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TUNGraphEdgeI self) -> TUNGraphEdgeI
        __init__(TUNGraphEdgeI self, TUNGraph::TEdgeI const & EdgeI) -> TUNGraphEdgeI

        Parameters:
            EdgeI: TUNGraph::TEdgeI const &

        """
        _snap.TUNGraphEdgeI_swiginit(self,_snap.new_TUNGraphEdgeI(*args))
    def Next(self):
        """
        Next(TUNGraphEdgeI self) -> TUNGraphEdgeI

        Parameters:
            self: TUNGraphEdgeI *

        """
        return _snap.TUNGraphEdgeI_Next(self)

    def __lt__(self, *args):
        """
        __lt__(TUNGraphEdgeI self, TUNGraphEdgeI EdgeI) -> bool

        Parameters:
            EdgeI: TUNGraphEdgeI const &

        """
        return _snap.TUNGraphEdgeI___lt__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(TUNGraphEdgeI self, TUNGraphEdgeI EdgeI) -> bool

        Parameters:
            EdgeI: TUNGraphEdgeI const &

        """
        return _snap.TUNGraphEdgeI___eq__(self, *args)

    def GetId(self):
        """
        GetId(TUNGraphEdgeI self) -> int

        Parameters:
            self: TUNGraphEdgeI const *

        """
        return _snap.TUNGraphEdgeI_GetId(self)

    def GetSrcNId(self):
        """
        GetSrcNId(TUNGraphEdgeI self) -> int

        Parameters:
            self: TUNGraphEdgeI const *

        """
        return _snap.TUNGraphEdgeI_GetSrcNId(self)

    def GetDstNId(self):
        """
        GetDstNId(TUNGraphEdgeI self) -> int

        Parameters:
            self: TUNGraphEdgeI const *

        """
        return _snap.TUNGraphEdgeI_GetDstNId(self)

    __swig_destroy__ = _snap.delete_TUNGraphEdgeI
TUNGraphEdgeI.Next = new_instancemethod(_snap.TUNGraphEdgeI_Next,None,TUNGraphEdgeI)
TUNGraphEdgeI.__lt__ = new_instancemethod(_snap.TUNGraphEdgeI___lt__,None,TUNGraphEdgeI)
TUNGraphEdgeI.__eq__ = new_instancemethod(_snap.TUNGraphEdgeI___eq__,None,TUNGraphEdgeI)
TUNGraphEdgeI.GetId = new_instancemethod(_snap.TUNGraphEdgeI_GetId,None,TUNGraphEdgeI)
TUNGraphEdgeI.GetSrcNId = new_instancemethod(_snap.TUNGraphEdgeI_GetSrcNId,None,TUNGraphEdgeI)
TUNGraphEdgeI.GetDstNId = new_instancemethod(_snap.TUNGraphEdgeI_GetDstNId,None,TUNGraphEdgeI)
TUNGraphEdgeI_swigregister = _snap.TUNGraphEdgeI_swigregister
TUNGraphEdgeI_swigregister(TUNGraphEdgeI)

class TNEANetNodeI(object):
    """Proxy of C++ TNEANetNodeI class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TNEANetNodeI self) -> TNEANetNodeI
        __init__(TNEANetNodeI self, TNEANet::TNodeI const & NodeI) -> TNEANetNodeI

        Parameters:
            NodeI: TNEANet::TNodeI const &

        """
        _snap.TNEANetNodeI_swiginit(self,_snap.new_TNEANetNodeI(*args))
    def Next(self):
        """
        Next(TNEANetNodeI self) -> TNEANetNodeI

        Parameters:
            self: TNEANetNodeI *

        """
        return _snap.TNEANetNodeI_Next(self)

    def __lt__(self, *args):
        """
        __lt__(TNEANetNodeI self, TNEANetNodeI NodeI) -> bool

        Parameters:
            NodeI: TNEANetNodeI const &

        """
        return _snap.TNEANetNodeI___lt__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(TNEANetNodeI self, TNEANetNodeI NodeI) -> bool

        Parameters:
            NodeI: TNEANetNodeI const &

        """
        return _snap.TNEANetNodeI___eq__(self, *args)

    def GetId(self):
        """
        GetId(TNEANetNodeI self) -> int

        Parameters:
            self: TNEANetNodeI const *

        """
        return _snap.TNEANetNodeI_GetId(self)

    def GetDeg(self):
        """
        GetDeg(TNEANetNodeI self) -> int

        Parameters:
            self: TNEANetNodeI const *

        """
        return _snap.TNEANetNodeI_GetDeg(self)

    def GetInDeg(self):
        """
        GetInDeg(TNEANetNodeI self) -> int

        Parameters:
            self: TNEANetNodeI const *

        """
        return _snap.TNEANetNodeI_GetInDeg(self)

    def GetOutDeg(self):
        """
        GetOutDeg(TNEANetNodeI self) -> int

        Parameters:
            self: TNEANetNodeI const *

        """
        return _snap.TNEANetNodeI_GetOutDeg(self)

    def GetInNId(self, *args):
        """
        GetInNId(TNEANetNodeI self, int const & NodeN) -> int

        Parameters:
            NodeN: int const &

        """
        return _snap.TNEANetNodeI_GetInNId(self, *args)

    def GetOutNId(self, *args):
        """
        GetOutNId(TNEANetNodeI self, int const & NodeN) -> int

        Parameters:
            NodeN: int const &

        """
        return _snap.TNEANetNodeI_GetOutNId(self, *args)

    def GetNbrNId(self, *args):
        """
        GetNbrNId(TNEANetNodeI self, int const & NodeN) -> int

        Parameters:
            NodeN: int const &

        """
        return _snap.TNEANetNodeI_GetNbrNId(self, *args)

    def IsInNId(self, *args):
        """
        IsInNId(TNEANetNodeI self, int const & NId) -> bool

        Parameters:
            NId: int const &

        """
        return _snap.TNEANetNodeI_IsInNId(self, *args)

    def IsOutNId(self, *args):
        """
        IsOutNId(TNEANetNodeI self, int const & NId) -> bool

        Parameters:
            NId: int const &

        """
        return _snap.TNEANetNodeI_IsOutNId(self, *args)

    def IsNbrNId(self, *args):
        """
        IsNbrNId(TNEANetNodeI self, int const & NId) -> bool

        Parameters:
            NId: int const &

        """
        return _snap.TNEANetNodeI_IsNbrNId(self, *args)

    __swig_destroy__ = _snap.delete_TNEANetNodeI
TNEANetNodeI.Next = new_instancemethod(_snap.TNEANetNodeI_Next,None,TNEANetNodeI)
TNEANetNodeI.__lt__ = new_instancemethod(_snap.TNEANetNodeI___lt__,None,TNEANetNodeI)
TNEANetNodeI.__eq__ = new_instancemethod(_snap.TNEANetNodeI___eq__,None,TNEANetNodeI)
TNEANetNodeI.GetId = new_instancemethod(_snap.TNEANetNodeI_GetId,None,TNEANetNodeI)
TNEANetNodeI.GetDeg = new_instancemethod(_snap.TNEANetNodeI_GetDeg,None,TNEANetNodeI)
TNEANetNodeI.GetInDeg = new_instancemethod(_snap.TNEANetNodeI_GetInDeg,None,TNEANetNodeI)
TNEANetNodeI.GetOutDeg = new_instancemethod(_snap.TNEANetNodeI_GetOutDeg,None,TNEANetNodeI)
TNEANetNodeI.GetInNId = new_instancemethod(_snap.TNEANetNodeI_GetInNId,None,TNEANetNodeI)
TNEANetNodeI.GetOutNId = new_instancemethod(_snap.TNEANetNodeI_GetOutNId,None,TNEANetNodeI)
TNEANetNodeI.GetNbrNId = new_instancemethod(_snap.TNEANetNodeI_GetNbrNId,None,TNEANetNodeI)
TNEANetNodeI.IsInNId = new_instancemethod(_snap.TNEANetNodeI_IsInNId,None,TNEANetNodeI)
TNEANetNodeI.IsOutNId = new_instancemethod(_snap.TNEANetNodeI_IsOutNId,None,TNEANetNodeI)
TNEANetNodeI.IsNbrNId = new_instancemethod(_snap.TNEANetNodeI_IsNbrNId,None,TNEANetNodeI)
TNEANetNodeI_swigregister = _snap.TNEANetNodeI_swigregister
TNEANetNodeI_swigregister(TNEANetNodeI)

class TNEANetEdgeI(object):
    """Proxy of C++ TNEANetEdgeI class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TNEANetEdgeI self) -> TNEANetEdgeI
        __init__(TNEANetEdgeI self, TNEANet::TEdgeI const & EdgeI) -> TNEANetEdgeI

        Parameters:
            EdgeI: TNEANet::TEdgeI const &

        """
        _snap.TNEANetEdgeI_swiginit(self,_snap.new_TNEANetEdgeI(*args))
    def Next(self):
        """
        Next(TNEANetEdgeI self) -> TNEANetEdgeI

        Parameters:
            self: TNEANetEdgeI *

        """
        return _snap.TNEANetEdgeI_Next(self)

    def __lt__(self, *args):
        """
        __lt__(TNEANetEdgeI self, TNEANetEdgeI EdgeI) -> bool

        Parameters:
            EdgeI: TNEANetEdgeI const &

        """
        return _snap.TNEANetEdgeI___lt__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(TNEANetEdgeI self, TNEANetEdgeI EdgeI) -> bool

        Parameters:
            EdgeI: TNEANetEdgeI const &

        """
        return _snap.TNEANetEdgeI___eq__(self, *args)

    def GetId(self):
        """
        GetId(TNEANetEdgeI self) -> int

        Parameters:
            self: TNEANetEdgeI const *

        """
        return _snap.TNEANetEdgeI_GetId(self)

    def GetSrcNId(self):
        """
        GetSrcNId(TNEANetEdgeI self) -> int

        Parameters:
            self: TNEANetEdgeI const *

        """
        return _snap.TNEANetEdgeI_GetSrcNId(self)

    def GetDstNId(self):
        """
        GetDstNId(TNEANetEdgeI self) -> int

        Parameters:
            self: TNEANetEdgeI const *

        """
        return _snap.TNEANetEdgeI_GetDstNId(self)

    __swig_destroy__ = _snap.delete_TNEANetEdgeI
TNEANetEdgeI.Next = new_instancemethod(_snap.TNEANetEdgeI_Next,None,TNEANetEdgeI)
TNEANetEdgeI.__lt__ = new_instancemethod(_snap.TNEANetEdgeI___lt__,None,TNEANetEdgeI)
TNEANetEdgeI.__eq__ = new_instancemethod(_snap.TNEANetEdgeI___eq__,None,TNEANetEdgeI)
TNEANetEdgeI.GetId = new_instancemethod(_snap.TNEANetEdgeI_GetId,None,TNEANetEdgeI)
TNEANetEdgeI.GetSrcNId = new_instancemethod(_snap.TNEANetEdgeI_GetSrcNId,None,TNEANetEdgeI)
TNEANetEdgeI.GetDstNId = new_instancemethod(_snap.TNEANetEdgeI_GetDstNId,None,TNEANetEdgeI)
TNEANetEdgeI_swigregister = _snap.TNEANetEdgeI_swigregister
TNEANetEdgeI_swigregister(TNEANetEdgeI)

class TNEANetAIntI(object):
    """Proxy of C++ TNEANetAIntI class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TNEANetAIntI self) -> TNEANetAIntI
        __init__(TNEANetAIntI self, TIntVecIter const & HIter, TStr attribute, bool isEdgeIter, TNEANet GraphPt) -> TNEANetAIntI

        Parameters:
            HIter: TIntVecIter const &
            attribute: TStr
            isEdgeIter: bool
            GraphPt: TNEANet const *

        __init__(TNEANetAIntI self, TNEANet::TAIntI const & I) -> TNEANetAIntI

        Parameters:
            I: TNEANet::TAIntI const &

        """
        _snap.TNEANetAIntI_swiginit(self,_snap.new_TNEANetAIntI(*args))
    def Next(self):
        """
        Next(TNEANetAIntI self) -> TNEANetAIntI

        Parameters:
            self: TNEANetAIntI *

        """
        return _snap.TNEANetAIntI_Next(self)

    def __lt__(self, *args):
        """
        __lt__(TNEANetAIntI self, TNEANetAIntI I) -> bool

        Parameters:
            I: TNEANetAIntI const &

        """
        return _snap.TNEANetAIntI___lt__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(TNEANetAIntI self, TNEANetAIntI I) -> bool

        Parameters:
            I: TNEANetAIntI const &

        """
        return _snap.TNEANetAIntI___eq__(self, *args)

    def GetDat(self):
        """
        GetDat(TNEANetAIntI self) -> int

        Parameters:
            self: TNEANetAIntI const *

        """
        return _snap.TNEANetAIntI_GetDat(self)

    def IsDeleted(self):
        """
        IsDeleted(TNEANetAIntI self) -> bool

        Parameters:
            self: TNEANetAIntI const *

        """
        return _snap.TNEANetAIntI_IsDeleted(self)

    __swig_destroy__ = _snap.delete_TNEANetAIntI
TNEANetAIntI.Next = new_instancemethod(_snap.TNEANetAIntI_Next,None,TNEANetAIntI)
TNEANetAIntI.__lt__ = new_instancemethod(_snap.TNEANetAIntI___lt__,None,TNEANetAIntI)
TNEANetAIntI.__eq__ = new_instancemethod(_snap.TNEANetAIntI___eq__,None,TNEANetAIntI)
TNEANetAIntI.GetDat = new_instancemethod(_snap.TNEANetAIntI_GetDat,None,TNEANetAIntI)
TNEANetAIntI.IsDeleted = new_instancemethod(_snap.TNEANetAIntI_IsDeleted,None,TNEANetAIntI)
TNEANetAIntI_swigregister = _snap.TNEANetAIntI_swigregister
TNEANetAIntI_swigregister(TNEANetAIntI)

class TNEANetAStrI(object):
    """Proxy of C++ TNEANetAStrI class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TNEANetAStrI self) -> TNEANetAStrI
        __init__(TNEANetAStrI self, TStrVecIter const & HIter, TStr attribute, bool isEdgeIter, TNEANet GraphPt) -> TNEANetAStrI

        Parameters:
            HIter: TStrVecIter const &
            attribute: TStr
            isEdgeIter: bool
            GraphPt: TNEANet const *

        __init__(TNEANetAStrI self, TNEANet::TAStrI const & I) -> TNEANetAStrI

        Parameters:
            I: TNEANet::TAStrI const &

        """
        _snap.TNEANetAStrI_swiginit(self,_snap.new_TNEANetAStrI(*args))
    def Next(self):
        """
        Next(TNEANetAStrI self) -> TNEANetAStrI

        Parameters:
            self: TNEANetAStrI *

        """
        return _snap.TNEANetAStrI_Next(self)

    def __lt__(self, *args):
        """
        __lt__(TNEANetAStrI self, TNEANetAStrI I) -> bool

        Parameters:
            I: TNEANetAStrI const &

        """
        return _snap.TNEANetAStrI___lt__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(TNEANetAStrI self, TNEANetAStrI I) -> bool

        Parameters:
            I: TNEANetAStrI const &

        """
        return _snap.TNEANetAStrI___eq__(self, *args)

    def GetDat(self):
        """
        GetDat(TNEANetAStrI self) -> char *

        Parameters:
            self: TNEANetAStrI const *

        """
        return _snap.TNEANetAStrI_GetDat(self)

    def IsDeleted(self):
        """
        IsDeleted(TNEANetAStrI self) -> bool

        Parameters:
            self: TNEANetAStrI const *

        """
        return _snap.TNEANetAStrI_IsDeleted(self)

    __swig_destroy__ = _snap.delete_TNEANetAStrI
TNEANetAStrI.Next = new_instancemethod(_snap.TNEANetAStrI_Next,None,TNEANetAStrI)
TNEANetAStrI.__lt__ = new_instancemethod(_snap.TNEANetAStrI___lt__,None,TNEANetAStrI)
TNEANetAStrI.__eq__ = new_instancemethod(_snap.TNEANetAStrI___eq__,None,TNEANetAStrI)
TNEANetAStrI.GetDat = new_instancemethod(_snap.TNEANetAStrI_GetDat,None,TNEANetAStrI)
TNEANetAStrI.IsDeleted = new_instancemethod(_snap.TNEANetAStrI_IsDeleted,None,TNEANetAStrI)
TNEANetAStrI_swigregister = _snap.TNEANetAStrI_swigregister
TNEANetAStrI_swigregister(TNEANetAStrI)

class TNEANetAFltI(object):
    """Proxy of C++ TNEANetAFltI class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TNEANetAFltI self) -> TNEANetAFltI
        __init__(TNEANetAFltI self, TFltVecIter const & HIter, TStr attribute, bool isEdgeIter, TNEANet GraphPt) -> TNEANetAFltI

        Parameters:
            HIter: TFltVecIter const &
            attribute: TStr
            isEdgeIter: bool
            GraphPt: TNEANet const *

        __init__(TNEANetAFltI self, TNEANet::TAFltI const & I) -> TNEANetAFltI

        Parameters:
            I: TNEANet::TAFltI const &

        """
        _snap.TNEANetAFltI_swiginit(self,_snap.new_TNEANetAFltI(*args))
    def Next(self):
        """
        Next(TNEANetAFltI self) -> TNEANetAFltI

        Parameters:
            self: TNEANetAFltI *

        """
        return _snap.TNEANetAFltI_Next(self)

    def __lt__(self, *args):
        """
        __lt__(TNEANetAFltI self, TNEANetAFltI I) -> bool

        Parameters:
            I: TNEANetAFltI const &

        """
        return _snap.TNEANetAFltI___lt__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(TNEANetAFltI self, TNEANetAFltI I) -> bool

        Parameters:
            I: TNEANetAFltI const &

        """
        return _snap.TNEANetAFltI___eq__(self, *args)

    def GetDat(self):
        """
        GetDat(TNEANetAFltI self) -> double

        Parameters:
            self: TNEANetAFltI const *

        """
        return _snap.TNEANetAFltI_GetDat(self)

    def IsDeleted(self):
        """
        IsDeleted(TNEANetAFltI self) -> bool

        Parameters:
            self: TNEANetAFltI const *

        """
        return _snap.TNEANetAFltI_IsDeleted(self)

    __swig_destroy__ = _snap.delete_TNEANetAFltI
TNEANetAFltI.Next = new_instancemethod(_snap.TNEANetAFltI_Next,None,TNEANetAFltI)
TNEANetAFltI.__lt__ = new_instancemethod(_snap.TNEANetAFltI___lt__,None,TNEANetAFltI)
TNEANetAFltI.__eq__ = new_instancemethod(_snap.TNEANetAFltI___eq__,None,TNEANetAFltI)
TNEANetAFltI.GetDat = new_instancemethod(_snap.TNEANetAFltI_GetDat,None,TNEANetAFltI)
TNEANetAFltI.IsDeleted = new_instancemethod(_snap.TNEANetAFltI_IsDeleted,None,TNEANetAFltI)
TNEANetAFltI_swigregister = _snap.TNEANetAFltI_swigregister
TNEANetAFltI_swigregister(TNEANetAFltI)


def TPrGraph(*args):
  """
    TPrGraph(PUNGraph G) -> TUNGraph

    Parameters:
        G: PUNGraph

    """
  return _snap.TPrGraph(*args)
#
# define __getitem__ for [] addressing
#

def getitem(self, i):
    return self.GetVal(i)

def setitem(self, i, val):
    self.SetVal(i, val)

def len(self):
    return self.Len()

def delitem(self,  i):
    self.Del(i)

#
# define iterator for TVec
#

class IterVec:
    def __init__(self, vec):
        self.vec = vec
        self.count = -1

    def __iter__(self):
        return self

    def next(self):
        if self.count+1 < self.vec.Len():
            self.count += 1
            return self.vec[self.count]

        raise StopIteration

def itervec(self):
    return IterVec(self)

# expand TVec types with methods __iter__ and __getitem__

TIntV.__getitem__ = getitem
TIntV.__setitem__ = setitem
TIntV.__iter__ = itervec
TIntV.__len__ = len
TIntV.__delitem__ = delitem
TFltV.__getitem__ = getitem
TFltV.__setitem__ = setitem
TFltV.__iter__ = itervec
TFltV.__len__ = len
TFltV.__delitem__ = delitem
TIntIntVV.__getitem__ = getitem
TIntIntVV.__setitem__ = setitem
TIntIntVV.__iter__ = itervec
TIntIntVV.__len__ = len
TIntIntVV.__delitem__ = delitem
TIntPrV.__getitem__ = getitem
TIntPrV.__setitem__ = setitem
TIntPrV.__iter__ = itervec
TIntPrV.__len__ = len
TIntPrV.__delitem__ = delitem
TFltPrV.__getitem__ = getitem
TFltPrV.__setitem__ = setitem
TFltPrV.__iter__ = itervec
TFltPrV.__len__ = len
TFltPrV.__delitem__ = delitem
TIntFltKdV.__getitem__ = getitem
TIntFltKdV.__setitem__ = setitem
TIntFltKdV.__iter__ = itervec
TIntFltKdV.__len__ = len
TIntFltKdV.__delitem__ = delitem
TCnComV.__getitem__ = getitem
TCnComV.__setitem__ = setitem
TCnComV.__iter__ = itervec
TCnComV.__len__ = len
TCnComV.__delitem__ = delitem
TCnCom.__getitem__ = getitem
TCnCom.__setitem__ = setitem
TCnCom.__iter__ = itervec
TCnCom.__len__ = len
TCnCom.__delitem__ = delitem

#
# define __getitem__ for [] addressing
#
def getitem_hash(self, i):
    return self.GetDat(i)

def setitem_hash(self, key, value):
    self.AddDat(key, value)

def delitem_hash(self, key):
    self.DelKey(key)

def len_hash(self):
    return self.Len()

#
# define iterator for THash
#

class IterHash:
    def __init__(self, hash):
        self.hash = hash
        self.iter = None

    def __iter__(self):
        return self

    def next(self):
        if self.hash.Len() == 0:
            raise StopIteration
        if not self.iter:
            self.iter = self.hash.BegI()
            if not self.iter:
                raise StopIteration
            if self.iter:
                return self.iter.GetKey()
            return self.iter

        if self.iter.IsEnd():
            raise StopIteration

        self.iter.Next()

        if self.iter.IsEnd():
            raise StopIteration
     
        if self.iter:
            return self.iter.GetKey()
        return self.iter

def iterhash(self):
    return IterHash(self)

TIntH.__getitem__ = getitem_hash
TIntH.__setitem__ = setitem_hash
TIntH.__delitem__ = delitem_hash
TIntH.__len__ = len_hash
TIntH.__iter__ = iterhash
TIntIntH.__getitem__ = getitem_hash
TIntIntH.__setitem__ = setitem_hash
TIntIntH.__delitem__ = delitem_hash
TIntIntH.__len__ = len_hash
TIntIntH.__iter__ = iterhash
TIntFltH.__getitem__ = getitem_hash
TIntFltH.__setitem__ = setitem_hash
TIntFltH.__delitem__ = delitem_hash
TIntFltH.__len__ = len_hash
TIntFltH.__iter__ = iterhash
TIntStrH.__getitem__ = getitem_hash
TIntStrH.__setitem__ = setitem_hash
TIntStrH.__delitem__ = delitem_hash
TIntStrH.__len__ = len_hash
TIntStrH.__iter__ = iterhash
TIntPrFltH.__getitem__ = getitem_hash
TIntPrFltH.__setitem__ = setitem_hash
TIntPrFltH.__delitem__ = delitem_hash
TIntPrFltH.__len__ = len_hash
TIntPrFltH.__iter__ = iterhash

#
# define __getitem__ for [] addressing
#
def getitem_hashset(self, i):
    return self.GetSetKey(i)

def delitem_hashset(self, i):
    self.DelKey(i)

def contains_hashset(self, key):
    return self.IsKey(key)

#
# define iterator for THashSet
#

class IterHashSet:
    def __init__(self, hash):
        self.hash = hash
        self.vec = None
        self.iter = None
        self.count = 0

    def __iter__(self):
        return self

    def next(self):
        if not self.iter or not self.vec:
            self.vec = TIntV()
            self.hash.GetKeyV(self.vec)
            self.count = 0

        if self.count >= self.vec.Len():
            raise StopIteration

        self.iter = self.vec.GetVal(self.count)
        self.count += 1
     
        return self.iter

def iterhashset(self):
    return IterHashSet(self)


TIntSet.__iter__ = iterhashset
TIntSet.__contains__ = contains_hashset



def PrintGraphStatTable_PNEANet(*args):
  """
    PrintGraphStatTable_PNEANet(PNEANet G, TStr OutFNm, TStr Desc="")

    Parameters:
        G: TPt< TNEANet > const &
        OutFNm: TStr
        Desc: TStr

    PrintGraphStatTable_PNEANet(PNEANet G, TStr OutFNm)

    Parameters:
        G: TPt< TNEANet > const &
        OutFNm: TStr

    """
  return _snap.PrintGraphStatTable_PNEANet(*args)
class PNEANet(object):
    """Proxy of C++ TPt<(TNEANet)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def New():
        """New() -> PNEANet"""
        return _snap.PNEANet_New()

    New = staticmethod(New)
    __swig_destroy__ = _snap.delete_PNEANet
    def Save(self, *args):
        """
        Save(PNEANet self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.PNEANet_Save(self, *args)

    def __deref__(self):
        """
        __deref__(PNEANet self) -> TNEANet

        Parameters:
            self: TPt< TNEANet > const *

        """
        return _snap.PNEANet___deref__(self)

    def __ref__(self):
        """
        __ref__(PNEANet self) -> TNEANet

        Parameters:
            self: TPt< TNEANet > const *

        """
        return _snap.PNEANet___ref__(self)

    def __call__(self):
        """
        __call__(PNEANet self) -> TNEANet

        Parameters:
            self: TPt< TNEANet > const *

        """
        return _snap.PNEANet___call__(self)

    def Empty(self):
        """
        Empty(PNEANet self) -> bool

        Parameters:
            self: TPt< TNEANet > const *

        """
        return _snap.PNEANet_Empty(self)

    def Clr(self):
        """
        Clr(PNEANet self)

        Parameters:
            self: TPt< TNEANet > *

        """
        return _snap.PNEANet_Clr(self)

    def GetRefs(self):
        """
        GetRefs(PNEANet self) -> int

        Parameters:
            self: TPt< TNEANet > const *

        """
        return _snap.PNEANet_GetRefs(self)

    def Load(self, *args):
        """
        Load(PNEANet self, TSIn SIn) -> PNEANet

        Parameters:
            SIn: TSIn &

        """
        return _snap.PNEANet_Load(self, *args)

    def HasFlag(self, *args):
        """
        HasFlag(PNEANet self, TGraphFlag const & Flag) -> bool

        Parameters:
            Flag: TGraphFlag const &

        """
        return _snap.PNEANet_HasFlag(self, *args)

    def GetNodes(self):
        """
        GetNodes(PNEANet self) -> int

        Parameters:
            self: TPt< TNEANet > const *

        """
        return _snap.PNEANet_GetNodes(self)

    def AddNode(self, *args):
        """
        AddNode(PNEANet self, int NId=-1) -> int

        Parameters:
            NId: int

        AddNode(PNEANet self) -> int
        AddNode(PNEANet self, TNEANet::TNodeI const & NodeId) -> int

        Parameters:
            NodeId: TNEANet::TNodeI const &

        """
        return _snap.PNEANet_AddNode(self, *args)

    def DelNode(self, *args):
        """
        DelNode(PNEANet self, int const & NId)

        Parameters:
            NId: int const &

        DelNode(PNEANet self, TNEANet::TNode const & NodeI)

        Parameters:
            NodeI: TNEANet::TNode const &

        """
        return _snap.PNEANet_DelNode(self, *args)

    def IsNode(self, *args):
        """
        IsNode(PNEANet self, int const & NId) -> bool

        Parameters:
            NId: int const &

        """
        return _snap.PNEANet_IsNode(self, *args)

    def BegNI(self, *args):
        """
        BegNI(PNEANet self) -> TNEANet::TNodeI
        BegNI(PNEANet self) -> TNEANetNodeI

        Parameters:
            self: TPt< TNEANet > *

        """
        return _snap.PNEANet_BegNI(self, *args)

    def EndNI(self, *args):
        """
        EndNI(PNEANet self) -> TNEANet::TNodeI
        EndNI(PNEANet self) -> TNEANetNodeI

        Parameters:
            self: TPt< TNEANet > *

        """
        return _snap.PNEANet_EndNI(self, *args)

    def GetNI(self, *args):
        """
        GetNI(PNEANet self, int const & NId) -> TNEANet::TNodeI

        Parameters:
            NId: int const &

        GetNI(PNEANet self, int const & NId) -> TNEANetNodeI

        Parameters:
            NId: int const &

        """
        return _snap.PNEANet_GetNI(self, *args)

    def BegNAIntI(self, *args):
        """
        BegNAIntI(PNEANet self, TStr attr) -> TNEANet::TAIntI

        Parameters:
            attr: TStr const &

        BegNAIntI(PNEANet self, TStr attr) -> TNEANetAIntI

        Parameters:
            attr: TStr const &

        """
        return _snap.PNEANet_BegNAIntI(self, *args)

    def EndNAIntI(self, *args):
        """
        EndNAIntI(PNEANet self, TStr attr) -> TNEANet::TAIntI

        Parameters:
            attr: TStr const &

        EndNAIntI(PNEANet self, TStr attr) -> TNEANetAIntI

        Parameters:
            attr: TStr const &

        """
        return _snap.PNEANet_EndNAIntI(self, *args)

    def GetNAIntI(self, *args):
        """
        GetNAIntI(PNEANet self, TStr attr, int const & NId) -> TNEANet::TAIntI

        Parameters:
            attr: TStr const &
            NId: int const &

        """
        return _snap.PNEANet_GetNAIntI(self, *args)

    def BegNAStrI(self, *args):
        """
        BegNAStrI(PNEANet self, TStr attr) -> TNEANet::TAStrI

        Parameters:
            attr: TStr const &

        BegNAStrI(PNEANet self, TStr attr) -> TNEANetAStrI

        Parameters:
            attr: TStr const &

        """
        return _snap.PNEANet_BegNAStrI(self, *args)

    def EndNAStrI(self, *args):
        """
        EndNAStrI(PNEANet self, TStr attr) -> TNEANet::TAStrI

        Parameters:
            attr: TStr const &

        EndNAStrI(PNEANet self, TStr attr) -> TNEANetAStrI

        Parameters:
            attr: TStr const &

        """
        return _snap.PNEANet_EndNAStrI(self, *args)

    def GetNAStrI(self, *args):
        """
        GetNAStrI(PNEANet self, TStr attr, int const & NId) -> TNEANet::TAStrI

        Parameters:
            attr: TStr const &
            NId: int const &

        """
        return _snap.PNEANet_GetNAStrI(self, *args)

    def BegNAFltI(self, *args):
        """
        BegNAFltI(PNEANet self, TStr attr) -> TNEANet::TAFltI

        Parameters:
            attr: TStr const &

        BegNAFltI(PNEANet self, TStr attr) -> TNEANetAFltI

        Parameters:
            attr: TStr const &

        """
        return _snap.PNEANet_BegNAFltI(self, *args)

    def EndNAFltI(self, *args):
        """
        EndNAFltI(PNEANet self, TStr attr) -> TNEANet::TAFltI

        Parameters:
            attr: TStr const &

        EndNAFltI(PNEANet self, TStr attr) -> TNEANetAFltI

        Parameters:
            attr: TStr const &

        """
        return _snap.PNEANet_EndNAFltI(self, *args)

    def GetNAFltI(self, *args):
        """
        GetNAFltI(PNEANet self, TStr attr, int const & NId) -> TNEANet::TAFltI

        Parameters:
            attr: TStr const &
            NId: int const &

        """
        return _snap.PNEANet_GetNAFltI(self, *args)

    def AttrNameNI(self, *args):
        """
        AttrNameNI(PNEANet self, TInt NId, TStrV Names)

        Parameters:
            NId: TInt const &
            Names: TStrV &

        AttrNameNI(PNEANet self, TInt NId, TStrIntPrH::TIter NodeHI, TStrV Names)

        Parameters:
            NId: TInt const &
            NodeHI: TStrIntPrH::TIter
            Names: TStrV &

        """
        return _snap.PNEANet_AttrNameNI(self, *args)

    def AttrValueNI(self, *args):
        """
        AttrValueNI(PNEANet self, TInt NId, TStrV Values)

        Parameters:
            NId: TInt const &
            Values: TStrV &

        AttrValueNI(PNEANet self, TInt NId, TStrIntPrH::TIter NodeHI, TStrV Values)

        Parameters:
            NId: TInt const &
            NodeHI: TStrIntPrH::TIter
            Values: TStrV &

        """
        return _snap.PNEANet_AttrValueNI(self, *args)

    def IntAttrNameNI(self, *args):
        """
        IntAttrNameNI(PNEANet self, TInt NId, TStrV Names)

        Parameters:
            NId: TInt const &
            Names: TStrV &

        IntAttrNameNI(PNEANet self, TInt NId, TStrIntPrH::TIter NodeHI, TStrV Names)

        Parameters:
            NId: TInt const &
            NodeHI: TStrIntPrH::TIter
            Names: TStrV &

        """
        return _snap.PNEANet_IntAttrNameNI(self, *args)

    def IntAttrValueNI(self, *args):
        """
        IntAttrValueNI(PNEANet self, TInt NId, TIntV Values)

        Parameters:
            NId: TInt const &
            Values: TIntV &

        IntAttrValueNI(PNEANet self, TInt NId, TStrIntPrH::TIter NodeHI, TIntV Values)

        Parameters:
            NId: TInt const &
            NodeHI: TStrIntPrH::TIter
            Values: TIntV &

        """
        return _snap.PNEANet_IntAttrValueNI(self, *args)

    def StrAttrNameNI(self, *args):
        """
        StrAttrNameNI(PNEANet self, TInt NId, TStrV Names)

        Parameters:
            NId: TInt const &
            Names: TStrV &

        StrAttrNameNI(PNEANet self, TInt NId, TStrIntPrH::TIter NodeHI, TStrV Names)

        Parameters:
            NId: TInt const &
            NodeHI: TStrIntPrH::TIter
            Names: TStrV &

        """
        return _snap.PNEANet_StrAttrNameNI(self, *args)

    def StrAttrValueNI(self, *args):
        """
        StrAttrValueNI(PNEANet self, TInt NId, TStrV Values)

        Parameters:
            NId: TInt const &
            Values: TStrV &

        StrAttrValueNI(PNEANet self, TInt NId, TStrIntPrH::TIter NodeHI, TStrV Values)

        Parameters:
            NId: TInt const &
            NodeHI: TStrIntPrH::TIter
            Values: TStrV &

        """
        return _snap.PNEANet_StrAttrValueNI(self, *args)

    def FltAttrNameNI(self, *args):
        """
        FltAttrNameNI(PNEANet self, TInt NId, TStrV Names)

        Parameters:
            NId: TInt const &
            Names: TStrV &

        FltAttrNameNI(PNEANet self, TInt NId, TStrIntPrH::TIter NodeHI, TStrV Names)

        Parameters:
            NId: TInt const &
            NodeHI: TStrIntPrH::TIter
            Names: TStrV &

        """
        return _snap.PNEANet_FltAttrNameNI(self, *args)

    def FltAttrValueNI(self, *args):
        """
        FltAttrValueNI(PNEANet self, TInt NId, TFltV Values)

        Parameters:
            NId: TInt const &
            Values: TFltV &

        FltAttrValueNI(PNEANet self, TInt NId, TStrIntPrH::TIter NodeHI, TFltV Values)

        Parameters:
            NId: TInt const &
            NodeHI: TStrIntPrH::TIter
            Values: TFltV &

        """
        return _snap.PNEANet_FltAttrValueNI(self, *args)

    def AttrNameEI(self, *args):
        """
        AttrNameEI(PNEANet self, TInt EId, TStrV Names)

        Parameters:
            EId: TInt const &
            Names: TStrV &

        AttrNameEI(PNEANet self, TInt EId, TStrIntPrH::TIter EdgeHI, TStrV Names)

        Parameters:
            EId: TInt const &
            EdgeHI: TStrIntPrH::TIter
            Names: TStrV &

        """
        return _snap.PNEANet_AttrNameEI(self, *args)

    def AttrValueEI(self, *args):
        """
        AttrValueEI(PNEANet self, TInt EId, TStrV Values)

        Parameters:
            EId: TInt const &
            Values: TStrV &

        AttrValueEI(PNEANet self, TInt EId, TStrIntPrH::TIter EdgeHI, TStrV Values)

        Parameters:
            EId: TInt const &
            EdgeHI: TStrIntPrH::TIter
            Values: TStrV &

        """
        return _snap.PNEANet_AttrValueEI(self, *args)

    def IntAttrNameEI(self, *args):
        """
        IntAttrNameEI(PNEANet self, TInt EId, TStrV Names)

        Parameters:
            EId: TInt const &
            Names: TStrV &

        IntAttrNameEI(PNEANet self, TInt EId, TStrIntPrH::TIter EdgeHI, TStrV Names)

        Parameters:
            EId: TInt const &
            EdgeHI: TStrIntPrH::TIter
            Names: TStrV &

        """
        return _snap.PNEANet_IntAttrNameEI(self, *args)

    def IntAttrValueEI(self, *args):
        """
        IntAttrValueEI(PNEANet self, TInt EId, TIntV Values)

        Parameters:
            EId: TInt const &
            Values: TIntV &

        IntAttrValueEI(PNEANet self, TInt EId, TStrIntPrH::TIter EdgeHI, TIntV Values)

        Parameters:
            EId: TInt const &
            EdgeHI: TStrIntPrH::TIter
            Values: TIntV &

        """
        return _snap.PNEANet_IntAttrValueEI(self, *args)

    def StrAttrNameEI(self, *args):
        """
        StrAttrNameEI(PNEANet self, TInt EId, TStrV Names)

        Parameters:
            EId: TInt const &
            Names: TStrV &

        StrAttrNameEI(PNEANet self, TInt EId, TStrIntPrH::TIter EdgeHI, TStrV Names)

        Parameters:
            EId: TInt const &
            EdgeHI: TStrIntPrH::TIter
            Names: TStrV &

        """
        return _snap.PNEANet_StrAttrNameEI(self, *args)

    def StrAttrValueEI(self, *args):
        """
        StrAttrValueEI(PNEANet self, TInt EId, TStrV Values)

        Parameters:
            EId: TInt const &
            Values: TStrV &

        StrAttrValueEI(PNEANet self, TInt EId, TStrIntPrH::TIter EdgeHI, TStrV Values)

        Parameters:
            EId: TInt const &
            EdgeHI: TStrIntPrH::TIter
            Values: TStrV &

        """
        return _snap.PNEANet_StrAttrValueEI(self, *args)

    def FltAttrNameEI(self, *args):
        """
        FltAttrNameEI(PNEANet self, TInt EId, TStrV Names)

        Parameters:
            EId: TInt const &
            Names: TStrV &

        FltAttrNameEI(PNEANet self, TInt EId, TStrIntPrH::TIter EdgeHI, TStrV Names)

        Parameters:
            EId: TInt const &
            EdgeHI: TStrIntPrH::TIter
            Names: TStrV &

        """
        return _snap.PNEANet_FltAttrNameEI(self, *args)

    def FltAttrValueEI(self, *args):
        """
        FltAttrValueEI(PNEANet self, TInt EId, TFltV Values)

        Parameters:
            EId: TInt const &
            Values: TFltV &

        FltAttrValueEI(PNEANet self, TInt EId, TStrIntPrH::TIter EdgeHI, TFltV Values)

        Parameters:
            EId: TInt const &
            EdgeHI: TStrIntPrH::TIter
            Values: TFltV &

        """
        return _snap.PNEANet_FltAttrValueEI(self, *args)

    def BegEAIntI(self, *args):
        """
        BegEAIntI(PNEANet self, TStr attr) -> TNEANet::TAIntI

        Parameters:
            attr: TStr const &

        BegEAIntI(PNEANet self, TStr attr) -> TNEANetAIntI

        Parameters:
            attr: TStr const &

        """
        return _snap.PNEANet_BegEAIntI(self, *args)

    def EndEAIntI(self, *args):
        """
        EndEAIntI(PNEANet self, TStr attr) -> TNEANet::TAIntI

        Parameters:
            attr: TStr const &

        EndEAIntI(PNEANet self, TStr attr) -> TNEANetAIntI

        Parameters:
            attr: TStr const &

        """
        return _snap.PNEANet_EndEAIntI(self, *args)

    def GetEAIntI(self, *args):
        """
        GetEAIntI(PNEANet self, TStr attr, int const & EId) -> TNEANet::TAIntI

        Parameters:
            attr: TStr const &
            EId: int const &

        """
        return _snap.PNEANet_GetEAIntI(self, *args)

    def BegEAStrI(self, *args):
        """
        BegEAStrI(PNEANet self, TStr attr) -> TNEANet::TAStrI

        Parameters:
            attr: TStr const &

        BegEAStrI(PNEANet self, TStr attr) -> TNEANetAStrI

        Parameters:
            attr: TStr const &

        """
        return _snap.PNEANet_BegEAStrI(self, *args)

    def EndEAStrI(self, *args):
        """
        EndEAStrI(PNEANet self, TStr attr) -> TNEANet::TAStrI

        Parameters:
            attr: TStr const &

        EndEAStrI(PNEANet self, TStr attr) -> TNEANetAStrI

        Parameters:
            attr: TStr const &

        """
        return _snap.PNEANet_EndEAStrI(self, *args)

    def GetEAStrI(self, *args):
        """
        GetEAStrI(PNEANet self, TStr attr, int const & EId) -> TNEANet::TAStrI

        Parameters:
            attr: TStr const &
            EId: int const &

        """
        return _snap.PNEANet_GetEAStrI(self, *args)

    def BegEAFltI(self, *args):
        """
        BegEAFltI(PNEANet self, TStr attr) -> TNEANet::TAFltI

        Parameters:
            attr: TStr const &

        BegEAFltI(PNEANet self, TStr attr) -> TNEANetAFltI

        Parameters:
            attr: TStr const &

        """
        return _snap.PNEANet_BegEAFltI(self, *args)

    def EndEAFltI(self, *args):
        """
        EndEAFltI(PNEANet self, TStr attr) -> TNEANet::TAFltI

        Parameters:
            attr: TStr const &

        EndEAFltI(PNEANet self, TStr attr) -> TNEANetAFltI

        Parameters:
            attr: TStr const &

        """
        return _snap.PNEANet_EndEAFltI(self, *args)

    def GetEAFltI(self, *args):
        """
        GetEAFltI(PNEANet self, TStr attr, int const & EId) -> TNEANet::TAFltI

        Parameters:
            attr: TStr const &
            EId: int const &

        """
        return _snap.PNEANet_GetEAFltI(self, *args)

    def GetMxNId(self):
        """
        GetMxNId(PNEANet self) -> int

        Parameters:
            self: TPt< TNEANet > const *

        """
        return _snap.PNEANet_GetMxNId(self)

    def GetEdges(self):
        """
        GetEdges(PNEANet self) -> int

        Parameters:
            self: TPt< TNEANet > const *

        """
        return _snap.PNEANet_GetEdges(self)

    def AddEdge(self, *args):
        """
        AddEdge(PNEANet self, int const & SrcNId, int const & DstNId, int EId=-1) -> int

        Parameters:
            SrcNId: int const &
            DstNId: int const &
            EId: int

        AddEdge(PNEANet self, int const & SrcNId, int const & DstNId) -> int

        Parameters:
            SrcNId: int const &
            DstNId: int const &

        AddEdge(PNEANet self, TNEANet::TEdgeI const & EdgeI) -> int

        Parameters:
            EdgeI: TNEANet::TEdgeI const &

        """
        return _snap.PNEANet_AddEdge(self, *args)

    def DelEdge(self, *args):
        """
        DelEdge(PNEANet self, int const & EId)

        Parameters:
            EId: int const &

        DelEdge(PNEANet self, int const & SrcNId, int const & DstNId, bool const & IsDir=True)

        Parameters:
            SrcNId: int const &
            DstNId: int const &
            IsDir: bool const &

        DelEdge(PNEANet self, int const & SrcNId, int const & DstNId)

        Parameters:
            SrcNId: int const &
            DstNId: int const &

        """
        return _snap.PNEANet_DelEdge(self, *args)

    def IsEdge(self, *args):
        """
        IsEdge(PNEANet self, int const & EId) -> bool

        Parameters:
            EId: int const &

        IsEdge(PNEANet self, int const & SrcNId, int const & DstNId, bool const & IsDir=True) -> bool

        Parameters:
            SrcNId: int const &
            DstNId: int const &
            IsDir: bool const &

        IsEdge(PNEANet self, int const & SrcNId, int const & DstNId) -> bool

        Parameters:
            SrcNId: int const &
            DstNId: int const &

        IsEdge(PNEANet self, int const & SrcNId, int const & DstNId, int & EId, bool const & IsDir=True) -> bool

        Parameters:
            SrcNId: int const &
            DstNId: int const &
            EId: int &
            IsDir: bool const &

        IsEdge(PNEANet self, int const & SrcNId, int const & DstNId, int & EId) -> bool

        Parameters:
            SrcNId: int const &
            DstNId: int const &
            EId: int &

        """
        return _snap.PNEANet_IsEdge(self, *args)

    def GetEId(self, *args):
        """
        GetEId(PNEANet self, int const & SrcNId, int const & DstNId) -> int

        Parameters:
            SrcNId: int const &
            DstNId: int const &

        """
        return _snap.PNEANet_GetEId(self, *args)

    def BegEI(self, *args):
        """
        BegEI(PNEANet self) -> TNEANet::TEdgeI
        BegEI(PNEANet self) -> TNEANetEdgeI

        Parameters:
            self: TPt< TNEANet > *

        """
        return _snap.PNEANet_BegEI(self, *args)

    def EndEI(self, *args):
        """
        EndEI(PNEANet self) -> TNEANet::TEdgeI
        EndEI(PNEANet self) -> TNEANetEdgeI

        Parameters:
            self: TPt< TNEANet > *

        """
        return _snap.PNEANet_EndEI(self, *args)

    def GetEI(self, *args):
        """
        GetEI(PNEANet self, int const & SrcNId, int const & DstNId) -> TNEANet::TEdgeI

        Parameters:
            SrcNId: int const &
            DstNId: int const &

        """
        return _snap.PNEANet_GetEI(self, *args)

    def GetRndNId(self, *args):
        """
        GetRndNId(PNEANet self, TRnd Rnd=Rnd) -> int

        Parameters:
            Rnd: TRnd &

        GetRndNId(PNEANet self) -> int

        Parameters:
            self: TPt< TNEANet > *

        """
        return _snap.PNEANet_GetRndNId(self, *args)

    def GetRndNI(self, *args):
        """
        GetRndNI(PNEANet self, TRnd Rnd=Rnd) -> TNEANet::TNodeI

        Parameters:
            Rnd: TRnd &

        GetRndNI(PNEANet self) -> TNEANet::TNodeI

        Parameters:
            self: TPt< TNEANet > *

        """
        return _snap.PNEANet_GetRndNI(self, *args)

    def GetRndEId(self, *args):
        """
        GetRndEId(PNEANet self, TRnd Rnd=Rnd) -> int

        Parameters:
            Rnd: TRnd &

        GetRndEId(PNEANet self) -> int

        Parameters:
            self: TPt< TNEANet > *

        """
        return _snap.PNEANet_GetRndEId(self, *args)

    def GetRndEI(self, *args):
        """
        GetRndEI(PNEANet self, TRnd Rnd=Rnd) -> TNEANet::TEdgeI

        Parameters:
            Rnd: TRnd &

        GetRndEI(PNEANet self) -> TNEANet::TEdgeI

        Parameters:
            self: TPt< TNEANet > *

        """
        return _snap.PNEANet_GetRndEI(self, *args)

    def GetNIdV(self, *args):
        """
        GetNIdV(PNEANet self, TIntV NIdV)

        Parameters:
            NIdV: TIntV &

        """
        return _snap.PNEANet_GetNIdV(self, *args)

    def GetEIdV(self, *args):
        """
        GetEIdV(PNEANet self, TIntV EIdV)

        Parameters:
            EIdV: TIntV &

        """
        return _snap.PNEANet_GetEIdV(self, *args)

    def Reserve(self, *args):
        """
        Reserve(PNEANet self, int const & Nodes, int const & Edges)

        Parameters:
            Nodes: int const &
            Edges: int const &

        """
        return _snap.PNEANet_Reserve(self, *args)

    def Defrag(self, OnlyNodeLinks=False):
        """
        Defrag(PNEANet self, bool const & OnlyNodeLinks=False)

        Parameters:
            OnlyNodeLinks: bool const &

        Defrag(PNEANet self)

        Parameters:
            self: TPt< TNEANet > *

        """
        return _snap.PNEANet_Defrag(self, OnlyNodeLinks)

    def IsOk(self, ThrowExcept=True):
        """
        IsOk(PNEANet self, bool const & ThrowExcept=True) -> bool

        Parameters:
            ThrowExcept: bool const &

        IsOk(PNEANet self) -> bool

        Parameters:
            self: TPt< TNEANet > const *

        """
        return _snap.PNEANet_IsOk(self, ThrowExcept)

    def Dump(self, *args):
        """
        Dump(PNEANet self, FILE * OutF=stdout)

        Parameters:
            OutF: FILE *

        Dump(PNEANet self)

        Parameters:
            self: TPt< TNEANet > const *

        """
        return _snap.PNEANet_Dump(self, *args)

    def AddIntAttrDatN(self, *args):
        """
        AddIntAttrDatN(PNEANet self, TNEANet::TNodeI const & NodeId, TInt value, TStr attr) -> int

        Parameters:
            NodeId: TNEANet::TNodeI const &
            value: TInt const &
            attr: TStr const &

        AddIntAttrDatN(PNEANet self, int const & NId, TInt value, TStr attr) -> int

        Parameters:
            NId: int const &
            value: TInt const &
            attr: TStr const &

        """
        return _snap.PNEANet_AddIntAttrDatN(self, *args)

    def AddStrAttrDatN(self, *args):
        """
        AddStrAttrDatN(PNEANet self, TNEANet::TNodeI const & NodeId, TStr value, TStr attr) -> int

        Parameters:
            NodeId: TNEANet::TNodeI const &
            value: TStr const &
            attr: TStr const &

        AddStrAttrDatN(PNEANet self, int const & NId, TStr value, TStr attr) -> int

        Parameters:
            NId: int const &
            value: TStr const &
            attr: TStr const &

        """
        return _snap.PNEANet_AddStrAttrDatN(self, *args)

    def AddFltAttrDatN(self, *args):
        """
        AddFltAttrDatN(PNEANet self, TNEANet::TNodeI const & NodeId, TFlt value, TStr attr) -> int

        Parameters:
            NodeId: TNEANet::TNodeI const &
            value: TFlt const &
            attr: TStr const &

        AddFltAttrDatN(PNEANet self, int const & NId, TFlt value, TStr attr) -> int

        Parameters:
            NId: int const &
            value: TFlt const &
            attr: TStr const &

        """
        return _snap.PNEANet_AddFltAttrDatN(self, *args)

    def AddIntAttrDatE(self, *args):
        """
        AddIntAttrDatE(PNEANet self, TNEANet::TEdgeI const & EdgeId, TInt value, TStr attr) -> int

        Parameters:
            EdgeId: TNEANet::TEdgeI const &
            value: TInt const &
            attr: TStr const &

        AddIntAttrDatE(PNEANet self, int const & EId, TInt value, TStr attr) -> int

        Parameters:
            EId: int const &
            value: TInt const &
            attr: TStr const &

        """
        return _snap.PNEANet_AddIntAttrDatE(self, *args)

    def AddStrAttrDatE(self, *args):
        """
        AddStrAttrDatE(PNEANet self, TNEANet::TEdgeI const & EdgeId, TStr value, TStr attr) -> int

        Parameters:
            EdgeId: TNEANet::TEdgeI const &
            value: TStr const &
            attr: TStr const &

        AddStrAttrDatE(PNEANet self, int const & EId, TStr value, TStr attr) -> int

        Parameters:
            EId: int const &
            value: TStr const &
            attr: TStr const &

        """
        return _snap.PNEANet_AddStrAttrDatE(self, *args)

    def AddFltAttrDatE(self, *args):
        """
        AddFltAttrDatE(PNEANet self, TNEANet::TEdgeI const & EdgeId, TFlt value, TStr attr) -> int

        Parameters:
            EdgeId: TNEANet::TEdgeI const &
            value: TFlt const &
            attr: TStr const &

        AddFltAttrDatE(PNEANet self, int const & EId, TFlt value, TStr attr) -> int

        Parameters:
            EId: int const &
            value: TFlt const &
            attr: TStr const &

        """
        return _snap.PNEANet_AddFltAttrDatE(self, *args)

    def GetIntAttrDatN(self, *args):
        """
        GetIntAttrDatN(PNEANet self, TNEANet::TNodeI const & NodeId, TStr attr) -> TInt

        Parameters:
            NodeId: TNEANet::TNodeI const &
            attr: TStr const &

        GetIntAttrDatN(PNEANet self, int const & NId, TStr attr) -> TInt

        Parameters:
            NId: int const &
            attr: TStr const &

        """
        return _snap.PNEANet_GetIntAttrDatN(self, *args)

    def GetStrAttrDatN(self, *args):
        """
        GetStrAttrDatN(PNEANet self, TNEANet::TNodeI const & NodeId, TStr attr) -> TStr

        Parameters:
            NodeId: TNEANet::TNodeI const &
            attr: TStr const &

        GetStrAttrDatN(PNEANet self, int const & NId, TStr attr) -> TStr

        Parameters:
            NId: int const &
            attr: TStr const &

        """
        return _snap.PNEANet_GetStrAttrDatN(self, *args)

    def GetFltAttrDatN(self, *args):
        """
        GetFltAttrDatN(PNEANet self, TNEANet::TNodeI const & NodeId, TStr attr) -> TFlt

        Parameters:
            NodeId: TNEANet::TNodeI const &
            attr: TStr const &

        GetFltAttrDatN(PNEANet self, int const & NId, TStr attr) -> TFlt

        Parameters:
            NId: int const &
            attr: TStr const &

        """
        return _snap.PNEANet_GetFltAttrDatN(self, *args)

    def GetIntAttrDatE(self, *args):
        """
        GetIntAttrDatE(PNEANet self, TNEANet::TEdgeI const & EdgeId, TStr attr) -> TInt

        Parameters:
            EdgeId: TNEANet::TEdgeI const &
            attr: TStr const &

        GetIntAttrDatE(PNEANet self, int const & EId, TStr attr) -> TInt

        Parameters:
            EId: int const &
            attr: TStr const &

        """
        return _snap.PNEANet_GetIntAttrDatE(self, *args)

    def GetStrAttrDatE(self, *args):
        """
        GetStrAttrDatE(PNEANet self, TNEANet::TEdgeI const & EdgeId, TStr attr) -> TStr

        Parameters:
            EdgeId: TNEANet::TEdgeI const &
            attr: TStr const &

        GetStrAttrDatE(PNEANet self, int const & EId, TStr attr) -> TStr

        Parameters:
            EId: int const &
            attr: TStr const &

        """
        return _snap.PNEANet_GetStrAttrDatE(self, *args)

    def GetFltAttrDatE(self, *args):
        """
        GetFltAttrDatE(PNEANet self, TNEANet::TEdgeI const & EdgeId, TStr attr) -> TFlt

        Parameters:
            EdgeId: TNEANet::TEdgeI const &
            attr: TStr const &

        GetFltAttrDatE(PNEANet self, int const & EId, TStr attr) -> TFlt

        Parameters:
            EId: int const &
            attr: TStr const &

        """
        return _snap.PNEANet_GetFltAttrDatE(self, *args)

    def DelAttrDatN(self, *args):
        """
        DelAttrDatN(PNEANet self, TNEANet::TNodeI const & NodeId, TStr attr) -> int

        Parameters:
            NodeId: TNEANet::TNodeI const &
            attr: TStr const &

        DelAttrDatN(PNEANet self, int const & NId, TStr attr) -> int

        Parameters:
            NId: int const &
            attr: TStr const &

        """
        return _snap.PNEANet_DelAttrDatN(self, *args)

    def DelAttrDatE(self, *args):
        """
        DelAttrDatE(PNEANet self, TNEANet::TEdgeI const & EdgeId, TStr attr) -> int

        Parameters:
            EdgeId: TNEANet::TEdgeI const &
            attr: TStr const &

        DelAttrDatE(PNEANet self, int const & EId, TStr attr) -> int

        Parameters:
            EId: int const &
            attr: TStr const &

        """
        return _snap.PNEANet_DelAttrDatE(self, *args)

    def AddIntAttrN(self, *args):
        """
        AddIntAttrN(PNEANet self, TStr attr, TInt defaultValue=Mn) -> int

        Parameters:
            attr: TStr const &
            defaultValue: TInt

        AddIntAttrN(PNEANet self, TStr attr) -> int

        Parameters:
            attr: TStr const &

        """
        return _snap.PNEANet_AddIntAttrN(self, *args)

    def AddStrAttrN(self, *args):
        """
        AddStrAttrN(PNEANet self, TStr attr, TStr defaultValue=TStr::GetNullStr()) -> int

        Parameters:
            attr: TStr const &
            defaultValue: TStr

        AddStrAttrN(PNEANet self, TStr attr) -> int

        Parameters:
            attr: TStr const &

        """
        return _snap.PNEANet_AddStrAttrN(self, *args)

    def AddFltAttrN(self, *args):
        """
        AddFltAttrN(PNEANet self, TStr attr, TFlt defaultValue=Mn) -> int

        Parameters:
            attr: TStr const &
            defaultValue: TFlt

        AddFltAttrN(PNEANet self, TStr attr) -> int

        Parameters:
            attr: TStr const &

        """
        return _snap.PNEANet_AddFltAttrN(self, *args)

    def AddIntAttrE(self, *args):
        """
        AddIntAttrE(PNEANet self, TStr attr, TInt defaultValue=Mn) -> int

        Parameters:
            attr: TStr const &
            defaultValue: TInt

        AddIntAttrE(PNEANet self, TStr attr) -> int

        Parameters:
            attr: TStr const &

        """
        return _snap.PNEANet_AddIntAttrE(self, *args)

    def AddStrAttrE(self, *args):
        """
        AddStrAttrE(PNEANet self, TStr attr, TStr defaultValue=TStr::GetNullStr()) -> int

        Parameters:
            attr: TStr const &
            defaultValue: TStr

        AddStrAttrE(PNEANet self, TStr attr) -> int

        Parameters:
            attr: TStr const &

        """
        return _snap.PNEANet_AddStrAttrE(self, *args)

    def AddFltAttrE(self, *args):
        """
        AddFltAttrE(PNEANet self, TStr attr, TFlt defaultValue=Mn) -> int

        Parameters:
            attr: TStr const &
            defaultValue: TFlt

        AddFltAttrE(PNEANet self, TStr attr) -> int

        Parameters:
            attr: TStr const &

        """
        return _snap.PNEANet_AddFltAttrE(self, *args)

    def DelAttrN(self, *args):
        """
        DelAttrN(PNEANet self, TStr attr) -> int

        Parameters:
            attr: TStr const &

        """
        return _snap.PNEANet_DelAttrN(self, *args)

    def DelAttrE(self, *args):
        """
        DelAttrE(PNEANet self, TStr attr) -> int

        Parameters:
            attr: TStr const &

        """
        return _snap.PNEANet_DelAttrE(self, *args)

    def NodeAttrIsDeleted(self, *args):
        """
        NodeAttrIsDeleted(PNEANet self, int const & NId, TStrIntPrH::TIter const & NodeHI) -> bool

        Parameters:
            NId: int const &
            NodeHI: TStrIntPrH::TIter const &

        """
        return _snap.PNEANet_NodeAttrIsDeleted(self, *args)

    def NodeAttrIsIntDeleted(self, *args):
        """
        NodeAttrIsIntDeleted(PNEANet self, int const & NId, TStrIntPrH::TIter const & NodeHI) -> bool

        Parameters:
            NId: int const &
            NodeHI: TStrIntPrH::TIter const &

        """
        return _snap.PNEANet_NodeAttrIsIntDeleted(self, *args)

    def NodeAttrIsStrDeleted(self, *args):
        """
        NodeAttrIsStrDeleted(PNEANet self, int const & NId, TStrIntPrH::TIter const & NodeHI) -> bool

        Parameters:
            NId: int const &
            NodeHI: TStrIntPrH::TIter const &

        """
        return _snap.PNEANet_NodeAttrIsStrDeleted(self, *args)

    def NodeAttrIsFltDeleted(self, *args):
        """
        NodeAttrIsFltDeleted(PNEANet self, int const & NId, TStrIntPrH::TIter const & NodeHI) -> bool

        Parameters:
            NId: int const &
            NodeHI: TStrIntPrH::TIter const &

        """
        return _snap.PNEANet_NodeAttrIsFltDeleted(self, *args)

    def EdgeAttrIsDeleted(self, *args):
        """
        EdgeAttrIsDeleted(PNEANet self, int const & EId, TStrIntPrH::TIter const & EdgeHI) -> bool

        Parameters:
            EId: int const &
            EdgeHI: TStrIntPrH::TIter const &

        """
        return _snap.PNEANet_EdgeAttrIsDeleted(self, *args)

    def EdgeAttrIsIntDeleted(self, *args):
        """
        EdgeAttrIsIntDeleted(PNEANet self, int const & EId, TStrIntPrH::TIter const & EdgeHI) -> bool

        Parameters:
            EId: int const &
            EdgeHI: TStrIntPrH::TIter const &

        """
        return _snap.PNEANet_EdgeAttrIsIntDeleted(self, *args)

    def EdgeAttrIsStrDeleted(self, *args):
        """
        EdgeAttrIsStrDeleted(PNEANet self, int const & EId, TStrIntPrH::TIter const & EdgeHI) -> bool

        Parameters:
            EId: int const &
            EdgeHI: TStrIntPrH::TIter const &

        """
        return _snap.PNEANet_EdgeAttrIsStrDeleted(self, *args)

    def EdgeAttrIsFltDeleted(self, *args):
        """
        EdgeAttrIsFltDeleted(PNEANet self, int const & EId, TStrIntPrH::TIter const & EdgeHI) -> bool

        Parameters:
            EId: int const &
            EdgeHI: TStrIntPrH::TIter const &

        """
        return _snap.PNEANet_EdgeAttrIsFltDeleted(self, *args)

    def GetNodeAttrValue(self, *args):
        """
        GetNodeAttrValue(PNEANet self, int const & NId, TStrIntPrH::TIter const & NodeHI) -> TStr

        Parameters:
            NId: int const &
            NodeHI: TStrIntPrH::TIter const &

        """
        return _snap.PNEANet_GetNodeAttrValue(self, *args)

    def GetEdgeAttrValue(self, *args):
        """
        GetEdgeAttrValue(PNEANet self, int const & EId, TStrIntPrH::TIter const & EdgeHI) -> TStr

        Parameters:
            EId: int const &
            EdgeHI: TStrIntPrH::TIter const &

        """
        return _snap.PNEANet_GetEdgeAttrValue(self, *args)

PNEANet.Save = new_instancemethod(_snap.PNEANet_Save,None,PNEANet)
PNEANet.__deref__ = new_instancemethod(_snap.PNEANet___deref__,None,PNEANet)
PNEANet.__ref__ = new_instancemethod(_snap.PNEANet___ref__,None,PNEANet)
PNEANet.__call__ = new_instancemethod(_snap.PNEANet___call__,None,PNEANet)
PNEANet.Empty = new_instancemethod(_snap.PNEANet_Empty,None,PNEANet)
PNEANet.Clr = new_instancemethod(_snap.PNEANet_Clr,None,PNEANet)
PNEANet.GetRefs = new_instancemethod(_snap.PNEANet_GetRefs,None,PNEANet)
PNEANet.Load = new_instancemethod(_snap.PNEANet_Load,None,PNEANet)
PNEANet.HasFlag = new_instancemethod(_snap.PNEANet_HasFlag,None,PNEANet)
PNEANet.GetNodes = new_instancemethod(_snap.PNEANet_GetNodes,None,PNEANet)
PNEANet.AddNode = new_instancemethod(_snap.PNEANet_AddNode,None,PNEANet)
PNEANet.DelNode = new_instancemethod(_snap.PNEANet_DelNode,None,PNEANet)
PNEANet.IsNode = new_instancemethod(_snap.PNEANet_IsNode,None,PNEANet)
PNEANet.BegNI = new_instancemethod(_snap.PNEANet_BegNI,None,PNEANet)
PNEANet.EndNI = new_instancemethod(_snap.PNEANet_EndNI,None,PNEANet)
PNEANet.GetNI = new_instancemethod(_snap.PNEANet_GetNI,None,PNEANet)
PNEANet.BegNAIntI = new_instancemethod(_snap.PNEANet_BegNAIntI,None,PNEANet)
PNEANet.EndNAIntI = new_instancemethod(_snap.PNEANet_EndNAIntI,None,PNEANet)
PNEANet.GetNAIntI = new_instancemethod(_snap.PNEANet_GetNAIntI,None,PNEANet)
PNEANet.BegNAStrI = new_instancemethod(_snap.PNEANet_BegNAStrI,None,PNEANet)
PNEANet.EndNAStrI = new_instancemethod(_snap.PNEANet_EndNAStrI,None,PNEANet)
PNEANet.GetNAStrI = new_instancemethod(_snap.PNEANet_GetNAStrI,None,PNEANet)
PNEANet.BegNAFltI = new_instancemethod(_snap.PNEANet_BegNAFltI,None,PNEANet)
PNEANet.EndNAFltI = new_instancemethod(_snap.PNEANet_EndNAFltI,None,PNEANet)
PNEANet.GetNAFltI = new_instancemethod(_snap.PNEANet_GetNAFltI,None,PNEANet)
PNEANet.AttrNameNI = new_instancemethod(_snap.PNEANet_AttrNameNI,None,PNEANet)
PNEANet.AttrValueNI = new_instancemethod(_snap.PNEANet_AttrValueNI,None,PNEANet)
PNEANet.IntAttrNameNI = new_instancemethod(_snap.PNEANet_IntAttrNameNI,None,PNEANet)
PNEANet.IntAttrValueNI = new_instancemethod(_snap.PNEANet_IntAttrValueNI,None,PNEANet)
PNEANet.StrAttrNameNI = new_instancemethod(_snap.PNEANet_StrAttrNameNI,None,PNEANet)
PNEANet.StrAttrValueNI = new_instancemethod(_snap.PNEANet_StrAttrValueNI,None,PNEANet)
PNEANet.FltAttrNameNI = new_instancemethod(_snap.PNEANet_FltAttrNameNI,None,PNEANet)
PNEANet.FltAttrValueNI = new_instancemethod(_snap.PNEANet_FltAttrValueNI,None,PNEANet)
PNEANet.AttrNameEI = new_instancemethod(_snap.PNEANet_AttrNameEI,None,PNEANet)
PNEANet.AttrValueEI = new_instancemethod(_snap.PNEANet_AttrValueEI,None,PNEANet)
PNEANet.IntAttrNameEI = new_instancemethod(_snap.PNEANet_IntAttrNameEI,None,PNEANet)
PNEANet.IntAttrValueEI = new_instancemethod(_snap.PNEANet_IntAttrValueEI,None,PNEANet)
PNEANet.StrAttrNameEI = new_instancemethod(_snap.PNEANet_StrAttrNameEI,None,PNEANet)
PNEANet.StrAttrValueEI = new_instancemethod(_snap.PNEANet_StrAttrValueEI,None,PNEANet)
PNEANet.FltAttrNameEI = new_instancemethod(_snap.PNEANet_FltAttrNameEI,None,PNEANet)
PNEANet.FltAttrValueEI = new_instancemethod(_snap.PNEANet_FltAttrValueEI,None,PNEANet)
PNEANet.BegEAIntI = new_instancemethod(_snap.PNEANet_BegEAIntI,None,PNEANet)
PNEANet.EndEAIntI = new_instancemethod(_snap.PNEANet_EndEAIntI,None,PNEANet)
PNEANet.GetEAIntI = new_instancemethod(_snap.PNEANet_GetEAIntI,None,PNEANet)
PNEANet.BegEAStrI = new_instancemethod(_snap.PNEANet_BegEAStrI,None,PNEANet)
PNEANet.EndEAStrI = new_instancemethod(_snap.PNEANet_EndEAStrI,None,PNEANet)
PNEANet.GetEAStrI = new_instancemethod(_snap.PNEANet_GetEAStrI,None,PNEANet)
PNEANet.BegEAFltI = new_instancemethod(_snap.PNEANet_BegEAFltI,None,PNEANet)
PNEANet.EndEAFltI = new_instancemethod(_snap.PNEANet_EndEAFltI,None,PNEANet)
PNEANet.GetEAFltI = new_instancemethod(_snap.PNEANet_GetEAFltI,None,PNEANet)
PNEANet.GetMxNId = new_instancemethod(_snap.PNEANet_GetMxNId,None,PNEANet)
PNEANet.GetEdges = new_instancemethod(_snap.PNEANet_GetEdges,None,PNEANet)
PNEANet.AddEdge = new_instancemethod(_snap.PNEANet_AddEdge,None,PNEANet)
PNEANet.DelEdge = new_instancemethod(_snap.PNEANet_DelEdge,None,PNEANet)
PNEANet.IsEdge = new_instancemethod(_snap.PNEANet_IsEdge,None,PNEANet)
PNEANet.GetEId = new_instancemethod(_snap.PNEANet_GetEId,None,PNEANet)
PNEANet.BegEI = new_instancemethod(_snap.PNEANet_BegEI,None,PNEANet)
PNEANet.EndEI = new_instancemethod(_snap.PNEANet_EndEI,None,PNEANet)
PNEANet.GetEI = new_instancemethod(_snap.PNEANet_GetEI,None,PNEANet)
PNEANet.GetRndNId = new_instancemethod(_snap.PNEANet_GetRndNId,None,PNEANet)
PNEANet.GetRndNI = new_instancemethod(_snap.PNEANet_GetRndNI,None,PNEANet)
PNEANet.GetRndEId = new_instancemethod(_snap.PNEANet_GetRndEId,None,PNEANet)
PNEANet.GetRndEI = new_instancemethod(_snap.PNEANet_GetRndEI,None,PNEANet)
PNEANet.GetNIdV = new_instancemethod(_snap.PNEANet_GetNIdV,None,PNEANet)
PNEANet.GetEIdV = new_instancemethod(_snap.PNEANet_GetEIdV,None,PNEANet)
PNEANet.Reserve = new_instancemethod(_snap.PNEANet_Reserve,None,PNEANet)
PNEANet.Defrag = new_instancemethod(_snap.PNEANet_Defrag,None,PNEANet)
PNEANet.IsOk = new_instancemethod(_snap.PNEANet_IsOk,None,PNEANet)
PNEANet.Dump = new_instancemethod(_snap.PNEANet_Dump,None,PNEANet)
PNEANet.AddIntAttrDatN = new_instancemethod(_snap.PNEANet_AddIntAttrDatN,None,PNEANet)
PNEANet.AddStrAttrDatN = new_instancemethod(_snap.PNEANet_AddStrAttrDatN,None,PNEANet)
PNEANet.AddFltAttrDatN = new_instancemethod(_snap.PNEANet_AddFltAttrDatN,None,PNEANet)
PNEANet.AddIntAttrDatE = new_instancemethod(_snap.PNEANet_AddIntAttrDatE,None,PNEANet)
PNEANet.AddStrAttrDatE = new_instancemethod(_snap.PNEANet_AddStrAttrDatE,None,PNEANet)
PNEANet.AddFltAttrDatE = new_instancemethod(_snap.PNEANet_AddFltAttrDatE,None,PNEANet)
PNEANet.GetIntAttrDatN = new_instancemethod(_snap.PNEANet_GetIntAttrDatN,None,PNEANet)
PNEANet.GetStrAttrDatN = new_instancemethod(_snap.PNEANet_GetStrAttrDatN,None,PNEANet)
PNEANet.GetFltAttrDatN = new_instancemethod(_snap.PNEANet_GetFltAttrDatN,None,PNEANet)
PNEANet.GetIntAttrDatE = new_instancemethod(_snap.PNEANet_GetIntAttrDatE,None,PNEANet)
PNEANet.GetStrAttrDatE = new_instancemethod(_snap.PNEANet_GetStrAttrDatE,None,PNEANet)
PNEANet.GetFltAttrDatE = new_instancemethod(_snap.PNEANet_GetFltAttrDatE,None,PNEANet)
PNEANet.DelAttrDatN = new_instancemethod(_snap.PNEANet_DelAttrDatN,None,PNEANet)
PNEANet.DelAttrDatE = new_instancemethod(_snap.PNEANet_DelAttrDatE,None,PNEANet)
PNEANet.AddIntAttrN = new_instancemethod(_snap.PNEANet_AddIntAttrN,None,PNEANet)
PNEANet.AddStrAttrN = new_instancemethod(_snap.PNEANet_AddStrAttrN,None,PNEANet)
PNEANet.AddFltAttrN = new_instancemethod(_snap.PNEANet_AddFltAttrN,None,PNEANet)
PNEANet.AddIntAttrE = new_instancemethod(_snap.PNEANet_AddIntAttrE,None,PNEANet)
PNEANet.AddStrAttrE = new_instancemethod(_snap.PNEANet_AddStrAttrE,None,PNEANet)
PNEANet.AddFltAttrE = new_instancemethod(_snap.PNEANet_AddFltAttrE,None,PNEANet)
PNEANet.DelAttrN = new_instancemethod(_snap.PNEANet_DelAttrN,None,PNEANet)
PNEANet.DelAttrE = new_instancemethod(_snap.PNEANet_DelAttrE,None,PNEANet)
PNEANet.NodeAttrIsDeleted = new_instancemethod(_snap.PNEANet_NodeAttrIsDeleted,None,PNEANet)
PNEANet.NodeAttrIsIntDeleted = new_instancemethod(_snap.PNEANet_NodeAttrIsIntDeleted,None,PNEANet)
PNEANet.NodeAttrIsStrDeleted = new_instancemethod(_snap.PNEANet_NodeAttrIsStrDeleted,None,PNEANet)
PNEANet.NodeAttrIsFltDeleted = new_instancemethod(_snap.PNEANet_NodeAttrIsFltDeleted,None,PNEANet)
PNEANet.EdgeAttrIsDeleted = new_instancemethod(_snap.PNEANet_EdgeAttrIsDeleted,None,PNEANet)
PNEANet.EdgeAttrIsIntDeleted = new_instancemethod(_snap.PNEANet_EdgeAttrIsIntDeleted,None,PNEANet)
PNEANet.EdgeAttrIsStrDeleted = new_instancemethod(_snap.PNEANet_EdgeAttrIsStrDeleted,None,PNEANet)
PNEANet.EdgeAttrIsFltDeleted = new_instancemethod(_snap.PNEANet_EdgeAttrIsFltDeleted,None,PNEANet)
PNEANet.GetNodeAttrValue = new_instancemethod(_snap.PNEANet_GetNodeAttrValue,None,PNEANet)
PNEANet.GetEdgeAttrValue = new_instancemethod(_snap.PNEANet_GetEdgeAttrValue,None,PNEANet)
PNEANet_swigregister = _snap.PNEANet_swigregister
PNEANet_swigregister(PNEANet)

def PNEANet_New():
  """PNEANet_New() -> PNEANet"""
  return _snap.PNEANet_New()


def PrintInfo_PNEANet(*args):
  """
    PrintInfo_PNEANet(PNEANet Graph, TStr Desc="", TStr OutFNm="", bool const & Fast=True)

    Parameters:
        Graph: TPt< TNEANet > const &
        Desc: TStr const &
        OutFNm: TStr const &
        Fast: bool const &

    PrintInfo_PNEANet(PNEANet Graph, TStr Desc="", TStr OutFNm="")

    Parameters:
        Graph: TPt< TNEANet > const &
        Desc: TStr const &
        OutFNm: TStr const &

    PrintInfo_PNEANet(PNEANet Graph, TStr Desc="")

    Parameters:
        Graph: TPt< TNEANet > const &
        Desc: TStr const &

    PrintInfo_PNEANet(PNEANet Graph)

    Parameters:
        Graph: TPt< TNEANet > const &

    """
  return _snap.PrintInfo_PNEANet(*args)

def GetNodeWcc_PNEANet(*args):
  """
    GetNodeWcc_PNEANet(PNEANet Graph, int const & NId, TIntV CnCom)

    Parameters:
        Graph: TPt< TNEANet > const &
        NId: int const &
        CnCom: TIntV &

    """
  return _snap.GetNodeWcc_PNEANet(*args)

def IsConnected_PNEANet(*args):
  """
    IsConnected_PNEANet(PNEANet Graph) -> bool

    Parameters:
        Graph: TPt< TNEANet > const &

    """
  return _snap.IsConnected_PNEANet(*args)

def IsWeaklyConn_PNEANet(*args):
  """
    IsWeaklyConn_PNEANet(PNEANet Graph) -> bool

    Parameters:
        Graph: TPt< TNEANet > const &

    """
  return _snap.IsWeaklyConn_PNEANet(*args)

def GetWccSzCnt_PNEANet(*args):
  """
    GetWccSzCnt_PNEANet(PNEANet Graph, TIntPrV WccSzCnt)

    Parameters:
        Graph: TPt< TNEANet > const &
        WccSzCnt: TIntPrV &

    """
  return _snap.GetWccSzCnt_PNEANet(*args)

def GetWccs_PNEANet(*args):
  """
    GetWccs_PNEANet(PNEANet Graph, TCnComV CnComV)

    Parameters:
        Graph: TPt< TNEANet > const &
        CnComV: TCnComV &

    """
  return _snap.GetWccs_PNEANet(*args)

def GetSccSzCnt_PNEANet(*args):
  """
    GetSccSzCnt_PNEANet(PNEANet Graph, TIntPrV SccSzCnt)

    Parameters:
        Graph: TPt< TNEANet > const &
        SccSzCnt: TIntPrV &

    """
  return _snap.GetSccSzCnt_PNEANet(*args)

def GetSccs_PNEANet(*args):
  """
    GetSccs_PNEANet(PNEANet Graph, TCnComV CnComV)

    Parameters:
        Graph: TPt< TNEANet > const &
        CnComV: TCnComV &

    """
  return _snap.GetSccs_PNEANet(*args)

def GetMxWccSz_PNEANet(*args):
  """
    GetMxWccSz_PNEANet(PNEANet Graph) -> double

    Parameters:
        Graph: TPt< TNEANet > const &

    """
  return _snap.GetMxWccSz_PNEANet(*args)

def GetMxSccSz_PNEANet(*args):
  """
    GetMxSccSz_PNEANet(PNEANet Graph) -> double

    Parameters:
        Graph: TPt< TNEANet > const &

    """
  return _snap.GetMxSccSz_PNEANet(*args)

def GetMxWcc_PNEANet(*args):
  """
    GetMxWcc_PNEANet(PNEANet Graph) -> PNEANet

    Parameters:
        Graph: TPt< TNEANet > const &

    """
  return _snap.GetMxWcc_PNEANet(*args)

def GetMxScc_PNEANet(*args):
  """
    GetMxScc_PNEANet(PNEANet Graph) -> PNEANet

    Parameters:
        Graph: TPt< TNEANet > const &

    """
  return _snap.GetMxScc_PNEANet(*args)

def GetMxBiCon_PNEANet(*args):
  """
    GetMxBiCon_PNEANet(PNEANet Graph) -> PNEANet

    Parameters:
        Graph: TPt< TNEANet > const &

    """
  return _snap.GetMxBiCon_PNEANet(*args)

def GetNodeEcc_PNEANet(*args):
  """
    GetNodeEcc_PNEANet(PNEANet Graph, int const & NId, bool const & IsDir=False) -> int

    Parameters:
        Graph: TPt< TNEANet > const &
        NId: int const &
        IsDir: bool const &

    GetNodeEcc_PNEANet(PNEANet Graph, int const & NId) -> int

    Parameters:
        Graph: TPt< TNEANet > const &
        NId: int const &

    """
  return _snap.GetNodeEcc_PNEANet(*args)

def GetPageRank_PNEANet(*args):
  """
    GetPageRank_PNEANet(PNEANet Graph, TIntFltH PRankH, double const & C=0.85, double const & Eps=1e-4, int const & MaxIter=100)

    Parameters:
        Graph: TPt< TNEANet > const &
        PRankH: TIntFltH &
        C: double const &
        Eps: double const &
        MaxIter: int const &

    GetPageRank_PNEANet(PNEANet Graph, TIntFltH PRankH, double const & C=0.85, double const & Eps=1e-4)

    Parameters:
        Graph: TPt< TNEANet > const &
        PRankH: TIntFltH &
        C: double const &
        Eps: double const &

    GetPageRank_PNEANet(PNEANet Graph, TIntFltH PRankH, double const & C=0.85)

    Parameters:
        Graph: TPt< TNEANet > const &
        PRankH: TIntFltH &
        C: double const &

    GetPageRank_PNEANet(PNEANet Graph, TIntFltH PRankH)

    Parameters:
        Graph: TPt< TNEANet > const &
        PRankH: TIntFltH &

    """
  return _snap.GetPageRank_PNEANet(*args)

def GetHits_PNEANet(*args):
  """
    GetHits_PNEANet(PNEANet Graph, TIntFltH NIdHubH, TIntFltH NIdAuthH, int const & MaxIter=20)

    Parameters:
        Graph: TPt< TNEANet > const &
        NIdHubH: TIntFltH &
        NIdAuthH: TIntFltH &
        MaxIter: int const &

    GetHits_PNEANet(PNEANet Graph, TIntFltH NIdHubH, TIntFltH NIdAuthH)

    Parameters:
        Graph: TPt< TNEANet > const &
        NIdHubH: TIntFltH &
        NIdAuthH: TIntFltH &

    """
  return _snap.GetHits_PNEANet(*args)

def CntInDegNodes_PNEANet(*args):
  """
    CntInDegNodes_PNEANet(PNEANet Graph, int const & NodeInDeg) -> int

    Parameters:
        Graph: TPt< TNEANet > const &
        NodeInDeg: int const &

    """
  return _snap.CntInDegNodes_PNEANet(*args)

def CntOutDegNodes_PNEANet(*args):
  """
    CntOutDegNodes_PNEANet(PNEANet Graph, int const & NodeOutDeg) -> int

    Parameters:
        Graph: TPt< TNEANet > const &
        NodeOutDeg: int const &

    """
  return _snap.CntOutDegNodes_PNEANet(*args)

def CntDegNodes_PNEANet(*args):
  """
    CntDegNodes_PNEANet(PNEANet Graph, int const & NodeDeg) -> int

    Parameters:
        Graph: TPt< TNEANet > const &
        NodeDeg: int const &

    """
  return _snap.CntDegNodes_PNEANet(*args)

def CntNonZNodes_PNEANet(*args):
  """
    CntNonZNodes_PNEANet(PNEANet Graph) -> int

    Parameters:
        Graph: TPt< TNEANet > const &

    """
  return _snap.CntNonZNodes_PNEANet(*args)

def CntEdgesToSet_PNEANet(*args):
  """
    CntEdgesToSet_PNEANet(PNEANet Graph, int const & NId, TIntSet NodeSet) -> int

    Parameters:
        Graph: TPt< TNEANet > const &
        NId: int const &
        NodeSet: TIntSet const &

    """
  return _snap.CntEdgesToSet_PNEANet(*args)

def GetMxDegNId_PNEANet(*args):
  """
    GetMxDegNId_PNEANet(PNEANet Graph) -> int

    Parameters:
        Graph: TPt< TNEANet > const &

    """
  return _snap.GetMxDegNId_PNEANet(*args)

def GetMxInDegNId_PNEANet(*args):
  """
    GetMxInDegNId_PNEANet(PNEANet Graph) -> int

    Parameters:
        Graph: TPt< TNEANet > const &

    """
  return _snap.GetMxInDegNId_PNEANet(*args)

def GetMxOutDegNId_PNEANet(*args):
  """
    GetMxOutDegNId_PNEANet(PNEANet Graph) -> int

    Parameters:
        Graph: TPt< TNEANet > const &

    """
  return _snap.GetMxOutDegNId_PNEANet(*args)

def GetInDegCnt_PNEANet(*args):
  """
    GetInDegCnt_PNEANet(PNEANet Graph, TIntPrV DegToCntV)

    Parameters:
        Graph: TPt< TNEANet > const &
        DegToCntV: TIntPrV &

    GetInDegCnt_PNEANet(PNEANet Graph, TFltPrV DegToCntV)

    Parameters:
        Graph: TPt< TNEANet > const &
        DegToCntV: TFltPrV &

    """
  return _snap.GetInDegCnt_PNEANet(*args)

def GetOutDegCnt_PNEANet(*args):
  """
    GetOutDegCnt_PNEANet(PNEANet Graph, TIntPrV DegToCntV)

    Parameters:
        Graph: TPt< TNEANet > const &
        DegToCntV: TIntPrV &

    GetOutDegCnt_PNEANet(PNEANet Graph, TFltPrV DegToCntV)

    Parameters:
        Graph: TPt< TNEANet > const &
        DegToCntV: TFltPrV &

    """
  return _snap.GetOutDegCnt_PNEANet(*args)

def GetDegCnt_PNEANet(*args):
  """
    GetDegCnt_PNEANet(PNEANet Graph, TIntPrV DegToCntV)

    Parameters:
        Graph: TPt< TNEANet > const &
        DegToCntV: TIntPrV &

    GetDegCnt_PNEANet(PNEANet Graph, TFltPrV DegToCntV)

    Parameters:
        Graph: TPt< TNEANet > const &
        DegToCntV: TFltPrV &

    """
  return _snap.GetDegCnt_PNEANet(*args)

def GetDegSeqV_PNEANet(*args):
  """
    GetDegSeqV_PNEANet(PNEANet Graph, TIntV DegV)

    Parameters:
        Graph: TPt< TNEANet > const &
        DegV: TIntV &

    GetDegSeqV_PNEANet(PNEANet Graph, TIntV InDegV, TIntV OutDegV)

    Parameters:
        Graph: TPt< TNEANet > const &
        InDegV: TIntV &
        OutDegV: TIntV &

    """
  return _snap.GetDegSeqV_PNEANet(*args)

def GetNodeInDegV_PNEANet(*args):
  """
    GetNodeInDegV_PNEANet(PNEANet Graph, TIntPrV NIdInDegV)

    Parameters:
        Graph: TPt< TNEANet > const &
        NIdInDegV: TIntPrV &

    """
  return _snap.GetNodeInDegV_PNEANet(*args)

def GetNodeOutDegV_PNEANet(*args):
  """
    GetNodeOutDegV_PNEANet(PNEANet Graph, TIntPrV NIdOutDegV)

    Parameters:
        Graph: TPt< TNEANet > const &
        NIdOutDegV: TIntPrV &

    """
  return _snap.GetNodeOutDegV_PNEANet(*args)

def CntUniqUndirEdges_PNEANet(*args):
  """
    CntUniqUndirEdges_PNEANet(PNEANet Graph) -> int

    Parameters:
        Graph: TPt< TNEANet > const &

    """
  return _snap.CntUniqUndirEdges_PNEANet(*args)

def CntUniqDirEdges_PNEANet(*args):
  """
    CntUniqDirEdges_PNEANet(PNEANet Graph) -> int

    Parameters:
        Graph: TPt< TNEANet > const &

    """
  return _snap.CntUniqDirEdges_PNEANet(*args)

def CntUniqBiDirEdges_PNEANet(*args):
  """
    CntUniqBiDirEdges_PNEANet(PNEANet Graph) -> int

    Parameters:
        Graph: TPt< TNEANet > const &

    """
  return _snap.CntUniqBiDirEdges_PNEANet(*args)

def CntSelfEdges_PNEANet(*args):
  """
    CntSelfEdges_PNEANet(PNEANet Graph) -> int

    Parameters:
        Graph: TPt< TNEANet > const &

    """
  return _snap.CntSelfEdges_PNEANet(*args)

def GetUnDir_PNEANet(*args):
  """
    GetUnDir_PNEANet(PNEANet Graph) -> PNEANet

    Parameters:
        Graph: TPt< TNEANet > const &

    """
  return _snap.GetUnDir_PNEANet(*args)

def MakeUnDir_PNEANet(*args):
  """
    MakeUnDir_PNEANet(PNEANet Graph)

    Parameters:
        Graph: TPt< TNEANet > const &

    """
  return _snap.MakeUnDir_PNEANet(*args)

def AddSelfEdges_PNEANet(*args):
  """
    AddSelfEdges_PNEANet(PNEANet Graph)

    Parameters:
        Graph: TPt< TNEANet > const &

    """
  return _snap.AddSelfEdges_PNEANet(*args)

def DelSelfEdges_PNEANet(*args):
  """
    DelSelfEdges_PNEANet(PNEANet Graph)

    Parameters:
        Graph: TPt< TNEANet > const &

    """
  return _snap.DelSelfEdges_PNEANet(*args)

def DelNodes_PNEANet(*args):
  """
    DelNodes_PNEANet(PNEANet Graph, TIntV NIdV)

    Parameters:
        Graph: TPt< TNEANet > &
        NIdV: TIntV const &

    """
  return _snap.DelNodes_PNEANet(*args)

def DelZeroDegNodes_PNEANet(*args):
  """
    DelZeroDegNodes_PNEANet(PNEANet Graph)

    Parameters:
        Graph: TPt< TNEANet > &

    """
  return _snap.DelZeroDegNodes_PNEANet(*args)

def DelDegKNodes_PNEANet(*args):
  """
    DelDegKNodes_PNEANet(PNEANet Graph, int const & OutDegK, int const & InDegK)

    Parameters:
        Graph: TPt< TNEANet > &
        OutDegK: int const &
        InDegK: int const &

    """
  return _snap.DelDegKNodes_PNEANet(*args)

def IsTree_PNEANet(*args):
  """
    IsTree_PNEANet(PNEANet Graph) -> bool

    Parameters:
        Graph: TPt< TNEANet > const &

    """
  return _snap.IsTree_PNEANet(*args)

def GetTreeRootNId_PNEANet(*args):
  """
    GetTreeRootNId_PNEANet(PNEANet Graph) -> int

    Parameters:
        Graph: TPt< TNEANet > const &

    """
  return _snap.GetTreeRootNId_PNEANet(*args)

def GetTreeSig_PNEANet(*args):
  """
    GetTreeSig_PNEANet(PNEANet Graph, int const & RootNId, TIntV Sig)

    Parameters:
        Graph: TPt< TNEANet > const &
        RootNId: int const &
        Sig: TIntV &

    GetTreeSig_PNEANet(PNEANet Graph, int const & RootNId, TIntV Sig, TIntPrV NodeMap)

    Parameters:
        Graph: TPt< TNEANet > const &
        RootNId: int const &
        Sig: TIntV &
        NodeMap: TIntPrV &

    """
  return _snap.GetTreeSig_PNEANet(*args)

def GetBfsTree_PNEANet(*args):
  """
    GetBfsTree_PNEANet(PNEANet Graph, int const & StartNId, bool const & FollowOut, bool const & FollowIn) -> PNGraph

    Parameters:
        Graph: TPt< TNEANet > const &
        StartNId: int const &
        FollowOut: bool const &
        FollowIn: bool const &

    """
  return _snap.GetBfsTree_PNEANet(*args)

def GetSubTreeSz_PNEANet(*args):
  """
    GetSubTreeSz_PNEANet(PNEANet Graph, int const & StartNId, bool const & FollowOut, bool const & FollowIn) -> int

    Parameters:
        Graph: TPt< TNEANet > const &
        StartNId: int const &
        FollowOut: bool const &
        FollowIn: bool const &

    """
  return _snap.GetSubTreeSz_PNEANet(*args)

def GetNodesAtHop_PNEANet(*args):
  """
    GetNodesAtHop_PNEANet(PNEANet Graph, int const & StartNId, int const & Hop, TIntV NIdV, bool const & IsDir=False) -> int

    Parameters:
        Graph: TPt< TNEANet > const &
        StartNId: int const &
        Hop: int const &
        NIdV: TIntV &
        IsDir: bool const &

    GetNodesAtHop_PNEANet(PNEANet Graph, int const & StartNId, int const & Hop, TIntV NIdV) -> int

    Parameters:
        Graph: TPt< TNEANet > const &
        StartNId: int const &
        Hop: int const &
        NIdV: TIntV &

    """
  return _snap.GetNodesAtHop_PNEANet(*args)

def GetNodesAtHops_PNEANet(*args):
  """
    GetNodesAtHops_PNEANet(PNEANet Graph, int const & StartNId, TIntPrV HopCntV, bool const & IsDir=False) -> int

    Parameters:
        Graph: TPt< TNEANet > const &
        StartNId: int const &
        HopCntV: TIntPrV &
        IsDir: bool const &

    GetNodesAtHops_PNEANet(PNEANet Graph, int const & StartNId, TIntPrV HopCntV) -> int

    Parameters:
        Graph: TPt< TNEANet > const &
        StartNId: int const &
        HopCntV: TIntPrV &

    """
  return _snap.GetNodesAtHops_PNEANet(*args)

def GetShortPath_PNEANet(*args):
  """
    GetShortPath_PNEANet(PNEANet Graph, int const & SrcNId, int const & DstNId, bool const & IsDir=False) -> int

    Parameters:
        Graph: TPt< TNEANet > const &
        SrcNId: int const &
        DstNId: int const &
        IsDir: bool const &

    GetShortPath_PNEANet(PNEANet Graph, int const & SrcNId, int const & DstNId) -> int

    Parameters:
        Graph: TPt< TNEANet > const &
        SrcNId: int const &
        DstNId: int const &

    GetShortPath_PNEANet(PNEANet Graph, int const & SrcNId, TIntH NIdToDistH, bool const & IsDir=False, int const & MaxDist=Mx) -> int

    Parameters:
        Graph: TPt< TNEANet > const &
        SrcNId: int const &
        NIdToDistH: TIntH &
        IsDir: bool const &
        MaxDist: int const &

    GetShortPath_PNEANet(PNEANet Graph, int const & SrcNId, TIntH NIdToDistH, bool const & IsDir=False) -> int

    Parameters:
        Graph: TPt< TNEANet > const &
        SrcNId: int const &
        NIdToDistH: TIntH &
        IsDir: bool const &

    GetShortPath_PNEANet(PNEANet Graph, int const & SrcNId, TIntH NIdToDistH) -> int

    Parameters:
        Graph: TPt< TNEANet > const &
        SrcNId: int const &
        NIdToDistH: TIntH &

    """
  return _snap.GetShortPath_PNEANet(*args)

def GetBfsFullDiam_PNEANet(*args):
  """
    GetBfsFullDiam_PNEANet(PNEANet Graph, int const & NTestNodes, bool const & IsDir=False) -> int

    Parameters:
        Graph: TPt< TNEANet > const &
        NTestNodes: int const &
        IsDir: bool const &

    GetBfsFullDiam_PNEANet(PNEANet Graph, int const & NTestNodes) -> int

    Parameters:
        Graph: TPt< TNEANet > const &
        NTestNodes: int const &

    """
  return _snap.GetBfsFullDiam_PNEANet(*args)

def GetBfsEffDiam_PNEANet(*args):
  """
    GetBfsEffDiam_PNEANet(PNEANet Graph, int const & NTestNodes, bool const & IsDir, double & EffDiam, int & FullDiam) -> double

    Parameters:
        Graph: TPt< TNEANet > const &
        NTestNodes: int const &
        IsDir: bool const &
        EffDiam: double &
        FullDiam: int &

    GetBfsEffDiam_PNEANet(PNEANet Graph, int const & NTestNodes, bool const & IsDir=False) -> double

    Parameters:
        Graph: TPt< TNEANet > const &
        NTestNodes: int const &
        IsDir: bool const &

    GetBfsEffDiam_PNEANet(PNEANet Graph, int const & NTestNodes) -> double

    Parameters:
        Graph: TPt< TNEANet > const &
        NTestNodes: int const &

    GetBfsEffDiam_PNEANet(PNEANet Graph, int const & NTestNodes, bool const & IsDir) -> double

    Parameters:
        Graph: TPt< TNEANet > const &
        NTestNodes: int const &
        IsDir: bool const &

    GetBfsEffDiam_PNEANet(PNEANet Graph, int const & NTestNodes, TIntV SubGraphNIdV, bool const & IsDir) -> double

    Parameters:
        Graph: TPt< TNEANet > const &
        NTestNodes: int const &
        SubGraphNIdV: TIntV const &
        IsDir: bool const &

    """
  return _snap.GetBfsEffDiam_PNEANet(*args)

def DrawGViz_PNEANet(*args):
  """
    DrawGViz_PNEANet(PNEANet Graph, TGVizLayout const & Layout, TStr PltFNm, TStr Desc=TStr(), bool const & NodeLabels=False, 
        TIntStrH NIdColorH=TIntStrH())

    Parameters:
        Graph: TPt< TNEANet > const &
        Layout: TGVizLayout const &
        PltFNm: TStr const &
        Desc: TStr const &
        NodeLabels: bool const &
        NIdColorH: TIntStrH const &

    DrawGViz_PNEANet(PNEANet Graph, TGVizLayout const & Layout, TStr PltFNm, TStr Desc=TStr(), bool const & NodeLabels=False)

    Parameters:
        Graph: TPt< TNEANet > const &
        Layout: TGVizLayout const &
        PltFNm: TStr const &
        Desc: TStr const &
        NodeLabels: bool const &

    DrawGViz_PNEANet(PNEANet Graph, TGVizLayout const & Layout, TStr PltFNm, TStr Desc=TStr())

    Parameters:
        Graph: TPt< TNEANet > const &
        Layout: TGVizLayout const &
        PltFNm: TStr const &
        Desc: TStr const &

    DrawGViz_PNEANet(PNEANet Graph, TGVizLayout const & Layout, TStr PltFNm)

    Parameters:
        Graph: TPt< TNEANet > const &
        Layout: TGVizLayout const &
        PltFNm: TStr const &

    DrawGViz_PNEANet(PNEANet Graph, TGVizLayout const & Layout, TStr PltFNm, TStr Desc, TIntStrH NodeLabelH)

    Parameters:
        Graph: TPt< TNEANet > const &
        Layout: TGVizLayout const &
        PltFNm: TStr const &
        Desc: TStr const &
        NodeLabelH: TIntStrH const &

    """
  return _snap.DrawGViz_PNEANet(*args)

def GenGrid_PNEANet(*args):
  """
    GenGrid_PNEANet(int const & Rows, int const & Cols, bool const & IsDir=True) -> PNEANet

    Parameters:
        Rows: int const &
        Cols: int const &
        IsDir: bool const &

    GenGrid_PNEANet(int const & Rows, int const & Cols) -> PNEANet

    Parameters:
        Rows: int const &
        Cols: int const &

    """
  return _snap.GenGrid_PNEANet(*args)

def GenStar_PNEANet(*args):
  """
    GenStar_PNEANet(int const & Nodes, bool const & IsDir=True) -> PNEANet

    Parameters:
        Nodes: int const &
        IsDir: bool const &

    GenStar_PNEANet(int const & Nodes) -> PNEANet

    Parameters:
        Nodes: int const &

    """
  return _snap.GenStar_PNEANet(*args)

def GenCircle_PNEANet(*args):
  """
    GenCircle_PNEANet(int const & Nodes, int const & NodeOutDeg=1, bool const & IsDir=True) -> PNEANet

    Parameters:
        Nodes: int const &
        NodeOutDeg: int const &
        IsDir: bool const &

    GenCircle_PNEANet(int const & Nodes, int const & NodeOutDeg=1) -> PNEANet

    Parameters:
        Nodes: int const &
        NodeOutDeg: int const &

    GenCircle_PNEANet(int const & Nodes) -> PNEANet

    Parameters:
        Nodes: int const &

    """
  return _snap.GenCircle_PNEANet(*args)

def GenFull_PNEANet(*args):
  """
    GenFull_PNEANet(int const & Nodes) -> PNEANet

    Parameters:
        Nodes: int const &

    """
  return _snap.GenFull_PNEANet(*args)

def GenTree_PNEANet(*args):
  """
    GenTree_PNEANet(int const & Fanout, int const & Levels, bool const & IsDir=True, bool const & ChildPointsToParent=True) -> PNEANet

    Parameters:
        Fanout: int const &
        Levels: int const &
        IsDir: bool const &
        ChildPointsToParent: bool const &

    GenTree_PNEANet(int const & Fanout, int const & Levels, bool const & IsDir=True) -> PNEANet

    Parameters:
        Fanout: int const &
        Levels: int const &
        IsDir: bool const &

    GenTree_PNEANet(int const & Fanout, int const & Levels) -> PNEANet

    Parameters:
        Fanout: int const &
        Levels: int const &

    """
  return _snap.GenTree_PNEANet(*args)

def GenBaraHierar_PNEANet(*args):
  """
    GenBaraHierar_PNEANet(int const & Levels, bool const & IsDir=True) -> PNEANet

    Parameters:
        Levels: int const &
        IsDir: bool const &

    GenBaraHierar_PNEANet(int const & Levels) -> PNEANet

    Parameters:
        Levels: int const &

    """
  return _snap.GenBaraHierar_PNEANet(*args)

def GenRndGnm_PNEANet(*args):
  """
    GenRndGnm_PNEANet(int const & Nodes, int const & Edges, bool const & IsDir=True, TRnd Rnd=Rnd) -> PNEANet

    Parameters:
        Nodes: int const &
        Edges: int const &
        IsDir: bool const &
        Rnd: TRnd &

    GenRndGnm_PNEANet(int const & Nodes, int const & Edges, bool const & IsDir=True) -> PNEANet

    Parameters:
        Nodes: int const &
        Edges: int const &
        IsDir: bool const &

    GenRndGnm_PNEANet(int const & Nodes, int const & Edges) -> PNEANet

    Parameters:
        Nodes: int const &
        Edges: int const &

    """
  return _snap.GenRndGnm_PNEANet(*args)

def LoadEdgeList_PNEANet(*args):
  """
    LoadEdgeList_PNEANet(TStr InFNm, int const & SrcColId=0, int const & DstColId=1) -> PNEANet

    Parameters:
        InFNm: TStr const &
        SrcColId: int const &
        DstColId: int const &

    LoadEdgeList_PNEANet(TStr InFNm, int const & SrcColId=0) -> PNEANet

    Parameters:
        InFNm: TStr const &
        SrcColId: int const &

    LoadEdgeList_PNEANet(TStr InFNm) -> PNEANet

    Parameters:
        InFNm: TStr const &

    LoadEdgeList_PNEANet(TStr InFNm, int const & SrcColId, int const & DstColId, char const & Separator) -> PNEANet

    Parameters:
        InFNm: TStr const &
        SrcColId: int const &
        DstColId: int const &
        Separator: char const &

    """
  return _snap.LoadEdgeList_PNEANet(*args)

def LoadEdgeListStr_PNEANet(*args):
  """
    LoadEdgeListStr_PNEANet(TStr InFNm, int const & SrcColId=0, int const & DstColId=1) -> PNEANet

    Parameters:
        InFNm: TStr const &
        SrcColId: int const &
        DstColId: int const &

    LoadEdgeListStr_PNEANet(TStr InFNm, int const & SrcColId=0) -> PNEANet

    Parameters:
        InFNm: TStr const &
        SrcColId: int const &

    LoadEdgeListStr_PNEANet(TStr InFNm) -> PNEANet

    Parameters:
        InFNm: TStr const &

    LoadEdgeListStr_PNEANet(TStr InFNm, int const & SrcColId, int const & DstColId, TStrHash< TInt > & StrToNIdH) -> PNEANet

    Parameters:
        InFNm: TStr const &
        SrcColId: int const &
        DstColId: int const &
        StrToNIdH: TStrHash< TInt > &

    """
  return _snap.LoadEdgeListStr_PNEANet(*args)

def LoadConnList_PNEANet(*args):
  """
    LoadConnList_PNEANet(TStr InFNm) -> PNEANet

    Parameters:
        InFNm: TStr const &

    """
  return _snap.LoadConnList_PNEANet(*args)

def LoadConnListStr_PNEANet(*args):
  """
    LoadConnListStr_PNEANet(TStr InFNm, TStrHash< TInt > & StrToNIdH) -> PNEANet

    Parameters:
        InFNm: TStr const &
        StrToNIdH: TStrHash< TInt > &

    """
  return _snap.LoadConnListStr_PNEANet(*args)

def LoadPajek_PNEANet(*args):
  """
    LoadPajek_PNEANet(TStr InFNm) -> PNEANet

    Parameters:
        InFNm: TStr const &

    """
  return _snap.LoadPajek_PNEANet(*args)

def SaveEdgeList_PNEANet(*args):
  """
    SaveEdgeList_PNEANet(PNEANet Graph, TStr OutFNm, TStr Desc=TStr())

    Parameters:
        Graph: TPt< TNEANet > const &
        OutFNm: TStr const &
        Desc: TStr const &

    SaveEdgeList_PNEANet(PNEANet Graph, TStr OutFNm)

    Parameters:
        Graph: TPt< TNEANet > const &
        OutFNm: TStr const &

    """
  return _snap.SaveEdgeList_PNEANet(*args)

def SavePajek_PNEANet(*args):
  """
    SavePajek_PNEANet(PNEANet Graph, TStr OutFNm)

    Parameters:
        Graph: TPt< TNEANet > const &
        OutFNm: TStr const &

    SavePajek_PNEANet(PNEANet Graph, TStr OutFNm, TIntStrH NIdColorH)

    Parameters:
        Graph: TPt< TNEANet > const &
        OutFNm: TStr const &
        NIdColorH: TIntStrH const &

    SavePajek_PNEANet(PNEANet Graph, TStr OutFNm, TIntStrH NIdColorH, TIntStrH NIdLabelH)

    Parameters:
        Graph: TPt< TNEANet > const &
        OutFNm: TStr const &
        NIdColorH: TIntStrH const &
        NIdLabelH: TIntStrH const &

    SavePajek_PNEANet(PNEANet Graph, TStr OutFNm, TIntStrH NIdColorH, TIntStrH NIdLabelH, TIntStrH EIdColorH)

    Parameters:
        Graph: TPt< TNEANet > const &
        OutFNm: TStr const &
        NIdColorH: TIntStrH const &
        NIdLabelH: TIntStrH const &
        EIdColorH: TIntStrH const &

    """
  return _snap.SavePajek_PNEANet(*args)

def SaveMatlabSparseMtx_PNEANet(*args):
  """
    SaveMatlabSparseMtx_PNEANet(PNEANet Graph, TStr OutFNm)

    Parameters:
        Graph: TPt< TNEANet > const &
        OutFNm: TStr const &

    """
  return _snap.SaveMatlabSparseMtx_PNEANet(*args)

def SaveGViz_PNEANet(*args):
  """
    SaveGViz_PNEANet(PNEANet Graph, TStr OutFNm, TStr Desc=TStr(), bool const & NodeLabels=False, TIntStrH NIdColorH=TIntStrH())

    Parameters:
        Graph: TPt< TNEANet > const &
        OutFNm: TStr const &
        Desc: TStr const &
        NodeLabels: bool const &
        NIdColorH: TIntStrH const &

    SaveGViz_PNEANet(PNEANet Graph, TStr OutFNm, TStr Desc=TStr(), bool const & NodeLabels=False)

    Parameters:
        Graph: TPt< TNEANet > const &
        OutFNm: TStr const &
        Desc: TStr const &
        NodeLabels: bool const &

    SaveGViz_PNEANet(PNEANet Graph, TStr OutFNm, TStr Desc=TStr())

    Parameters:
        Graph: TPt< TNEANet > const &
        OutFNm: TStr const &
        Desc: TStr const &

    SaveGViz_PNEANet(PNEANet Graph, TStr OutFNm)

    Parameters:
        Graph: TPt< TNEANet > const &
        OutFNm: TStr const &

    SaveGViz_PNEANet(PNEANet Graph, TStr OutFNm, TStr Desc, TIntStrH NIdLabelH)

    Parameters:
        Graph: TPt< TNEANet > const &
        OutFNm: TStr const &
        Desc: TStr const &
        NIdLabelH: TIntStrH const &

    """
  return _snap.SaveGViz_PNEANet(*args)

def GetKCore_PNEANet(*args):
  """
    GetKCore_PNEANet(PNEANet Graph, int const & K) -> PNEANet

    Parameters:
        Graph: TPt< TNEANet > const &
        K: int const &

    """
  return _snap.GetKCore_PNEANet(*args)

def GetKCoreEdges_PNEANet(*args):
  """
    GetKCoreEdges_PNEANet(PNEANet Graph, TIntPrV CoreIdSzV) -> int

    Parameters:
        Graph: TPt< TNEANet > const &
        CoreIdSzV: TIntPrV &

    """
  return _snap.GetKCoreEdges_PNEANet(*args)

def GetKCoreNodes_PNEANet(*args):
  """
    GetKCoreNodes_PNEANet(PNEANet Graph, TIntPrV CoreIdSzV) -> int

    Parameters:
        Graph: TPt< TNEANet > const &
        CoreIdSzV: TIntPrV &

    """
  return _snap.GetKCoreNodes_PNEANet(*args)

def ConvertGraph_PNEANet_PNEANet(*args):
  """
    ConvertGraph_PNEANet_PNEANet(PNEANet InGraph, bool const & RenumberNodes=False) -> PNEANet

    Parameters:
        InGraph: TPt< TNEANet > const &
        RenumberNodes: bool const &

    ConvertGraph_PNEANet_PNEANet(PNEANet InGraph) -> PNEANet

    Parameters:
        InGraph: TPt< TNEANet > const &

    """
  return _snap.ConvertGraph_PNEANet_PNEANet(*args)

def ConvertGraph_PNEANet_PNGraph(*args):
  """
    ConvertGraph_PNEANet_PNGraph(PNGraph InGraph, bool const & RenumberNodes=False) -> PNEANet

    Parameters:
        InGraph: TPt< TNGraph > const &
        RenumberNodes: bool const &

    ConvertGraph_PNEANet_PNGraph(PNGraph InGraph) -> PNEANet

    Parameters:
        InGraph: TPt< TNGraph > const &

    """
  return _snap.ConvertGraph_PNEANet_PNGraph(*args)

def ConvertGraph_PNEANet_PUNGraph(*args):
  """
    ConvertGraph_PNEANet_PUNGraph(PUNGraph InGraph, bool const & RenumberNodes=False) -> PNEANet

    Parameters:
        InGraph: TPt< TUNGraph > const &
        RenumberNodes: bool const &

    ConvertGraph_PNEANet_PUNGraph(PUNGraph InGraph) -> PNEANet

    Parameters:
        InGraph: TPt< TUNGraph > const &

    """
  return _snap.ConvertGraph_PNEANet_PUNGraph(*args)

def ConvertSubGraph_PNEANet_PNEANet(*args):
  """
    ConvertSubGraph_PNEANet_PNEANet(PNEANet InGraph, TIntV NIdV, bool const & RenumberNodes=False) -> PNEANet

    Parameters:
        InGraph: TPt< TNEANet > const &
        NIdV: TIntV const &
        RenumberNodes: bool const &

    ConvertSubGraph_PNEANet_PNEANet(PNEANet InGraph, TIntV NIdV) -> PNEANet

    Parameters:
        InGraph: TPt< TNEANet > const &
        NIdV: TIntV const &

    """
  return _snap.ConvertSubGraph_PNEANet_PNEANet(*args)

def ConvertSubGraph_PNEANet_PNGraph(*args):
  """
    ConvertSubGraph_PNEANet_PNGraph(PNGraph InGraph, TIntV NIdV, bool const & RenumberNodes=False) -> PNEANet

    Parameters:
        InGraph: TPt< TNGraph > const &
        NIdV: TIntV const &
        RenumberNodes: bool const &

    ConvertSubGraph_PNEANet_PNGraph(PNGraph InGraph, TIntV NIdV) -> PNEANet

    Parameters:
        InGraph: TPt< TNGraph > const &
        NIdV: TIntV const &

    """
  return _snap.ConvertSubGraph_PNEANet_PNGraph(*args)

def ConvertSubGraph_PNEANet_PUNGraph(*args):
  """
    ConvertSubGraph_PNEANet_PUNGraph(PUNGraph InGraph, TIntV NIdV, bool const & RenumberNodes=False) -> PNEANet

    Parameters:
        InGraph: TPt< TUNGraph > const &
        NIdV: TIntV const &
        RenumberNodes: bool const &

    ConvertSubGraph_PNEANet_PUNGraph(PUNGraph InGraph, TIntV NIdV) -> PNEANet

    Parameters:
        InGraph: TPt< TUNGraph > const &
        NIdV: TIntV const &

    """
  return _snap.ConvertSubGraph_PNEANet_PUNGraph(*args)

def ConvertESubGraph_PNEANet_PNEANet(*args):
  """
    ConvertESubGraph_PNEANet_PNEANet(PNEANet InGraph, TIntV EIdV, bool const & RenumberNodes=False) -> PNEANet

    Parameters:
        InGraph: TPt< TNEANet > const &
        EIdV: TIntV const &
        RenumberNodes: bool const &

    ConvertESubGraph_PNEANet_PNEANet(PNEANet InGraph, TIntV EIdV) -> PNEANet

    Parameters:
        InGraph: TPt< TNEANet > const &
        EIdV: TIntV const &

    """
  return _snap.ConvertESubGraph_PNEANet_PNEANet(*args)

def GetSubGraph_PNEANet(*args):
  """
    GetSubGraph_PNEANet(PNEANet Graph, TIntV NIdV) -> PNEANet

    Parameters:
        Graph: TPt< TNEANet > const &
        NIdV: TIntV const &

    """
  return _snap.GetSubGraph_PNEANet(*args)

def GetESubGraph_PNEANet(*args):
  """
    GetESubGraph_PNEANet(PNEANet Graph, TIntV EIdV) -> PNEANet

    Parameters:
        Graph: TPt< TNEANet > const &
        EIdV: TIntV const &

    GetESubGraph_PNEANet(PNEANet Graph, TIntPrV EdgeV) -> PNEANet

    Parameters:
        Graph: TPt< TNEANet > const &
        EdgeV: TIntPrV const &

    """
  return _snap.GetESubGraph_PNEANet(*args)

def GetRndSubGraph_PNEANet(*args):
  """
    GetRndSubGraph_PNEANet(PNEANet Graph, int const & NNodes) -> PNEANet

    Parameters:
        Graph: TPt< TNEANet > const &
        NNodes: int const &

    """
  return _snap.GetRndSubGraph_PNEANet(*args)

def GetRndESubGraph_PNEANet(*args):
  """
    GetRndESubGraph_PNEANet(PNEANet Graph, int const & NEdges) -> PNEANet

    Parameters:
        Graph: TPt< TNEANet > const &
        NEdges: int const &

    """
  return _snap.GetRndESubGraph_PNEANet(*args)

def GetClustCf_PNEANet(*args):
  """
    GetClustCf_PNEANet(PNEANet Graph, int SampleNodes=-1) -> double

    Parameters:
        Graph: TPt< TNEANet > const &
        SampleNodes: int

    GetClustCf_PNEANet(PNEANet Graph) -> double

    Parameters:
        Graph: TPt< TNEANet > const &

    GetClustCf_PNEANet(PNEANet Graph, TFltPrV DegToCCfV, int SampleNodes=-1) -> double

    Parameters:
        Graph: TPt< TNEANet > const &
        DegToCCfV: TFltPrV &
        SampleNodes: int

    GetClustCf_PNEANet(PNEANet Graph, TFltPrV DegToCCfV) -> double

    Parameters:
        Graph: TPt< TNEANet > const &
        DegToCCfV: TFltPrV &

    GetClustCf_PNEANet(PNEANet Graph, TFltPrV DegToCCfV, int64 & ClosedTriadsX, int64 & OpenTriadsX, int SampleNodes=-1) -> double

    Parameters:
        Graph: TPt< TNEANet > const &
        DegToCCfV: TFltPrV &
        ClosedTriadsX: int64 &
        OpenTriadsX: int64 &
        SampleNodes: int

    GetClustCf_PNEANet(PNEANet Graph, TFltPrV DegToCCfV, int64 & ClosedTriadsX, int64 & OpenTriadsX) -> double

    Parameters:
        Graph: TPt< TNEANet > const &
        DegToCCfV: TFltPrV &
        ClosedTriadsX: int64 &
        OpenTriadsX: int64 &

    """
  return _snap.GetClustCf_PNEANet(*args)

def GetNodeClustCf_PNEANet(*args):
  """
    GetNodeClustCf_PNEANet(PNEANet Graph, int const & NId) -> double

    Parameters:
        Graph: TPt< TNEANet > const &
        NId: int const &

    GetNodeClustCf_PNEANet(PNEANet Graph, TIntFltH NIdCCfH)

    Parameters:
        Graph: TPt< TNEANet > const &
        NIdCCfH: TIntFltH &

    """
  return _snap.GetNodeClustCf_PNEANet(*args)

def GetTriads_PNEANet(*args):
  """
    GetTriads_PNEANet(PNEANet Graph, int64 & ClosedTriads, int64 & OpenTriads, int SampleNodes=-1) -> int64

    Parameters:
        Graph: TPt< TNEANet > const &
        ClosedTriads: int64 &
        OpenTriads: int64 &
        SampleNodes: int

    GetTriads_PNEANet(PNEANet Graph, int64 & ClosedTriads, int64 & OpenTriads) -> int64

    Parameters:
        Graph: TPt< TNEANet > const &
        ClosedTriads: int64 &
        OpenTriads: int64 &

    GetTriads_PNEANet(PNEANet Graph, int SampleNodes=-1) -> int64

    Parameters:
        Graph: TPt< TNEANet > const &
        SampleNodes: int

    GetTriads_PNEANet(PNEANet Graph) -> int64

    Parameters:
        Graph: TPt< TNEANet > const &

    GetTriads_PNEANet(PNEANet Graph, TIntTrV NIdCOTriadV, int SampleNodes=-1)

    Parameters:
        Graph: TPt< TNEANet > const &
        NIdCOTriadV: TIntTrV &
        SampleNodes: int

    GetTriads_PNEANet(PNEANet Graph, TIntTrV NIdCOTriadV)

    Parameters:
        Graph: TPt< TNEANet > const &
        NIdCOTriadV: TIntTrV &

    """
  return _snap.GetTriads_PNEANet(*args)

def GetTriadEdges_PNEANet(*args):
  """
    GetTriadEdges_PNEANet(PNEANet Graph, int SampleEdges=-1) -> int

    Parameters:
        Graph: TPt< TNEANet > const &
        SampleEdges: int

    GetTriadEdges_PNEANet(PNEANet Graph) -> int

    Parameters:
        Graph: TPt< TNEANet > const &

    """
  return _snap.GetTriadEdges_PNEANet(*args)

def GetNodeTriads_PNEANet(*args):
  """
    GetNodeTriads_PNEANet(PNEANet Graph, int const & NId) -> int

    Parameters:
        Graph: TPt< TNEANet > const &
        NId: int const &

    GetNodeTriads_PNEANet(PNEANet Graph, int const & NId) -> int

    Parameters:
        Graph: TPt< TNEANet > const &
        NId: int const &

    GetNodeTriads_PNEANet(PNEANet Graph, int const & NId, TIntSet GroupSet, int & OutGroupEdgesX) -> int

    Parameters:
        Graph: TPt< TNEANet > const &
        NId: int const &
        GroupSet: TIntSet const &
        OutGroupEdgesX: int &

    """
  return _snap.GetNodeTriads_PNEANet(*args)

def GetTriadParticip_PNEANet(*args):
  """
    GetTriadParticip_PNEANet(PNEANet Graph, TIntPrV TriadCntV)

    Parameters:
        Graph: TPt< TNEANet > const &
        TriadCntV: TIntPrV &

    """
  return _snap.GetTriadParticip_PNEANet(*args)

def GetCmnNbrs_PNEANet(*args):
  """
    GetCmnNbrs_PNEANet(PNEANet Graph, int const & NId1, int const & NId2) -> int

    Parameters:
        Graph: TPt< TNEANet > const &
        NId1: int const &
        NId2: int const &

    GetCmnNbrs_PNEANet(PNEANet Graph, int const & NId1, int const & NId2, TIntV NbrV) -> int

    Parameters:
        Graph: TPt< TNEANet > const &
        NId1: int const &
        NId2: int const &
        NbrV: TIntV &

    """
  return _snap.GetCmnNbrs_PNEANet(*args)

def GetModularity_PNEANet(*args):
  """
    GetModularity_PNEANet(PNEANet G, TIntV NIdV, int GEdges=-1) -> double

    Parameters:
        G: TPt< TNEANet > const &
        NIdV: TIntV const &
        GEdges: int

    GetModularity_PNEANet(PNEANet G, TIntV NIdV) -> double

    Parameters:
        G: TPt< TNEANet > const &
        NIdV: TIntV const &

    GetModularity_PNEANet(PNEANet G, TCnComV CmtyV, int GEdges=-1) -> double

    Parameters:
        G: TPt< TNEANet > const &
        CmtyV: TCnComV const &
        GEdges: int

    GetModularity_PNEANet(PNEANet G, TCnComV CmtyV) -> double

    Parameters:
        G: TPt< TNEANet > const &
        CmtyV: TCnComV const &

    """
  return _snap.GetModularity_PNEANet(*args)

def GetEdgesInOut_PNEANet(*args):
  """
    GetEdgesInOut_PNEANet(PNEANet Graph, TIntV NIdV)

    Parameters:
        Graph: TPt< TNEANet > const &
        NIdV: TIntV const &

    """
  return _snap.GetEdgesInOut_PNEANet(*args)

def GetAnf_PNEANet(*args):
  """
    GetAnf_PNEANet(PNEANet Graph, int const & SrcNId, TIntFltKdV DistNbrsV, int const & MxDist, bool const & IsDir, 
        int const & NApprox=32)

    Parameters:
        Graph: TPt< TNEANet > const &
        SrcNId: int const &
        DistNbrsV: TIntFltKdV &
        MxDist: int const &
        IsDir: bool const &
        NApprox: int const &

    GetAnf_PNEANet(PNEANet Graph, int const & SrcNId, TIntFltKdV DistNbrsV, int const & MxDist, bool const & IsDir)

    Parameters:
        Graph: TPt< TNEANet > const &
        SrcNId: int const &
        DistNbrsV: TIntFltKdV &
        MxDist: int const &
        IsDir: bool const &

    GetAnf_PNEANet(PNEANet Graph, TIntFltKdV DistNbrsV, int const & MxDist, bool const & IsDir, int const & NApprox=32)

    Parameters:
        Graph: TPt< TNEANet > const &
        DistNbrsV: TIntFltKdV &
        MxDist: int const &
        IsDir: bool const &
        NApprox: int const &

    GetAnf_PNEANet(PNEANet Graph, TIntFltKdV DistNbrsV, int const & MxDist, bool const & IsDir)

    Parameters:
        Graph: TPt< TNEANet > const &
        DistNbrsV: TIntFltKdV &
        MxDist: int const &
        IsDir: bool const &

    """
  return _snap.GetAnf_PNEANet(*args)

def GetAnfEffDiam_PNEANet(*args):
  """
    GetAnfEffDiam_PNEANet(PNEANet Graph, bool const & IsDir, double const & Percentile, int const & NApprox) -> double

    Parameters:
        Graph: TPt< TNEANet > const &
        IsDir: bool const &
        Percentile: double const &
        NApprox: int const &

    GetAnfEffDiam_PNEANet(PNEANet Graph, int const NRuns=1, int NApprox=-1) -> double

    Parameters:
        Graph: TPt< TNEANet > const &
        NRuns: int const
        NApprox: int

    GetAnfEffDiam_PNEANet(PNEANet Graph, int const NRuns=1) -> double

    Parameters:
        Graph: TPt< TNEANet > const &
        NRuns: int const

    GetAnfEffDiam_PNEANet(PNEANet Graph) -> double

    Parameters:
        Graph: TPt< TNEANet > const &

    """
  return _snap.GetAnfEffDiam_PNEANet(*args)

def TestAnf_PNEANet():
  """TestAnf_PNEANet()"""
  return _snap.TestAnf_PNEANet()

def PlotKCoreEdges_PNEANet(*args):
  """
    PlotKCoreEdges_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr=TStr())

    Parameters:
        Graph: TPt< TNEANet > const &
        FNmPref: TStr const &
        DescStr: TStr

    PlotKCoreEdges_PNEANet(PNEANet Graph, TStr FNmPref)

    Parameters:
        Graph: TPt< TNEANet > const &
        FNmPref: TStr const &

    """
  return _snap.PlotKCoreEdges_PNEANet(*args)

def PlotKCoreNodes_PNEANet(*args):
  """
    PlotKCoreNodes_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr=TStr())

    Parameters:
        Graph: TPt< TNEANet > const &
        FNmPref: TStr const &
        DescStr: TStr

    PlotKCoreNodes_PNEANet(PNEANet Graph, TStr FNmPref)

    Parameters:
        Graph: TPt< TNEANet > const &
        FNmPref: TStr const &

    """
  return _snap.PlotKCoreNodes_PNEANet(*args)

def PlotShortPathDistr_PNEANet(*args):
  """
    PlotShortPathDistr_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr=TStr(), int TestNodes=Mx)

    Parameters:
        Graph: TPt< TNEANet > const &
        FNmPref: TStr const &
        DescStr: TStr
        TestNodes: int

    PlotShortPathDistr_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr=TStr())

    Parameters:
        Graph: TPt< TNEANet > const &
        FNmPref: TStr const &
        DescStr: TStr

    PlotShortPathDistr_PNEANet(PNEANet Graph, TStr FNmPref)

    Parameters:
        Graph: TPt< TNEANet > const &
        FNmPref: TStr const &

    """
  return _snap.PlotShortPathDistr_PNEANet(*args)

def PlotHops_PNEANet(*args):
  """
    PlotHops_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr=TStr(), bool const & IsDir=False, int const & NApprox=32)

    Parameters:
        Graph: TPt< TNEANet > const &
        FNmPref: TStr const &
        DescStr: TStr
        IsDir: bool const &
        NApprox: int const &

    PlotHops_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr=TStr(), bool const & IsDir=False)

    Parameters:
        Graph: TPt< TNEANet > const &
        FNmPref: TStr const &
        DescStr: TStr
        IsDir: bool const &

    PlotHops_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr=TStr())

    Parameters:
        Graph: TPt< TNEANet > const &
        FNmPref: TStr const &
        DescStr: TStr

    PlotHops_PNEANet(PNEANet Graph, TStr FNmPref)

    Parameters:
        Graph: TPt< TNEANet > const &
        FNmPref: TStr const &

    """
  return _snap.PlotHops_PNEANet(*args)

def PlotClustCf_PNEANet(*args):
  """
    PlotClustCf_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr=TStr())

    Parameters:
        Graph: TPt< TNEANet > const &
        FNmPref: TStr const &
        DescStr: TStr

    PlotClustCf_PNEANet(PNEANet Graph, TStr FNmPref)

    Parameters:
        Graph: TPt< TNEANet > const &
        FNmPref: TStr const &

    """
  return _snap.PlotClustCf_PNEANet(*args)

def PlotSccDistr_PNEANet(*args):
  """
    PlotSccDistr_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr=TStr())

    Parameters:
        Graph: TPt< TNEANet > const &
        FNmPref: TStr const &
        DescStr: TStr

    PlotSccDistr_PNEANet(PNEANet Graph, TStr FNmPref)

    Parameters:
        Graph: TPt< TNEANet > const &
        FNmPref: TStr const &

    """
  return _snap.PlotSccDistr_PNEANet(*args)

def PlotWccDistr_PNEANet(*args):
  """
    PlotWccDistr_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr=TStr())

    Parameters:
        Graph: TPt< TNEANet > const &
        FNmPref: TStr const &
        DescStr: TStr

    PlotWccDistr_PNEANet(PNEANet Graph, TStr FNmPref)

    Parameters:
        Graph: TPt< TNEANet > const &
        FNmPref: TStr const &

    """
  return _snap.PlotWccDistr_PNEANet(*args)

def PlotOutDegDistr_PNEANet(*args):
  """
    PlotOutDegDistr_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr=TStr(), bool const & PlotCCdf=False, bool const & PowerFit=False)

    Parameters:
        Graph: TPt< TNEANet > const &
        FNmPref: TStr const &
        DescStr: TStr
        PlotCCdf: bool const &
        PowerFit: bool const &

    PlotOutDegDistr_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr=TStr(), bool const & PlotCCdf=False)

    Parameters:
        Graph: TPt< TNEANet > const &
        FNmPref: TStr const &
        DescStr: TStr
        PlotCCdf: bool const &

    PlotOutDegDistr_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr=TStr())

    Parameters:
        Graph: TPt< TNEANet > const &
        FNmPref: TStr const &
        DescStr: TStr

    PlotOutDegDistr_PNEANet(PNEANet Graph, TStr FNmPref)

    Parameters:
        Graph: TPt< TNEANet > const &
        FNmPref: TStr const &

    """
  return _snap.PlotOutDegDistr_PNEANet(*args)

def PlotInDegDistr_PNEANet(*args):
  """
    PlotInDegDistr_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr=TStr(), bool const & PlotCCdf=False, bool const & PowerFit=False)

    Parameters:
        Graph: TPt< TNEANet > const &
        FNmPref: TStr const &
        DescStr: TStr
        PlotCCdf: bool const &
        PowerFit: bool const &

    PlotInDegDistr_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr=TStr(), bool const & PlotCCdf=False)

    Parameters:
        Graph: TPt< TNEANet > const &
        FNmPref: TStr const &
        DescStr: TStr
        PlotCCdf: bool const &

    PlotInDegDistr_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr=TStr())

    Parameters:
        Graph: TPt< TNEANet > const &
        FNmPref: TStr const &
        DescStr: TStr

    PlotInDegDistr_PNEANet(PNEANet Graph, TStr FNmPref)

    Parameters:
        Graph: TPt< TNEANet > const &
        FNmPref: TStr const &

    """
  return _snap.PlotInDegDistr_PNEANet(*args)

def PercentDegree_PNEANet(*args):
  """
    PercentDegree_PNEANet(PNEANet Graph, int const Threshold=0) -> double

    Parameters:
        Graph: TPt< TNEANet > const &
        Threshold: int const

    PercentDegree_PNEANet(PNEANet Graph) -> double

    Parameters:
        Graph: TPt< TNEANet > const &

    """
  return _snap.PercentDegree_PNEANet(*args)

def NodesGTEDegree_PNEANet(*args):
  """
    NodesGTEDegree_PNEANet(PNEANet Graph, int const Threshold=0) -> int

    Parameters:
        Graph: TPt< TNEANet > const &
        Threshold: int const

    NodesGTEDegree_PNEANet(PNEANet Graph) -> int

    Parameters:
        Graph: TPt< TNEANet > const &

    """
  return _snap.NodesGTEDegree_PNEANet(*args)

def MxDegree_PNEANet(*args):
  """
    MxDegree_PNEANet(PNEANet Graph) -> int

    Parameters:
        Graph: TPt< TNEANet > const &

    """
  return _snap.MxDegree_PNEANet(*args)

def PercentMxWcc_PNEANet(*args):
  """
    PercentMxWcc_PNEANet(PNEANet Graph) -> double

    Parameters:
        Graph: TPt< TNEANet > const &

    """
  return _snap.PercentMxWcc_PNEANet(*args)

def PercentMxScc_PNEANet(*args):
  """
    PercentMxScc_PNEANet(PNEANet Graph) -> double

    Parameters:
        Graph: TPt< TNEANet > const &

    """
  return _snap.PercentMxScc_PNEANet(*args)
# redefine TNGraphEdgeI.GetId to return a pair of nodes rather than -1
def GetId(self):
    return (self.GetSrcNId(), self.GetDstNId())

TNGraphEdgeI.GetId = GetId


def PrintGraphStatTable_PNGraph(*args):
  """
    PrintGraphStatTable_PNGraph(PNGraph G, TStr OutFNm, TStr Desc="")

    Parameters:
        G: TPt< TNGraph > const &
        OutFNm: TStr
        Desc: TStr

    PrintGraphStatTable_PNGraph(PNGraph G, TStr OutFNm)

    Parameters:
        G: TPt< TNGraph > const &
        OutFNm: TStr

    """
  return _snap.PrintGraphStatTable_PNGraph(*args)
class PNGraph(object):
    """Proxy of C++ TPt<(TNGraph)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def New():
        """New() -> PNGraph"""
        return _snap.PNGraph_New()

    New = staticmethod(New)
    __swig_destroy__ = _snap.delete_PNGraph
    def Save(self, *args):
        """
        Save(PNGraph self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.PNGraph_Save(self, *args)

    def __deref__(self):
        """
        __deref__(PNGraph self) -> TNGraph

        Parameters:
            self: TPt< TNGraph > const *

        """
        return _snap.PNGraph___deref__(self)

    def __ref__(self):
        """
        __ref__(PNGraph self) -> TNGraph

        Parameters:
            self: TPt< TNGraph > const *

        """
        return _snap.PNGraph___ref__(self)

    def __call__(self):
        """
        __call__(PNGraph self) -> TNGraph

        Parameters:
            self: TPt< TNGraph > const *

        """
        return _snap.PNGraph___call__(self)

    def Empty(self):
        """
        Empty(PNGraph self) -> bool

        Parameters:
            self: TPt< TNGraph > const *

        """
        return _snap.PNGraph_Empty(self)

    def Clr(self):
        """
        Clr(PNGraph self)

        Parameters:
            self: TPt< TNGraph > *

        """
        return _snap.PNGraph_Clr(self)

    def GetRefs(self):
        """
        GetRefs(PNGraph self) -> int

        Parameters:
            self: TPt< TNGraph > const *

        """
        return _snap.PNGraph_GetRefs(self)

    def Load(self, *args):
        """
        Load(PNGraph self, TSIn SIn) -> PNGraph

        Parameters:
            SIn: TSIn &

        """
        return _snap.PNGraph_Load(self, *args)

    def HasFlag(self, *args):
        """
        HasFlag(PNGraph self, TGraphFlag const & Flag) -> bool

        Parameters:
            Flag: TGraphFlag const &

        """
        return _snap.PNGraph_HasFlag(self, *args)

    def GetNodes(self):
        """
        GetNodes(PNGraph self) -> int

        Parameters:
            self: TPt< TNGraph > const *

        """
        return _snap.PNGraph_GetNodes(self)

    def AddNode(self, *args):
        """
        AddNode(PNGraph self, int NId=-1) -> int

        Parameters:
            NId: int

        AddNode(PNGraph self) -> int
        AddNode(PNGraph self, TNGraph::TNodeI const & NodeId) -> int

        Parameters:
            NodeId: TNGraph::TNodeI const &

        AddNode(PNGraph self, int const & NId, TIntV InNIdV, TIntV OutNIdV) -> int

        Parameters:
            NId: int const &
            InNIdV: TIntV const &
            OutNIdV: TIntV const &

        AddNode(PNGraph self, int const & NId, TVecPool< TInt > const & Pool, int const & SrcVId, int const & DstVId) -> int

        Parameters:
            NId: int const &
            Pool: TVecPool< TInt > const &
            SrcVId: int const &
            DstVId: int const &

        """
        return _snap.PNGraph_AddNode(self, *args)

    def DelNode(self, *args):
        """
        DelNode(PNGraph self, int const & NId)

        Parameters:
            NId: int const &

        DelNode(PNGraph self, TNGraph::TNode const & NodeI)

        Parameters:
            NodeI: TNGraph::TNode const &

        """
        return _snap.PNGraph_DelNode(self, *args)

    def IsNode(self, *args):
        """
        IsNode(PNGraph self, int const & NId) -> bool

        Parameters:
            NId: int const &

        """
        return _snap.PNGraph_IsNode(self, *args)

    def BegNI(self, *args):
        """
        BegNI(PNGraph self) -> TNGraph::TNodeI
        BegNI(PNGraph self) -> TNGraphNodeI

        Parameters:
            self: TPt< TNGraph > *

        """
        return _snap.PNGraph_BegNI(self, *args)

    def EndNI(self, *args):
        """
        EndNI(PNGraph self) -> TNGraph::TNodeI
        EndNI(PNGraph self) -> TNGraphNodeI

        Parameters:
            self: TPt< TNGraph > *

        """
        return _snap.PNGraph_EndNI(self, *args)

    def GetNI(self, *args):
        """
        GetNI(PNGraph self, int const & NId) -> TNGraph::TNodeI

        Parameters:
            NId: int const &

        GetNI(PNGraph self, int const & NId) -> TNGraphNodeI

        Parameters:
            NId: int const &

        """
        return _snap.PNGraph_GetNI(self, *args)

    def GetMxNId(self):
        """
        GetMxNId(PNGraph self) -> int

        Parameters:
            self: TPt< TNGraph > const *

        """
        return _snap.PNGraph_GetMxNId(self)

    def GetEdges(self):
        """
        GetEdges(PNGraph self) -> int

        Parameters:
            self: TPt< TNGraph > const *

        """
        return _snap.PNGraph_GetEdges(self)

    def AddEdge(self, *args):
        """
        AddEdge(PNGraph self, int const & SrcNId, int const & DstNId) -> int

        Parameters:
            SrcNId: int const &
            DstNId: int const &

        AddEdge(PNGraph self, TNGraph::TEdgeI const & EdgeI) -> int

        Parameters:
            EdgeI: TNGraph::TEdgeI const &

        """
        return _snap.PNGraph_AddEdge(self, *args)

    def DelEdge(self, *args):
        """
        DelEdge(PNGraph self, int const & SrcNId, int const & DstNId, bool const & IsDir=True)

        Parameters:
            SrcNId: int const &
            DstNId: int const &
            IsDir: bool const &

        DelEdge(PNGraph self, int const & SrcNId, int const & DstNId)

        Parameters:
            SrcNId: int const &
            DstNId: int const &

        """
        return _snap.PNGraph_DelEdge(self, *args)

    def IsEdge(self, *args):
        """
        IsEdge(PNGraph self, int const & SrcNId, int const & DstNId, bool const & IsDir=True) -> bool

        Parameters:
            SrcNId: int const &
            DstNId: int const &
            IsDir: bool const &

        IsEdge(PNGraph self, int const & SrcNId, int const & DstNId) -> bool

        Parameters:
            SrcNId: int const &
            DstNId: int const &

        """
        return _snap.PNGraph_IsEdge(self, *args)

    def BegEI(self, *args):
        """
        BegEI(PNGraph self) -> TNGraph::TEdgeI
        BegEI(PNGraph self) -> TNGraphEdgeI

        Parameters:
            self: TPt< TNGraph > *

        """
        return _snap.PNGraph_BegEI(self, *args)

    def EndEI(self, *args):
        """
        EndEI(PNGraph self) -> TNGraph::TEdgeI
        EndEI(PNGraph self) -> TNGraphEdgeI

        Parameters:
            self: TPt< TNGraph > *

        """
        return _snap.PNGraph_EndEI(self, *args)

    def GetEI(self, *args):
        """
        GetEI(PNGraph self, int const & SrcNId, int const & DstNId) -> TNGraph::TEdgeI

        Parameters:
            SrcNId: int const &
            DstNId: int const &

        """
        return _snap.PNGraph_GetEI(self, *args)

    def GetRndNId(self, *args):
        """
        GetRndNId(PNGraph self, TRnd Rnd=Rnd) -> int

        Parameters:
            Rnd: TRnd &

        GetRndNId(PNGraph self) -> int

        Parameters:
            self: TPt< TNGraph > *

        """
        return _snap.PNGraph_GetRndNId(self, *args)

    def GetRndNI(self, *args):
        """
        GetRndNI(PNGraph self, TRnd Rnd=Rnd) -> TNGraph::TNodeI

        Parameters:
            Rnd: TRnd &

        GetRndNI(PNGraph self) -> TNGraph::TNodeI

        Parameters:
            self: TPt< TNGraph > *

        """
        return _snap.PNGraph_GetRndNI(self, *args)

    def GetNIdV(self, *args):
        """
        GetNIdV(PNGraph self, TIntV NIdV)

        Parameters:
            NIdV: TIntV &

        """
        return _snap.PNGraph_GetNIdV(self, *args)

    def Reserve(self, *args):
        """
        Reserve(PNGraph self, int const & Nodes, int const & Edges)

        Parameters:
            Nodes: int const &
            Edges: int const &

        """
        return _snap.PNGraph_Reserve(self, *args)

    def ReserveNIdInDeg(self, *args):
        """
        ReserveNIdInDeg(PNGraph self, int const & NId, int const & InDeg)

        Parameters:
            NId: int const &
            InDeg: int const &

        """
        return _snap.PNGraph_ReserveNIdInDeg(self, *args)

    def ReserveNIdOutDeg(self, *args):
        """
        ReserveNIdOutDeg(PNGraph self, int const & NId, int const & OutDeg)

        Parameters:
            NId: int const &
            OutDeg: int const &

        """
        return _snap.PNGraph_ReserveNIdOutDeg(self, *args)

    def Defrag(self, OnlyNodeLinks=False):
        """
        Defrag(PNGraph self, bool const & OnlyNodeLinks=False)

        Parameters:
            OnlyNodeLinks: bool const &

        Defrag(PNGraph self)

        Parameters:
            self: TPt< TNGraph > *

        """
        return _snap.PNGraph_Defrag(self, OnlyNodeLinks)

    def IsOk(self, ThrowExcept=True):
        """
        IsOk(PNGraph self, bool const & ThrowExcept=True) -> bool

        Parameters:
            ThrowExcept: bool const &

        IsOk(PNGraph self) -> bool

        Parameters:
            self: TPt< TNGraph > const *

        """
        return _snap.PNGraph_IsOk(self, ThrowExcept)

    def Dump(self, *args):
        """
        Dump(PNGraph self, FILE * OutF=stdout)

        Parameters:
            OutF: FILE *

        Dump(PNGraph self)

        Parameters:
            self: TPt< TNGraph > const *

        """
        return _snap.PNGraph_Dump(self, *args)

    def GetSmallGraph(self):
        """
        GetSmallGraph(PNGraph self) -> PNGraph

        Parameters:
            self: TPt< TNGraph > *

        """
        return _snap.PNGraph_GetSmallGraph(self)

PNGraph.Save = new_instancemethod(_snap.PNGraph_Save,None,PNGraph)
PNGraph.__deref__ = new_instancemethod(_snap.PNGraph___deref__,None,PNGraph)
PNGraph.__ref__ = new_instancemethod(_snap.PNGraph___ref__,None,PNGraph)
PNGraph.__call__ = new_instancemethod(_snap.PNGraph___call__,None,PNGraph)
PNGraph.Empty = new_instancemethod(_snap.PNGraph_Empty,None,PNGraph)
PNGraph.Clr = new_instancemethod(_snap.PNGraph_Clr,None,PNGraph)
PNGraph.GetRefs = new_instancemethod(_snap.PNGraph_GetRefs,None,PNGraph)
PNGraph.Load = new_instancemethod(_snap.PNGraph_Load,None,PNGraph)
PNGraph.HasFlag = new_instancemethod(_snap.PNGraph_HasFlag,None,PNGraph)
PNGraph.GetNodes = new_instancemethod(_snap.PNGraph_GetNodes,None,PNGraph)
PNGraph.AddNode = new_instancemethod(_snap.PNGraph_AddNode,None,PNGraph)
PNGraph.DelNode = new_instancemethod(_snap.PNGraph_DelNode,None,PNGraph)
PNGraph.IsNode = new_instancemethod(_snap.PNGraph_IsNode,None,PNGraph)
PNGraph.BegNI = new_instancemethod(_snap.PNGraph_BegNI,None,PNGraph)
PNGraph.EndNI = new_instancemethod(_snap.PNGraph_EndNI,None,PNGraph)
PNGraph.GetNI = new_instancemethod(_snap.PNGraph_GetNI,None,PNGraph)
PNGraph.GetMxNId = new_instancemethod(_snap.PNGraph_GetMxNId,None,PNGraph)
PNGraph.GetEdges = new_instancemethod(_snap.PNGraph_GetEdges,None,PNGraph)
PNGraph.AddEdge = new_instancemethod(_snap.PNGraph_AddEdge,None,PNGraph)
PNGraph.DelEdge = new_instancemethod(_snap.PNGraph_DelEdge,None,PNGraph)
PNGraph.IsEdge = new_instancemethod(_snap.PNGraph_IsEdge,None,PNGraph)
PNGraph.BegEI = new_instancemethod(_snap.PNGraph_BegEI,None,PNGraph)
PNGraph.EndEI = new_instancemethod(_snap.PNGraph_EndEI,None,PNGraph)
PNGraph.GetEI = new_instancemethod(_snap.PNGraph_GetEI,None,PNGraph)
PNGraph.GetRndNId = new_instancemethod(_snap.PNGraph_GetRndNId,None,PNGraph)
PNGraph.GetRndNI = new_instancemethod(_snap.PNGraph_GetRndNI,None,PNGraph)
PNGraph.GetNIdV = new_instancemethod(_snap.PNGraph_GetNIdV,None,PNGraph)
PNGraph.Reserve = new_instancemethod(_snap.PNGraph_Reserve,None,PNGraph)
PNGraph.ReserveNIdInDeg = new_instancemethod(_snap.PNGraph_ReserveNIdInDeg,None,PNGraph)
PNGraph.ReserveNIdOutDeg = new_instancemethod(_snap.PNGraph_ReserveNIdOutDeg,None,PNGraph)
PNGraph.Defrag = new_instancemethod(_snap.PNGraph_Defrag,None,PNGraph)
PNGraph.IsOk = new_instancemethod(_snap.PNGraph_IsOk,None,PNGraph)
PNGraph.Dump = new_instancemethod(_snap.PNGraph_Dump,None,PNGraph)
PNGraph.GetSmallGraph = new_instancemethod(_snap.PNGraph_GetSmallGraph,None,PNGraph)
PNGraph_swigregister = _snap.PNGraph_swigregister
PNGraph_swigregister(PNGraph)

def PNGraph_New():
  """PNGraph_New() -> PNGraph"""
  return _snap.PNGraph_New()


def PrintInfo_PNGraph(*args):
  """
    PrintInfo_PNGraph(PNGraph Graph, TStr Desc="", TStr OutFNm="", bool const & Fast=True)

    Parameters:
        Graph: TPt< TNGraph > const &
        Desc: TStr const &
        OutFNm: TStr const &
        Fast: bool const &

    PrintInfo_PNGraph(PNGraph Graph, TStr Desc="", TStr OutFNm="")

    Parameters:
        Graph: TPt< TNGraph > const &
        Desc: TStr const &
        OutFNm: TStr const &

    PrintInfo_PNGraph(PNGraph Graph, TStr Desc="")

    Parameters:
        Graph: TPt< TNGraph > const &
        Desc: TStr const &

    PrintInfo_PNGraph(PNGraph Graph)

    Parameters:
        Graph: TPt< TNGraph > const &

    """
  return _snap.PrintInfo_PNGraph(*args)

def GetNodeWcc_PNGraph(*args):
  """
    GetNodeWcc_PNGraph(PNGraph Graph, int const & NId, TIntV CnCom)

    Parameters:
        Graph: TPt< TNGraph > const &
        NId: int const &
        CnCom: TIntV &

    """
  return _snap.GetNodeWcc_PNGraph(*args)

def IsConnected_PNGraph(*args):
  """
    IsConnected_PNGraph(PNGraph Graph) -> bool

    Parameters:
        Graph: TPt< TNGraph > const &

    """
  return _snap.IsConnected_PNGraph(*args)

def IsWeaklyConn_PNGraph(*args):
  """
    IsWeaklyConn_PNGraph(PNGraph Graph) -> bool

    Parameters:
        Graph: TPt< TNGraph > const &

    """
  return _snap.IsWeaklyConn_PNGraph(*args)

def GetWccSzCnt_PNGraph(*args):
  """
    GetWccSzCnt_PNGraph(PNGraph Graph, TIntPrV WccSzCnt)

    Parameters:
        Graph: TPt< TNGraph > const &
        WccSzCnt: TIntPrV &

    """
  return _snap.GetWccSzCnt_PNGraph(*args)

def GetWccs_PNGraph(*args):
  """
    GetWccs_PNGraph(PNGraph Graph, TCnComV CnComV)

    Parameters:
        Graph: TPt< TNGraph > const &
        CnComV: TCnComV &

    """
  return _snap.GetWccs_PNGraph(*args)

def GetSccSzCnt_PNGraph(*args):
  """
    GetSccSzCnt_PNGraph(PNGraph Graph, TIntPrV SccSzCnt)

    Parameters:
        Graph: TPt< TNGraph > const &
        SccSzCnt: TIntPrV &

    """
  return _snap.GetSccSzCnt_PNGraph(*args)

def GetSccs_PNGraph(*args):
  """
    GetSccs_PNGraph(PNGraph Graph, TCnComV CnComV)

    Parameters:
        Graph: TPt< TNGraph > const &
        CnComV: TCnComV &

    """
  return _snap.GetSccs_PNGraph(*args)

def GetMxWccSz_PNGraph(*args):
  """
    GetMxWccSz_PNGraph(PNGraph Graph) -> double

    Parameters:
        Graph: TPt< TNGraph > const &

    """
  return _snap.GetMxWccSz_PNGraph(*args)

def GetMxSccSz_PNGraph(*args):
  """
    GetMxSccSz_PNGraph(PNGraph Graph) -> double

    Parameters:
        Graph: TPt< TNGraph > const &

    """
  return _snap.GetMxSccSz_PNGraph(*args)

def GetMxWcc_PNGraph(*args):
  """
    GetMxWcc_PNGraph(PNGraph Graph) -> PNGraph

    Parameters:
        Graph: TPt< TNGraph > const &

    """
  return _snap.GetMxWcc_PNGraph(*args)

def GetMxScc_PNGraph(*args):
  """
    GetMxScc_PNGraph(PNGraph Graph) -> PNGraph

    Parameters:
        Graph: TPt< TNGraph > const &

    """
  return _snap.GetMxScc_PNGraph(*args)

def GetMxBiCon_PNGraph(*args):
  """
    GetMxBiCon_PNGraph(PNGraph Graph) -> PNGraph

    Parameters:
        Graph: TPt< TNGraph > const &

    """
  return _snap.GetMxBiCon_PNGraph(*args)

def GetNodeEcc_PNGraph(*args):
  """
    GetNodeEcc_PNGraph(PNGraph Graph, int const & NId, bool const & IsDir=False) -> int

    Parameters:
        Graph: TPt< TNGraph > const &
        NId: int const &
        IsDir: bool const &

    GetNodeEcc_PNGraph(PNGraph Graph, int const & NId) -> int

    Parameters:
        Graph: TPt< TNGraph > const &
        NId: int const &

    """
  return _snap.GetNodeEcc_PNGraph(*args)

def GetPageRank_PNGraph(*args):
  """
    GetPageRank_PNGraph(PNGraph Graph, TIntFltH PRankH, double const & C=0.85, double const & Eps=1e-4, int const & MaxIter=100)

    Parameters:
        Graph: TPt< TNGraph > const &
        PRankH: TIntFltH &
        C: double const &
        Eps: double const &
        MaxIter: int const &

    GetPageRank_PNGraph(PNGraph Graph, TIntFltH PRankH, double const & C=0.85, double const & Eps=1e-4)

    Parameters:
        Graph: TPt< TNGraph > const &
        PRankH: TIntFltH &
        C: double const &
        Eps: double const &

    GetPageRank_PNGraph(PNGraph Graph, TIntFltH PRankH, double const & C=0.85)

    Parameters:
        Graph: TPt< TNGraph > const &
        PRankH: TIntFltH &
        C: double const &

    GetPageRank_PNGraph(PNGraph Graph, TIntFltH PRankH)

    Parameters:
        Graph: TPt< TNGraph > const &
        PRankH: TIntFltH &

    """
  return _snap.GetPageRank_PNGraph(*args)

def GetHits_PNGraph(*args):
  """
    GetHits_PNGraph(PNGraph Graph, TIntFltH NIdHubH, TIntFltH NIdAuthH, int const & MaxIter=20)

    Parameters:
        Graph: TPt< TNGraph > const &
        NIdHubH: TIntFltH &
        NIdAuthH: TIntFltH &
        MaxIter: int const &

    GetHits_PNGraph(PNGraph Graph, TIntFltH NIdHubH, TIntFltH NIdAuthH)

    Parameters:
        Graph: TPt< TNGraph > const &
        NIdHubH: TIntFltH &
        NIdAuthH: TIntFltH &

    """
  return _snap.GetHits_PNGraph(*args)

def CntInDegNodes_PNGraph(*args):
  """
    CntInDegNodes_PNGraph(PNGraph Graph, int const & NodeInDeg) -> int

    Parameters:
        Graph: TPt< TNGraph > const &
        NodeInDeg: int const &

    """
  return _snap.CntInDegNodes_PNGraph(*args)

def CntOutDegNodes_PNGraph(*args):
  """
    CntOutDegNodes_PNGraph(PNGraph Graph, int const & NodeOutDeg) -> int

    Parameters:
        Graph: TPt< TNGraph > const &
        NodeOutDeg: int const &

    """
  return _snap.CntOutDegNodes_PNGraph(*args)

def CntDegNodes_PNGraph(*args):
  """
    CntDegNodes_PNGraph(PNGraph Graph, int const & NodeDeg) -> int

    Parameters:
        Graph: TPt< TNGraph > const &
        NodeDeg: int const &

    """
  return _snap.CntDegNodes_PNGraph(*args)

def CntNonZNodes_PNGraph(*args):
  """
    CntNonZNodes_PNGraph(PNGraph Graph) -> int

    Parameters:
        Graph: TPt< TNGraph > const &

    """
  return _snap.CntNonZNodes_PNGraph(*args)

def CntEdgesToSet_PNGraph(*args):
  """
    CntEdgesToSet_PNGraph(PNGraph Graph, int const & NId, TIntSet NodeSet) -> int

    Parameters:
        Graph: TPt< TNGraph > const &
        NId: int const &
        NodeSet: TIntSet const &

    """
  return _snap.CntEdgesToSet_PNGraph(*args)

def GetMxDegNId_PNGraph(*args):
  """
    GetMxDegNId_PNGraph(PNGraph Graph) -> int

    Parameters:
        Graph: TPt< TNGraph > const &

    """
  return _snap.GetMxDegNId_PNGraph(*args)

def GetMxInDegNId_PNGraph(*args):
  """
    GetMxInDegNId_PNGraph(PNGraph Graph) -> int

    Parameters:
        Graph: TPt< TNGraph > const &

    """
  return _snap.GetMxInDegNId_PNGraph(*args)

def GetMxOutDegNId_PNGraph(*args):
  """
    GetMxOutDegNId_PNGraph(PNGraph Graph) -> int

    Parameters:
        Graph: TPt< TNGraph > const &

    """
  return _snap.GetMxOutDegNId_PNGraph(*args)

def GetInDegCnt_PNGraph(*args):
  """
    GetInDegCnt_PNGraph(PNGraph Graph, TIntPrV DegToCntV)

    Parameters:
        Graph: TPt< TNGraph > const &
        DegToCntV: TIntPrV &

    GetInDegCnt_PNGraph(PNGraph Graph, TFltPrV DegToCntV)

    Parameters:
        Graph: TPt< TNGraph > const &
        DegToCntV: TFltPrV &

    """
  return _snap.GetInDegCnt_PNGraph(*args)

def GetOutDegCnt_PNGraph(*args):
  """
    GetOutDegCnt_PNGraph(PNGraph Graph, TIntPrV DegToCntV)

    Parameters:
        Graph: TPt< TNGraph > const &
        DegToCntV: TIntPrV &

    GetOutDegCnt_PNGraph(PNGraph Graph, TFltPrV DegToCntV)

    Parameters:
        Graph: TPt< TNGraph > const &
        DegToCntV: TFltPrV &

    """
  return _snap.GetOutDegCnt_PNGraph(*args)

def GetDegCnt_PNGraph(*args):
  """
    GetDegCnt_PNGraph(PNGraph Graph, TIntPrV DegToCntV)

    Parameters:
        Graph: TPt< TNGraph > const &
        DegToCntV: TIntPrV &

    GetDegCnt_PNGraph(PNGraph Graph, TFltPrV DegToCntV)

    Parameters:
        Graph: TPt< TNGraph > const &
        DegToCntV: TFltPrV &

    """
  return _snap.GetDegCnt_PNGraph(*args)

def GetDegSeqV_PNGraph(*args):
  """
    GetDegSeqV_PNGraph(PNGraph Graph, TIntV DegV)

    Parameters:
        Graph: TPt< TNGraph > const &
        DegV: TIntV &

    GetDegSeqV_PNGraph(PNGraph Graph, TIntV InDegV, TIntV OutDegV)

    Parameters:
        Graph: TPt< TNGraph > const &
        InDegV: TIntV &
        OutDegV: TIntV &

    """
  return _snap.GetDegSeqV_PNGraph(*args)

def GetNodeInDegV_PNGraph(*args):
  """
    GetNodeInDegV_PNGraph(PNGraph Graph, TIntPrV NIdInDegV)

    Parameters:
        Graph: TPt< TNGraph > const &
        NIdInDegV: TIntPrV &

    """
  return _snap.GetNodeInDegV_PNGraph(*args)

def GetNodeOutDegV_PNGraph(*args):
  """
    GetNodeOutDegV_PNGraph(PNGraph Graph, TIntPrV NIdOutDegV)

    Parameters:
        Graph: TPt< TNGraph > const &
        NIdOutDegV: TIntPrV &

    """
  return _snap.GetNodeOutDegV_PNGraph(*args)

def CntUniqUndirEdges_PNGraph(*args):
  """
    CntUniqUndirEdges_PNGraph(PNGraph Graph) -> int

    Parameters:
        Graph: TPt< TNGraph > const &

    """
  return _snap.CntUniqUndirEdges_PNGraph(*args)

def CntUniqDirEdges_PNGraph(*args):
  """
    CntUniqDirEdges_PNGraph(PNGraph Graph) -> int

    Parameters:
        Graph: TPt< TNGraph > const &

    """
  return _snap.CntUniqDirEdges_PNGraph(*args)

def CntUniqBiDirEdges_PNGraph(*args):
  """
    CntUniqBiDirEdges_PNGraph(PNGraph Graph) -> int

    Parameters:
        Graph: TPt< TNGraph > const &

    """
  return _snap.CntUniqBiDirEdges_PNGraph(*args)

def CntSelfEdges_PNGraph(*args):
  """
    CntSelfEdges_PNGraph(PNGraph Graph) -> int

    Parameters:
        Graph: TPt< TNGraph > const &

    """
  return _snap.CntSelfEdges_PNGraph(*args)

def GetUnDir_PNGraph(*args):
  """
    GetUnDir_PNGraph(PNGraph Graph) -> PNGraph

    Parameters:
        Graph: TPt< TNGraph > const &

    """
  return _snap.GetUnDir_PNGraph(*args)

def MakeUnDir_PNGraph(*args):
  """
    MakeUnDir_PNGraph(PNGraph Graph)

    Parameters:
        Graph: TPt< TNGraph > const &

    """
  return _snap.MakeUnDir_PNGraph(*args)

def AddSelfEdges_PNGraph(*args):
  """
    AddSelfEdges_PNGraph(PNGraph Graph)

    Parameters:
        Graph: TPt< TNGraph > const &

    """
  return _snap.AddSelfEdges_PNGraph(*args)

def DelSelfEdges_PNGraph(*args):
  """
    DelSelfEdges_PNGraph(PNGraph Graph)

    Parameters:
        Graph: TPt< TNGraph > const &

    """
  return _snap.DelSelfEdges_PNGraph(*args)

def DelNodes_PNGraph(*args):
  """
    DelNodes_PNGraph(PNGraph Graph, TIntV NIdV)

    Parameters:
        Graph: TPt< TNGraph > &
        NIdV: TIntV const &

    """
  return _snap.DelNodes_PNGraph(*args)

def DelZeroDegNodes_PNGraph(*args):
  """
    DelZeroDegNodes_PNGraph(PNGraph Graph)

    Parameters:
        Graph: TPt< TNGraph > &

    """
  return _snap.DelZeroDegNodes_PNGraph(*args)

def DelDegKNodes_PNGraph(*args):
  """
    DelDegKNodes_PNGraph(PNGraph Graph, int const & OutDegK, int const & InDegK)

    Parameters:
        Graph: TPt< TNGraph > &
        OutDegK: int const &
        InDegK: int const &

    """
  return _snap.DelDegKNodes_PNGraph(*args)

def IsTree_PNGraph(*args):
  """
    IsTree_PNGraph(PNGraph Graph) -> bool

    Parameters:
        Graph: TPt< TNGraph > const &

    """
  return _snap.IsTree_PNGraph(*args)

def GetTreeRootNId_PNGraph(*args):
  """
    GetTreeRootNId_PNGraph(PNGraph Graph) -> int

    Parameters:
        Graph: TPt< TNGraph > const &

    """
  return _snap.GetTreeRootNId_PNGraph(*args)

def GetTreeSig_PNGraph(*args):
  """
    GetTreeSig_PNGraph(PNGraph Graph, int const & RootNId, TIntV Sig)

    Parameters:
        Graph: TPt< TNGraph > const &
        RootNId: int const &
        Sig: TIntV &

    GetTreeSig_PNGraph(PNGraph Graph, int const & RootNId, TIntV Sig, TIntPrV NodeMap)

    Parameters:
        Graph: TPt< TNGraph > const &
        RootNId: int const &
        Sig: TIntV &
        NodeMap: TIntPrV &

    """
  return _snap.GetTreeSig_PNGraph(*args)

def GetBfsTree_PNGraph(*args):
  """
    GetBfsTree_PNGraph(PNGraph Graph, int const & StartNId, bool const & FollowOut, bool const & FollowIn) -> PNGraph

    Parameters:
        Graph: TPt< TNGraph > const &
        StartNId: int const &
        FollowOut: bool const &
        FollowIn: bool const &

    """
  return _snap.GetBfsTree_PNGraph(*args)

def GetSubTreeSz_PNGraph(*args):
  """
    GetSubTreeSz_PNGraph(PNGraph Graph, int const & StartNId, bool const & FollowOut, bool const & FollowIn) -> int

    Parameters:
        Graph: TPt< TNGraph > const &
        StartNId: int const &
        FollowOut: bool const &
        FollowIn: bool const &

    """
  return _snap.GetSubTreeSz_PNGraph(*args)

def GetNodesAtHop_PNGraph(*args):
  """
    GetNodesAtHop_PNGraph(PNGraph Graph, int const & StartNId, int const & Hop, TIntV NIdV, bool const & IsDir=False) -> int

    Parameters:
        Graph: TPt< TNGraph > const &
        StartNId: int const &
        Hop: int const &
        NIdV: TIntV &
        IsDir: bool const &

    GetNodesAtHop_PNGraph(PNGraph Graph, int const & StartNId, int const & Hop, TIntV NIdV) -> int

    Parameters:
        Graph: TPt< TNGraph > const &
        StartNId: int const &
        Hop: int const &
        NIdV: TIntV &

    """
  return _snap.GetNodesAtHop_PNGraph(*args)

def GetNodesAtHops_PNGraph(*args):
  """
    GetNodesAtHops_PNGraph(PNGraph Graph, int const & StartNId, TIntPrV HopCntV, bool const & IsDir=False) -> int

    Parameters:
        Graph: TPt< TNGraph > const &
        StartNId: int const &
        HopCntV: TIntPrV &
        IsDir: bool const &

    GetNodesAtHops_PNGraph(PNGraph Graph, int const & StartNId, TIntPrV HopCntV) -> int

    Parameters:
        Graph: TPt< TNGraph > const &
        StartNId: int const &
        HopCntV: TIntPrV &

    """
  return _snap.GetNodesAtHops_PNGraph(*args)

def GetShortPath_PNGraph(*args):
  """
    GetShortPath_PNGraph(PNGraph Graph, int const & SrcNId, int const & DstNId, bool const & IsDir=False) -> int

    Parameters:
        Graph: TPt< TNGraph > const &
        SrcNId: int const &
        DstNId: int const &
        IsDir: bool const &

    GetShortPath_PNGraph(PNGraph Graph, int const & SrcNId, int const & DstNId) -> int

    Parameters:
        Graph: TPt< TNGraph > const &
        SrcNId: int const &
        DstNId: int const &

    GetShortPath_PNGraph(PNGraph Graph, int const & SrcNId, TIntH NIdToDistH, bool const & IsDir=False, int const & MaxDist=Mx) -> int

    Parameters:
        Graph: TPt< TNGraph > const &
        SrcNId: int const &
        NIdToDistH: TIntH &
        IsDir: bool const &
        MaxDist: int const &

    GetShortPath_PNGraph(PNGraph Graph, int const & SrcNId, TIntH NIdToDistH, bool const & IsDir=False) -> int

    Parameters:
        Graph: TPt< TNGraph > const &
        SrcNId: int const &
        NIdToDistH: TIntH &
        IsDir: bool const &

    GetShortPath_PNGraph(PNGraph Graph, int const & SrcNId, TIntH NIdToDistH) -> int

    Parameters:
        Graph: TPt< TNGraph > const &
        SrcNId: int const &
        NIdToDistH: TIntH &

    """
  return _snap.GetShortPath_PNGraph(*args)

def GetBfsFullDiam_PNGraph(*args):
  """
    GetBfsFullDiam_PNGraph(PNGraph Graph, int const & NTestNodes, bool const & IsDir=False) -> int

    Parameters:
        Graph: TPt< TNGraph > const &
        NTestNodes: int const &
        IsDir: bool const &

    GetBfsFullDiam_PNGraph(PNGraph Graph, int const & NTestNodes) -> int

    Parameters:
        Graph: TPt< TNGraph > const &
        NTestNodes: int const &

    """
  return _snap.GetBfsFullDiam_PNGraph(*args)

def GetBfsEffDiam_PNGraph(*args):
  """
    GetBfsEffDiam_PNGraph(PNGraph Graph, int const & NTestNodes, bool const & IsDir, double & EffDiam, int & FullDiam) -> double

    Parameters:
        Graph: TPt< TNGraph > const &
        NTestNodes: int const &
        IsDir: bool const &
        EffDiam: double &
        FullDiam: int &

    GetBfsEffDiam_PNGraph(PNGraph Graph, int const & NTestNodes, bool const & IsDir=False) -> double

    Parameters:
        Graph: TPt< TNGraph > const &
        NTestNodes: int const &
        IsDir: bool const &

    GetBfsEffDiam_PNGraph(PNGraph Graph, int const & NTestNodes) -> double

    Parameters:
        Graph: TPt< TNGraph > const &
        NTestNodes: int const &

    GetBfsEffDiam_PNGraph(PNGraph Graph, int const & NTestNodes, bool const & IsDir) -> double

    Parameters:
        Graph: TPt< TNGraph > const &
        NTestNodes: int const &
        IsDir: bool const &

    GetBfsEffDiam_PNGraph(PNGraph Graph, int const & NTestNodes, TIntV SubGraphNIdV, bool const & IsDir) -> double

    Parameters:
        Graph: TPt< TNGraph > const &
        NTestNodes: int const &
        SubGraphNIdV: TIntV const &
        IsDir: bool const &

    """
  return _snap.GetBfsEffDiam_PNGraph(*args)

def DrawGViz_PNGraph(*args):
  """
    DrawGViz_PNGraph(PNGraph Graph, TGVizLayout const & Layout, TStr PltFNm, TStr Desc=TStr(), bool const & NodeLabels=False, 
        TIntStrH NIdColorH=TIntStrH())

    Parameters:
        Graph: TPt< TNGraph > const &
        Layout: TGVizLayout const &
        PltFNm: TStr const &
        Desc: TStr const &
        NodeLabels: bool const &
        NIdColorH: TIntStrH const &

    DrawGViz_PNGraph(PNGraph Graph, TGVizLayout const & Layout, TStr PltFNm, TStr Desc=TStr(), bool const & NodeLabels=False)

    Parameters:
        Graph: TPt< TNGraph > const &
        Layout: TGVizLayout const &
        PltFNm: TStr const &
        Desc: TStr const &
        NodeLabels: bool const &

    DrawGViz_PNGraph(PNGraph Graph, TGVizLayout const & Layout, TStr PltFNm, TStr Desc=TStr())

    Parameters:
        Graph: TPt< TNGraph > const &
        Layout: TGVizLayout const &
        PltFNm: TStr const &
        Desc: TStr const &

    DrawGViz_PNGraph(PNGraph Graph, TGVizLayout const & Layout, TStr PltFNm)

    Parameters:
        Graph: TPt< TNGraph > const &
        Layout: TGVizLayout const &
        PltFNm: TStr const &

    DrawGViz_PNGraph(PNGraph Graph, TGVizLayout const & Layout, TStr PltFNm, TStr Desc, TIntStrH NodeLabelH)

    Parameters:
        Graph: TPt< TNGraph > const &
        Layout: TGVizLayout const &
        PltFNm: TStr const &
        Desc: TStr const &
        NodeLabelH: TIntStrH const &

    """
  return _snap.DrawGViz_PNGraph(*args)

def GenGrid_PNGraph(*args):
  """
    GenGrid_PNGraph(int const & Rows, int const & Cols, bool const & IsDir=True) -> PNGraph

    Parameters:
        Rows: int const &
        Cols: int const &
        IsDir: bool const &

    GenGrid_PNGraph(int const & Rows, int const & Cols) -> PNGraph

    Parameters:
        Rows: int const &
        Cols: int const &

    """
  return _snap.GenGrid_PNGraph(*args)

def GenStar_PNGraph(*args):
  """
    GenStar_PNGraph(int const & Nodes, bool const & IsDir=True) -> PNGraph

    Parameters:
        Nodes: int const &
        IsDir: bool const &

    GenStar_PNGraph(int const & Nodes) -> PNGraph

    Parameters:
        Nodes: int const &

    """
  return _snap.GenStar_PNGraph(*args)

def GenCircle_PNGraph(*args):
  """
    GenCircle_PNGraph(int const & Nodes, int const & NodeOutDeg=1, bool const & IsDir=True) -> PNGraph

    Parameters:
        Nodes: int const &
        NodeOutDeg: int const &
        IsDir: bool const &

    GenCircle_PNGraph(int const & Nodes, int const & NodeOutDeg=1) -> PNGraph

    Parameters:
        Nodes: int const &
        NodeOutDeg: int const &

    GenCircle_PNGraph(int const & Nodes) -> PNGraph

    Parameters:
        Nodes: int const &

    """
  return _snap.GenCircle_PNGraph(*args)

def GenFull_PNGraph(*args):
  """
    GenFull_PNGraph(int const & Nodes) -> PNGraph

    Parameters:
        Nodes: int const &

    """
  return _snap.GenFull_PNGraph(*args)

def GenTree_PNGraph(*args):
  """
    GenTree_PNGraph(int const & Fanout, int const & Levels, bool const & IsDir=True, bool const & ChildPointsToParent=True) -> PNGraph

    Parameters:
        Fanout: int const &
        Levels: int const &
        IsDir: bool const &
        ChildPointsToParent: bool const &

    GenTree_PNGraph(int const & Fanout, int const & Levels, bool const & IsDir=True) -> PNGraph

    Parameters:
        Fanout: int const &
        Levels: int const &
        IsDir: bool const &

    GenTree_PNGraph(int const & Fanout, int const & Levels) -> PNGraph

    Parameters:
        Fanout: int const &
        Levels: int const &

    """
  return _snap.GenTree_PNGraph(*args)

def GenBaraHierar_PNGraph(*args):
  """
    GenBaraHierar_PNGraph(int const & Levels, bool const & IsDir=True) -> PNGraph

    Parameters:
        Levels: int const &
        IsDir: bool const &

    GenBaraHierar_PNGraph(int const & Levels) -> PNGraph

    Parameters:
        Levels: int const &

    """
  return _snap.GenBaraHierar_PNGraph(*args)

def GenRndGnm_PNGraph(*args):
  """
    GenRndGnm_PNGraph(int const & Nodes, int const & Edges, bool const & IsDir=True, TRnd Rnd=Rnd) -> PNGraph

    Parameters:
        Nodes: int const &
        Edges: int const &
        IsDir: bool const &
        Rnd: TRnd &

    GenRndGnm_PNGraph(int const & Nodes, int const & Edges, bool const & IsDir=True) -> PNGraph

    Parameters:
        Nodes: int const &
        Edges: int const &
        IsDir: bool const &

    GenRndGnm_PNGraph(int const & Nodes, int const & Edges) -> PNGraph

    Parameters:
        Nodes: int const &
        Edges: int const &

    """
  return _snap.GenRndGnm_PNGraph(*args)

def LoadEdgeList_PNGraph(*args):
  """
    LoadEdgeList_PNGraph(TStr InFNm, int const & SrcColId=0, int const & DstColId=1) -> PNGraph

    Parameters:
        InFNm: TStr const &
        SrcColId: int const &
        DstColId: int const &

    LoadEdgeList_PNGraph(TStr InFNm, int const & SrcColId=0) -> PNGraph

    Parameters:
        InFNm: TStr const &
        SrcColId: int const &

    LoadEdgeList_PNGraph(TStr InFNm) -> PNGraph

    Parameters:
        InFNm: TStr const &

    LoadEdgeList_PNGraph(TStr InFNm, int const & SrcColId, int const & DstColId, char const & Separator) -> PNGraph

    Parameters:
        InFNm: TStr const &
        SrcColId: int const &
        DstColId: int const &
        Separator: char const &

    """
  return _snap.LoadEdgeList_PNGraph(*args)

def LoadEdgeListStr_PNGraph(*args):
  """
    LoadEdgeListStr_PNGraph(TStr InFNm, int const & SrcColId=0, int const & DstColId=1) -> PNGraph

    Parameters:
        InFNm: TStr const &
        SrcColId: int const &
        DstColId: int const &

    LoadEdgeListStr_PNGraph(TStr InFNm, int const & SrcColId=0) -> PNGraph

    Parameters:
        InFNm: TStr const &
        SrcColId: int const &

    LoadEdgeListStr_PNGraph(TStr InFNm) -> PNGraph

    Parameters:
        InFNm: TStr const &

    LoadEdgeListStr_PNGraph(TStr InFNm, int const & SrcColId, int const & DstColId, TStrHash< TInt > & StrToNIdH) -> PNGraph

    Parameters:
        InFNm: TStr const &
        SrcColId: int const &
        DstColId: int const &
        StrToNIdH: TStrHash< TInt > &

    """
  return _snap.LoadEdgeListStr_PNGraph(*args)

def LoadConnList_PNGraph(*args):
  """
    LoadConnList_PNGraph(TStr InFNm) -> PNGraph

    Parameters:
        InFNm: TStr const &

    """
  return _snap.LoadConnList_PNGraph(*args)

def LoadConnListStr_PNGraph(*args):
  """
    LoadConnListStr_PNGraph(TStr InFNm, TStrHash< TInt > & StrToNIdH) -> PNGraph

    Parameters:
        InFNm: TStr const &
        StrToNIdH: TStrHash< TInt > &

    """
  return _snap.LoadConnListStr_PNGraph(*args)

def LoadPajek_PNGraph(*args):
  """
    LoadPajek_PNGraph(TStr InFNm) -> PNGraph

    Parameters:
        InFNm: TStr const &

    """
  return _snap.LoadPajek_PNGraph(*args)

def SaveEdgeList_PNGraph(*args):
  """
    SaveEdgeList_PNGraph(PNGraph Graph, TStr OutFNm, TStr Desc=TStr())

    Parameters:
        Graph: TPt< TNGraph > const &
        OutFNm: TStr const &
        Desc: TStr const &

    SaveEdgeList_PNGraph(PNGraph Graph, TStr OutFNm)

    Parameters:
        Graph: TPt< TNGraph > const &
        OutFNm: TStr const &

    """
  return _snap.SaveEdgeList_PNGraph(*args)

def SavePajek_PNGraph(*args):
  """
    SavePajek_PNGraph(PNGraph Graph, TStr OutFNm)

    Parameters:
        Graph: TPt< TNGraph > const &
        OutFNm: TStr const &

    SavePajek_PNGraph(PNGraph Graph, TStr OutFNm, TIntStrH NIdColorH)

    Parameters:
        Graph: TPt< TNGraph > const &
        OutFNm: TStr const &
        NIdColorH: TIntStrH const &

    SavePajek_PNGraph(PNGraph Graph, TStr OutFNm, TIntStrH NIdColorH, TIntStrH NIdLabelH)

    Parameters:
        Graph: TPt< TNGraph > const &
        OutFNm: TStr const &
        NIdColorH: TIntStrH const &
        NIdLabelH: TIntStrH const &

    SavePajek_PNGraph(PNGraph Graph, TStr OutFNm, TIntStrH NIdColorH, TIntStrH NIdLabelH, TIntStrH EIdColorH)

    Parameters:
        Graph: TPt< TNGraph > const &
        OutFNm: TStr const &
        NIdColorH: TIntStrH const &
        NIdLabelH: TIntStrH const &
        EIdColorH: TIntStrH const &

    """
  return _snap.SavePajek_PNGraph(*args)

def SaveMatlabSparseMtx_PNGraph(*args):
  """
    SaveMatlabSparseMtx_PNGraph(PNGraph Graph, TStr OutFNm)

    Parameters:
        Graph: TPt< TNGraph > const &
        OutFNm: TStr const &

    """
  return _snap.SaveMatlabSparseMtx_PNGraph(*args)

def SaveGViz_PNGraph(*args):
  """
    SaveGViz_PNGraph(PNGraph Graph, TStr OutFNm, TStr Desc=TStr(), bool const & NodeLabels=False, TIntStrH NIdColorH=TIntStrH())

    Parameters:
        Graph: TPt< TNGraph > const &
        OutFNm: TStr const &
        Desc: TStr const &
        NodeLabels: bool const &
        NIdColorH: TIntStrH const &

    SaveGViz_PNGraph(PNGraph Graph, TStr OutFNm, TStr Desc=TStr(), bool const & NodeLabels=False)

    Parameters:
        Graph: TPt< TNGraph > const &
        OutFNm: TStr const &
        Desc: TStr const &
        NodeLabels: bool const &

    SaveGViz_PNGraph(PNGraph Graph, TStr OutFNm, TStr Desc=TStr())

    Parameters:
        Graph: TPt< TNGraph > const &
        OutFNm: TStr const &
        Desc: TStr const &

    SaveGViz_PNGraph(PNGraph Graph, TStr OutFNm)

    Parameters:
        Graph: TPt< TNGraph > const &
        OutFNm: TStr const &

    SaveGViz_PNGraph(PNGraph Graph, TStr OutFNm, TStr Desc, TIntStrH NIdLabelH)

    Parameters:
        Graph: TPt< TNGraph > const &
        OutFNm: TStr const &
        Desc: TStr const &
        NIdLabelH: TIntStrH const &

    """
  return _snap.SaveGViz_PNGraph(*args)

def GetKCore_PNGraph(*args):
  """
    GetKCore_PNGraph(PNGraph Graph, int const & K) -> PNGraph

    Parameters:
        Graph: TPt< TNGraph > const &
        K: int const &

    """
  return _snap.GetKCore_PNGraph(*args)

def GetKCoreEdges_PNGraph(*args):
  """
    GetKCoreEdges_PNGraph(PNGraph Graph, TIntPrV CoreIdSzV) -> int

    Parameters:
        Graph: TPt< TNGraph > const &
        CoreIdSzV: TIntPrV &

    """
  return _snap.GetKCoreEdges_PNGraph(*args)

def GetKCoreNodes_PNGraph(*args):
  """
    GetKCoreNodes_PNGraph(PNGraph Graph, TIntPrV CoreIdSzV) -> int

    Parameters:
        Graph: TPt< TNGraph > const &
        CoreIdSzV: TIntPrV &

    """
  return _snap.GetKCoreNodes_PNGraph(*args)

def ConvertGraph_PNGraph_PUNGraph(*args):
  """
    ConvertGraph_PNGraph_PUNGraph(PUNGraph InGraph, bool const & RenumberNodes=False) -> PNGraph

    Parameters:
        InGraph: TPt< TUNGraph > const &
        RenumberNodes: bool const &

    ConvertGraph_PNGraph_PUNGraph(PUNGraph InGraph) -> PNGraph

    Parameters:
        InGraph: TPt< TUNGraph > const &

    """
  return _snap.ConvertGraph_PNGraph_PUNGraph(*args)

def ConvertGraph_PNGraph_PNGraph(*args):
  """
    ConvertGraph_PNGraph_PNGraph(PNGraph InGraph, bool const & RenumberNodes=False) -> PNGraph

    Parameters:
        InGraph: TPt< TNGraph > const &
        RenumberNodes: bool const &

    ConvertGraph_PNGraph_PNGraph(PNGraph InGraph) -> PNGraph

    Parameters:
        InGraph: TPt< TNGraph > const &

    """
  return _snap.ConvertGraph_PNGraph_PNGraph(*args)

def ConvertGraph_PNGraph_PNEANet(*args):
  """
    ConvertGraph_PNGraph_PNEANet(PNEANet InGraph, bool const & RenumberNodes=False) -> PNGraph

    Parameters:
        InGraph: TPt< TNEANet > const &
        RenumberNodes: bool const &

    ConvertGraph_PNGraph_PNEANet(PNEANet InGraph) -> PNGraph

    Parameters:
        InGraph: TPt< TNEANet > const &

    """
  return _snap.ConvertGraph_PNGraph_PNEANet(*args)

def ConvertSubGraph_PNGraph_PUNGraph(*args):
  """
    ConvertSubGraph_PNGraph_PUNGraph(PUNGraph InGraph, TIntV NIdV, bool const & RenumberNodes=False) -> PNGraph

    Parameters:
        InGraph: TPt< TUNGraph > const &
        NIdV: TIntV const &
        RenumberNodes: bool const &

    ConvertSubGraph_PNGraph_PUNGraph(PUNGraph InGraph, TIntV NIdV) -> PNGraph

    Parameters:
        InGraph: TPt< TUNGraph > const &
        NIdV: TIntV const &

    """
  return _snap.ConvertSubGraph_PNGraph_PUNGraph(*args)

def ConvertSubGraph_PNGraph_PNGraph(*args):
  """
    ConvertSubGraph_PNGraph_PNGraph(PNGraph InGraph, TIntV NIdV, bool const & RenumberNodes=False) -> PNGraph

    Parameters:
        InGraph: TPt< TNGraph > const &
        NIdV: TIntV const &
        RenumberNodes: bool const &

    ConvertSubGraph_PNGraph_PNGraph(PNGraph InGraph, TIntV NIdV) -> PNGraph

    Parameters:
        InGraph: TPt< TNGraph > const &
        NIdV: TIntV const &

    """
  return _snap.ConvertSubGraph_PNGraph_PNGraph(*args)

def ConvertSubGraph_PNGraph_PNEANet(*args):
  """
    ConvertSubGraph_PNGraph_PNEANet(PNEANet InGraph, TIntV NIdV, bool const & RenumberNodes=False) -> PNGraph

    Parameters:
        InGraph: TPt< TNEANet > const &
        NIdV: TIntV const &
        RenumberNodes: bool const &

    ConvertSubGraph_PNGraph_PNEANet(PNEANet InGraph, TIntV NIdV) -> PNGraph

    Parameters:
        InGraph: TPt< TNEANet > const &
        NIdV: TIntV const &

    """
  return _snap.ConvertSubGraph_PNGraph_PNEANet(*args)

def ConvertESubGraph_PNGraph_PNEANet(*args):
  """
    ConvertESubGraph_PNGraph_PNEANet(PNEANet InGraph, TIntV EIdV, bool const & RenumberNodes=False) -> PNGraph

    Parameters:
        InGraph: TPt< TNEANet > const &
        EIdV: TIntV const &
        RenumberNodes: bool const &

    ConvertESubGraph_PNGraph_PNEANet(PNEANet InGraph, TIntV EIdV) -> PNGraph

    Parameters:
        InGraph: TPt< TNEANet > const &
        EIdV: TIntV const &

    """
  return _snap.ConvertESubGraph_PNGraph_PNEANet(*args)

def GetSubGraph_PNGraph(*args):
  """
    GetSubGraph_PNGraph(PNGraph Graph, TIntV NIdV) -> PNGraph

    Parameters:
        Graph: TPt< TNGraph > const &
        NIdV: TIntV const &

    """
  return _snap.GetSubGraph_PNGraph(*args)

def GetRndSubGraph_PNGraph(*args):
  """
    GetRndSubGraph_PNGraph(PNGraph Graph, int const & NNodes) -> PNGraph

    Parameters:
        Graph: TPt< TNGraph > const &
        NNodes: int const &

    """
  return _snap.GetRndSubGraph_PNGraph(*args)

def GetRndESubGraph_PNGraph(*args):
  """
    GetRndESubGraph_PNGraph(PNGraph Graph, int const & NEdges) -> PNGraph

    Parameters:
        Graph: TPt< TNGraph > const &
        NEdges: int const &

    """
  return _snap.GetRndESubGraph_PNGraph(*args)

def GetClustCf_PNGraph(*args):
  """
    GetClustCf_PNGraph(PNGraph Graph, int SampleNodes=-1) -> double

    Parameters:
        Graph: TPt< TNGraph > const &
        SampleNodes: int

    GetClustCf_PNGraph(PNGraph Graph) -> double

    Parameters:
        Graph: TPt< TNGraph > const &

    GetClustCf_PNGraph(PNGraph Graph, TFltPrV DegToCCfV, int SampleNodes=-1) -> double

    Parameters:
        Graph: TPt< TNGraph > const &
        DegToCCfV: TFltPrV &
        SampleNodes: int

    GetClustCf_PNGraph(PNGraph Graph, TFltPrV DegToCCfV) -> double

    Parameters:
        Graph: TPt< TNGraph > const &
        DegToCCfV: TFltPrV &

    GetClustCf_PNGraph(PNGraph Graph, TFltPrV DegToCCfV, int64 & ClosedTriadsX, int64 & OpenTriadsX, int SampleNodes=-1) -> double

    Parameters:
        Graph: TPt< TNGraph > const &
        DegToCCfV: TFltPrV &
        ClosedTriadsX: int64 &
        OpenTriadsX: int64 &
        SampleNodes: int

    GetClustCf_PNGraph(PNGraph Graph, TFltPrV DegToCCfV, int64 & ClosedTriadsX, int64 & OpenTriadsX) -> double

    Parameters:
        Graph: TPt< TNGraph > const &
        DegToCCfV: TFltPrV &
        ClosedTriadsX: int64 &
        OpenTriadsX: int64 &

    """
  return _snap.GetClustCf_PNGraph(*args)

def GetNodeClustCf_PNGraph(*args):
  """
    GetNodeClustCf_PNGraph(PNGraph Graph, int const & NId) -> double

    Parameters:
        Graph: TPt< TNGraph > const &
        NId: int const &

    GetNodeClustCf_PNGraph(PNGraph Graph, TIntFltH NIdCCfH)

    Parameters:
        Graph: TPt< TNGraph > const &
        NIdCCfH: TIntFltH &

    """
  return _snap.GetNodeClustCf_PNGraph(*args)

def GetTriads_PNGraph(*args):
  """
    GetTriads_PNGraph(PNGraph Graph, int64 & ClosedTriads, int64 & OpenTriads, int SampleNodes=-1) -> int64

    Parameters:
        Graph: TPt< TNGraph > const &
        ClosedTriads: int64 &
        OpenTriads: int64 &
        SampleNodes: int

    GetTriads_PNGraph(PNGraph Graph, int64 & ClosedTriads, int64 & OpenTriads) -> int64

    Parameters:
        Graph: TPt< TNGraph > const &
        ClosedTriads: int64 &
        OpenTriads: int64 &

    GetTriads_PNGraph(PNGraph Graph, int SampleNodes=-1) -> int64

    Parameters:
        Graph: TPt< TNGraph > const &
        SampleNodes: int

    GetTriads_PNGraph(PNGraph Graph) -> int64

    Parameters:
        Graph: TPt< TNGraph > const &

    GetTriads_PNGraph(PNGraph Graph, TIntTrV NIdCOTriadV, int SampleNodes=-1)

    Parameters:
        Graph: TPt< TNGraph > const &
        NIdCOTriadV: TIntTrV &
        SampleNodes: int

    GetTriads_PNGraph(PNGraph Graph, TIntTrV NIdCOTriadV)

    Parameters:
        Graph: TPt< TNGraph > const &
        NIdCOTriadV: TIntTrV &

    """
  return _snap.GetTriads_PNGraph(*args)

def GetTriadEdges_PNGraph(*args):
  """
    GetTriadEdges_PNGraph(PNGraph Graph, int SampleEdges=-1) -> int

    Parameters:
        Graph: TPt< TNGraph > const &
        SampleEdges: int

    GetTriadEdges_PNGraph(PNGraph Graph) -> int

    Parameters:
        Graph: TPt< TNGraph > const &

    """
  return _snap.GetTriadEdges_PNGraph(*args)

def GetNodeTriads_PNGraph(*args):
  """
    GetNodeTriads_PNGraph(PNGraph Graph, int const & NId) -> int

    Parameters:
        Graph: TPt< TNGraph > const &
        NId: int const &

    GetNodeTriads_PNGraph(PNGraph Graph, int const & NId) -> int

    Parameters:
        Graph: TPt< TNGraph > const &
        NId: int const &

    GetNodeTriads_PNGraph(PNGraph Graph, int const & NId, TIntSet GroupSet, int & OutGroupEdgesX) -> int

    Parameters:
        Graph: TPt< TNGraph > const &
        NId: int const &
        GroupSet: TIntSet const &
        OutGroupEdgesX: int &

    """
  return _snap.GetNodeTriads_PNGraph(*args)

def GetTriadParticip_PNGraph(*args):
  """
    GetTriadParticip_PNGraph(PNGraph Graph, TIntPrV TriadCntV)

    Parameters:
        Graph: TPt< TNGraph > const &
        TriadCntV: TIntPrV &

    """
  return _snap.GetTriadParticip_PNGraph(*args)

def GetCmnNbrs_PNGraph(*args):
  """
    GetCmnNbrs_PNGraph(PNGraph Graph, int const & NId1, int const & NId2) -> int

    Parameters:
        Graph: TPt< TNGraph > const &
        NId1: int const &
        NId2: int const &

    GetCmnNbrs_PNGraph(PNGraph Graph, int const & NId1, int const & NId2, TIntV NbrV) -> int

    Parameters:
        Graph: TPt< TNGraph > const &
        NId1: int const &
        NId2: int const &
        NbrV: TIntV &

    """
  return _snap.GetCmnNbrs_PNGraph(*args)

def GetModularity_PNGraph(*args):
  """
    GetModularity_PNGraph(PNGraph G, TIntV NIdV, int GEdges=-1) -> double

    Parameters:
        G: TPt< TNGraph > const &
        NIdV: TIntV const &
        GEdges: int

    GetModularity_PNGraph(PNGraph G, TIntV NIdV) -> double

    Parameters:
        G: TPt< TNGraph > const &
        NIdV: TIntV const &

    GetModularity_PNGraph(PNGraph G, TCnComV CmtyV, int GEdges=-1) -> double

    Parameters:
        G: TPt< TNGraph > const &
        CmtyV: TCnComV const &
        GEdges: int

    GetModularity_PNGraph(PNGraph G, TCnComV CmtyV) -> double

    Parameters:
        G: TPt< TNGraph > const &
        CmtyV: TCnComV const &

    """
  return _snap.GetModularity_PNGraph(*args)

def GetEdgesInOut_PNGraph(*args):
  """
    GetEdgesInOut_PNGraph(PNGraph Graph, TIntV NIdV)

    Parameters:
        Graph: TPt< TNGraph > const &
        NIdV: TIntV const &

    """
  return _snap.GetEdgesInOut_PNGraph(*args)

def GetAnf_PNGraph(*args):
  """
    GetAnf_PNGraph(PNGraph Graph, int const & SrcNId, TIntFltKdV DistNbrsV, int const & MxDist, bool const & IsDir, 
        int const & NApprox=32)

    Parameters:
        Graph: TPt< TNGraph > const &
        SrcNId: int const &
        DistNbrsV: TIntFltKdV &
        MxDist: int const &
        IsDir: bool const &
        NApprox: int const &

    GetAnf_PNGraph(PNGraph Graph, int const & SrcNId, TIntFltKdV DistNbrsV, int const & MxDist, bool const & IsDir)

    Parameters:
        Graph: TPt< TNGraph > const &
        SrcNId: int const &
        DistNbrsV: TIntFltKdV &
        MxDist: int const &
        IsDir: bool const &

    GetAnf_PNGraph(PNGraph Graph, TIntFltKdV DistNbrsV, int const & MxDist, bool const & IsDir, int const & NApprox=32)

    Parameters:
        Graph: TPt< TNGraph > const &
        DistNbrsV: TIntFltKdV &
        MxDist: int const &
        IsDir: bool const &
        NApprox: int const &

    GetAnf_PNGraph(PNGraph Graph, TIntFltKdV DistNbrsV, int const & MxDist, bool const & IsDir)

    Parameters:
        Graph: TPt< TNGraph > const &
        DistNbrsV: TIntFltKdV &
        MxDist: int const &
        IsDir: bool const &

    """
  return _snap.GetAnf_PNGraph(*args)

def GetAnfEffDiam_PNGraph(*args):
  """
    GetAnfEffDiam_PNGraph(PNGraph Graph, bool const & IsDir, double const & Percentile, int const & NApprox) -> double

    Parameters:
        Graph: TPt< TNGraph > const &
        IsDir: bool const &
        Percentile: double const &
        NApprox: int const &

    GetAnfEffDiam_PNGraph(PNGraph Graph, int const NRuns=1, int NApprox=-1) -> double

    Parameters:
        Graph: TPt< TNGraph > const &
        NRuns: int const
        NApprox: int

    GetAnfEffDiam_PNGraph(PNGraph Graph, int const NRuns=1) -> double

    Parameters:
        Graph: TPt< TNGraph > const &
        NRuns: int const

    GetAnfEffDiam_PNGraph(PNGraph Graph) -> double

    Parameters:
        Graph: TPt< TNGraph > const &

    """
  return _snap.GetAnfEffDiam_PNGraph(*args)

def TestAnf_PNGraph():
  """TestAnf_PNGraph()"""
  return _snap.TestAnf_PNGraph()

def PlotKCoreEdges_PNGraph(*args):
  """
    PlotKCoreEdges_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr=TStr())

    Parameters:
        Graph: TPt< TNGraph > const &
        FNmPref: TStr const &
        DescStr: TStr

    PlotKCoreEdges_PNGraph(PNGraph Graph, TStr FNmPref)

    Parameters:
        Graph: TPt< TNGraph > const &
        FNmPref: TStr const &

    """
  return _snap.PlotKCoreEdges_PNGraph(*args)

def PlotKCoreNodes_PNGraph(*args):
  """
    PlotKCoreNodes_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr=TStr())

    Parameters:
        Graph: TPt< TNGraph > const &
        FNmPref: TStr const &
        DescStr: TStr

    PlotKCoreNodes_PNGraph(PNGraph Graph, TStr FNmPref)

    Parameters:
        Graph: TPt< TNGraph > const &
        FNmPref: TStr const &

    """
  return _snap.PlotKCoreNodes_PNGraph(*args)

def PlotShortPathDistr_PNGraph(*args):
  """
    PlotShortPathDistr_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr=TStr(), int TestNodes=Mx)

    Parameters:
        Graph: TPt< TNGraph > const &
        FNmPref: TStr const &
        DescStr: TStr
        TestNodes: int

    PlotShortPathDistr_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr=TStr())

    Parameters:
        Graph: TPt< TNGraph > const &
        FNmPref: TStr const &
        DescStr: TStr

    PlotShortPathDistr_PNGraph(PNGraph Graph, TStr FNmPref)

    Parameters:
        Graph: TPt< TNGraph > const &
        FNmPref: TStr const &

    """
  return _snap.PlotShortPathDistr_PNGraph(*args)

def PlotHops_PNGraph(*args):
  """
    PlotHops_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr=TStr(), bool const & IsDir=False, int const & NApprox=32)

    Parameters:
        Graph: TPt< TNGraph > const &
        FNmPref: TStr const &
        DescStr: TStr
        IsDir: bool const &
        NApprox: int const &

    PlotHops_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr=TStr(), bool const & IsDir=False)

    Parameters:
        Graph: TPt< TNGraph > const &
        FNmPref: TStr const &
        DescStr: TStr
        IsDir: bool const &

    PlotHops_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr=TStr())

    Parameters:
        Graph: TPt< TNGraph > const &
        FNmPref: TStr const &
        DescStr: TStr

    PlotHops_PNGraph(PNGraph Graph, TStr FNmPref)

    Parameters:
        Graph: TPt< TNGraph > const &
        FNmPref: TStr const &

    """
  return _snap.PlotHops_PNGraph(*args)

def PlotClustCf_PNGraph(*args):
  """
    PlotClustCf_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr=TStr())

    Parameters:
        Graph: TPt< TNGraph > const &
        FNmPref: TStr const &
        DescStr: TStr

    PlotClustCf_PNGraph(PNGraph Graph, TStr FNmPref)

    Parameters:
        Graph: TPt< TNGraph > const &
        FNmPref: TStr const &

    """
  return _snap.PlotClustCf_PNGraph(*args)

def PlotSccDistr_PNGraph(*args):
  """
    PlotSccDistr_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr=TStr())

    Parameters:
        Graph: TPt< TNGraph > const &
        FNmPref: TStr const &
        DescStr: TStr

    PlotSccDistr_PNGraph(PNGraph Graph, TStr FNmPref)

    Parameters:
        Graph: TPt< TNGraph > const &
        FNmPref: TStr const &

    """
  return _snap.PlotSccDistr_PNGraph(*args)

def PlotWccDistr_PNGraph(*args):
  """
    PlotWccDistr_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr=TStr())

    Parameters:
        Graph: TPt< TNGraph > const &
        FNmPref: TStr const &
        DescStr: TStr

    PlotWccDistr_PNGraph(PNGraph Graph, TStr FNmPref)

    Parameters:
        Graph: TPt< TNGraph > const &
        FNmPref: TStr const &

    """
  return _snap.PlotWccDistr_PNGraph(*args)

def PlotOutDegDistr_PNGraph(*args):
  """
    PlotOutDegDistr_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr=TStr(), bool const & PlotCCdf=False, bool const & PowerFit=False)

    Parameters:
        Graph: TPt< TNGraph > const &
        FNmPref: TStr const &
        DescStr: TStr
        PlotCCdf: bool const &
        PowerFit: bool const &

    PlotOutDegDistr_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr=TStr(), bool const & PlotCCdf=False)

    Parameters:
        Graph: TPt< TNGraph > const &
        FNmPref: TStr const &
        DescStr: TStr
        PlotCCdf: bool const &

    PlotOutDegDistr_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr=TStr())

    Parameters:
        Graph: TPt< TNGraph > const &
        FNmPref: TStr const &
        DescStr: TStr

    PlotOutDegDistr_PNGraph(PNGraph Graph, TStr FNmPref)

    Parameters:
        Graph: TPt< TNGraph > const &
        FNmPref: TStr const &

    """
  return _snap.PlotOutDegDistr_PNGraph(*args)

def PlotInDegDistr_PNGraph(*args):
  """
    PlotInDegDistr_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr=TStr(), bool const & PlotCCdf=False, bool const & PowerFit=False)

    Parameters:
        Graph: TPt< TNGraph > const &
        FNmPref: TStr const &
        DescStr: TStr
        PlotCCdf: bool const &
        PowerFit: bool const &

    PlotInDegDistr_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr=TStr(), bool const & PlotCCdf=False)

    Parameters:
        Graph: TPt< TNGraph > const &
        FNmPref: TStr const &
        DescStr: TStr
        PlotCCdf: bool const &

    PlotInDegDistr_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr=TStr())

    Parameters:
        Graph: TPt< TNGraph > const &
        FNmPref: TStr const &
        DescStr: TStr

    PlotInDegDistr_PNGraph(PNGraph Graph, TStr FNmPref)

    Parameters:
        Graph: TPt< TNGraph > const &
        FNmPref: TStr const &

    """
  return _snap.PlotInDegDistr_PNGraph(*args)

def PercentDegree_PNGraph(*args):
  """
    PercentDegree_PNGraph(PNGraph Graph, int const Threshold=0) -> double

    Parameters:
        Graph: TPt< TNGraph > const &
        Threshold: int const

    PercentDegree_PNGraph(PNGraph Graph) -> double

    Parameters:
        Graph: TPt< TNGraph > const &

    """
  return _snap.PercentDegree_PNGraph(*args)

def NodesGTEDegree_PNGraph(*args):
  """
    NodesGTEDegree_PNGraph(PNGraph Graph, int const Threshold=0) -> int

    Parameters:
        Graph: TPt< TNGraph > const &
        Threshold: int const

    NodesGTEDegree_PNGraph(PNGraph Graph) -> int

    Parameters:
        Graph: TPt< TNGraph > const &

    """
  return _snap.NodesGTEDegree_PNGraph(*args)

def MxDegree_PNGraph(*args):
  """
    MxDegree_PNGraph(PNGraph Graph) -> int

    Parameters:
        Graph: TPt< TNGraph > const &

    """
  return _snap.MxDegree_PNGraph(*args)

def PercentMxWcc_PNGraph(*args):
  """
    PercentMxWcc_PNGraph(PNGraph Graph) -> double

    Parameters:
        Graph: TPt< TNGraph > const &

    """
  return _snap.PercentMxWcc_PNGraph(*args)

def PercentMxScc_PNGraph(*args):
  """
    PercentMxScc_PNGraph(PNGraph Graph) -> double

    Parameters:
        Graph: TPt< TNGraph > const &

    """
  return _snap.PercentMxScc_PNGraph(*args)
# redefine TUNGraphEdgeI.GetId to return a pair of nodes rather than -1
def GetId(self):
    return (self.GetSrcNId(), self.GetDstNId())

TUNGraphEdgeI.GetId = GetId


def PrintGraphStatTable_PUNGraph(*args):
  """
    PrintGraphStatTable_PUNGraph(PUNGraph G, TStr OutFNm, TStr Desc="")

    Parameters:
        G: TPt< TUNGraph > const &
        OutFNm: TStr
        Desc: TStr

    PrintGraphStatTable_PUNGraph(PUNGraph G, TStr OutFNm)

    Parameters:
        G: TPt< TUNGraph > const &
        OutFNm: TStr

    """
  return _snap.PrintGraphStatTable_PUNGraph(*args)
class PUNGraph(object):
    """Proxy of C++ TPt<(TUNGraph)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def New():
        """New() -> PUNGraph"""
        return _snap.PUNGraph_New()

    New = staticmethod(New)
    __swig_destroy__ = _snap.delete_PUNGraph
    def Save(self, *args):
        """
        Save(PUNGraph self, TSOut SOut)

        Parameters:
            SOut: TSOut &

        """
        return _snap.PUNGraph_Save(self, *args)

    def __deref__(self):
        """
        __deref__(PUNGraph self) -> TUNGraph

        Parameters:
            self: TPt< TUNGraph > const *

        """
        return _snap.PUNGraph___deref__(self)

    def __ref__(self):
        """
        __ref__(PUNGraph self) -> TUNGraph

        Parameters:
            self: TPt< TUNGraph > const *

        """
        return _snap.PUNGraph___ref__(self)

    def __call__(self):
        """
        __call__(PUNGraph self) -> TUNGraph

        Parameters:
            self: TPt< TUNGraph > const *

        """
        return _snap.PUNGraph___call__(self)

    def Empty(self):
        """
        Empty(PUNGraph self) -> bool

        Parameters:
            self: TPt< TUNGraph > const *

        """
        return _snap.PUNGraph_Empty(self)

    def Clr(self):
        """
        Clr(PUNGraph self)

        Parameters:
            self: TPt< TUNGraph > *

        """
        return _snap.PUNGraph_Clr(self)

    def GetRefs(self):
        """
        GetRefs(PUNGraph self) -> int

        Parameters:
            self: TPt< TUNGraph > const *

        """
        return _snap.PUNGraph_GetRefs(self)

    def Load(self, *args):
        """
        Load(PUNGraph self, TSIn SIn) -> PUNGraph

        Parameters:
            SIn: TSIn &

        """
        return _snap.PUNGraph_Load(self, *args)

    def HasFlag(self, *args):
        """
        HasFlag(PUNGraph self, TGraphFlag const & Flag) -> bool

        Parameters:
            Flag: TGraphFlag const &

        """
        return _snap.PUNGraph_HasFlag(self, *args)

    def GetNodes(self):
        """
        GetNodes(PUNGraph self) -> int

        Parameters:
            self: TPt< TUNGraph > const *

        """
        return _snap.PUNGraph_GetNodes(self)

    def AddNode(self, *args):
        """
        AddNode(PUNGraph self, int NId=-1) -> int

        Parameters:
            NId: int

        AddNode(PUNGraph self) -> int
        AddNode(PUNGraph self, TUNGraph::TNodeI const & NodeI) -> int

        Parameters:
            NodeI: TUNGraph::TNodeI const &

        AddNode(PUNGraph self, int const & NId, TIntV NbrNIdV) -> int

        Parameters:
            NId: int const &
            NbrNIdV: TIntV const &

        AddNode(PUNGraph self, int const & NId, TVecPool< TInt > const & Pool, int const & NIdVId) -> int

        Parameters:
            NId: int const &
            Pool: TVecPool< TInt > const &
            NIdVId: int const &

        """
        return _snap.PUNGraph_AddNode(self, *args)

    def DelNode(self, *args):
        """
        DelNode(PUNGraph self, int const & NId)

        Parameters:
            NId: int const &

        DelNode(PUNGraph self, TUNGraph::TNode const & NodeI)

        Parameters:
            NodeI: TUNGraph::TNode const &

        """
        return _snap.PUNGraph_DelNode(self, *args)

    def IsNode(self, *args):
        """
        IsNode(PUNGraph self, int const & NId) -> bool

        Parameters:
            NId: int const &

        """
        return _snap.PUNGraph_IsNode(self, *args)

    def BegNI(self, *args):
        """
        BegNI(PUNGraph self) -> TUNGraph::TNodeI
        BegNI(PUNGraph self) -> TUNGraphNodeI

        Parameters:
            self: TPt< TUNGraph > *

        """
        return _snap.PUNGraph_BegNI(self, *args)

    def EndNI(self, *args):
        """
        EndNI(PUNGraph self) -> TUNGraph::TNodeI
        EndNI(PUNGraph self) -> TUNGraphNodeI

        Parameters:
            self: TPt< TUNGraph > *

        """
        return _snap.PUNGraph_EndNI(self, *args)

    def GetNI(self, *args):
        """
        GetNI(PUNGraph self, int const & NId) -> TUNGraph::TNodeI

        Parameters:
            NId: int const &

        GetNI(PUNGraph self, int const & NId) -> TUNGraphNodeI

        Parameters:
            NId: int const &

        """
        return _snap.PUNGraph_GetNI(self, *args)

    def GetMxNId(self):
        """
        GetMxNId(PUNGraph self) -> int

        Parameters:
            self: TPt< TUNGraph > const *

        """
        return _snap.PUNGraph_GetMxNId(self)

    def GetEdges(self):
        """
        GetEdges(PUNGraph self) -> int

        Parameters:
            self: TPt< TUNGraph > const *

        """
        return _snap.PUNGraph_GetEdges(self)

    def AddEdge(self, *args):
        """
        AddEdge(PUNGraph self, int const & SrcNId, int const & DstNId) -> int

        Parameters:
            SrcNId: int const &
            DstNId: int const &

        AddEdge(PUNGraph self, TUNGraph::TEdgeI const & EdgeI) -> int

        Parameters:
            EdgeI: TUNGraph::TEdgeI const &

        """
        return _snap.PUNGraph_AddEdge(self, *args)

    def DelEdge(self, *args):
        """
        DelEdge(PUNGraph self, int const & SrcNId, int const & DstNId)

        Parameters:
            SrcNId: int const &
            DstNId: int const &

        """
        return _snap.PUNGraph_DelEdge(self, *args)

    def IsEdge(self, *args):
        """
        IsEdge(PUNGraph self, int const & SrcNId, int const & DstNId) -> bool

        Parameters:
            SrcNId: int const &
            DstNId: int const &

        """
        return _snap.PUNGraph_IsEdge(self, *args)

    def BegEI(self, *args):
        """
        BegEI(PUNGraph self) -> TUNGraph::TEdgeI
        BegEI(PUNGraph self) -> TUNGraphEdgeI

        Parameters:
            self: TPt< TUNGraph > *

        """
        return _snap.PUNGraph_BegEI(self, *args)

    def EndEI(self, *args):
        """
        EndEI(PUNGraph self) -> TUNGraph::TEdgeI
        EndEI(PUNGraph self) -> TUNGraphEdgeI

        Parameters:
            self: TPt< TUNGraph > *

        """
        return _snap.PUNGraph_EndEI(self, *args)

    def GetEI(self, *args):
        """
        GetEI(PUNGraph self, int const & SrcNId, int const & DstNId) -> TUNGraph::TEdgeI

        Parameters:
            SrcNId: int const &
            DstNId: int const &

        """
        return _snap.PUNGraph_GetEI(self, *args)

    def GetRndNId(self, *args):
        """
        GetRndNId(PUNGraph self, TRnd Rnd=Rnd) -> int

        Parameters:
            Rnd: TRnd &

        GetRndNId(PUNGraph self) -> int

        Parameters:
            self: TPt< TUNGraph > *

        """
        return _snap.PUNGraph_GetRndNId(self, *args)

    def GetRndNI(self, *args):
        """
        GetRndNI(PUNGraph self, TRnd Rnd=Rnd) -> TUNGraph::TNodeI

        Parameters:
            Rnd: TRnd &

        GetRndNI(PUNGraph self) -> TUNGraph::TNodeI

        Parameters:
            self: TPt< TUNGraph > *

        """
        return _snap.PUNGraph_GetRndNI(self, *args)

    def GetNIdV(self, *args):
        """
        GetNIdV(PUNGraph self, TIntV NIdV)

        Parameters:
            NIdV: TIntV &

        """
        return _snap.PUNGraph_GetNIdV(self, *args)

    def Reserve(self, *args):
        """
        Reserve(PUNGraph self, int const & Nodes, int const & Edges)

        Parameters:
            Nodes: int const &
            Edges: int const &

        """
        return _snap.PUNGraph_Reserve(self, *args)

    def ReserveNIdDeg(self, *args):
        """
        ReserveNIdDeg(PUNGraph self, int const & NId, int const & Deg)

        Parameters:
            NId: int const &
            Deg: int const &

        """
        return _snap.PUNGraph_ReserveNIdDeg(self, *args)

    def Defrag(self, OnlyNodeLinks=False):
        """
        Defrag(PUNGraph self, bool const & OnlyNodeLinks=False)

        Parameters:
            OnlyNodeLinks: bool const &

        Defrag(PUNGraph self)

        Parameters:
            self: TPt< TUNGraph > *

        """
        return _snap.PUNGraph_Defrag(self, OnlyNodeLinks)

    def IsOk(self, ThrowExcept=True):
        """
        IsOk(PUNGraph self, bool const & ThrowExcept=True) -> bool

        Parameters:
            ThrowExcept: bool const &

        IsOk(PUNGraph self) -> bool

        Parameters:
            self: TPt< TUNGraph > const *

        """
        return _snap.PUNGraph_IsOk(self, ThrowExcept)

    def Dump(self, *args):
        """
        Dump(PUNGraph self, FILE * OutF=stdout)

        Parameters:
            OutF: FILE *

        Dump(PUNGraph self)

        Parameters:
            self: TPt< TUNGraph > const *

        """
        return _snap.PUNGraph_Dump(self, *args)

    def GetSmallGraph(self):
        """
        GetSmallGraph(PUNGraph self) -> PUNGraph

        Parameters:
            self: TPt< TUNGraph > *

        """
        return _snap.PUNGraph_GetSmallGraph(self)

PUNGraph.Save = new_instancemethod(_snap.PUNGraph_Save,None,PUNGraph)
PUNGraph.__deref__ = new_instancemethod(_snap.PUNGraph___deref__,None,PUNGraph)
PUNGraph.__ref__ = new_instancemethod(_snap.PUNGraph___ref__,None,PUNGraph)
PUNGraph.__call__ = new_instancemethod(_snap.PUNGraph___call__,None,PUNGraph)
PUNGraph.Empty = new_instancemethod(_snap.PUNGraph_Empty,None,PUNGraph)
PUNGraph.Clr = new_instancemethod(_snap.PUNGraph_Clr,None,PUNGraph)
PUNGraph.GetRefs = new_instancemethod(_snap.PUNGraph_GetRefs,None,PUNGraph)
PUNGraph.Load = new_instancemethod(_snap.PUNGraph_Load,None,PUNGraph)
PUNGraph.HasFlag = new_instancemethod(_snap.PUNGraph_HasFlag,None,PUNGraph)
PUNGraph.GetNodes = new_instancemethod(_snap.PUNGraph_GetNodes,None,PUNGraph)
PUNGraph.AddNode = new_instancemethod(_snap.PUNGraph_AddNode,None,PUNGraph)
PUNGraph.DelNode = new_instancemethod(_snap.PUNGraph_DelNode,None,PUNGraph)
PUNGraph.IsNode = new_instancemethod(_snap.PUNGraph_IsNode,None,PUNGraph)
PUNGraph.BegNI = new_instancemethod(_snap.PUNGraph_BegNI,None,PUNGraph)
PUNGraph.EndNI = new_instancemethod(_snap.PUNGraph_EndNI,None,PUNGraph)
PUNGraph.GetNI = new_instancemethod(_snap.PUNGraph_GetNI,None,PUNGraph)
PUNGraph.GetMxNId = new_instancemethod(_snap.PUNGraph_GetMxNId,None,PUNGraph)
PUNGraph.GetEdges = new_instancemethod(_snap.PUNGraph_GetEdges,None,PUNGraph)
PUNGraph.AddEdge = new_instancemethod(_snap.PUNGraph_AddEdge,None,PUNGraph)
PUNGraph.DelEdge = new_instancemethod(_snap.PUNGraph_DelEdge,None,PUNGraph)
PUNGraph.IsEdge = new_instancemethod(_snap.PUNGraph_IsEdge,None,PUNGraph)
PUNGraph.BegEI = new_instancemethod(_snap.PUNGraph_BegEI,None,PUNGraph)
PUNGraph.EndEI = new_instancemethod(_snap.PUNGraph_EndEI,None,PUNGraph)
PUNGraph.GetEI = new_instancemethod(_snap.PUNGraph_GetEI,None,PUNGraph)
PUNGraph.GetRndNId = new_instancemethod(_snap.PUNGraph_GetRndNId,None,PUNGraph)
PUNGraph.GetRndNI = new_instancemethod(_snap.PUNGraph_GetRndNI,None,PUNGraph)
PUNGraph.GetNIdV = new_instancemethod(_snap.PUNGraph_GetNIdV,None,PUNGraph)
PUNGraph.Reserve = new_instancemethod(_snap.PUNGraph_Reserve,None,PUNGraph)
PUNGraph.ReserveNIdDeg = new_instancemethod(_snap.PUNGraph_ReserveNIdDeg,None,PUNGraph)
PUNGraph.Defrag = new_instancemethod(_snap.PUNGraph_Defrag,None,PUNGraph)
PUNGraph.IsOk = new_instancemethod(_snap.PUNGraph_IsOk,None,PUNGraph)
PUNGraph.Dump = new_instancemethod(_snap.PUNGraph_Dump,None,PUNGraph)
PUNGraph.GetSmallGraph = new_instancemethod(_snap.PUNGraph_GetSmallGraph,None,PUNGraph)
PUNGraph_swigregister = _snap.PUNGraph_swigregister
PUNGraph_swigregister(PUNGraph)

def PUNGraph_New():
  """PUNGraph_New() -> PUNGraph"""
  return _snap.PUNGraph_New()


def PrintInfo_PUNGraph(*args):
  """
    PrintInfo_PUNGraph(PUNGraph Graph, TStr Desc="", TStr OutFNm="", bool const & Fast=True)

    Parameters:
        Graph: TPt< TUNGraph > const &
        Desc: TStr const &
        OutFNm: TStr const &
        Fast: bool const &

    PrintInfo_PUNGraph(PUNGraph Graph, TStr Desc="", TStr OutFNm="")

    Parameters:
        Graph: TPt< TUNGraph > const &
        Desc: TStr const &
        OutFNm: TStr const &

    PrintInfo_PUNGraph(PUNGraph Graph, TStr Desc="")

    Parameters:
        Graph: TPt< TUNGraph > const &
        Desc: TStr const &

    PrintInfo_PUNGraph(PUNGraph Graph)

    Parameters:
        Graph: TPt< TUNGraph > const &

    """
  return _snap.PrintInfo_PUNGraph(*args)

def GetNodeWcc_PUNGraph(*args):
  """
    GetNodeWcc_PUNGraph(PUNGraph Graph, int const & NId, TIntV CnCom)

    Parameters:
        Graph: TPt< TUNGraph > const &
        NId: int const &
        CnCom: TIntV &

    """
  return _snap.GetNodeWcc_PUNGraph(*args)

def IsConnected_PUNGraph(*args):
  """
    IsConnected_PUNGraph(PUNGraph Graph) -> bool

    Parameters:
        Graph: TPt< TUNGraph > const &

    """
  return _snap.IsConnected_PUNGraph(*args)

def IsWeaklyConn_PUNGraph(*args):
  """
    IsWeaklyConn_PUNGraph(PUNGraph Graph) -> bool

    Parameters:
        Graph: TPt< TUNGraph > const &

    """
  return _snap.IsWeaklyConn_PUNGraph(*args)

def GetWccSzCnt_PUNGraph(*args):
  """
    GetWccSzCnt_PUNGraph(PUNGraph Graph, TIntPrV WccSzCnt)

    Parameters:
        Graph: TPt< TUNGraph > const &
        WccSzCnt: TIntPrV &

    """
  return _snap.GetWccSzCnt_PUNGraph(*args)

def GetWccs_PUNGraph(*args):
  """
    GetWccs_PUNGraph(PUNGraph Graph, TCnComV CnComV)

    Parameters:
        Graph: TPt< TUNGraph > const &
        CnComV: TCnComV &

    """
  return _snap.GetWccs_PUNGraph(*args)

def GetSccSzCnt_PUNGraph(*args):
  """
    GetSccSzCnt_PUNGraph(PUNGraph Graph, TIntPrV SccSzCnt)

    Parameters:
        Graph: TPt< TUNGraph > const &
        SccSzCnt: TIntPrV &

    """
  return _snap.GetSccSzCnt_PUNGraph(*args)

def GetSccs_PUNGraph(*args):
  """
    GetSccs_PUNGraph(PUNGraph Graph, TCnComV CnComV)

    Parameters:
        Graph: TPt< TUNGraph > const &
        CnComV: TCnComV &

    """
  return _snap.GetSccs_PUNGraph(*args)

def GetMxWccSz_PUNGraph(*args):
  """
    GetMxWccSz_PUNGraph(PUNGraph Graph) -> double

    Parameters:
        Graph: TPt< TUNGraph > const &

    """
  return _snap.GetMxWccSz_PUNGraph(*args)

def GetMxSccSz_PUNGraph(*args):
  """
    GetMxSccSz_PUNGraph(PUNGraph Graph) -> double

    Parameters:
        Graph: TPt< TUNGraph > const &

    """
  return _snap.GetMxSccSz_PUNGraph(*args)

def GetMxWcc_PUNGraph(*args):
  """
    GetMxWcc_PUNGraph(PUNGraph Graph) -> PUNGraph

    Parameters:
        Graph: TPt< TUNGraph > const &

    """
  return _snap.GetMxWcc_PUNGraph(*args)

def GetMxScc_PUNGraph(*args):
  """
    GetMxScc_PUNGraph(PUNGraph Graph) -> PUNGraph

    Parameters:
        Graph: TPt< TUNGraph > const &

    """
  return _snap.GetMxScc_PUNGraph(*args)

def GetMxBiCon_PUNGraph(*args):
  """
    GetMxBiCon_PUNGraph(PUNGraph Graph) -> PUNGraph

    Parameters:
        Graph: TPt< TUNGraph > const &

    """
  return _snap.GetMxBiCon_PUNGraph(*args)

def GetNodeEcc_PUNGraph(*args):
  """
    GetNodeEcc_PUNGraph(PUNGraph Graph, int const & NId, bool const & IsDir=False) -> int

    Parameters:
        Graph: TPt< TUNGraph > const &
        NId: int const &
        IsDir: bool const &

    GetNodeEcc_PUNGraph(PUNGraph Graph, int const & NId) -> int

    Parameters:
        Graph: TPt< TUNGraph > const &
        NId: int const &

    """
  return _snap.GetNodeEcc_PUNGraph(*args)

def GetPageRank_PUNGraph(*args):
  """
    GetPageRank_PUNGraph(PUNGraph Graph, TIntFltH PRankH, double const & C=0.85, double const & Eps=1e-4, 
        int const & MaxIter=100)

    Parameters:
        Graph: TPt< TUNGraph > const &
        PRankH: TIntFltH &
        C: double const &
        Eps: double const &
        MaxIter: int const &

    GetPageRank_PUNGraph(PUNGraph Graph, TIntFltH PRankH, double const & C=0.85, double const & Eps=1e-4)

    Parameters:
        Graph: TPt< TUNGraph > const &
        PRankH: TIntFltH &
        C: double const &
        Eps: double const &

    GetPageRank_PUNGraph(PUNGraph Graph, TIntFltH PRankH, double const & C=0.85)

    Parameters:
        Graph: TPt< TUNGraph > const &
        PRankH: TIntFltH &
        C: double const &

    GetPageRank_PUNGraph(PUNGraph Graph, TIntFltH PRankH)

    Parameters:
        Graph: TPt< TUNGraph > const &
        PRankH: TIntFltH &

    """
  return _snap.GetPageRank_PUNGraph(*args)

def GetHits_PUNGraph(*args):
  """
    GetHits_PUNGraph(PUNGraph Graph, TIntFltH NIdHubH, TIntFltH NIdAuthH, int const & MaxIter=20)

    Parameters:
        Graph: TPt< TUNGraph > const &
        NIdHubH: TIntFltH &
        NIdAuthH: TIntFltH &
        MaxIter: int const &

    GetHits_PUNGraph(PUNGraph Graph, TIntFltH NIdHubH, TIntFltH NIdAuthH)

    Parameters:
        Graph: TPt< TUNGraph > const &
        NIdHubH: TIntFltH &
        NIdAuthH: TIntFltH &

    """
  return _snap.GetHits_PUNGraph(*args)

def CntInDegNodes_PUNGraph(*args):
  """
    CntInDegNodes_PUNGraph(PUNGraph Graph, int const & NodeInDeg) -> int

    Parameters:
        Graph: TPt< TUNGraph > const &
        NodeInDeg: int const &

    """
  return _snap.CntInDegNodes_PUNGraph(*args)

def CntOutDegNodes_PUNGraph(*args):
  """
    CntOutDegNodes_PUNGraph(PUNGraph Graph, int const & NodeOutDeg) -> int

    Parameters:
        Graph: TPt< TUNGraph > const &
        NodeOutDeg: int const &

    """
  return _snap.CntOutDegNodes_PUNGraph(*args)

def CntDegNodes_PUNGraph(*args):
  """
    CntDegNodes_PUNGraph(PUNGraph Graph, int const & NodeDeg) -> int

    Parameters:
        Graph: TPt< TUNGraph > const &
        NodeDeg: int const &

    """
  return _snap.CntDegNodes_PUNGraph(*args)

def CntNonZNodes_PUNGraph(*args):
  """
    CntNonZNodes_PUNGraph(PUNGraph Graph) -> int

    Parameters:
        Graph: TPt< TUNGraph > const &

    """
  return _snap.CntNonZNodes_PUNGraph(*args)

def CntEdgesToSet_PUNGraph(*args):
  """
    CntEdgesToSet_PUNGraph(PUNGraph Graph, int const & NId, TIntSet NodeSet) -> int

    Parameters:
        Graph: TPt< TUNGraph > const &
        NId: int const &
        NodeSet: TIntSet const &

    """
  return _snap.CntEdgesToSet_PUNGraph(*args)

def GetMxDegNId_PUNGraph(*args):
  """
    GetMxDegNId_PUNGraph(PUNGraph Graph) -> int

    Parameters:
        Graph: TPt< TUNGraph > const &

    """
  return _snap.GetMxDegNId_PUNGraph(*args)

def GetMxInDegNId_PUNGraph(*args):
  """
    GetMxInDegNId_PUNGraph(PUNGraph Graph) -> int

    Parameters:
        Graph: TPt< TUNGraph > const &

    """
  return _snap.GetMxInDegNId_PUNGraph(*args)

def GetMxOutDegNId_PUNGraph(*args):
  """
    GetMxOutDegNId_PUNGraph(PUNGraph Graph) -> int

    Parameters:
        Graph: TPt< TUNGraph > const &

    """
  return _snap.GetMxOutDegNId_PUNGraph(*args)

def GetInDegCnt_PUNGraph(*args):
  """
    GetInDegCnt_PUNGraph(PUNGraph Graph, TIntPrV DegToCntV)

    Parameters:
        Graph: TPt< TUNGraph > const &
        DegToCntV: TIntPrV &

    GetInDegCnt_PUNGraph(PUNGraph Graph, TFltPrV DegToCntV)

    Parameters:
        Graph: TPt< TUNGraph > const &
        DegToCntV: TFltPrV &

    """
  return _snap.GetInDegCnt_PUNGraph(*args)

def GetOutDegCnt_PUNGraph(*args):
  """
    GetOutDegCnt_PUNGraph(PUNGraph Graph, TIntPrV DegToCntV)

    Parameters:
        Graph: TPt< TUNGraph > const &
        DegToCntV: TIntPrV &

    GetOutDegCnt_PUNGraph(PUNGraph Graph, TFltPrV DegToCntV)

    Parameters:
        Graph: TPt< TUNGraph > const &
        DegToCntV: TFltPrV &

    """
  return _snap.GetOutDegCnt_PUNGraph(*args)

def GetDegCnt_PUNGraph(*args):
  """
    GetDegCnt_PUNGraph(PUNGraph Graph, TIntPrV DegToCntV)

    Parameters:
        Graph: TPt< TUNGraph > const &
        DegToCntV: TIntPrV &

    GetDegCnt_PUNGraph(PUNGraph Graph, TFltPrV DegToCntV)

    Parameters:
        Graph: TPt< TUNGraph > const &
        DegToCntV: TFltPrV &

    """
  return _snap.GetDegCnt_PUNGraph(*args)

def GetDegSeqV_PUNGraph(*args):
  """
    GetDegSeqV_PUNGraph(PUNGraph Graph, TIntV DegV)

    Parameters:
        Graph: TPt< TUNGraph > const &
        DegV: TIntV &

    GetDegSeqV_PUNGraph(PUNGraph Graph, TIntV InDegV, TIntV OutDegV)

    Parameters:
        Graph: TPt< TUNGraph > const &
        InDegV: TIntV &
        OutDegV: TIntV &

    """
  return _snap.GetDegSeqV_PUNGraph(*args)

def GetNodeInDegV_PUNGraph(*args):
  """
    GetNodeInDegV_PUNGraph(PUNGraph Graph, TIntPrV NIdInDegV)

    Parameters:
        Graph: TPt< TUNGraph > const &
        NIdInDegV: TIntPrV &

    """
  return _snap.GetNodeInDegV_PUNGraph(*args)

def GetNodeOutDegV_PUNGraph(*args):
  """
    GetNodeOutDegV_PUNGraph(PUNGraph Graph, TIntPrV NIdOutDegV)

    Parameters:
        Graph: TPt< TUNGraph > const &
        NIdOutDegV: TIntPrV &

    """
  return _snap.GetNodeOutDegV_PUNGraph(*args)

def CntUniqUndirEdges_PUNGraph(*args):
  """
    CntUniqUndirEdges_PUNGraph(PUNGraph Graph) -> int

    Parameters:
        Graph: TPt< TUNGraph > const &

    """
  return _snap.CntUniqUndirEdges_PUNGraph(*args)

def CntUniqDirEdges_PUNGraph(*args):
  """
    CntUniqDirEdges_PUNGraph(PUNGraph Graph) -> int

    Parameters:
        Graph: TPt< TUNGraph > const &

    """
  return _snap.CntUniqDirEdges_PUNGraph(*args)

def CntUniqBiDirEdges_PUNGraph(*args):
  """
    CntUniqBiDirEdges_PUNGraph(PUNGraph Graph) -> int

    Parameters:
        Graph: TPt< TUNGraph > const &

    """
  return _snap.CntUniqBiDirEdges_PUNGraph(*args)

def CntSelfEdges_PUNGraph(*args):
  """
    CntSelfEdges_PUNGraph(PUNGraph Graph) -> int

    Parameters:
        Graph: TPt< TUNGraph > const &

    """
  return _snap.CntSelfEdges_PUNGraph(*args)

def GetUnDir_PUNGraph(*args):
  """
    GetUnDir_PUNGraph(PUNGraph Graph) -> PUNGraph

    Parameters:
        Graph: TPt< TUNGraph > const &

    """
  return _snap.GetUnDir_PUNGraph(*args)

def MakeUnDir_PUNGraph(*args):
  """
    MakeUnDir_PUNGraph(PUNGraph Graph)

    Parameters:
        Graph: TPt< TUNGraph > const &

    """
  return _snap.MakeUnDir_PUNGraph(*args)

def AddSelfEdges_PUNGraph(*args):
  """
    AddSelfEdges_PUNGraph(PUNGraph Graph)

    Parameters:
        Graph: TPt< TUNGraph > const &

    """
  return _snap.AddSelfEdges_PUNGraph(*args)

def DelSelfEdges_PUNGraph(*args):
  """
    DelSelfEdges_PUNGraph(PUNGraph Graph)

    Parameters:
        Graph: TPt< TUNGraph > const &

    """
  return _snap.DelSelfEdges_PUNGraph(*args)

def DelNodes_PUNGraph(*args):
  """
    DelNodes_PUNGraph(PUNGraph Graph, TIntV NIdV)

    Parameters:
        Graph: TPt< TUNGraph > &
        NIdV: TIntV const &

    """
  return _snap.DelNodes_PUNGraph(*args)

def DelZeroDegNodes_PUNGraph(*args):
  """
    DelZeroDegNodes_PUNGraph(PUNGraph Graph)

    Parameters:
        Graph: TPt< TUNGraph > &

    """
  return _snap.DelZeroDegNodes_PUNGraph(*args)

def DelDegKNodes_PUNGraph(*args):
  """
    DelDegKNodes_PUNGraph(PUNGraph Graph, int const & OutDegK, int const & InDegK)

    Parameters:
        Graph: TPt< TUNGraph > &
        OutDegK: int const &
        InDegK: int const &

    """
  return _snap.DelDegKNodes_PUNGraph(*args)

def IsTree_PUNGraph(*args):
  """
    IsTree_PUNGraph(PUNGraph Graph) -> bool

    Parameters:
        Graph: TPt< TUNGraph > const &

    """
  return _snap.IsTree_PUNGraph(*args)

def GetTreeRootNId_PUNGraph(*args):
  """
    GetTreeRootNId_PUNGraph(PUNGraph Graph) -> int

    Parameters:
        Graph: TPt< TUNGraph > const &

    """
  return _snap.GetTreeRootNId_PUNGraph(*args)

def GetTreeSig_PUNGraph(*args):
  """
    GetTreeSig_PUNGraph(PUNGraph Graph, int const & RootNId, TIntV Sig)

    Parameters:
        Graph: TPt< TUNGraph > const &
        RootNId: int const &
        Sig: TIntV &

    GetTreeSig_PUNGraph(PUNGraph Graph, int const & RootNId, TIntV Sig, TIntPrV NodeMap)

    Parameters:
        Graph: TPt< TUNGraph > const &
        RootNId: int const &
        Sig: TIntV &
        NodeMap: TIntPrV &

    """
  return _snap.GetTreeSig_PUNGraph(*args)

def GetBfsTree_PUNGraph(*args):
  """
    GetBfsTree_PUNGraph(PUNGraph Graph, int const & StartNId, bool const & FollowOut, bool const & FollowIn) -> PNGraph

    Parameters:
        Graph: TPt< TUNGraph > const &
        StartNId: int const &
        FollowOut: bool const &
        FollowIn: bool const &

    """
  return _snap.GetBfsTree_PUNGraph(*args)

def GetSubTreeSz_PUNGraph(*args):
  """
    GetSubTreeSz_PUNGraph(PUNGraph Graph, int const & StartNId, bool const & FollowOut, bool const & FollowIn) -> int

    Parameters:
        Graph: TPt< TUNGraph > const &
        StartNId: int const &
        FollowOut: bool const &
        FollowIn: bool const &

    """
  return _snap.GetSubTreeSz_PUNGraph(*args)

def GetNodesAtHop_PUNGraph(*args):
  """
    GetNodesAtHop_PUNGraph(PUNGraph Graph, int const & StartNId, int const & Hop, TIntV NIdV, bool const & IsDir=False) -> int

    Parameters:
        Graph: TPt< TUNGraph > const &
        StartNId: int const &
        Hop: int const &
        NIdV: TIntV &
        IsDir: bool const &

    GetNodesAtHop_PUNGraph(PUNGraph Graph, int const & StartNId, int const & Hop, TIntV NIdV) -> int

    Parameters:
        Graph: TPt< TUNGraph > const &
        StartNId: int const &
        Hop: int const &
        NIdV: TIntV &

    """
  return _snap.GetNodesAtHop_PUNGraph(*args)

def GetNodesAtHops_PUNGraph(*args):
  """
    GetNodesAtHops_PUNGraph(PUNGraph Graph, int const & StartNId, TIntPrV HopCntV, bool const & IsDir=False) -> int

    Parameters:
        Graph: TPt< TUNGraph > const &
        StartNId: int const &
        HopCntV: TIntPrV &
        IsDir: bool const &

    GetNodesAtHops_PUNGraph(PUNGraph Graph, int const & StartNId, TIntPrV HopCntV) -> int

    Parameters:
        Graph: TPt< TUNGraph > const &
        StartNId: int const &
        HopCntV: TIntPrV &

    """
  return _snap.GetNodesAtHops_PUNGraph(*args)

def GetShortPath_PUNGraph(*args):
  """
    GetShortPath_PUNGraph(PUNGraph Graph, int const & SrcNId, int const & DstNId, bool const & IsDir=False) -> int

    Parameters:
        Graph: TPt< TUNGraph > const &
        SrcNId: int const &
        DstNId: int const &
        IsDir: bool const &

    GetShortPath_PUNGraph(PUNGraph Graph, int const & SrcNId, int const & DstNId) -> int

    Parameters:
        Graph: TPt< TUNGraph > const &
        SrcNId: int const &
        DstNId: int const &

    GetShortPath_PUNGraph(PUNGraph Graph, int const & SrcNId, TIntH NIdToDistH, bool const & IsDir=False, int const & MaxDist=Mx) -> int

    Parameters:
        Graph: TPt< TUNGraph > const &
        SrcNId: int const &
        NIdToDistH: TIntH &
        IsDir: bool const &
        MaxDist: int const &

    GetShortPath_PUNGraph(PUNGraph Graph, int const & SrcNId, TIntH NIdToDistH, bool const & IsDir=False) -> int

    Parameters:
        Graph: TPt< TUNGraph > const &
        SrcNId: int const &
        NIdToDistH: TIntH &
        IsDir: bool const &

    GetShortPath_PUNGraph(PUNGraph Graph, int const & SrcNId, TIntH NIdToDistH) -> int

    Parameters:
        Graph: TPt< TUNGraph > const &
        SrcNId: int const &
        NIdToDistH: TIntH &

    """
  return _snap.GetShortPath_PUNGraph(*args)

def GetBfsFullDiam_PUNGraph(*args):
  """
    GetBfsFullDiam_PUNGraph(PUNGraph Graph, int const & NTestNodes, bool const & IsDir=False) -> int

    Parameters:
        Graph: TPt< TUNGraph > const &
        NTestNodes: int const &
        IsDir: bool const &

    GetBfsFullDiam_PUNGraph(PUNGraph Graph, int const & NTestNodes) -> int

    Parameters:
        Graph: TPt< TUNGraph > const &
        NTestNodes: int const &

    """
  return _snap.GetBfsFullDiam_PUNGraph(*args)

def GetBfsEffDiam_PUNGraph(*args):
  """
    GetBfsEffDiam_PUNGraph(PUNGraph Graph, int const & NTestNodes, bool const & IsDir, double & EffDiam, int & FullDiam) -> double

    Parameters:
        Graph: TPt< TUNGraph > const &
        NTestNodes: int const &
        IsDir: bool const &
        EffDiam: double &
        FullDiam: int &

    GetBfsEffDiam_PUNGraph(PUNGraph Graph, int const & NTestNodes, bool const & IsDir=False) -> double

    Parameters:
        Graph: TPt< TUNGraph > const &
        NTestNodes: int const &
        IsDir: bool const &

    GetBfsEffDiam_PUNGraph(PUNGraph Graph, int const & NTestNodes) -> double

    Parameters:
        Graph: TPt< TUNGraph > const &
        NTestNodes: int const &

    GetBfsEffDiam_PUNGraph(PUNGraph Graph, int const & NTestNodes, bool const & IsDir) -> double

    Parameters:
        Graph: TPt< TUNGraph > const &
        NTestNodes: int const &
        IsDir: bool const &

    GetBfsEffDiam_PUNGraph(PUNGraph Graph, int const & NTestNodes, TIntV SubGraphNIdV, bool const & IsDir) -> double

    Parameters:
        Graph: TPt< TUNGraph > const &
        NTestNodes: int const &
        SubGraphNIdV: TIntV const &
        IsDir: bool const &

    """
  return _snap.GetBfsEffDiam_PUNGraph(*args)

def DrawGViz_PUNGraph(*args):
  """
    DrawGViz_PUNGraph(PUNGraph Graph, TGVizLayout const & Layout, TStr PltFNm, TStr Desc=TStr(), bool const & NodeLabels=False, 
        TIntStrH NIdColorH=TIntStrH())

    Parameters:
        Graph: TPt< TUNGraph > const &
        Layout: TGVizLayout const &
        PltFNm: TStr const &
        Desc: TStr const &
        NodeLabels: bool const &
        NIdColorH: TIntStrH const &

    DrawGViz_PUNGraph(PUNGraph Graph, TGVizLayout const & Layout, TStr PltFNm, TStr Desc=TStr(), bool const & NodeLabels=False)

    Parameters:
        Graph: TPt< TUNGraph > const &
        Layout: TGVizLayout const &
        PltFNm: TStr const &
        Desc: TStr const &
        NodeLabels: bool const &

    DrawGViz_PUNGraph(PUNGraph Graph, TGVizLayout const & Layout, TStr PltFNm, TStr Desc=TStr())

    Parameters:
        Graph: TPt< TUNGraph > const &
        Layout: TGVizLayout const &
        PltFNm: TStr const &
        Desc: TStr const &

    DrawGViz_PUNGraph(PUNGraph Graph, TGVizLayout const & Layout, TStr PltFNm)

    Parameters:
        Graph: TPt< TUNGraph > const &
        Layout: TGVizLayout const &
        PltFNm: TStr const &

    DrawGViz_PUNGraph(PUNGraph Graph, TGVizLayout const & Layout, TStr PltFNm, TStr Desc, TIntStrH NodeLabelH)

    Parameters:
        Graph: TPt< TUNGraph > const &
        Layout: TGVizLayout const &
        PltFNm: TStr const &
        Desc: TStr const &
        NodeLabelH: TIntStrH const &

    """
  return _snap.DrawGViz_PUNGraph(*args)

def GenGrid_PUNGraph(*args):
  """
    GenGrid_PUNGraph(int const & Rows, int const & Cols, bool const & IsDir=True) -> PUNGraph

    Parameters:
        Rows: int const &
        Cols: int const &
        IsDir: bool const &

    GenGrid_PUNGraph(int const & Rows, int const & Cols) -> PUNGraph

    Parameters:
        Rows: int const &
        Cols: int const &

    """
  return _snap.GenGrid_PUNGraph(*args)

def GenStar_PUNGraph(*args):
  """
    GenStar_PUNGraph(int const & Nodes, bool const & IsDir=True) -> PUNGraph

    Parameters:
        Nodes: int const &
        IsDir: bool const &

    GenStar_PUNGraph(int const & Nodes) -> PUNGraph

    Parameters:
        Nodes: int const &

    """
  return _snap.GenStar_PUNGraph(*args)

def GenCircle_PUNGraph(*args):
  """
    GenCircle_PUNGraph(int const & Nodes, int const & NodeOutDeg=1, bool const & IsDir=True) -> PUNGraph

    Parameters:
        Nodes: int const &
        NodeOutDeg: int const &
        IsDir: bool const &

    GenCircle_PUNGraph(int const & Nodes, int const & NodeOutDeg=1) -> PUNGraph

    Parameters:
        Nodes: int const &
        NodeOutDeg: int const &

    GenCircle_PUNGraph(int const & Nodes) -> PUNGraph

    Parameters:
        Nodes: int const &

    """
  return _snap.GenCircle_PUNGraph(*args)

def GenFull_PUNGraph(*args):
  """
    GenFull_PUNGraph(int const & Nodes) -> PUNGraph

    Parameters:
        Nodes: int const &

    """
  return _snap.GenFull_PUNGraph(*args)

def GenTree_PUNGraph(*args):
  """
    GenTree_PUNGraph(int const & Fanout, int const & Levels, bool const & IsDir=True, bool const & ChildPointsToParent=True) -> PUNGraph

    Parameters:
        Fanout: int const &
        Levels: int const &
        IsDir: bool const &
        ChildPointsToParent: bool const &

    GenTree_PUNGraph(int const & Fanout, int const & Levels, bool const & IsDir=True) -> PUNGraph

    Parameters:
        Fanout: int const &
        Levels: int const &
        IsDir: bool const &

    GenTree_PUNGraph(int const & Fanout, int const & Levels) -> PUNGraph

    Parameters:
        Fanout: int const &
        Levels: int const &

    """
  return _snap.GenTree_PUNGraph(*args)

def GenBaraHierar_PUNGraph(*args):
  """
    GenBaraHierar_PUNGraph(int const & Levels, bool const & IsDir=True) -> PUNGraph

    Parameters:
        Levels: int const &
        IsDir: bool const &

    GenBaraHierar_PUNGraph(int const & Levels) -> PUNGraph

    Parameters:
        Levels: int const &

    """
  return _snap.GenBaraHierar_PUNGraph(*args)

def GenRndGnm_PUNGraph(*args):
  """
    GenRndGnm_PUNGraph(int const & Nodes, int const & Edges, bool const & IsDir=True, TRnd Rnd=Rnd) -> PUNGraph

    Parameters:
        Nodes: int const &
        Edges: int const &
        IsDir: bool const &
        Rnd: TRnd &

    GenRndGnm_PUNGraph(int const & Nodes, int const & Edges, bool const & IsDir=True) -> PUNGraph

    Parameters:
        Nodes: int const &
        Edges: int const &
        IsDir: bool const &

    GenRndGnm_PUNGraph(int const & Nodes, int const & Edges) -> PUNGraph

    Parameters:
        Nodes: int const &
        Edges: int const &

    """
  return _snap.GenRndGnm_PUNGraph(*args)

def LoadEdgeList_PUNGraph(*args):
  """
    LoadEdgeList_PUNGraph(TStr InFNm, int const & SrcColId=0, int const & DstColId=1) -> PUNGraph

    Parameters:
        InFNm: TStr const &
        SrcColId: int const &
        DstColId: int const &

    LoadEdgeList_PUNGraph(TStr InFNm, int const & SrcColId=0) -> PUNGraph

    Parameters:
        InFNm: TStr const &
        SrcColId: int const &

    LoadEdgeList_PUNGraph(TStr InFNm) -> PUNGraph

    Parameters:
        InFNm: TStr const &

    LoadEdgeList_PUNGraph(TStr InFNm, int const & SrcColId, int const & DstColId, char const & Separator) -> PUNGraph

    Parameters:
        InFNm: TStr const &
        SrcColId: int const &
        DstColId: int const &
        Separator: char const &

    """
  return _snap.LoadEdgeList_PUNGraph(*args)

def LoadEdgeListStr_PUNGraph(*args):
  """
    LoadEdgeListStr_PUNGraph(TStr InFNm, int const & SrcColId=0, int const & DstColId=1) -> PUNGraph

    Parameters:
        InFNm: TStr const &
        SrcColId: int const &
        DstColId: int const &

    LoadEdgeListStr_PUNGraph(TStr InFNm, int const & SrcColId=0) -> PUNGraph

    Parameters:
        InFNm: TStr const &
        SrcColId: int const &

    LoadEdgeListStr_PUNGraph(TStr InFNm) -> PUNGraph

    Parameters:
        InFNm: TStr const &

    LoadEdgeListStr_PUNGraph(TStr InFNm, int const & SrcColId, int const & DstColId, TStrHash< TInt > & StrToNIdH) -> PUNGraph

    Parameters:
        InFNm: TStr const &
        SrcColId: int const &
        DstColId: int const &
        StrToNIdH: TStrHash< TInt > &

    """
  return _snap.LoadEdgeListStr_PUNGraph(*args)

def LoadConnList_PUNGraph(*args):
  """
    LoadConnList_PUNGraph(TStr InFNm) -> PUNGraph

    Parameters:
        InFNm: TStr const &

    """
  return _snap.LoadConnList_PUNGraph(*args)

def LoadConnListStr_PUNGraph(*args):
  """
    LoadConnListStr_PUNGraph(TStr InFNm, TStrHash< TInt > & StrToNIdH) -> PUNGraph

    Parameters:
        InFNm: TStr const &
        StrToNIdH: TStrHash< TInt > &

    """
  return _snap.LoadConnListStr_PUNGraph(*args)

def LoadPajek_PUNGraph(*args):
  """
    LoadPajek_PUNGraph(TStr InFNm) -> PUNGraph

    Parameters:
        InFNm: TStr const &

    """
  return _snap.LoadPajek_PUNGraph(*args)

def SaveEdgeList_PUNGraph(*args):
  """
    SaveEdgeList_PUNGraph(PUNGraph Graph, TStr OutFNm, TStr Desc=TStr())

    Parameters:
        Graph: TPt< TUNGraph > const &
        OutFNm: TStr const &
        Desc: TStr const &

    SaveEdgeList_PUNGraph(PUNGraph Graph, TStr OutFNm)

    Parameters:
        Graph: TPt< TUNGraph > const &
        OutFNm: TStr const &

    """
  return _snap.SaveEdgeList_PUNGraph(*args)

def SavePajek_PUNGraph(*args):
  """
    SavePajek_PUNGraph(PUNGraph Graph, TStr OutFNm)

    Parameters:
        Graph: TPt< TUNGraph > const &
        OutFNm: TStr const &

    SavePajek_PUNGraph(PUNGraph Graph, TStr OutFNm, TIntStrH NIdColorH)

    Parameters:
        Graph: TPt< TUNGraph > const &
        OutFNm: TStr const &
        NIdColorH: TIntStrH const &

    SavePajek_PUNGraph(PUNGraph Graph, TStr OutFNm, TIntStrH NIdColorH, TIntStrH NIdLabelH)

    Parameters:
        Graph: TPt< TUNGraph > const &
        OutFNm: TStr const &
        NIdColorH: TIntStrH const &
        NIdLabelH: TIntStrH const &

    SavePajek_PUNGraph(PUNGraph Graph, TStr OutFNm, TIntStrH NIdColorH, TIntStrH NIdLabelH, TIntStrH EIdColorH)

    Parameters:
        Graph: TPt< TUNGraph > const &
        OutFNm: TStr const &
        NIdColorH: TIntStrH const &
        NIdLabelH: TIntStrH const &
        EIdColorH: TIntStrH const &

    """
  return _snap.SavePajek_PUNGraph(*args)

def SaveMatlabSparseMtx_PUNGraph(*args):
  """
    SaveMatlabSparseMtx_PUNGraph(PUNGraph Graph, TStr OutFNm)

    Parameters:
        Graph: TPt< TUNGraph > const &
        OutFNm: TStr const &

    """
  return _snap.SaveMatlabSparseMtx_PUNGraph(*args)

def SaveGViz_PUNGraph(*args):
  """
    SaveGViz_PUNGraph(PUNGraph Graph, TStr OutFNm, TStr Desc=TStr(), bool const & NodeLabels=False, TIntStrH NIdColorH=TIntStrH())

    Parameters:
        Graph: TPt< TUNGraph > const &
        OutFNm: TStr const &
        Desc: TStr const &
        NodeLabels: bool const &
        NIdColorH: TIntStrH const &

    SaveGViz_PUNGraph(PUNGraph Graph, TStr OutFNm, TStr Desc=TStr(), bool const & NodeLabels=False)

    Parameters:
        Graph: TPt< TUNGraph > const &
        OutFNm: TStr const &
        Desc: TStr const &
        NodeLabels: bool const &

    SaveGViz_PUNGraph(PUNGraph Graph, TStr OutFNm, TStr Desc=TStr())

    Parameters:
        Graph: TPt< TUNGraph > const &
        OutFNm: TStr const &
        Desc: TStr const &

    SaveGViz_PUNGraph(PUNGraph Graph, TStr OutFNm)

    Parameters:
        Graph: TPt< TUNGraph > const &
        OutFNm: TStr const &

    SaveGViz_PUNGraph(PUNGraph Graph, TStr OutFNm, TStr Desc, TIntStrH NIdLabelH)

    Parameters:
        Graph: TPt< TUNGraph > const &
        OutFNm: TStr const &
        Desc: TStr const &
        NIdLabelH: TIntStrH const &

    """
  return _snap.SaveGViz_PUNGraph(*args)

def GetKCore_PUNGraph(*args):
  """
    GetKCore_PUNGraph(PUNGraph Graph, int const & K) -> PUNGraph

    Parameters:
        Graph: TPt< TUNGraph > const &
        K: int const &

    """
  return _snap.GetKCore_PUNGraph(*args)

def GetKCoreEdges_PUNGraph(*args):
  """
    GetKCoreEdges_PUNGraph(PUNGraph Graph, TIntPrV CoreIdSzV) -> int

    Parameters:
        Graph: TPt< TUNGraph > const &
        CoreIdSzV: TIntPrV &

    """
  return _snap.GetKCoreEdges_PUNGraph(*args)

def GetKCoreNodes_PUNGraph(*args):
  """
    GetKCoreNodes_PUNGraph(PUNGraph Graph, TIntPrV CoreIdSzV) -> int

    Parameters:
        Graph: TPt< TUNGraph > const &
        CoreIdSzV: TIntPrV &

    """
  return _snap.GetKCoreNodes_PUNGraph(*args)

def ConvertGraph_PUNGraph_PUNGraph(*args):
  """
    ConvertGraph_PUNGraph_PUNGraph(PUNGraph InGraph, bool const & RenumberNodes=False) -> PUNGraph

    Parameters:
        InGraph: TPt< TUNGraph > const &
        RenumberNodes: bool const &

    ConvertGraph_PUNGraph_PUNGraph(PUNGraph InGraph) -> PUNGraph

    Parameters:
        InGraph: TPt< TUNGraph > const &

    """
  return _snap.ConvertGraph_PUNGraph_PUNGraph(*args)

def ConvertGraph_PUNGraph_PNGraph(*args):
  """
    ConvertGraph_PUNGraph_PNGraph(PNGraph InGraph, bool const & RenumberNodes=False) -> PUNGraph

    Parameters:
        InGraph: TPt< TNGraph > const &
        RenumberNodes: bool const &

    ConvertGraph_PUNGraph_PNGraph(PNGraph InGraph) -> PUNGraph

    Parameters:
        InGraph: TPt< TNGraph > const &

    """
  return _snap.ConvertGraph_PUNGraph_PNGraph(*args)

def ConvertGraph_PUNGraph_PNEANet(*args):
  """
    ConvertGraph_PUNGraph_PNEANet(PNEANet InGraph, bool const & RenumberNodes=False) -> PUNGraph

    Parameters:
        InGraph: TPt< TNEANet > const &
        RenumberNodes: bool const &

    ConvertGraph_PUNGraph_PNEANet(PNEANet InGraph) -> PUNGraph

    Parameters:
        InGraph: TPt< TNEANet > const &

    """
  return _snap.ConvertGraph_PUNGraph_PNEANet(*args)

def ConvertSubGraph_PUNGraph_PUNGraph(*args):
  """
    ConvertSubGraph_PUNGraph_PUNGraph(PUNGraph InGraph, TIntV NIdV, bool const & RenumberNodes=False) -> PUNGraph

    Parameters:
        InGraph: TPt< TUNGraph > const &
        NIdV: TIntV const &
        RenumberNodes: bool const &

    ConvertSubGraph_PUNGraph_PUNGraph(PUNGraph InGraph, TIntV NIdV) -> PUNGraph

    Parameters:
        InGraph: TPt< TUNGraph > const &
        NIdV: TIntV const &

    """
  return _snap.ConvertSubGraph_PUNGraph_PUNGraph(*args)

def ConvertSubGraph_PUNGraph_PNGraph(*args):
  """
    ConvertSubGraph_PUNGraph_PNGraph(PNGraph InGraph, TIntV NIdV, bool const & RenumberNodes=False) -> PUNGraph

    Parameters:
        InGraph: TPt< TNGraph > const &
        NIdV: TIntV const &
        RenumberNodes: bool const &

    ConvertSubGraph_PUNGraph_PNGraph(PNGraph InGraph, TIntV NIdV) -> PUNGraph

    Parameters:
        InGraph: TPt< TNGraph > const &
        NIdV: TIntV const &

    """
  return _snap.ConvertSubGraph_PUNGraph_PNGraph(*args)

def ConvertSubGraph_PUNGraph_PNEANet(*args):
  """
    ConvertSubGraph_PUNGraph_PNEANet(PNEANet InGraph, TIntV NIdV, bool const & RenumberNodes=False) -> PUNGraph

    Parameters:
        InGraph: TPt< TNEANet > const &
        NIdV: TIntV const &
        RenumberNodes: bool const &

    ConvertSubGraph_PUNGraph_PNEANet(PNEANet InGraph, TIntV NIdV) -> PUNGraph

    Parameters:
        InGraph: TPt< TNEANet > const &
        NIdV: TIntV const &

    """
  return _snap.ConvertSubGraph_PUNGraph_PNEANet(*args)

def ConvertESubGraph_PUNGraph_PNEANet(*args):
  """
    ConvertESubGraph_PUNGraph_PNEANet(PNEANet InGraph, TIntV EIdV, bool const & RenumberNodes=False) -> PUNGraph

    Parameters:
        InGraph: TPt< TNEANet > const &
        EIdV: TIntV const &
        RenumberNodes: bool const &

    ConvertESubGraph_PUNGraph_PNEANet(PNEANet InGraph, TIntV EIdV) -> PUNGraph

    Parameters:
        InGraph: TPt< TNEANet > const &
        EIdV: TIntV const &

    """
  return _snap.ConvertESubGraph_PUNGraph_PNEANet(*args)

def GetSubGraph_PUNGraph(*args):
  """
    GetSubGraph_PUNGraph(PUNGraph Graph, TIntV NIdV) -> PUNGraph

    Parameters:
        Graph: TPt< TUNGraph > const &
        NIdV: TIntV const &

    """
  return _snap.GetSubGraph_PUNGraph(*args)

def GetRndSubGraph_PUNGraph(*args):
  """
    GetRndSubGraph_PUNGraph(PUNGraph Graph, int const & NNodes) -> PUNGraph

    Parameters:
        Graph: TPt< TUNGraph > const &
        NNodes: int const &

    """
  return _snap.GetRndSubGraph_PUNGraph(*args)

def GetRndESubGraph_PUNGraph(*args):
  """
    GetRndESubGraph_PUNGraph(PUNGraph Graph, int const & NEdges) -> PUNGraph

    Parameters:
        Graph: TPt< TUNGraph > const &
        NEdges: int const &

    """
  return _snap.GetRndESubGraph_PUNGraph(*args)

def GetClustCf_PUNGraph(*args):
  """
    GetClustCf_PUNGraph(PUNGraph Graph, int SampleNodes=-1) -> double

    Parameters:
        Graph: TPt< TUNGraph > const &
        SampleNodes: int

    GetClustCf_PUNGraph(PUNGraph Graph) -> double

    Parameters:
        Graph: TPt< TUNGraph > const &

    GetClustCf_PUNGraph(PUNGraph Graph, TFltPrV DegToCCfV, int SampleNodes=-1) -> double

    Parameters:
        Graph: TPt< TUNGraph > const &
        DegToCCfV: TFltPrV &
        SampleNodes: int

    GetClustCf_PUNGraph(PUNGraph Graph, TFltPrV DegToCCfV) -> double

    Parameters:
        Graph: TPt< TUNGraph > const &
        DegToCCfV: TFltPrV &

    GetClustCf_PUNGraph(PUNGraph Graph, TFltPrV DegToCCfV, int64 & ClosedTriadsX, int64 & OpenTriadsX, int SampleNodes=-1) -> double

    Parameters:
        Graph: TPt< TUNGraph > const &
        DegToCCfV: TFltPrV &
        ClosedTriadsX: int64 &
        OpenTriadsX: int64 &
        SampleNodes: int

    GetClustCf_PUNGraph(PUNGraph Graph, TFltPrV DegToCCfV, int64 & ClosedTriadsX, int64 & OpenTriadsX) -> double

    Parameters:
        Graph: TPt< TUNGraph > const &
        DegToCCfV: TFltPrV &
        ClosedTriadsX: int64 &
        OpenTriadsX: int64 &

    """
  return _snap.GetClustCf_PUNGraph(*args)

def GetNodeClustCf_PUNGraph(*args):
  """
    GetNodeClustCf_PUNGraph(PUNGraph Graph, int const & NId) -> double

    Parameters:
        Graph: TPt< TUNGraph > const &
        NId: int const &

    GetNodeClustCf_PUNGraph(PUNGraph Graph, TIntFltH NIdCCfH)

    Parameters:
        Graph: TPt< TUNGraph > const &
        NIdCCfH: TIntFltH &

    """
  return _snap.GetNodeClustCf_PUNGraph(*args)

def GetTriads_PUNGraph(*args):
  """
    GetTriads_PUNGraph(PUNGraph Graph, int64 & ClosedTriads, int64 & OpenTriads, int SampleNodes=-1) -> int64

    Parameters:
        Graph: TPt< TUNGraph > const &
        ClosedTriads: int64 &
        OpenTriads: int64 &
        SampleNodes: int

    GetTriads_PUNGraph(PUNGraph Graph, int64 & ClosedTriads, int64 & OpenTriads) -> int64

    Parameters:
        Graph: TPt< TUNGraph > const &
        ClosedTriads: int64 &
        OpenTriads: int64 &

    GetTriads_PUNGraph(PUNGraph Graph, int SampleNodes=-1) -> int64

    Parameters:
        Graph: TPt< TUNGraph > const &
        SampleNodes: int

    GetTriads_PUNGraph(PUNGraph Graph) -> int64

    Parameters:
        Graph: TPt< TUNGraph > const &

    GetTriads_PUNGraph(PUNGraph Graph, TIntTrV NIdCOTriadV, int SampleNodes=-1)

    Parameters:
        Graph: TPt< TUNGraph > const &
        NIdCOTriadV: TIntTrV &
        SampleNodes: int

    GetTriads_PUNGraph(PUNGraph Graph, TIntTrV NIdCOTriadV)

    Parameters:
        Graph: TPt< TUNGraph > const &
        NIdCOTriadV: TIntTrV &

    """
  return _snap.GetTriads_PUNGraph(*args)

def GetTriadEdges_PUNGraph(*args):
  """
    GetTriadEdges_PUNGraph(PUNGraph Graph, int SampleEdges=-1) -> int

    Parameters:
        Graph: TPt< TUNGraph > const &
        SampleEdges: int

    GetTriadEdges_PUNGraph(PUNGraph Graph) -> int

    Parameters:
        Graph: TPt< TUNGraph > const &

    """
  return _snap.GetTriadEdges_PUNGraph(*args)

def GetNodeTriads_PUNGraph(*args):
  """
    GetNodeTriads_PUNGraph(PUNGraph Graph, int const & NId) -> int

    Parameters:
        Graph: TPt< TUNGraph > const &
        NId: int const &

    GetNodeTriads_PUNGraph(PUNGraph Graph, int const & NId) -> int

    Parameters:
        Graph: TPt< TUNGraph > const &
        NId: int const &

    GetNodeTriads_PUNGraph(PUNGraph Graph, int const & NId, TIntSet GroupSet, int & OutGroupEdgesX) -> int

    Parameters:
        Graph: TPt< TUNGraph > const &
        NId: int const &
        GroupSet: TIntSet const &
        OutGroupEdgesX: int &

    """
  return _snap.GetNodeTriads_PUNGraph(*args)

def GetTriadParticip_PUNGraph(*args):
  """
    GetTriadParticip_PUNGraph(PUNGraph Graph, TIntPrV TriadCntV)

    Parameters:
        Graph: TPt< TUNGraph > const &
        TriadCntV: TIntPrV &

    """
  return _snap.GetTriadParticip_PUNGraph(*args)

def GetCmnNbrs_PUNGraph(*args):
  """
    GetCmnNbrs_PUNGraph(PUNGraph Graph, int const & NId1, int const & NId2) -> int

    Parameters:
        Graph: TPt< TUNGraph > const &
        NId1: int const &
        NId2: int const &

    GetCmnNbrs_PUNGraph(PUNGraph Graph, int const & NId1, int const & NId2, TIntV NbrV) -> int

    Parameters:
        Graph: TPt< TUNGraph > const &
        NId1: int const &
        NId2: int const &
        NbrV: TIntV &

    """
  return _snap.GetCmnNbrs_PUNGraph(*args)

def GetModularity_PUNGraph(*args):
  """
    GetModularity_PUNGraph(PUNGraph G, TIntV NIdV, int GEdges=-1) -> double

    Parameters:
        G: TPt< TUNGraph > const &
        NIdV: TIntV const &
        GEdges: int

    GetModularity_PUNGraph(PUNGraph G, TIntV NIdV) -> double

    Parameters:
        G: TPt< TUNGraph > const &
        NIdV: TIntV const &

    GetModularity_PUNGraph(PUNGraph G, TCnComV CmtyV, int GEdges=-1) -> double

    Parameters:
        G: TPt< TUNGraph > const &
        CmtyV: TCnComV const &
        GEdges: int

    GetModularity_PUNGraph(PUNGraph G, TCnComV CmtyV) -> double

    Parameters:
        G: TPt< TUNGraph > const &
        CmtyV: TCnComV const &

    """
  return _snap.GetModularity_PUNGraph(*args)

def GetEdgesInOut_PUNGraph(*args):
  """
    GetEdgesInOut_PUNGraph(PUNGraph Graph, TIntV NIdV)

    Parameters:
        Graph: TPt< TUNGraph > const &
        NIdV: TIntV const &

    """
  return _snap.GetEdgesInOut_PUNGraph(*args)

def GetAnf_PUNGraph(*args):
  """
    GetAnf_PUNGraph(PUNGraph Graph, int const & SrcNId, TIntFltKdV DistNbrsV, int const & MxDist, bool const & IsDir, 
        int const & NApprox=32)

    Parameters:
        Graph: TPt< TUNGraph > const &
        SrcNId: int const &
        DistNbrsV: TIntFltKdV &
        MxDist: int const &
        IsDir: bool const &
        NApprox: int const &

    GetAnf_PUNGraph(PUNGraph Graph, int const & SrcNId, TIntFltKdV DistNbrsV, int const & MxDist, bool const & IsDir)

    Parameters:
        Graph: TPt< TUNGraph > const &
        SrcNId: int const &
        DistNbrsV: TIntFltKdV &
        MxDist: int const &
        IsDir: bool const &

    GetAnf_PUNGraph(PUNGraph Graph, TIntFltKdV DistNbrsV, int const & MxDist, bool const & IsDir, int const & NApprox=32)

    Parameters:
        Graph: TPt< TUNGraph > const &
        DistNbrsV: TIntFltKdV &
        MxDist: int const &
        IsDir: bool const &
        NApprox: int const &

    GetAnf_PUNGraph(PUNGraph Graph, TIntFltKdV DistNbrsV, int const & MxDist, bool const & IsDir)

    Parameters:
        Graph: TPt< TUNGraph > const &
        DistNbrsV: TIntFltKdV &
        MxDist: int const &
        IsDir: bool const &

    """
  return _snap.GetAnf_PUNGraph(*args)

def GetAnfEffDiam_PUNGraph(*args):
  """
    GetAnfEffDiam_PUNGraph(PUNGraph Graph, bool const & IsDir, double const & Percentile, int const & NApprox) -> double

    Parameters:
        Graph: TPt< TUNGraph > const &
        IsDir: bool const &
        Percentile: double const &
        NApprox: int const &

    GetAnfEffDiam_PUNGraph(PUNGraph Graph, int const NRuns=1, int NApprox=-1) -> double

    Parameters:
        Graph: TPt< TUNGraph > const &
        NRuns: int const
        NApprox: int

    GetAnfEffDiam_PUNGraph(PUNGraph Graph, int const NRuns=1) -> double

    Parameters:
        Graph: TPt< TUNGraph > const &
        NRuns: int const

    GetAnfEffDiam_PUNGraph(PUNGraph Graph) -> double

    Parameters:
        Graph: TPt< TUNGraph > const &

    """
  return _snap.GetAnfEffDiam_PUNGraph(*args)

def TestAnf_PUNGraph():
  """TestAnf_PUNGraph()"""
  return _snap.TestAnf_PUNGraph()

def PlotKCoreEdges_PUNGraph(*args):
  """
    PlotKCoreEdges_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr=TStr())

    Parameters:
        Graph: TPt< TUNGraph > const &
        FNmPref: TStr const &
        DescStr: TStr

    PlotKCoreEdges_PUNGraph(PUNGraph Graph, TStr FNmPref)

    Parameters:
        Graph: TPt< TUNGraph > const &
        FNmPref: TStr const &

    """
  return _snap.PlotKCoreEdges_PUNGraph(*args)

def PlotKCoreNodes_PUNGraph(*args):
  """
    PlotKCoreNodes_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr=TStr())

    Parameters:
        Graph: TPt< TUNGraph > const &
        FNmPref: TStr const &
        DescStr: TStr

    PlotKCoreNodes_PUNGraph(PUNGraph Graph, TStr FNmPref)

    Parameters:
        Graph: TPt< TUNGraph > const &
        FNmPref: TStr const &

    """
  return _snap.PlotKCoreNodes_PUNGraph(*args)

def PlotShortPathDistr_PUNGraph(*args):
  """
    PlotShortPathDistr_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr=TStr(), int TestNodes=Mx)

    Parameters:
        Graph: TPt< TUNGraph > const &
        FNmPref: TStr const &
        DescStr: TStr
        TestNodes: int

    PlotShortPathDistr_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr=TStr())

    Parameters:
        Graph: TPt< TUNGraph > const &
        FNmPref: TStr const &
        DescStr: TStr

    PlotShortPathDistr_PUNGraph(PUNGraph Graph, TStr FNmPref)

    Parameters:
        Graph: TPt< TUNGraph > const &
        FNmPref: TStr const &

    """
  return _snap.PlotShortPathDistr_PUNGraph(*args)

def PlotHops_PUNGraph(*args):
  """
    PlotHops_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr=TStr(), bool const & IsDir=False, int const & NApprox=32)

    Parameters:
        Graph: TPt< TUNGraph > const &
        FNmPref: TStr const &
        DescStr: TStr
        IsDir: bool const &
        NApprox: int const &

    PlotHops_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr=TStr(), bool const & IsDir=False)

    Parameters:
        Graph: TPt< TUNGraph > const &
        FNmPref: TStr const &
        DescStr: TStr
        IsDir: bool const &

    PlotHops_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr=TStr())

    Parameters:
        Graph: TPt< TUNGraph > const &
        FNmPref: TStr const &
        DescStr: TStr

    PlotHops_PUNGraph(PUNGraph Graph, TStr FNmPref)

    Parameters:
        Graph: TPt< TUNGraph > const &
        FNmPref: TStr const &

    """
  return _snap.PlotHops_PUNGraph(*args)

def PlotClustCf_PUNGraph(*args):
  """
    PlotClustCf_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr=TStr())

    Parameters:
        Graph: TPt< TUNGraph > const &
        FNmPref: TStr const &
        DescStr: TStr

    PlotClustCf_PUNGraph(PUNGraph Graph, TStr FNmPref)

    Parameters:
        Graph: TPt< TUNGraph > const &
        FNmPref: TStr const &

    """
  return _snap.PlotClustCf_PUNGraph(*args)

def PlotSccDistr_PUNGraph(*args):
  """
    PlotSccDistr_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr=TStr())

    Parameters:
        Graph: TPt< TUNGraph > const &
        FNmPref: TStr const &
        DescStr: TStr

    PlotSccDistr_PUNGraph(PUNGraph Graph, TStr FNmPref)

    Parameters:
        Graph: TPt< TUNGraph > const &
        FNmPref: TStr const &

    """
  return _snap.PlotSccDistr_PUNGraph(*args)

def PlotWccDistr_PUNGraph(*args):
  """
    PlotWccDistr_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr=TStr())

    Parameters:
        Graph: TPt< TUNGraph > const &
        FNmPref: TStr const &
        DescStr: TStr

    PlotWccDistr_PUNGraph(PUNGraph Graph, TStr FNmPref)

    Parameters:
        Graph: TPt< TUNGraph > const &
        FNmPref: TStr const &

    """
  return _snap.PlotWccDistr_PUNGraph(*args)

def PlotOutDegDistr_PUNGraph(*args):
  """
    PlotOutDegDistr_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr=TStr(), bool const & PlotCCdf=False, bool const & PowerFit=False)

    Parameters:
        Graph: TPt< TUNGraph > const &
        FNmPref: TStr const &
        DescStr: TStr
        PlotCCdf: bool const &
        PowerFit: bool const &

    PlotOutDegDistr_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr=TStr(), bool const & PlotCCdf=False)

    Parameters:
        Graph: TPt< TUNGraph > const &
        FNmPref: TStr const &
        DescStr: TStr
        PlotCCdf: bool const &

    PlotOutDegDistr_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr=TStr())

    Parameters:
        Graph: TPt< TUNGraph > const &
        FNmPref: TStr const &
        DescStr: TStr

    PlotOutDegDistr_PUNGraph(PUNGraph Graph, TStr FNmPref)

    Parameters:
        Graph: TPt< TUNGraph > const &
        FNmPref: TStr const &

    """
  return _snap.PlotOutDegDistr_PUNGraph(*args)

def PlotInDegDistr_PUNGraph(*args):
  """
    PlotInDegDistr_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr=TStr(), bool const & PlotCCdf=False, bool const & PowerFit=False)

    Parameters:
        Graph: TPt< TUNGraph > const &
        FNmPref: TStr const &
        DescStr: TStr
        PlotCCdf: bool const &
        PowerFit: bool const &

    PlotInDegDistr_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr=TStr(), bool const & PlotCCdf=False)

    Parameters:
        Graph: TPt< TUNGraph > const &
        FNmPref: TStr const &
        DescStr: TStr
        PlotCCdf: bool const &

    PlotInDegDistr_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr=TStr())

    Parameters:
        Graph: TPt< TUNGraph > const &
        FNmPref: TStr const &
        DescStr: TStr

    PlotInDegDistr_PUNGraph(PUNGraph Graph, TStr FNmPref)

    Parameters:
        Graph: TPt< TUNGraph > const &
        FNmPref: TStr const &

    """
  return _snap.PlotInDegDistr_PUNGraph(*args)

def PercentDegree_PUNGraph(*args):
  """
    PercentDegree_PUNGraph(PUNGraph Graph, int const Threshold=0) -> double

    Parameters:
        Graph: TPt< TUNGraph > const &
        Threshold: int const

    PercentDegree_PUNGraph(PUNGraph Graph) -> double

    Parameters:
        Graph: TPt< TUNGraph > const &

    """
  return _snap.PercentDegree_PUNGraph(*args)

def NodesGTEDegree_PUNGraph(*args):
  """
    NodesGTEDegree_PUNGraph(PUNGraph Graph, int const Threshold=0) -> int

    Parameters:
        Graph: TPt< TUNGraph > const &
        Threshold: int const

    NodesGTEDegree_PUNGraph(PUNGraph Graph) -> int

    Parameters:
        Graph: TPt< TUNGraph > const &

    """
  return _snap.NodesGTEDegree_PUNGraph(*args)

def MxDegree_PUNGraph(*args):
  """
    MxDegree_PUNGraph(PUNGraph Graph) -> int

    Parameters:
        Graph: TPt< TUNGraph > const &

    """
  return _snap.MxDegree_PUNGraph(*args)

def PercentMxWcc_PUNGraph(*args):
  """
    PercentMxWcc_PUNGraph(PUNGraph Graph) -> double

    Parameters:
        Graph: TPt< TUNGraph > const &

    """
  return _snap.PercentMxWcc_PUNGraph(*args)

def PercentMxScc_PUNGraph(*args):
  """
    PercentMxScc_PUNGraph(PUNGraph Graph) -> double

    Parameters:
        Graph: TPt< TUNGraph > const &

    """
  return _snap.PercentMxScc_PUNGraph(*args)
#
# dispatch table for instantiated polymorphic SNAP templates
#

def LoadPajek(tspec, *args):
    if tspec == PUNGraph: return LoadPajek_PUNGraph(*args)
    if tspec == PNGraph : return LoadPajek_PNGraph(*args)
    if tspec == PNEANet : return LoadPajek_PNEANet(*args)
    return None
def SaveGViz(tspec, *args):
    if type(tspec) == PUNGraph: return SaveGViz_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return SaveGViz_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return SaveGViz_PNEANet(tspec, *args)
    return None
def TestAnf(tspec, *args):
    if type(tspec) == PUNGraph: return TestAnf_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return TestAnf_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return TestAnf_PNEANet(tspec, *args)
    return None
def GetNodeWcc(tspec, *args):
    if type(tspec) == PUNGraph: return GetNodeWcc_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetNodeWcc_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetNodeWcc_PNEANet(tspec, *args)
    return None
def DelNodes(tspec, *args):
    if type(tspec) == PUNGraph: return DelNodes_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return DelNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return DelNodes_PNEANet(tspec, *args)
    return None
def CntEdgesToSet(tspec, *args):
    if type(tspec) == PUNGraph: return CntEdgesToSet_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return CntEdgesToSet_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntEdgesToSet_PNEANet(tspec, *args)
    return None
def GetModularity(tspec, *args):
    if type(tspec) == PUNGraph: return GetModularity_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetModularity_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetModularity_PNEANet(tspec, *args)
    return None
def GetBfsEffDiam(tspec, *args):
    if type(tspec) == PUNGraph: return GetBfsEffDiam_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetBfsEffDiam_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetBfsEffDiam_PNEANet(tspec, *args)
    return None
def PercentMxWcc(tspec, *args):
    if type(tspec) == PUNGraph: return PercentMxWcc_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return PercentMxWcc_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PercentMxWcc_PNEANet(tspec, *args)
    return None
def GetSubGraph(tspec, *args):
    if type(tspec) == PUNGraph: return GetSubGraph_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetSubGraph_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetSubGraph_PNEANet(tspec, *args)
    return None
def GetBfsTree(tspec, *args):
    if type(tspec) == PUNGraph: return GetBfsTree_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetBfsTree_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetBfsTree_PNEANet(tspec, *args)
    return None
def PrintGraphStatTable(tspec, *args):
    if type(tspec) == PUNGraph: return PrintGraphStatTable_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return PrintGraphStatTable_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PrintGraphStatTable_PNEANet(tspec, *args)
    return None
def GetDegSeqV(tspec, *args):
    if type(tspec) == PUNGraph: return GetDegSeqV_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetDegSeqV_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetDegSeqV_PNEANet(tspec, *args)
    return None
def GenGrid(tspec, *args):
    if tspec == PUNGraph: return GenGrid_PUNGraph(*args)
    if tspec == PNGraph : return GenGrid_PNGraph(*args)
    if tspec == PNEANet : return GenGrid_PNEANet(*args)
    return None
def LoadEdgeList(tspec, *args):
    if tspec == PUNGraph: return LoadEdgeList_PUNGraph(*args)
    if tspec == PNGraph : return LoadEdgeList_PNGraph(*args)
    if tspec == PNEANet : return LoadEdgeList_PNEANet(*args)
    return None
def GetUnDir(tspec, *args):
    if type(tspec) == PUNGraph: return GetUnDir_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetUnDir_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetUnDir_PNEANet(tspec, *args)
    return None
def DrawGViz(tspec, *args):
    if type(tspec) == PUNGraph: return DrawGViz_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return DrawGViz_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return DrawGViz_PNEANet(tspec, *args)
    return None
def PlotKCoreNodes(tspec, *args):
    if type(tspec) == PUNGraph: return PlotKCoreNodes_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return PlotKCoreNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotKCoreNodes_PNEANet(tspec, *args)
    return None
def PlotOutDegDistr(tspec, *args):
    if type(tspec) == PUNGraph: return PlotOutDegDistr_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return PlotOutDegDistr_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotOutDegDistr_PNEANet(tspec, *args)
    return None
def CntUniqBiDirEdges(tspec, *args):
    if type(tspec) == PUNGraph: return CntUniqBiDirEdges_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return CntUniqBiDirEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntUniqBiDirEdges_PNEANet(tspec, *args)
    return None
def GetKCoreEdges(tspec, *args):
    if type(tspec) == PUNGraph: return GetKCoreEdges_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetKCoreEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetKCoreEdges_PNEANet(tspec, *args)
    return None
def GetMxDegNId(tspec, *args):
    if type(tspec) == PUNGraph: return GetMxDegNId_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetMxDegNId_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetMxDegNId_PNEANet(tspec, *args)
    return None
def GetBfsFullDiam(tspec, *args):
    if type(tspec) == PUNGraph: return GetBfsFullDiam_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetBfsFullDiam_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetBfsFullDiam_PNEANet(tspec, *args)
    return None
def LoadConnList(tspec, *args):
    if tspec == PUNGraph: return LoadConnList_PUNGraph(*args)
    if tspec == PNGraph : return LoadConnList_PNGraph(*args)
    if tspec == PNEANet : return LoadConnList_PNEANet(*args)
    return None
def GetPageRank(tspec, *args):
    if type(tspec) == PUNGraph: return GetPageRank_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetPageRank_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetPageRank_PNEANet(tspec, *args)
    return None
def CntInDegNodes(tspec, *args):
    if type(tspec) == PUNGraph: return CntInDegNodes_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return CntInDegNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntInDegNodes_PNEANet(tspec, *args)
    return None
def GetMxScc(tspec, *args):
    if type(tspec) == PUNGraph: return GetMxScc_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetMxScc_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetMxScc_PNEANet(tspec, *args)
    return None
def AddSelfEdges(tspec, *args):
    if type(tspec) == PUNGraph: return AddSelfEdges_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return AddSelfEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return AddSelfEdges_PNEANet(tspec, *args)
    return None
def DelDegKNodes(tspec, *args):
    if type(tspec) == PUNGraph: return DelDegKNodes_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return DelDegKNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return DelDegKNodes_PNEANet(tspec, *args)
    return None
def PlotSccDistr(tspec, *args):
    if type(tspec) == PUNGraph: return PlotSccDistr_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return PlotSccDistr_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotSccDistr_PNEANet(tspec, *args)
    return None
def IsWeaklyConn(tspec, *args):
    if type(tspec) == PUNGraph: return IsWeaklyConn_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return IsWeaklyConn_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return IsWeaklyConn_PNEANet(tspec, *args)
    return None
def GetMxInDegNId(tspec, *args):
    if type(tspec) == PUNGraph: return GetMxInDegNId_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetMxInDegNId_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetMxInDegNId_PNEANet(tspec, *args)
    return None
def GetSccSzCnt(tspec, *args):
    if type(tspec) == PUNGraph: return GetSccSzCnt_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetSccSzCnt_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetSccSzCnt_PNEANet(tspec, *args)
    return None
def MxWccSz(tspec, *args):
    if type(tspec) == PUNGraph: return MxWccSz_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return MxWccSz_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return MxWccSz_PNEANet(tspec, *args)
    return None
def GetCmnNbrs(tspec, *args):
    if type(tspec) == PUNGraph: return GetCmnNbrs_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetCmnNbrs_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetCmnNbrs_PNEANet(tspec, *args)
    return None
def GetTriadEdges(tspec, *args):
    if type(tspec) == PUNGraph: return GetTriadEdges_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetTriadEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetTriadEdges_PNEANet(tspec, *args)
    return None
def LoadConnListStr(tspec, *args):
    if tspec == PUNGraph: return LoadConnListStr_PUNGraph(*args)
    if tspec == PNGraph : return LoadConnListStr_PNGraph(*args)
    if tspec == PNEANet : return LoadConnListStr_PNEANet(*args)
    return None
def GetMxWccSz(tspec, *args):
    if type(tspec) == PUNGraph: return GetMxWccSz_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetMxWccSz_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetMxWccSz_PNEANet(tspec, *args)
    return None
def GetMxOutDegNId(tspec, *args):
    if type(tspec) == PUNGraph: return GetMxOutDegNId_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetMxOutDegNId_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetMxOutDegNId_PNEANet(tspec, *args)
    return None
def GetLen2Paths(tspec, *args):
    if type(tspec) == PUNGraph: return GetLen2Paths_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetLen2Paths_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetLen2Paths_PNEANet(tspec, *args)
    return None
def PrintInfo(tspec, *args):
    if type(tspec) == PUNGraph: return PrintInfo_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return PrintInfo_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PrintInfo_PNEANet(tspec, *args)
    return None
def GetWccs(tspec, *args):
    if type(tspec) == PUNGraph: return GetWccs_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetWccs_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetWccs_PNEANet(tspec, *args)
    return None
def GetMxWcc(tspec, *args):
    if type(tspec) == PUNGraph: return GetMxWcc_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetMxWcc_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetMxWcc_PNEANet(tspec, *args)
    return None
def GetMxSccSz(tspec, *args):
    if type(tspec) == PUNGraph: return GetMxSccSz_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetMxSccSz_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetMxSccSz_PNEANet(tspec, *args)
    return None
def CntSelfEdges(tspec, *args):
    if type(tspec) == PUNGraph: return CntSelfEdges_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return CntSelfEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntSelfEdges_PNEANet(tspec, *args)
    return None
def NodesGTEDegree(tspec, *args):
    if type(tspec) == PUNGraph: return NodesGTEDegree_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return NodesGTEDegree_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return NodesGTEDegree_PNEANet(tspec, *args)
    return None
def PlotShortPathDistr(tspec, *args):
    if type(tspec) == PUNGraph: return PlotShortPathDistr_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return PlotShortPathDistr_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotShortPathDistr_PNEANet(tspec, *args)
    return None
def GetNodesAtHop(tspec, *args):
    if type(tspec) == PUNGraph: return GetNodesAtHop_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetNodesAtHop_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetNodesAtHop_PNEANet(tspec, *args)
    return None
def PlotInDegDistr(tspec, *args):
    if type(tspec) == PUNGraph: return PlotInDegDistr_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return PlotInDegDistr_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotInDegDistr_PNEANet(tspec, *args)
    return None
def GetHits(tspec, *args):
    if type(tspec) == PUNGraph: return GetHits_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetHits_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetHits_PNEANet(tspec, *args)
    return None
def GetMxBiCon(tspec, *args):
    if type(tspec) == PUNGraph: return GetMxBiCon_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetMxBiCon_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetMxBiCon_PNEANet(tspec, *args)
    return None
def DelZeroDegNodes(tspec, *args):
    if type(tspec) == PUNGraph: return DelZeroDegNodes_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return DelZeroDegNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return DelZeroDegNodes_PNEANet(tspec, *args)
    return None
def GetRndESubGraph(tspec, *args):
    if type(tspec) == PUNGraph: return GetRndESubGraph_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetRndESubGraph_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetRndESubGraph_PNEANet(tspec, *args)
    return None
def GetSccs(tspec, *args):
    if type(tspec) == PUNGraph: return GetSccs_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetSccs_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetSccs_PNEANet(tspec, *args)
    return None
def PercentDegree(tspec, *args):
    if type(tspec) == PUNGraph: return PercentDegree_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return PercentDegree_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PercentDegree_PNEANet(tspec, *args)
    return None
def GetSubTreeSz(tspec, *args):
    if type(tspec) == PUNGraph: return GetSubTreeSz_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetSubTreeSz_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetSubTreeSz_PNEANet(tspec, *args)
    return None
def GenFull(tspec, *args):
    if tspec == PUNGraph: return GenFull_PUNGraph(*args)
    if tspec == PNGraph : return GenFull_PNGraph(*args)
    if tspec == PNEANet : return GenFull_PNEANet(*args)
    return None
def IsConnected(tspec, *args):
    if type(tspec) == PUNGraph: return IsConnected_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return IsConnected_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return IsConnected_PNEANet(tspec, *args)
    return None
def GetNodeClustCf(tspec, *args):
    if type(tspec) == PUNGraph: return GetNodeClustCf_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetNodeClustCf_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetNodeClustCf_PNEANet(tspec, *args)
    return None
def MxDegree(tspec, *args):
    if type(tspec) == PUNGraph: return MxDegree_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return MxDegree_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return MxDegree_PNEANet(tspec, *args)
    return None
def SavePajek(tspec, *args):
    if type(tspec) == PUNGraph: return SavePajek_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return SavePajek_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return SavePajek_PNEANet(tspec, *args)
    return None
def GetTreeRootNId(tspec, *args):
    if type(tspec) == PUNGraph: return GetTreeRootNId_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetTreeRootNId_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetTreeRootNId_PNEANet(tspec, *args)
    return None
def PlotHops(tspec, *args):
    if type(tspec) == PUNGraph: return PlotHops_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return PlotHops_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotHops_PNEANet(tspec, *args)
    return None
def DelSelfEdges(tspec, *args):
    if type(tspec) == PUNGraph: return DelSelfEdges_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return DelSelfEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return DelSelfEdges_PNEANet(tspec, *args)
    return None
def GetClustCf(tspec, *args):
    if type(tspec) == PUNGraph: return GetClustCf_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetClustCf_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetClustCf_PNEANet(tspec, *args)
    return None
def GetNodesAtHops(tspec, *args):
    if type(tspec) == PUNGraph: return GetNodesAtHops_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetNodesAtHops_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetNodesAtHops_PNEANet(tspec, *args)
    return None
def GetNodeOutDegV(tspec, *args):
    if type(tspec) == PUNGraph: return GetNodeOutDegV_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetNodeOutDegV_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetNodeOutDegV_PNEANet(tspec, *args)
    return None
def GetAnf(tspec, *args):
    if type(tspec) == PUNGraph: return GetAnf_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetAnf_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetAnf_PNEANet(tspec, *args)
    return None
def PlotClustCf(tspec, *args):
    if type(tspec) == PUNGraph: return PlotClustCf_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return PlotClustCf_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotClustCf_PNEANet(tspec, *args)
    return None
def GenCircle(tspec, *args):
    if tspec == PUNGraph: return GenCircle_PUNGraph(*args)
    if tspec == PNGraph : return GenCircle_PNGraph(*args)
    if tspec == PNEANet : return GenCircle_PNEANet(*args)
    return None
def MakeUnDir(tspec, *args):
    if type(tspec) == PUNGraph: return MakeUnDir_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return MakeUnDir_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return MakeUnDir_PNEANet(tspec, *args)
    return None
def GetESubGraph(tspec, *args):
    if type(tspec) == PUNGraph: return GetESubGraph_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetESubGraph_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetESubGraph_PNEANet(tspec, *args)
    return None
def GetTriadParticip(tspec, *args):
    if type(tspec) == PUNGraph: return GetTriadParticip_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetTriadParticip_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetTriadParticip_PNEANet(tspec, *args)
    return None
def PercentMxScc(tspec, *args):
    if type(tspec) == PUNGraph: return PercentMxScc_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return PercentMxScc_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PercentMxScc_PNEANet(tspec, *args)
    return None
def GetWccSzCnt(tspec, *args):
    if type(tspec) == PUNGraph: return GetWccSzCnt_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetWccSzCnt_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetWccSzCnt_PNEANet(tspec, *args)
    return None
def CntDegNodes(tspec, *args):
    if type(tspec) == PUNGraph: return CntDegNodes_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return CntDegNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntDegNodes_PNEANet(tspec, *args)
    return None
def IsTree(tspec, *args):
    if type(tspec) == PUNGraph: return IsTree_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return IsTree_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return IsTree_PNEANet(tspec, *args)
    return None
def GenRndGnm(tspec, *args):
    if tspec == PUNGraph: return GenRndGnm_PUNGraph(*args)
    if tspec == PNGraph : return GenRndGnm_PNGraph(*args)
    if tspec == PNEANet : return GenRndGnm_PNEANet(*args)
    return None
def GetDegCnt(tspec, *args):
    if type(tspec) == PUNGraph: return GetDegCnt_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetDegCnt_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetDegCnt_PNEANet(tspec, *args)
    return None
def SaveMatlabSparseMtx(tspec, *args):
    if type(tspec) == PUNGraph: return SaveMatlabSparseMtx_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return SaveMatlabSparseMtx_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return SaveMatlabSparseMtx_PNEANet(tspec, *args)
    return None
def MxSccSz(tspec, *args):
    if type(tspec) == PUNGraph: return MxSccSz_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return MxSccSz_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return MxSccSz_PNEANet(tspec, *args)
    return None
def GetAnfEffDiam(tspec, *args):
    if type(tspec) == PUNGraph: return GetAnfEffDiam_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetAnfEffDiam_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetAnfEffDiam_PNEANet(tspec, *args)
    return None
def GetTreeSig(tspec, *args):
    if type(tspec) == PUNGraph: return GetTreeSig_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetTreeSig_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetTreeSig_PNEANet(tspec, *args)
    return None
def CntOutDegNodes(tspec, *args):
    if type(tspec) == PUNGraph: return CntOutDegNodes_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return CntOutDegNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntOutDegNodes_PNEANet(tspec, *args)
    return None
def GetOutDegCnt(tspec, *args):
    if type(tspec) == PUNGraph: return GetOutDegCnt_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetOutDegCnt_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetOutDegCnt_PNEANet(tspec, *args)
    return None
def GenBaraHierar(tspec, *args):
    if tspec == PUNGraph: return GenBaraHierar_PUNGraph(*args)
    if tspec == PNGraph : return GenBaraHierar_PNGraph(*args)
    if tspec == PNEANet : return GenBaraHierar_PNEANet(*args)
    return None
def GenTree(tspec, *args):
    if tspec == PUNGraph: return GenTree_PUNGraph(*args)
    if tspec == PNGraph : return GenTree_PNGraph(*args)
    if tspec == PNEANet : return GenTree_PNEANet(*args)
    return None
def GetShortPath(tspec, *args):
    if type(tspec) == PUNGraph: return GetShortPath_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetShortPath_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetShortPath_PNEANet(tspec, *args)
    return None
def GetKCoreNodes(tspec, *args):
    if type(tspec) == PUNGraph: return GetKCoreNodes_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetKCoreNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetKCoreNodes_PNEANet(tspec, *args)
    return None
def GetInDegCnt(tspec, *args):
    if type(tspec) == PUNGraph: return GetInDegCnt_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetInDegCnt_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetInDegCnt_PNEANet(tspec, *args)
    return None
def CntUniqDirEdges(tspec, *args):
    if type(tspec) == PUNGraph: return CntUniqDirEdges_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return CntUniqDirEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntUniqDirEdges_PNEANet(tspec, *args)
    return None
def GetNodeInDegV(tspec, *args):
    if type(tspec) == PUNGraph: return GetNodeInDegV_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetNodeInDegV_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetNodeInDegV_PNEANet(tspec, *args)
    return None
def GetRndSubGraph(tspec, *args):
    if type(tspec) == PUNGraph: return GetRndSubGraph_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetRndSubGraph_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetRndSubGraph_PNEANet(tspec, *args)
    return None
def PlotWccDistr(tspec, *args):
    if type(tspec) == PUNGraph: return PlotWccDistr_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return PlotWccDistr_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotWccDistr_PNEANet(tspec, *args)
    return None
def GetEdgesInOut(tspec, *args):
    if type(tspec) == PUNGraph: return GetEdgesInOut_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetEdgesInOut_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetEdgesInOut_PNEANet(tspec, *args)
    return None
def GetKCore(tspec, *args):
    if type(tspec) == PUNGraph: return GetKCore_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetKCore_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetKCore_PNEANet(tspec, *args)
    return None
def CntNonZNodes(tspec, *args):
    if type(tspec) == PUNGraph: return CntNonZNodes_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return CntNonZNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntNonZNodes_PNEANet(tspec, *args)
    return None
def GenStar(tspec, *args):
    if tspec == PUNGraph: return GenStar_PUNGraph(*args)
    if tspec == PNGraph : return GenStar_PNGraph(*args)
    if tspec == PNEANet : return GenStar_PNEANet(*args)
    return None
def PlotKCoreEdges(tspec, *args):
    if type(tspec) == PUNGraph: return PlotKCoreEdges_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return PlotKCoreEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotKCoreEdges_PNEANet(tspec, *args)
    return None
def SaveEdgeList(tspec, *args):
    if type(tspec) == PUNGraph: return SaveEdgeList_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return SaveEdgeList_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return SaveEdgeList_PNEANet(tspec, *args)
    return None
def GetNodeTriads(tspec, *args):
    if type(tspec) == PUNGraph: return GetNodeTriads_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetNodeTriads_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetNodeTriads_PNEANet(tspec, *args)
    return None
def GetNodeEcc(tspec, *args):
    if type(tspec) == PUNGraph: return GetNodeEcc_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetNodeEcc_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetNodeEcc_PNEANet(tspec, *args)
    return None
def LoadEdgeListStr(tspec, *args):
    if tspec == PUNGraph: return LoadEdgeListStr_PUNGraph(*args)
    if tspec == PNGraph : return LoadEdgeListStr_PNGraph(*args)
    if tspec == PNEANet : return LoadEdgeListStr_PNEANet(*args)
    return None
def CntUniqUndirEdges(tspec, *args):
    if type(tspec) == PUNGraph: return CntUniqUndirEdges_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return CntUniqUndirEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntUniqUndirEdges_PNEANet(tspec, *args)
    return None
def GetTriads(tspec, *args):
    if type(tspec) == PUNGraph: return GetTriads_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetTriads_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetTriads_PNEANet(tspec, *args)
    return None

def ConvertGraph(toutspec, tinspec, *args):
    if toutspec == PUNGraph:
        if type(tinspec) == PUNGraph:
            return ConvertGraph_PUNGraph_PUNGraph(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertGraph_PUNGraph_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertGraph_PUNGraph_PNEANet(tinspec, *args)
    if toutspec == PNGraph:
        if type(tinspec) == PUNGraph:
            return ConvertGraph_PNGraph_PUNGraph(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertGraph_PNGraph_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertGraph_PNGraph_PNEANet(tinspec, *args)
    if toutspec == PNEANet:
        if type(tinspec) == PUNGraph:
            return ConvertGraph_PNEANet_PUNGraph(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertGraph_PNEANet_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertGraph_PNEANet_PNEANet(tinspec, *args)
    return None
def ConvertSubGraph(toutspec, tinspec, *args):
    if toutspec == PUNGraph:
        if type(tinspec) == PUNGraph:
            return ConvertSubGraph_PUNGraph_PUNGraph(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertSubGraph_PUNGraph_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertSubGraph_PUNGraph_PNEANet(tinspec, *args)
    if toutspec == PNGraph:
        if type(tinspec) == PUNGraph:
            return ConvertSubGraph_PNGraph_PUNGraph(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertSubGraph_PNGraph_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertSubGraph_PNGraph_PNEANet(tinspec, *args)
    if toutspec == PNEANet:
        if type(tinspec) == PUNGraph:
            return ConvertSubGraph_PNEANet_PUNGraph(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertSubGraph_PNEANet_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertSubGraph_PNEANet_PNEANet(tinspec, *args)
    return None
def ConvertESubGraph(toutspec, tinspec, *args):
    if toutspec == PUNGraph:
        if type(tinspec) == PUNGraph:
            return ConvertESubGraph_PUNGraph_PUNGraph(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertESubGraph_PUNGraph_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertESubGraph_PUNGraph_PNEANet(tinspec, *args)
    if toutspec == PNGraph:
        if type(tinspec) == PUNGraph:
            return ConvertESubGraph_PNGraph_PUNGraph(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertESubGraph_PNGraph_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertESubGraph_PNGraph_PNEANet(tinspec, *args)
    if toutspec == PNEANet:
        if type(tinspec) == PUNGraph:
            return ConvertESubGraph_PNEANet_PUNGraph(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertESubGraph_PNEANet_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertESubGraph_PNEANet_PNEANet(tinspec, *args)
    return None

#
# generators for nodes and edges
#

# iterate through all the nodes
def Nodes(self):
    NI = self.BegNI()
    while NI < self.EndNI():
        yield NI
        NI.Next()

# iterate through all the edges
def Edges(self):
    EI = self.BegEI()
    while EI < self.EndEI():
        yield EI
        EI.Next()

# iterate through out edges of a node
def GetOutEdges(self):
    for e in range(0, self.GetOutDeg()):
        yield self.GetOutNId(e)

# iterate through in edges of a node
def GetInEdges(self):
    for e in range(0, self.GetInDeg()):
        yield self.GetInNId(e)

#
# redefine some methods to use T... class not P... class
#

def Clr(self):
    self().Clr()

def Empty(self):
    return self().Empty()

def Save(self,*args):
    self().Save(*args)

#
# define generator and redirection methods
#

PNEANet.Nodes = Nodes
PNEANet.Edges = Edges
PNEANet.Clr = Clr
PNEANet.Empty = Empty
PNEANet.Save = Save

PUNGraph.Nodes = Nodes
PUNGraph.Edges = Edges
PUNGraph.Clr = Clr
PUNGraph.Empty = Empty
PUNGraph.Save = Save

PNGraph.Nodes = Nodes
PNGraph.Edges = Edges
PNGraph.Clr = Clr
PNGraph.Empty = Empty
PNGraph.Save = Save

TNGraphNodeI.GetOutEdges = GetOutEdges
TNGraphNodeI.GetInEdges = GetInEdges

TUNGraphNodeI.GetOutEdges = GetOutEdges
TUNGraphNodeI.GetInEdges = GetInEdges

TNEANetNodeI.GetOutEdges = GetOutEdges
TNEANetNodeI.GetInEdges = GetInEdges




